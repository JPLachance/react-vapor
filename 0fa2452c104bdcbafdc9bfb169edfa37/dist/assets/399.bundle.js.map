{"version":3,"sources":["webpack:///./src/components/flatSelect/tests/FlatSelectConnected.spec.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/399.bundle.js","sourcesContent":["export default \"import {mount, ReactWrapper} from 'enzyme';\\r\\nimport * as React from 'react';\\r\\nimport {Provider} from 'react-redux';\\r\\nimport {Store} from 'redux';\\r\\n\\r\\nimport {IReactVaporState} from '../../../ReactVapor';\\r\\nimport {clearState} from '../../../utils/ReduxUtils';\\r\\nimport {TestUtils} from '../../../utils/tests/TestUtils';\\r\\nimport {UUID} from '../../../utils/UUID';\\r\\nimport {FlatSelect, IFlatSelectProps} from '../FlatSelect';\\r\\nimport {selectFlatSelect} from '../FlatSelectActions';\\r\\nimport {FlatSelectConnected} from '../FlatSelectConnected';\\r\\nimport {IFlatSelectOptionProps} from '../FlatSelectOption';\\r\\n\\r\\ndescribe('FlatSelect', () => {\\r\\n    describe('<FlatSelectConnected />', () => {\\r\\n        let wrapper: ReactWrapper<any, any>;\\r\\n        let flatSelect: ReactWrapper<IFlatSelectProps, void>;\\r\\n        let store: Store<IReactVaporState>;\\r\\n\\r\\n        const id: string = 'flatSelect';\\r\\n        const anOptionId: string = 'flatOption';\\r\\n        const defaultOptions: IFlatSelectOptionProps[] = [\\r\\n            {\\r\\n                id: UUID.generate(),\\r\\n                option: {\\r\\n                    content: 'test',\\r\\n                },\\r\\n            },\\r\\n            {\\r\\n                id: anOptionId,\\r\\n                option: {\\r\\n                    content: 'test 1',\\r\\n                },\\r\\n            },\\r\\n        ];\\r\\n\\r\\n        const renderDropdownSearchConnected = () => {\\r\\n            wrapper = mount(\\r\\n                <Provider store={store}>\\r\\n                    <FlatSelectConnected id={id} options={defaultOptions} />\\r\\n                </Provider>,\\r\\n                {attachTo: document.getElementById('App')}\\r\\n            );\\r\\n            flatSelect = wrapper.find(FlatSelect).first();\\r\\n        };\\r\\n\\r\\n        beforeEach(() => {\\r\\n            store = TestUtils.buildStore();\\r\\n        });\\r\\n\\r\\n        afterEach(() => {\\r\\n            store.dispatch(clearState());\\r\\n            wrapper.detach();\\r\\n        });\\r\\n\\r\\n        describe('mount and unmount', () => {\\r\\n            beforeEach(() => {\\r\\n                renderDropdownSearchConnected();\\r\\n            });\\r\\n\\r\\n            it('should call onMount prop when mounted', () => {\\r\\n                wrapper.unmount();\\r\\n                store.dispatch(clearState());\\r\\n                expect(store.getState().flatSelect.length).toBe(0);\\r\\n\\r\\n                wrapper.mount();\\r\\n                expect(store.getState().flatSelect.length).toBe(1);\\r\\n            });\\r\\n\\r\\n            it('should set the first selected option for selectedOptionId in the state on mount', () => {\\r\\n                wrapper.unmount();\\r\\n                store.dispatch(clearState());\\r\\n                expect(store.getState().flatSelect.length).toBe(0);\\r\\n\\r\\n                const newFlatSelect = (\\r\\n                    <FlatSelectConnected id={id} options={defaultOptions} defaultSelectedOptionId={anOptionId} />\\r\\n                );\\r\\n                wrapper.setProps({children: newFlatSelect});\\r\\n\\r\\n                wrapper.mount();\\r\\n                expect(store.getState().flatSelect.length).toBe(1);\\r\\n                expect(store.getState().flatSelect[0].selectedOptionId).toBe(anOptionId);\\r\\n            });\\r\\n\\r\\n            it('should call onDestroy prop when will unmount', () => {\\r\\n                wrapper.unmount();\\r\\n                expect(store.getState().flatSelect.length).toBe(0);\\r\\n            });\\r\\n        });\\r\\n\\r\\n        describe('mapStateToProps', () => {\\r\\n            beforeEach(() => {\\r\\n                renderDropdownSearchConnected();\\r\\n            });\\r\\n\\r\\n            it('should get an id as a prop', () => {\\r\\n                const idProp = flatSelect.props().id;\\r\\n\\r\\n                expect(idProp).toBeDefined();\\r\\n                expect(idProp).toBe(id);\\r\\n            });\\r\\n\\r\\n            it('should get the options as a prop', () => {\\r\\n                const isOpenedProp = flatSelect.props().options;\\r\\n\\r\\n                expect(isOpenedProp).toBeDefined();\\r\\n                expect(isOpenedProp.length).toBe(2);\\r\\n            });\\r\\n\\r\\n            it('should get the first option for selectedOption if the selectedOption is undefined as a prop', () => {\\r\\n                const optionsPropId = flatSelect.props().selectedOptionId;\\r\\n\\r\\n                expect(optionsPropId).toBeDefined();\\r\\n                expect(optionsPropId).toBe(defaultOptions[0].id);\\r\\n            });\\r\\n\\r\\n            it('should get the current selectedOption as a prop', () => {\\r\\n                store.dispatch(selectFlatSelect(id, defaultOptions[1].id));\\r\\n                wrapper.update();\\r\\n\\r\\n                flatSelect = wrapper.find(FlatSelect).first();\\r\\n                const optionsPropId = flatSelect.props().selectedOptionId;\\r\\n\\r\\n                expect(optionsPropId).toBeDefined();\\r\\n                expect(optionsPropId).toBe(defaultOptions[1].id);\\r\\n            });\\r\\n        });\\r\\n\\r\\n        describe('mapDispatchToProps', () => {\\r\\n            beforeEach(() => {\\r\\n                renderDropdownSearchConnected();\\r\\n            });\\r\\n\\r\\n            it('should get what to do on destroy as a prop', () => {\\r\\n                const onDestroyProp = flatSelect.props().onDestroy;\\r\\n\\r\\n                expect(onDestroyProp).toBeDefined();\\r\\n            });\\r\\n\\r\\n            it('should get what to do on onMount as a prop', () => {\\r\\n                const onMountProp = flatSelect.props().onRender;\\r\\n\\r\\n                expect(onMountProp).toBeDefined();\\r\\n            });\\r\\n\\r\\n            it('should add the first option as optionSelection on onMount', () => {\\r\\n                expect(store.getState().flatSelect[0].selectedOptionId).toBe(defaultOptions[0].id);\\r\\n            });\\r\\n\\r\\n            it('should get what to do on onOptionClick as a prop', () => {\\r\\n                const onOptionClick = flatSelect.props().onOptionClick;\\r\\n\\r\\n                expect(onOptionClick).toBeDefined();\\r\\n            });\\r\\n\\r\\n            it('should add the optionSelected in the state on onOptionClick', () => {\\r\\n                expect(store.getState().flatSelect[0].selectedOptionId).toBe(defaultOptions[0].id);\\r\\n\\r\\n                flatSelect.props().onOptionClick(defaultOptions[1]);\\r\\n\\r\\n                expect(store.getState().flatSelect[0].selectedOptionId).toBe(defaultOptions[1].id);\\r\\n            });\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}