(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{1374:function(o,n,r){"use strict";r.r(n),n.default="import * as React from 'react';\nimport {ChromePicker, ChromePickerProps, ColorResult} from 'react-color';\nimport {connect} from 'react-redux';\nimport {isString, noop, uniqueId} from 'underscore';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {changeInputValue} from '../input/InputActions';\nimport {InputConnected} from '../input/InputConnected';\nimport {InputSelectors} from '../input/InputSelectors';\n\nexport interface IColorPickerProps extends ChromePickerProps {\n    id: string;\n    defaultColor?: string;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IColorPickerProps) => {\n    const color = InputSelectors.getValue(state, {id: ownProps.id}) || ownProps.defaultColor;\n    return {\n        color,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IColorPickerProps) => ({\n    onChangeComplete: (colorPicked: ColorResult) => {\n        ownProps.onChangeComplete && ownProps.onChangeComplete(colorPicked);\n        dispatch(changeInputValue(ownProps.id, colorPicked.hex, true));\n    },\n});\n\nclass ColorPickerDisconnected extends React.Component<IColorPickerProps & ReturnType<typeof mapDispatchToProps>> {\n    static defaultProps: Partial<IColorPickerProps & ReturnType<typeof mapDispatchToProps>> = {\n        id: uniqueId('colorpicker'),\n        onChangeComplete: noop as any,\n    };\n\n    get colorForInput() {\n        if (this.props.color && isString(this.props.color)) {\n            return this.props.color;\n        }\n\n        if (this.props.defaultColor) {\n            return this.props.defaultColor;\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <ChromePicker {...this.props} />\n                <InputConnected\n                    id={this.props.id}\n                    style={{display: 'none'}}\n                    defaultValue={this.colorForInput}\n                    value={this.colorForInput}\n                />\n            </>\n        );\n    }\n}\n\nexport const ColorPicker = connect(mapStateToProps, mapDispatchToProps)(ColorPickerDisconnected);\n"}}]);
//# sourceMappingURL=263.bundle.js.map