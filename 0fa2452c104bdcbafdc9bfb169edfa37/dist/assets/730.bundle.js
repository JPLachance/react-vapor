(window.webpackJsonp=window.webpackJsonp||[]).push([[730],{1828:function(o,l,n){"use strict";n.r(l),l.default="import {shallow, ShallowWrapper} from 'enzyme';\nimport * as React from 'react';\n\nimport SliderHandle, {CustomHandleProps, HandleProps} from '../SliderHandle';\n\ndescribe('<SliderHandle/>', () => {\n    let shallowedSliderHandle: ShallowWrapper;\n\n    const handleCustomProps: CustomHandleProps = {\n        customTooltip: undefined,\n        rangeOutput: 100,\n        hasTooltip: true,\n    };\n\n    const handleProps: HandleProps = {\n        reverse: false,\n        value: 75,\n        dragging: true,\n        vertical: false,\n        offset: 75,\n    };\n\n    const shallowMountSliderHandle = () =>\n        shallow(<SliderHandle handleProps={handleProps} handleCustomProps={handleCustomProps} />);\n\n    afterEach(() => {\n        shallowedSliderHandle?.unmount();\n    });\n\n    it('Should mount and unmount without trowing', () => {\n        expect(() => {\n            shallowMountSliderHandle();\n            shallowMountSliderHandle().unmount();\n        });\n    });\n\n    it('should show rangeOutput for the tooltip overlay if hasTooltip prop is passed but customTooltip props is not passed', () => {\n        shallowedSliderHandle = shallowMountSliderHandle();\n        expect(shallowedSliderHandle.prop('overlay')).toEqual(handleCustomProps.rangeOutput);\n    });\n\n    it('should use the customTooltip as overlay if the customTooltip prop is passed', () => {\n        const customToolTip = <span>custom</span>;\n        shallowedSliderHandle = shallow(\n            <SliderHandle\n                handleProps={handleProps}\n                handleCustomProps={{...handleCustomProps, customTooltip: customToolTip}}\n            />\n        );\n        expect(shallowedSliderHandle.prop('overlay')).toEqual(customToolTip);\n    });\n\n    it('should set the tooltip visible prop to true if the hasTooltip prop is passed and the handle is dragging', () => {\n        shallowedSliderHandle = shallowMountSliderHandle();\n        expect(shallowedSliderHandle.prop('visible')).toBeTruthy();\n    });\n\n    it('should set the tooltip visible prop to false if the hasTooltip prop is not passed even if the handle is dragging', () => {\n        shallowedSliderHandle = shallow(\n            <SliderHandle handleProps={handleProps} handleCustomProps={{...handleCustomProps, hasTooltip: false}} />\n        );\n        expect(shallowedSliderHandle.prop('visible')).toBeFalsy();\n    });\n});\n"}}]);
//# sourceMappingURL=730.bundle.js.map