{"version":3,"sources":["webpack:///./src/components/textarea/examples/TextAreaExamples.tsx?2892","webpack:///./src/components/input/Label.tsx?dafb","webpack:///./src/components/textarea/TextAreaLabel.tsx?8192","webpack:///./node_modules/react-textarea-autosize/dist/react-textarea-autosize.esm.browser.js","webpack:///./src/components/textarea/TextArea.tsx?a315"],"names":["TextAreaExamples","className","id","additionalAttributes","placeholder","valueOnMount","disabledOnMount","onClick","dispatch","getState","textAreas","disabled","label","isAutosize","required","htmlFor","render","classes","this","props","validMessage","invalidMessage","children","attributes","TextAreaLabel","containerClassName","isIE","document","documentElement","currentStyle","HIDDEN_TEXTAREA_STYLE","height","visibility","overflow","position","top","right","SIZING_STYLE","computedStyleCache","hiddenTextarea","createElement","forceHiddenStyles","node","Object","keys","forEach","key","style","setProperty","calculateNodeHeight","uiTextNode","uid","useCache","minRows","maxRows","parentNode","body","appendChild","nodeStyling","window","getComputedStyle","sizingStyle","reduce","obj","name","getPropertyValue","boxSizing","width","parseFloat","paddingSize","borderSize","nodeInfo","calculateNodeStyling","value","minHeight","Infinity","maxHeight","scrollHeight","singleRowHeight","valueRowCount","Math","floor","max","min","rowCount","noop","_React$Component","TextareaAutosize","_this","call","_onRef","_ref","inputRef","current","_onChange","event","_controlled","_resizeComponent","onChange","callback","nodeHeight","_uid","useCacheForDOMMeasurements","state","setState","undefined","_resizeLock","_proto","prototype","_this$props","onHeightChange","ref","componentDidMount","_this2","_resizeListener","addEventListener","componentDidUpdate","prevProps","prevState","componentWillUnmount","removeEventListener","purgeCache","Component","defaultProps","componentWillMount","onMount","onUnmount","TextareaTagName","e","handleOnChange","onChangeCallback","TextAreaConnected","ownProps","target","ReduxUtils","mergeProps"],"mappings":"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","file":"assets/1028.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {findWhere} from 'underscore';\r\n\r\nimport {ExamplesStore} from '../../../../docs/Store';\r\nimport {Label} from '../../input/Label';\r\nimport {TextAreaConnected} from '../TextArea';\r\nimport {setDisabledTextArea} from '../TextAreaActions';\r\nimport {TextAreaLabel} from '../TextAreaLabel';\r\n\r\nexport const TextAreaExamples = (): JSX.Element => (\r\n    <div className=\"mt2\">\r\n        <div className=\"mt2\">\r\n            <div className=\"form-group\">\r\n                <TextAreaConnected\r\n                    id=\"super-textarea\"\r\n                    className=\"admin-invisible-textbox mod-border\"\r\n                    additionalAttributes={{\r\n                        placeholder: 'I am a simple text area',\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <TextAreaConnected\r\n                    id=\"awesome-textarea-2\"\r\n                    className=\"admin-invisible-textbox mod-border\"\r\n                    additionalAttributes={{\r\n                        placeholder: 'I am a simple text area',\r\n                    }}\r\n                    valueOnMount=\"I have a non empty value on mount\"\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <TextAreaConnected\r\n                    id=\"super-textarea-3\"\r\n                    className=\"admin-invisible-textbox mod-border\"\r\n                    additionalAttributes={{\r\n                        placeholder: 'I am a simple text area',\r\n                    }}\r\n                    valueOnMount=\"I am disabled on mount, enable me!\"\r\n                    disabledOnMount\r\n                />\r\n                <button\r\n                    className=\"mb2 block\"\r\n                    onClick={() => {\r\n                        ExamplesStore.dispatch(\r\n                            setDisabledTextArea(\r\n                                'super-textarea-3',\r\n                                !findWhere(ExamplesStore.getState().textAreas, {id: 'super-textarea-3'}).disabled\r\n                            )\r\n                        );\r\n                    }}\r\n                >\r\n                    Toggle TextArea disabled state\r\n                </button>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <TextAreaLabel label=\"simple text area with label\">\r\n                    <TextAreaConnected id=\"super-textarea-4\" />\r\n                </TextAreaLabel>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label className=\"form-control-label\">Default textarea autosize empty</label>\r\n                <div className=\"form-control\">\r\n                    <TextAreaConnected id=\"super-textarea-5\" isAutosize />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label className=\"form-control-label\">Textarea with a placeholder</label>\r\n                <div className=\"form-control\">\r\n                    <TextAreaConnected\r\n                        id=\"super-textarea-6\"\r\n                        additionalAttributes={{placeholder: 'Try to enter a lot of text here'}}\r\n                        isAutosize\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label className=\"form-control-label\">Textarea with a default value</label>\r\n                <div className=\"form-control\">\r\n                    <TextAreaConnected id=\"super-textarea-7\" valueOnMount=\"this is the default value\" isAutosize />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group input-field validate\">\r\n                <TextAreaConnected\r\n                    id=\"super-textarea-8\"\r\n                    isAutosize\r\n                    additionalAttributes={{\r\n                        required: true,\r\n                    }}\r\n                />\r\n                <Label htmlFor=\"super-textarea-8\">Beautiful Textarea</Label>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ILabelProps {\r\n    type?: string;\r\n    classes?: string[];\r\n    validMessage?: string;\r\n    invalidMessage?: string;\r\n}\r\n\r\nexport class Label extends React.Component<ILabelProps & React.HTMLProps<HTMLLabelElement>, any> {\r\n    render() {\r\n        const classes = classNames(this.props.classes);\r\n        const {validMessage, invalidMessage, children, ...attributes} = this.props;\r\n        return (\r\n            <label\r\n                className={classes}\r\n                data-valid-message={validMessage}\r\n                data-invalid-message={invalidMessage}\r\n                {...attributes}\r\n            >\r\n                {children}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {ITextAreaProps} from './TextArea';\r\n\r\nexport interface ITextAreaLabelProps {\r\n    children: React.ReactElement<ITextAreaProps>;\r\n    label: string;\r\n    containerClassName?: string;\r\n}\r\n\r\nexport const TextAreaLabel = (props: ITextAreaLabelProps) => (\r\n    <div className={classNames('input-field form-group', props.containerClassName)}>\r\n        {props.children}\r\n        <label htmlFor={props.children.props.id}>{props.label}</label>\r\n    </div>\r\n);\r\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar isIE = !!document.documentElement.currentStyle;\nvar HIDDEN_TEXTAREA_STYLE = {\n  'min-height': '0',\n  'max-height': 'none',\n  height: '0',\n  visibility: 'hidden',\n  overflow: 'hidden',\n  position: 'absolute',\n  'z-index': '-1000',\n  top: '0',\n  right: '0'\n};\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'font-family', 'font-weight', 'font-size', 'font-style', 'tab-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-top', 'padding-right', 'padding-bottom', 'padding-left', 'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width', 'box-sizing'];\nvar computedStyleCache = {};\nvar hiddenTextarea = document.createElement('textarea');\n\nvar forceHiddenStyles = function forceHiddenStyles(node) {\n  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function (key) {\n    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');\n  });\n};\n\n{\n  forceHiddenStyles(hiddenTextarea);\n}\n\nfunction calculateNodeHeight(uiTextNode, uid, useCache, minRows, maxRows) {\n  if (useCache === void 0) {\n    useCache = false;\n  }\n\n  if (minRows === void 0) {\n    minRows = null;\n  }\n\n  if (maxRows === void 0) {\n    maxRows = null;\n  }\n\n  if (hiddenTextarea.parentNode === null) {\n    document.body.appendChild(hiddenTextarea);\n  } // Copy all CSS properties that have an impact on the height of the content in\n  // the textbox\n\n\n  var nodeStyling = calculateNodeStyling(uiTextNode, uid, useCache);\n\n  if (nodeStyling === null) {\n    return null;\n  }\n\n  var paddingSize = nodeStyling.paddingSize,\n      borderSize = nodeStyling.borderSize,\n      boxSizing = nodeStyling.boxSizing,\n      sizingStyle = nodeStyling.sizingStyle; // Need to have the overflow attribute to hide the scrollbar otherwise\n  // text-lines will not calculated properly as the shadow will technically be\n  // narrower for content\n\n  Object.keys(sizingStyle).forEach(function (key) {\n    hiddenTextarea.style[key] = sizingStyle[key];\n  });\n  forceHiddenStyles(hiddenTextarea);\n  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || 'x';\n  var minHeight = -Infinity;\n  var maxHeight = Infinity;\n  var height = hiddenTextarea.scrollHeight;\n\n  if (boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    height = height + borderSize;\n  } else if (boxSizing === 'content-box') {\n    // remove padding, since height = content\n    height = height - paddingSize;\n  } // measure height of a textarea with a single row\n\n\n  hiddenTextarea.value = 'x';\n  var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize; // Stores the value's rows count rendered in `hiddenTextarea`,\n  // regardless if `maxRows` or `minRows` props are passed\n\n  var valueRowCount = Math.floor(height / singleRowHeight);\n\n  if (minRows !== null) {\n    minHeight = singleRowHeight * minRows;\n\n    if (boxSizing === 'border-box') {\n      minHeight = minHeight + paddingSize + borderSize;\n    }\n\n    height = Math.max(minHeight, height);\n  }\n\n  if (maxRows !== null) {\n    maxHeight = singleRowHeight * maxRows;\n\n    if (boxSizing === 'border-box') {\n      maxHeight = maxHeight + paddingSize + borderSize;\n    }\n\n    height = Math.min(maxHeight, height);\n  }\n\n  var rowCount = Math.floor(height / singleRowHeight);\n  return {\n    height: height,\n    minHeight: minHeight,\n    maxHeight: maxHeight,\n    rowCount: rowCount,\n    valueRowCount: valueRowCount\n  };\n}\n\nfunction calculateNodeStyling(node, uid, useCache) {\n  if (useCache === void 0) {\n    useCache = false;\n  }\n\n  if (useCache && computedStyleCache[uid]) {\n    return computedStyleCache[uid];\n  }\n\n  var style = window.getComputedStyle(node);\n\n  if (style === null) {\n    return null;\n  }\n\n  var sizingStyle = SIZING_STYLE.reduce(function (obj, name) {\n    obj[name] = style.getPropertyValue(name);\n    return obj;\n  }, {});\n  var boxSizing = sizingStyle['box-sizing']; // probably node is detached from DOM, can't read computed dimensions\n\n  if (boxSizing === '') {\n    return null;\n  } // IE (Edge has already correct behaviour) returns content width as computed width\n  // so we need to add manually padding and border widths\n\n\n  if (isIE && boxSizing === 'border-box') {\n    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(style['border-right-width']) + parseFloat(style['border-left-width']) + parseFloat(style['padding-right']) + parseFloat(style['padding-left']) + 'px';\n  }\n\n  var paddingSize = parseFloat(sizingStyle['padding-bottom']) + parseFloat(sizingStyle['padding-top']);\n  var borderSize = parseFloat(sizingStyle['border-bottom-width']) + parseFloat(sizingStyle['border-top-width']);\n  var nodeInfo = {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize,\n    boxSizing: boxSizing\n  };\n\n  if (useCache) {\n    computedStyleCache[uid] = nodeInfo;\n  }\n\n  return nodeInfo;\n}\n\nvar purgeCache = function purgeCache(uid) {\n  delete computedStyleCache[uid];\n};\n\nvar noop = function noop() {};\n\nvar uid = 0;\n\nvar TextareaAutosize =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TextareaAutosize, _React$Component);\n\n  function TextareaAutosize(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _this._onRef = function (node) {\n      _this._ref = node;\n      var inputRef = _this.props.inputRef;\n\n      if (typeof inputRef === 'function') {\n        inputRef(node);\n        return;\n      }\n\n      inputRef.current = node;\n    };\n\n    _this._onChange = function (event) {\n      if (!_this._controlled) {\n        _this._resizeComponent();\n      }\n\n      _this.props.onChange(event, _assertThisInitialized(_assertThisInitialized(_this)));\n    };\n\n    _this._resizeComponent = function (callback) {\n      if (callback === void 0) {\n        callback = noop;\n      }\n\n      var nodeHeight = calculateNodeHeight(_this._ref, _this._uid, _this.props.useCacheForDOMMeasurements, _this.props.minRows, _this.props.maxRows);\n\n      if (nodeHeight === null) {\n        callback();\n        return;\n      }\n\n      var height = nodeHeight.height,\n          minHeight = nodeHeight.minHeight,\n          maxHeight = nodeHeight.maxHeight,\n          rowCount = nodeHeight.rowCount,\n          valueRowCount = nodeHeight.valueRowCount;\n      _this.rowCount = rowCount;\n      _this.valueRowCount = valueRowCount;\n\n      if (_this.state.height !== height || _this.state.minHeight !== minHeight || _this.state.maxHeight !== maxHeight) {\n        _this.setState({\n          height: height,\n          minHeight: minHeight,\n          maxHeight: maxHeight\n        }, callback);\n\n        return;\n      }\n\n      callback();\n    };\n\n    _this.state = {\n      height: props.style && props.style.height || 0,\n      minHeight: -Infinity,\n      maxHeight: Infinity\n    };\n    _this._uid = uid++;\n    _this._controlled = props.value !== undefined;\n    _this._resizeLock = false;\n    return _this;\n  }\n\n  var _proto = TextareaAutosize.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _inputRef = _this$props.inputRef,\n        _maxRows = _this$props.maxRows,\n        _minRows = _this$props.minRows,\n        _onHeightChange = _this$props.onHeightChange,\n        _useCacheForDOMMeasurements = _this$props.useCacheForDOMMeasurements,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"inputRef\", \"maxRows\", \"minRows\", \"onHeightChange\", \"useCacheForDOMMeasurements\"]);\n\n    props.style = _extends({}, props.style, {\n      height: this.state.height\n    });\n    var maxHeight = Math.max(props.style.maxHeight || Infinity, this.state.maxHeight);\n\n    if (maxHeight < this.state.height) {\n      props.style.overflow = 'hidden';\n    }\n\n    return React.createElement(\"textarea\", _extends({}, props, {\n      onChange: this._onChange,\n      ref: this._onRef\n    }));\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    this._resizeComponent(); // Working around Firefox bug which runs resize listeners even when other JS is running at the same moment\n    // causing competing rerenders (due to setState in the listener) in React.\n    // More can be found here - facebook/react#6324\n\n\n    this._resizeListener = function () {\n      if (_this2._resizeLock) {\n        return;\n      }\n\n      _this2._resizeLock = true;\n\n      _this2._resizeComponent(function () {\n        _this2._resizeLock = false;\n      });\n    };\n\n    window.addEventListener('resize', this._resizeListener);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevProps !== this.props) {\n      this._resizeComponent();\n    }\n\n    if (this.state.height !== prevState.height) {\n      this.props.onHeightChange(this.state.height, this);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this._resizeListener);\n    purgeCache(this._uid);\n  };\n\n  return TextareaAutosize;\n}(React.Component);\n\nTextareaAutosize.defaultProps = {\n  inputRef: noop,\n  onChange: noop,\n  onHeightChange: noop,\n  useCacheForDOMMeasurements: false\n};\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes = {\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]),\n  maxRows: PropTypes.number,\n  minRows: PropTypes.number,\n  onChange: PropTypes.func,\n  onHeightChange: PropTypes.func,\n  style: PropTypes.object,\n  useCacheForDOMMeasurements: PropTypes.bool,\n  value: PropTypes.string\n} : void 0;\n\nexport default TextareaAutosize;\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport TextareaAutosize, {TextareaAutosizeProps} from 'react-textarea-autosize';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {addTextArea, changeTextAreaValue, removeTextArea} from './TextAreaActions';\r\n\r\n/**\r\n * TODO: autoresize is not yet implemented on TextArea\r\n */\r\n\r\nexport interface ITextAreaOwnProps {\r\n    id: string;\r\n    className?: string;\r\n    additionalAttributes?: React.DetailedHTMLProps<\r\n        React.TextareaHTMLAttributes<HTMLTextAreaElement>,\r\n        HTMLTextAreaElement\r\n    > &\r\n        TextareaAutosizeProps;\r\n    /**\r\n     * Use with TextAreaConnected. Only useful in a Redux context.\r\n     */\r\n    valueOnMount?: string;\r\n    /**\r\n     * Use with TextAreaConnected. Only useful in a Redux context.\r\n     */\r\n    disabledOnMount?: boolean;\r\n\r\n    isAutosize?: boolean;\r\n\r\n    onChangeCallback?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n}\r\n\r\nexport interface ITextAreaStateProps {\r\n    value?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface ITextAreaDispatchProps {\r\n    onChange?: React.ChangeEventHandler<HTMLTextAreaElement>;\r\n    onMount?: () => void;\r\n    onUnmount?: () => void;\r\n}\r\n\r\nexport interface ITextAreaProps extends ITextAreaOwnProps, ITextAreaStateProps, ITextAreaDispatchProps {}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: ITextAreaOwnProps): ITextAreaStateProps => {\r\n    const {value, disabled} = _.findWhere(state.textAreas, {id: ownProps.id}) || {value: '', disabled: false};\r\n    return {value, disabled};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: ITextAreaOwnProps): ITextAreaDispatchProps => ({\r\n    onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => dispatch(changeTextAreaValue(ownProps.id, e.target.value)),\r\n    onMount: () => dispatch(addTextArea(ownProps.id, ownProps.valueOnMount, ownProps.disabledOnMount)),\r\n    onUnmount: () => dispatch(removeTextArea(ownProps.id)),\r\n});\r\n\r\nexport class TextArea extends React.Component<ITextAreaProps, {}> {\r\n    static defaultProps: Partial<ITextAreaOwnProps> = {\r\n        additionalAttributes: {},\r\n        className: '',\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.onMount) {\r\n            this.props.onMount();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onUnmount) {\r\n            this.props.onUnmount();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const TextareaTagName: any = this.props.isAutosize ? TextareaAutosize : 'textarea';\r\n        return (\r\n            <TextareaTagName\r\n                {...this.props.additionalAttributes}\r\n                id={this.props.id}\r\n                disabled={this.props.disabled}\r\n                className={this.props.className}\r\n                value={this.props.value}\r\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => this.handleOnChange(e)}\r\n            />\r\n        );\r\n    }\r\n\r\n    private handleOnChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        this.props.onChange?.(e);\r\n        this.props.onChangeCallback?.(e);\r\n    }\r\n}\r\n\r\nexport const TextAreaConnected: React.ComponentClass<ITextAreaProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(TextArea);\r\n"],"sourceRoot":""}