{"version":3,"sources":["webpack:///./src/components/multilineBox/tests/MultilineBoxContainer.spec.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/551.bundle.js","sourcesContent":["export default \"import {shallowWithState} from 'enzyme-redux';\\r\\nimport * as React from 'react';\\r\\nimport * as _ from 'underscore';\\r\\nimport {RTestUtils} from '../../../utils/tests/RTestUtils';\\r\\nimport {multilineBoxContainer} from '../hoc/MultilineBoxContainer';\\r\\nimport {IMultilineSingleBoxProps, MultilineBox} from '../MultilineBox';\\r\\n\\r\\ndescribe('Multiline box container', () => {\\r\\n    describe('<MultilineBoxContainer/>', () => {\\r\\n        const id = 'multiline-box';\\r\\n        const MultilineBoxContainer = _.compose(multilineBoxContainer())(MultilineBox);\\r\\n\\r\\n        it('should not throw if the containerNode and data is not defined', () => {\\r\\n            expect(() =>\\r\\n                shallowWithState(<MultilineBoxContainer id={id} />, {})\\r\\n                    .dive()\\r\\n                    .dive()\\r\\n            ).not.toThrow();\\r\\n        });\\r\\n\\r\\n        it('should not throw if the containerNode is not defined without data', () => {\\r\\n            const testId = 'id';\\r\\n            RTestUtils.mockUUID(testId);\\r\\n            expect(() =>\\r\\n                shallowWithState(\\r\\n                    <MultilineBoxContainer id={id} renderBody={(data: IMultilineSingleBoxProps[]) => <div />} />,\\r\\n                    {\\r\\n                        multilineIds: {\\r\\n                            [id]: {\\r\\n                                id: id,\\r\\n                                list: [testId],\\r\\n                            },\\r\\n                        },\\r\\n                    }\\r\\n                )\\r\\n                    .dive()\\r\\n                    .dive()\\r\\n            ).not.toThrow();\\r\\n        });\\r\\n\\r\\n        it('should not throw if he containerNode is not defined and the data is defined ', () => {\\r\\n            const testId = 'id';\\r\\n            RTestUtils.mockUUID(testId);\\r\\n            expect(() =>\\r\\n                shallowWithState(\\r\\n                    <MultilineBoxContainer\\r\\n                        id={id}\\r\\n                        renderBody={(data: IMultilineSingleBoxProps[]) => <div />}\\r\\n                        data={[{name: 'test'}]}\\r\\n                    />,\\r\\n                    {\\r\\n                        multilineIds: {\\r\\n                            [id]: {\\r\\n                                id: id,\\r\\n                                list: [testId],\\r\\n                            },\\r\\n                        },\\r\\n                    }\\r\\n                )\\r\\n                    .dive()\\r\\n                    .dive()\\r\\n            ).not.toThrow();\\r\\n        });\\r\\n\\r\\n        it('should mount without errors', () => {\\r\\n            expect(() =>\\r\\n                shallowWithState(\\r\\n                    <MultilineBoxContainer id={id} data={[]} renderBody={_.identity} defaultProps={{}} />,\\r\\n                    {}\\r\\n                )\\r\\n                    .dive()\\r\\n                    .dive()\\r\\n            ).not.toThrow();\\r\\n        });\\r\\n\\r\\n        it('should unmount without errors', () => {\\r\\n            const wrapper = shallowWithState(\\r\\n                <MultilineBoxContainer id={id} data={[]} renderBody={_.identity} defaultProps={{}} />,\\r\\n                {}\\r\\n            )\\r\\n                .dive()\\r\\n                .dive();\\r\\n\\r\\n            expect(() => wrapper.unmount()).not.toThrow();\\r\\n        });\\r\\n\\r\\n        describe('once rendered without errors', () => {\\r\\n            let MultilineBoxContainerWithSpy: any;\\r\\n            let spyContainerNode: jasmine.Spy;\\r\\n\\r\\n            beforeEach(() => {\\r\\n                spyContainerNode = jasmine.createSpy('containerNode').and.returnValue(<div></div>);\\r\\n\\r\\n                MultilineBoxContainerWithSpy = _.compose(\\r\\n                    multilineBoxContainer({\\r\\n                        containerNode: spyContainerNode,\\r\\n                    })\\r\\n                )(MultilineBox);\\r\\n            });\\r\\n\\r\\n            it('should call the containerNode function on mount', () => {\\r\\n                shallowWithState(\\r\\n                    <MultilineBoxContainerWithSpy\\r\\n                        id={id}\\r\\n                        data={[{name: 'name'}]}\\r\\n                        defaultProps={{}}\\r\\n                        containerNode={spyContainerNode}\\r\\n                    />,\\r\\n                    {\\r\\n                        multilineIds: {\\r\\n                            [id]: {\\r\\n                                id: id,\\r\\n                                list: ['imNotAnId'],\\r\\n                            },\\r\\n                        },\\r\\n                    }\\r\\n                )\\r\\n                    .dive()\\r\\n                    .dive();\\r\\n\\r\\n                expect(spyContainerNode).toHaveBeenCalledTimes(1);\\r\\n            });\\r\\n\\r\\n            it('should call the containerNode if defined as an ownProps', () => {\\r\\n                shallowWithState(<MultilineBoxContainerWithSpy id={id} data={[{name: 'name'}]} defaultProps={{}} />, {\\r\\n                    multilineIds: {\\r\\n                        [id]: {\\r\\n                            id: id,\\r\\n                            list: ['imNotAnId'],\\r\\n                        },\\r\\n                    },\\r\\n                })\\r\\n                    .dive()\\r\\n                    .dive();\\r\\n\\r\\n                expect(spyContainerNode).toHaveBeenCalledTimes(1);\\r\\n            });\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}