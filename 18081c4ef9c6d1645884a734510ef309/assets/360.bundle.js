(window.webpackJsonp=window.webpackJsonp||[]).push([[360],{1468:function(n,e,r){"use strict";r.r(e),e.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {CodeEditor} from '../CodeEditor';\r\nimport {IJSONEditorProps, IJSONEditorState, JSONEditor} from '../JSONEditor';\r\n\r\ndescribe('JSONEditor', () => {\r\n    const basicProps: IJSONEditorProps = {\r\n        value: 'any string',\r\n    };\r\n\r\n    it('should render without errors', () => {\r\n        expect(() => {\r\n            shallow(<JSONEditor {...basicProps} />);\r\n        }).not.toThrow();\r\n    });\r\n\r\n    describe('<JSONEditor />', () => {\r\n        let jsonEditor: ReactWrapper<IJSONEditorProps, IJSONEditorState>;\r\n        let jsonEditorInstance: JSONEditor;\r\n\r\n        const mountWithProps = (props: Partial<IJSONEditorProps> = {}) => {\r\n            jsonEditor = mount(<JSONEditor {..._.defaults(props, basicProps)} />, {\r\n                attachTo: document.getElementById('App'),\r\n            });\r\n            jsonEditorInstance = jsonEditor.instance() as any;\r\n        };\r\n\r\n        beforeEach(() => {\r\n            mountWithProps();\r\n        });\r\n\r\n        it('should get the value as a prop', () => {\r\n            const valueProp: string = jsonEditor.props().value;\r\n\r\n            expect(valueProp).toBe(basicProps.value);\r\n        });\r\n\r\n        it('should get the readonly state as a prop', () => {\r\n            let readOnlyProp: boolean = jsonEditor.props().readOnly;\r\n\r\n            expect(readOnlyProp).toBeUndefined();\r\n\r\n            mountWithProps({readOnly: true});\r\n\r\n            readOnlyProp = jsonEditor.props().readOnly;\r\n\r\n            expect(readOnlyProp).toBe(true);\r\n        });\r\n\r\n        it('should get what to do on change state as a prop if set', () => {\r\n            let onChangeProp: (json: string, inError: boolean) => void = jsonEditor.props().onChange;\r\n\r\n            expect(onChangeProp).toBeUndefined();\r\n\r\n            mountWithProps({onChange: jasmine.createSpy('onChange')});\r\n\r\n            onChangeProp = jsonEditor.props().onChange;\r\n\r\n            expect(onChangeProp).toBeDefined();\r\n        });\r\n\r\n        it('should display a <CodeEditor /> component', () => {\r\n            expect(jsonEditor.find(CodeEditor).length).toBe(1);\r\n        });\r\n\r\n        it('should call handleChange when the CodeMirror onChange prop is called', () => {\r\n            const handleChangeSpy: jasmine.Spy = spyOn<any>(JSONEditor.prototype, 'handleChange');\r\n            const expectedValue: string = 'anything at all really';\r\n\r\n            jsonEditor\r\n                .find(CodeEditor)\r\n                .props()\r\n                .onChange(expectedValue);\r\n\r\n            expect(handleChangeSpy).toHaveBeenCalledTimes(1);\r\n            expect(handleChangeSpy).toHaveBeenCalledWith(expectedValue);\r\n        });\r\n\r\n        it('should call the onChange prop if set when calling handleChange', () => {\r\n            const onChangeSpy: jasmine.Spy = jasmine.createSpy('onChange');\r\n            const expectedValue: string = 'the expected value';\r\n\r\n            mountWithProps({onChange: onChangeSpy});\r\n\r\n            (jsonEditorInstance as any).handleChange(expectedValue);\r\n\r\n            expect(onChangeSpy).toHaveBeenCalledTimes(1);\r\n            expect(onChangeSpy).toHaveBeenCalledWith(expectedValue, true);\r\n        });\r\n\r\n        it('should call onChange prop when the value prop changes', () => {\r\n            const onChangeSpy: jasmine.Spy = jasmine.createSpy('onChange');\r\n            const expectedValue: string = 'the expected value';\r\n\r\n            mountWithProps({onChange: onChangeSpy});\r\n            jsonEditor.setProps({value: expectedValue});\r\n\r\n            expect(onChangeSpy).toHaveBeenCalledTimes(1);\r\n            expect(onChangeSpy).toHaveBeenCalledWith(expectedValue, true);\r\n        });\r\n\r\n        it('should set the isInError to true when calling handleChange if the JSON cannot be parsed', () => {\r\n            (jsonEditorInstance as any).handleChange('this is not a JSON');\r\n\r\n            expect(jsonEditor.state().isInError).toBe(true);\r\n        });\r\n\r\n        it('should set the isInError to false when calling handleChange if the JSON can be parsed', () => {\r\n            (jsonEditorInstance as any).handleChange('{ \"JSON\": true }');\r\n\r\n            expect(jsonEditor.state().isInError).toBe(false);\r\n        });\r\n\r\n        it('should not throw on change if the onChange prop is undefined', () => {\r\n            expect(() => (jsonEditorInstance as any).handleChange('expectedValue')).not.toThrow();\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=360.bundle.js.map