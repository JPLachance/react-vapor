{"version":3,"sources":["webpack:///./src/components/section/examples/SectionExamples.tsx?8c88","webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/input/Input.tsx?1d15","webpack:///./src/utils/PropsToOmitUtils.ts?e979","webpack:///./src/components/input/Label.tsx?dafb","webpack:///./src/components/select/SingleSelectConnected.tsx?7086","webpack:///./src/components/input/InputDescription.tsx?8553","webpack:///./src/components/input/LabeledInput.tsx?95a1","webpack:///./src/components/radio/RadioSelect.tsx?93ae","webpack:///./src/components/form/Form.tsx?193f","webpack:///./src/components/radio/Radio.tsx?1970"],"names":["render","title","description","level","label","helpText","optionalInformation","value","className","id","items","selected","message","Section","children","mods","titleProps","H","validatedInputTypes","inputPropsToOmit","props","state","valid","componentWillMount","this","onRender","validOnMount","validateOnMount","validate","defaultValue","disabledOnMount","componentWillUnmount","onDestroy","componentDidUpdate","prevProps","innerInput","reset","getInnerValue","setState","handleBlur","onBlur","handleChange","onChange","validOnChange","validateOnChange","handleClick","e","onClick","handleKeyUp","event","onKeyUp","getLabel","labelProps","labelTitle","key","htmlFor","classes","type","innerInputClasses","invalid","inputElements","ref","min","minimum","max","maximum","input","disabled","disabledTooltip","placement","Right","defaultProps","required","internalComponentPropsToOmit","PropsToOmitUtils","internal","validMessage","invalidMessage","attributes","selectPropsKeys","mapStateToProps","ownProps","customSelected","getListState","selectedOption","length","getListBoxSelected","mapDispatchToProps","dispatch","deselect","getButton","option","showClear","canClear","buttonClasses","toggleClasses","noFixedWidth","onKeyDown","buttonPrepend","prepend","getSelectedOptionElement","append","getDeselectOptionButton","handleDeselect","onSelectOptionCallback","button","isLoading","displayValue","selectedDisplayValue","placeholder","deselectTooltipText","noSpanWrapper","svgName","clear","name","svgClass","SingleSelectConnected","InputDescription","LabeledInput","headerClassName","header","information","Top","componentDidMount","onMount","valueOnMount","disabledValuesOnMount","onUnmount","map","child","checked","isValueDisabled","handleToggle","onChangeCallback","childValue","disabledValues","Form"],"mappings":"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","file":"assets/1015.bundle.js","sourcesContent":["import * as React from 'react';\nimport {Form} from '../../form/Form';\nimport {Input} from '../../input/Input';\nimport {Label} from '../../input/Label';\nimport {LabeledInput} from '../../input/LabeledInput';\nimport {Radio} from '../../radio/Radio';\nimport {RadioSelect} from '../../radio/RadioSelect';\nimport {SingleSelectConnected} from '../../select/SingleSelectConnected';\nimport {Section} from '../Section';\n\nexport class SectionExamples extends React.Component<any, any> {\n    render() {\n        return (\n            // start-print\n            <>\n                <Form>\n                    <Section\n                        title=\"Search panel\"\n                        description=\"Customizing the display and behavior of the interface displayed withing the search panel can be done by editing the code of your search interface directly or via the JavaScript Search Interface Editor. As for style, it can be modified by applying your own stylesheet or adding styling rules in the Advanced tab.\"\n                    >\n                        <Section title=\"Main button\" level={2}>\n                            <LabeledInput\n                                label=\"Location on screen\"\n                                helpText=\"The widget button's position is fixed, which means it is positioned relative to the viewport and stays in the same place even if the page is scrolled.\"\n                                optionalInformation=\"INFORMATION\"\n                            >\n                                <RadioSelect>\n                                    <Radio value=\"1\">\n                                        <Label>Value 1</Label>\n                                    </Radio>\n                                    <Radio value=\"2\">\n                                        <Label>Value 2</Label>\n                                    </Radio>\n                                </RadioSelect>\n                            </LabeledInput>\n                            <Section title=\"Content\" level={2}>\n                                <LabeledInput helpText=\"The text that appears on the main widget button.\">\n                                    <Input value=\"Help\">\n                                        <Label>Text</Label>\n                                    </Input>\n                                </LabeledInput>\n                                <LabeledInput helpText=\"This is the font family that will be used on the button...\">\n                                    <Input value=\"Lato, Arial, sans serif\">\n                                        <Label>Font Family</Label>\n                                    </Input>\n                                </LabeledInput>\n                            </Section>\n                        </Section>\n                    </Section>\n                </Form>\n\n                <Form className=\"mt4\">\n                    <Section title=\"Define your products structure\" description=\"Inputs inside a Section of level 1\">\n                        <LabeledInput\n                            label=\"Product Object Type\"\n                            helpText=\"Select the object type value that identifies a Product object\"\n                        >\n                            <SingleSelectConnected\n                                id=\"first\"\n                                items={[\n                                    {\n                                        selected: true,\n                                        value: 'Product',\n                                    },\n                                    {\n                                        selected: false,\n                                        value: 'Variant',\n                                    },\n                                ]}\n                            />\n                        </LabeledInput>\n                        <LabeledInput\n                            label=\"Product Id Field\"\n                            helpText=\"The product unique identifier is often associated with a model number. It is used to link variants and products together. This field should appear in both objects\"\n                            message=\"31 different products identified\"\n                        >\n                            <SingleSelectConnected\n                                id=\"second\"\n                                items={[\n                                    {\n                                        selected: true,\n                                        value: 'productid',\n                                    },\n                                    {\n                                        selected: false,\n                                        value: 'anotherfield',\n                                    },\n                                ]}\n                            />\n                        </LabeledInput>\n                    </Section>\n                    <Section title=\"Level 2\" description=\"Inputs inside a Section of level 2\" level={2}>\n                        <LabeledInput\n                            label=\"Product Object Type\"\n                            helpText=\"Select the object type value that identifies a Product object\"\n                        >\n                            <SingleSelectConnected\n                                id=\"first\"\n                                items={[\n                                    {\n                                        selected: true,\n                                        value: 'Product',\n                                    },\n                                    {\n                                        selected: false,\n                                        value: 'Variant',\n                                    },\n                                ]}\n                            />\n                        </LabeledInput>\n                        <LabeledInput\n                            label=\"Product Id Field\"\n                            helpText=\"The product unique identifier is often associated with a model number. It is used to link variants and products together. This field should appear in both objects\"\n                            message=\"31 different products identified\"\n                        >\n                            <SingleSelectConnected\n                                id=\"second\"\n                                items={[\n                                    {\n                                        selected: true,\n                                        value: 'productid',\n                                    },\n                                    {\n                                        selected: false,\n                                        value: 'anotherfield',\n                                    },\n                                ]}\n                            />\n                        </LabeledInput>\n                    </Section>\n                    <Section title=\"Level 3\" description=\"Inputs inside a Section of level 3\" level={3}>\n                        <LabeledInput\n                            label=\"Product Object Type\"\n                            helpText=\"Select the object type value that identifies a Product object\"\n                        >\n                            <SingleSelectConnected\n                                id=\"first\"\n                                items={[\n                                    {\n                                        selected: true,\n                                        value: 'Product',\n                                    },\n                                    {\n                                        selected: false,\n                                        value: 'Variant',\n                                    },\n                                ]}\n                            />\n                        </LabeledInput>\n                        <LabeledInput\n                            label=\"Product Id Field\"\n                            helpText=\"The product unique identifier is often associated with a model number. It is used to link variants and products together. This field should appear in both objects\"\n                            message=\"31 different products identified\"\n                        >\n                            <SingleSelectConnected\n                                id=\"second\"\n                                items={[\n                                    {\n                                        selected: true,\n                                        value: 'productid',\n                                    },\n                                    {\n                                        selected: false,\n                                        value: 'anotherfield',\n                                    },\n                                ]}\n                            />\n                        </LabeledInput>\n                    </Section>\n                </Form>\n            </>\n            // stop-print\n        );\n    }\n}\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\nimport {contains, isUndefined, uniqueId} from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {PropsToOmitUtils} from '../../utils/PropsToOmitUtils';\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IInputState} from './InputReducers';\r\nimport {ILabelProps, Label} from './Label';\r\n\r\nconst validatedInputTypes: string[] = ['number', 'text', 'password'];\r\n\r\ntype IInputNativeTagOwnProps = Omit<\r\n    React.AllHTMLAttributes<HTMLInputElement>,\r\n    'defaultValue' | 'onClick' | 'onChange' | 'onBlur' | 'value'\r\n>;\r\n\r\nexport interface IInputAdditionalOwnProps {\r\n    id?: string;\r\n    classes?: IClassName;\r\n    innerInputClasses?: IClassName;\r\n    validate?: (value: any) => boolean;\r\n    labelTitle?: React.ReactNode;\r\n    labelProps?: ILabelProps;\r\n    validateOnChange?: boolean;\r\n    disabledOnMount?: boolean;\r\n    validateOnMount?: boolean;\r\n    disabledTooltip?: string;\r\n    minimum?: number /* @deprecated use min instead */;\r\n    maximum?: number /* @deprecated use max instead */;\r\n    onBlur?: (value: string) => void;\r\n    defaultValue?: string;\r\n}\r\n\r\nexport interface IInputNativeTagStateProps {\r\n    value?: string;\r\n    checked?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IInputAdditionalStateProps {\r\n    valid?: boolean;\r\n    indeterminate?: boolean;\r\n}\r\n\r\nexport interface IInputStateProps extends IInputNativeTagStateProps, IInputAdditionalStateProps {}\r\n\r\nexport interface IInputDispatchProps {\r\n    onDestroy?: () => void;\r\n    onRender?: (value?: string, valid?: boolean, disabled?: boolean) => void;\r\n    onChange?: (value?: string, valid?: boolean) => void;\r\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n    changeDirtyState?: (value?: string, valid?: boolean) => void;\r\n}\r\n\r\nconst inputPropsToOmit = keys<IInputAdditionalOwnProps & IInputAdditionalStateProps & IInputDispatchProps>();\r\n\r\nexport interface IInputOwnProps extends IInputAdditionalOwnProps, IInputNativeTagOwnProps {}\r\n\r\nexport interface IInputProps extends IInputOwnProps, Partial<IInputStateProps>, Partial<IInputDispatchProps> {}\r\n\r\nexport interface IInputComponentState {\r\n    valid: boolean;\r\n}\r\n\r\nexport class Input extends React.Component<IInputProps, IInputComponentState> {\r\n    private innerInput: HTMLInputElement;\r\n\r\n    static defaultProps: Partial<IInputProps> = {\r\n        id: uniqueId('input'),\r\n        type: 'text',\r\n        valid: true,\r\n        labelTitle: '',\r\n        required: true,\r\n    };\r\n\r\n    constructor(props: IInputProps, state: IInputState) {\r\n        super(props, state);\r\n        this.state = {\r\n            valid: this.props.valid,\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            // undefined validOnMount will default to true in the state\r\n            const validOnMount =\r\n                this.props.validateOnMount && this.props.validate && this.props.validate(this.props.defaultValue || '');\r\n\r\n            this.props.onRender(this.props.defaultValue, validOnMount, this.props.disabledOnMount);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IInputProps) {\r\n        if (this.props.valid !== prevProps.valid) {\r\n            this.validate();\r\n        }\r\n\r\n        if (prevProps.value !== this.props.value && this.innerInput) {\r\n            this.innerInput.value = this.props.value;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.innerInput.value = '';\r\n    }\r\n\r\n    getInnerValue(): string {\r\n        return (this.innerInput && this.innerInput.value) || '';\r\n    }\r\n\r\n    validate() {\r\n        this.setState({\r\n            valid: this.props.valid && !(this.props.validate && !this.props.validate(this.getInnerValue())),\r\n        });\r\n    }\r\n\r\n    private handleBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(this.getInnerValue());\r\n        }\r\n    }\r\n\r\n    private handleChange() {\r\n        if (this.props.onChange) {\r\n            const validOnChange =\r\n                this.props.validateOnChange && this.props.validate && this.props.validate(this.getInnerValue());\r\n            this.props.onChange(this.getInnerValue(), validOnChange);\r\n        }\r\n    }\r\n\r\n    private handleClick(e: React.MouseEvent<HTMLElement>) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n\r\n    private handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(event);\r\n        }\r\n    }\r\n\r\n    private getLabel(): React.ReactNode {\r\n        const {labelProps, labelTitle} = this.props;\r\n        if (typeof labelTitle === 'string') {\r\n            return labelTitle || this.props.validate ? (\r\n                <Label key={this.props.id + 'label'} htmlFor={this.props.id} {...labelProps}>\r\n                    {labelTitle}\r\n                </Label>\r\n            ) : null;\r\n        } else {\r\n            return labelTitle;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames(\r\n            'input-wrapper validate',\r\n            {\r\n                'input-field': contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.classes\r\n        );\r\n        const innerInputClasses = classNames(\r\n            {\r\n                invalid: !this.state.valid && contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.innerInputClasses\r\n        );\r\n\r\n        const inputElements = [\r\n            <input\r\n                key={this.props.id}\r\n                id={this.props.id}\r\n                className={innerInputClasses}\r\n                defaultValue={!isUndefined(this.props.value) ? this.props.value : this.props.defaultValue}\r\n                ref={(innerInput: HTMLInputElement) => (this.innerInput = innerInput)}\r\n                onBlur={() => this.handleBlur()}\r\n                onChange={() => this.handleChange()}\r\n                onKeyUp={(event: React.KeyboardEvent<HTMLInputElement>) => this.handleKeyUp(event)}\r\n                min={this.props.minimum}\r\n                max={this.props.maximum}\r\n                {..._.omit(this.props, [...PropsToOmitUtils.input, ...inputPropsToOmit])}\r\n            />,\r\n            this.getLabel(),\r\n            this.props.children,\r\n        ];\r\n\r\n        return this.props.disabled && this.props.disabledTooltip ? (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                <Tooltip title={this.props.disabledTooltip} placement={TooltipPlacement.Right}>\r\n                    {inputElements}\r\n                </Tooltip>\r\n            </div>\r\n        ) : (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                {inputElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const internalComponentPropsToOmit: string[] = ['children', 'dangerouslySetInnerHTML'];\r\n\r\n// We omit those props for the input native tag because those props are reserved for the Input component and\r\n// to stay compatible with the old interface\r\nconst inputTagPropsToOmit: string[] = [\r\n    ...internalComponentPropsToOmit,\r\n    'defaultValue',\r\n    'onClick',\r\n    'onChange',\r\n    'onBlur',\r\n    'value',\r\n    'valid',\r\n    'changeDirtyState',\r\n];\r\n\r\nexport const PropsToOmitUtils = {\r\n    internal: internalComponentPropsToOmit,\r\n    input: inputTagPropsToOmit,\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ILabelProps {\r\n    type?: string;\r\n    classes?: string[];\r\n    validMessage?: string;\r\n    invalidMessage?: string;\r\n}\r\n\r\nexport class Label extends React.Component<ILabelProps & React.HTMLProps<HTMLLabelElement>, any> {\r\n    render() {\r\n        const classes = classNames(this.props.classes);\r\n        const {validMessage, invalidMessage, children, ...attributes} = this.props;\r\n        return (\r\n            <label\r\n                className={classes}\r\n                data-valid-message={validMessage}\r\n                data-invalid-message={invalidMessage}\r\n                {...attributes}\r\n            >\r\n                {children}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as VaporSVG from 'coveo-styleguide';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IComponentBehaviour} from '../../utils/ComponentUtils';\r\nimport {getReactNodeTextContent} from '../../utils/JSXUtils';\r\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\r\nimport {Content} from '../content/Content';\r\nimport {IItemBoxProps} from '../itemBox/ItemBox';\r\nimport {clearListBoxOption} from '../listBox/ListBoxActions';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {ISelectButtonProps, ISelectOwnProps, ISelectProps, SelectConnected} from './SelectConnected';\r\nimport {SelectSelector} from './SelectSelector';\r\nimport * as styles from './styles/SingleSelect.scss';\r\n\r\nexport interface ISingleSelectOwnProps extends ISelectProps, IComponentBehaviour {\r\n    placeholder?: string;\r\n    toggleClasses?: string;\r\n    onSelectOptionCallback?: (option: string) => void;\r\n    items?: IItemBoxProps[];\r\n    buttonPrepend?: React.ReactNode;\r\n    noFixedWidth?: boolean;\r\n    canClear?: boolean;\r\n    deselectTooltipText?: string;\r\n    footer?: React.ReactNode;\r\n}\r\n\r\nconst selectPropsKeys = keys<ISelectOwnProps>();\r\n\r\nexport interface ISingleSelectStateProps {\r\n    selectedOption: string;\r\n}\r\n\r\nexport interface ISingleSelectDispatchProps {\r\n    deselect: () => void;\r\n}\r\n\r\nexport interface ISingleSelectProps\r\n    extends ISingleSelectOwnProps,\r\n        Partial<ISingleSelectStateProps>,\r\n        Partial<ISingleSelectDispatchProps> {}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: ISingleSelectOwnProps): ISingleSelectStateProps => {\r\n    const customSelected: string[] = SelectSelector.getListState(state, ownProps);\r\n    return {\r\n        selectedOption: customSelected.length\r\n            ? customSelected[customSelected.length - 1]\r\n            : SelectSelector.getListBoxSelected(state, ownProps)[0],\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: ISingleSelectOwnProps): ISingleSelectDispatchProps => ({\r\n    deselect: () => dispatch(clearListBoxOption(ownProps.id)),\r\n});\r\n\r\n@ReduxConnect(mapStateToProps, mapDispatchToProps)\r\nexport class SingleSelectConnected extends React.PureComponent<\r\n    ISingleSelectProps & React.ButtonHTMLAttributes<HTMLButtonElement>\r\n> {\r\n    static defaultProps: Partial<ISingleSelectOwnProps>;\r\n\r\n    componentDidUpdate(prevProps: ISingleSelectProps) {\r\n        if (prevProps.selectedOption !== this.props.selectedOption) {\r\n            this.props.onSelectOptionCallback?.(this.props.selectedOption);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <SelectConnected\r\n                {..._.pick(this.props, selectPropsKeys)}\r\n                button={this.getButton}\r\n                isLoading={this.props.isLoading}\r\n            >\r\n                {this.props.children}\r\n            </SelectConnected>\r\n        );\r\n    }\r\n\r\n    private getButton = (props: ISelectButtonProps): JSX.Element => {\r\n        const option = _.findWhere(this.props.items, {value: this.props.selectedOption});\r\n        const showClear = !!option && this.props.canClear && !this.props.disabled;\r\n        const buttonClasses = classNames('btn dropdown-toggle', this.props.toggleClasses, {\r\n            'dropdown-toggle-placeholder': !option,\r\n            [styles.singleSelectFixedWidth]: !this.props.noFixedWidth,\r\n            'mod-append': showClear,\r\n        });\r\n\r\n        return (\r\n            <button\r\n                className={buttonClasses}\r\n                type=\"button\"\r\n                onClick={props.onClick}\r\n                onKeyDown={props.onKeyDown}\r\n                onKeyUp={props.onKeyUp}\r\n                disabled={this.props.disabled}\r\n            >\r\n                {this.props.buttonPrepend}\r\n                {option && option.prepend ? <Content {...option.prepend} /> : null}\r\n                {this.getSelectedOptionElement(option)}\r\n                {option && option.append ? <Content {...option.append} /> : null}\r\n                <span className=\"dropdown-toggle-arrow\" />\r\n                {showClear && this.getDeselectOptionButton()}\r\n            </button>\r\n        );\r\n    };\r\n\r\n    private getSelectedOptionElement(option: IItemBoxProps): JSX.Element {\r\n        if (option) {\r\n            const displayValue =\r\n                option.selectedDisplayValue || getReactNodeTextContent(option.displayValue) || option.value;\r\n            return (\r\n                <span\r\n                    key={option.value}\r\n                    className=\"dropdown-selected-value flex-auto left-align\"\r\n                    data-value={option.value}\r\n                    title={displayValue}\r\n                >\r\n                    {displayValue}\r\n                </span>\r\n            );\r\n        }\r\n\r\n        return <span className=\"dropdown-no-value\">{this.props.placeholder}</span>;\r\n    }\r\n\r\n    private getDeselectOptionButton(): React.ReactNode {\r\n        return (\r\n            <Tooltip title={this.props.deselectTooltipText} placement=\"top\" noSpanWrapper onClick={this.handleDeselect}>\r\n                <Svg svgName={VaporSVG.svg.clear.name} svgClass=\"icon mod-12\" className=\"btn-append center-align\" />\r\n            </Tooltip>\r\n        );\r\n    }\r\n\r\n    private handleDeselect = () => {\r\n        if (!this.props.disabled) {\r\n            this.props.deselect();\r\n        }\r\n    };\r\n}\r\n\r\nSingleSelectConnected.defaultProps = {\r\n    placeholder: 'Select an option',\r\n    deselectTooltipText: 'Deselect',\r\n};\r\n","import * as React from 'react';\n\nexport const InputDescription: React.FunctionComponent = ({children}) => (\n    <section className=\"text-dark-medium-grey help-text\">{children}</section>\n);\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\nimport {Svg} from '../svg/Svg';\nimport {Tooltip} from '../tooltip/Tooltip';\nimport {InputDescription} from './InputDescription';\n\nexport interface ILabeledInputProps {\n    label?: React.ReactNode;\n    message?: React.ReactNode;\n    helpText?: React.ReactNode;\n    headerClassName?: string;\n    optionalInformation?: string;\n}\n\nexport const LabeledInput: React.FunctionComponent<ILabeledInputProps> = ({\n    children,\n    label,\n    message,\n    helpText: description,\n    headerClassName,\n    optionalInformation: information,\n}) => {\n    const header =\n        !!label || !!information ? (\n            <header className={classNames('label', 'text-light-blue', headerClassName)}>\n                {!!label ? <span>{label}</span> : null}\n                {!!information ? (\n                    <Tooltip title={information} placement={TooltipPlacement.Top} className=\"ml1\">\n                        <Svg svgName=\"info-14\" svgClass=\"icon fill-medium-grey\" />\n                    </Tooltip>\n                ) : null}\n            </header>\n        ) : null;\n\n    return (\n        <div className=\"labeled-input\">\n            {header}\n            {children}\n            {!!message && <InputDescription>{message}</InputDescription>}\n            {!!description && <InputDescription>{description}</InputDescription>}\n        </div>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {ToggleForm} from '../childForm/ToggleForm';\r\nimport {Radio} from './Radio';\r\n\r\nexport interface IRadioSelectOnChangeCallback {\r\n    onChange?: (value: string, id?: string, e?: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nexport interface IRadioSelectProps extends IRadioSelectOnChangeCallback {\r\n    id?: string;\r\n    name?: string;\r\n    className?: string;\r\n    value?: string;\r\n    disabled?: boolean;\r\n    disabledTooltip?: string;\r\n    children?: Array<React.ReactElement<Radio>> | Array<React.ReactElement<ToggleForm>>;\r\n    onChangeCallback?: (value: string, id?: string, e?: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nexport interface IRadioSelectConnectedProps {\r\n    valueOnMount?: string;\r\n    disabledValuesOnMount?: string[];\r\n}\r\n\r\nexport interface IRadioSelectDispatchProps extends IRadioSelectOnChangeCallback {\r\n    onMount?: (id: string, valueOnMount: string, disabledValues: string[]) => void;\r\n    onUnmount?: (id: string) => void;\r\n}\r\n\r\nexport interface IRadioSelectStateProps {\r\n    value?: string;\r\n    disabledValues?: string[];\r\n}\r\n\r\nexport interface IRadioSelectAllProps\r\n    extends IRadioSelectProps,\r\n        IRadioSelectConnectedProps,\r\n        IRadioSelectDispatchProps,\r\n        IRadioSelectStateProps {}\r\n\r\nexport class RadioSelect extends React.PureComponent<IRadioSelectAllProps> {\r\n    componentDidMount() {\r\n        this.props.onMount?.(this.props.id, this.props.valueOnMount, this.props.disabledValuesOnMount);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onUnmount?.(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.map(this.props.children, (child: React.ReactElement<any>) => {\r\n            return React.cloneElement(child, {\r\n                name: child.props.name || this.props.name,\r\n                checked: this.props.value === child.props.value,\r\n                disabled: this.isValueDisabled(child.props.value),\r\n                disabledTooltip: this.props.disabledTooltip,\r\n                onClick: (e: React.MouseEvent<HTMLElement>) => {\r\n                    child.props.onClick && child.props.onClick(e);\r\n                    this.handleToggle(child.props.value, e);\r\n                },\r\n            });\r\n        });\r\n\r\n        return <div className={classNames('form-control radio-select', this.props.className)}>{children}</div>;\r\n    }\r\n\r\n    private handleToggle(value: string, e: React.MouseEvent<HTMLElement>) {\r\n        this.props.onChange?.(value, this.props.id, e);\r\n        this.props.onChangeCallback?.(value, this.props.id, e);\r\n    }\r\n\r\n    private isValueDisabled(childValue: string): boolean {\r\n        return (\r\n            this.props.disabled || (!!this.props.disabledValues && _.contains(this.props.disabledValues, childValue))\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\ntype FormMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\r\n\r\nexport interface IFormProps {\r\n    title?: string;\r\n    className?: string;\r\n    mods?: FormMods | FormMods[];\r\n}\r\n\r\nexport const Form: React.FunctionComponent<IFormProps> = ({children, className, title, mods}) => {\r\n    return (\r\n        <fieldset className={classNames('coveo-form mb2 mt2 mod-padding-children', mods, className)}>\r\n            {title && <h2 className=\"text-medium-blue mb2\">{title}</h2>}\r\n            {children}\r\n        </fieldset>\r\n    );\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {IInputProps, Input} from '../input/Input';\r\n\r\nexport class Radio extends Input {\r\n    static defaultProps: Partial<IInputProps> = {\r\n        ...Input.defaultProps,\r\n        checked: false,\r\n        disabled: false,\r\n    };\r\n\r\n    render() {\r\n        const classes: string = classNames('radio-option', this.props.classes);\r\n        return <Input {...this.props} classes={[classes]} type=\"radio\" />;\r\n    }\r\n}\r\n"],"sourceRoot":""}