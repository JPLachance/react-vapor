{"version":3,"sources":["webpack:///./src/components/editor/examples/CodeEditorExamples.tsx?5ea5","webpack:///./src/components/editor/EditorConstants.ts?ac90","webpack:///./src/components/editor/CodeEditor.tsx?c19e"],"names":["render","className","value","mode","Python","readOnly","onChange","code","alert","CodeMirrorGutters","LineNumbers","FoldGutter","LintMarkers","CodeMirrorModes","JSON","XML","props","state","codemirror","componentDidMount","this","onMount","current","componentDidUpdate","prevProps","editor","setState","getDoc","clearHistory","ref","editorDidMount","addExtraKeywords","onBeforeChange","data","handleChange","options","CodeEditor","Options","removeCursorWhenEditorIsReadOnly","extraKeywords","name","hintWords","concat","defaultProps","lineNumbers","foldGutter","lint","gutters","extraKeys"],"mappings":"0eAIA,2B,+CAqBA,OArBwC,OACpC,YAAAA,OAAA,WACI,OACI,uBAAKC,UAAU,OACX,uBAAKA,UAAU,cACX,yBAAOA,UAAU,sBAAoB,gCACrC,gBAAC,IAAU,CAACC,MAAM,GAAGC,KAAM,IAAgBC,UAG/C,uBAAKH,UAAU,cACX,yBAAOA,UAAU,sBAAoB,iDACrC,gBAAC,IAAU,CAACC,MAAM,GAAGC,KAAM,IAAgBC,OAAQC,UAAQ,KAG/D,uBAAKJ,UAAU,cACX,yBAAOA,UAAU,sBAAoB,yDACrC,gBAAC,IAAU,CAACC,MAAM,GAAGC,KAAM,IAAgBC,OAAQE,SAAU,SAACC,GAAiB,OAAAC,MAAMD,SAKzG,EArBA,CAAwC,c,iCCJxC,oEAAO,IAAME,EAAoB,CAC7BC,YAAa,yBACbC,WAAY,wBACZC,YAAa,2BAGJC,EAAkB,CAC3BC,KAAM,mBACNC,IAAK,MACLX,OAAQ,W,8eCuBZ,cAmBI,WAAYY,EAAyBC,GAArC,MACI,YAAMD,EAAOC,IAAM,K,OAJf,EAAAC,WAAa,cAMjB,EAAKD,MAAQ,CACTf,MAAOc,EAAMd,O,EAqDzB,OA5EgC,OA2B5B,YAAAiB,kBAAA,W,QACsB,QAAlB,KAAAC,KAAKJ,OAAMK,eAAO,gBAAGD,KAAKF,WAAWI,UAGzC,YAAAC,mBAAA,SAAmBC,GACXA,EAAUtB,QAAUkB,KAAKJ,MAAMd,OAASkB,KAAKK,SAC7CL,KAAKM,SAAS,CAACxB,MAAOkB,KAAKJ,MAAMd,QACjCkB,KAAKK,OAAOE,SAASC,iBAI7B,YAAA5B,OAAA,sBACI,OACI,gBAAC,aAA0B,CACvB6B,IAAKT,KAAKF,WACVY,eAAgB,SAACL,GACb,EAAKA,OAASA,EACd,EAAKM,oBAETC,eAAgB,SAACP,EAAQQ,EAAM/B,GAC3B,EAAKwB,SAAS,CAACxB,MAAK,KAExBA,MAAOkB,KAAKH,MAAMf,MAClBI,SAAU,SAACmB,EAAQQ,EAAM/B,GAAkB,SAAKgC,aAAahC,IAC7DiC,QAAS,SAAS,GAAIC,EAAWC,QAAS,CACtChC,SAAUe,KAAKkB,mCACfnC,KAAMiB,KAAKJ,MAAMb,OAErBF,UAAWmB,KAAKJ,MAAMf,aAK1B,YAAAqC,iCAAR,WACI,OAAOlB,KAAKJ,MAAMX,SAAW,WAAae,KAAKJ,MAAMX,UAGjD,YAAA6B,aAAR,SAAqB3B,G,QACE,QAAnB,KAAAa,KAAKJ,OAAMV,gBAAQ,gBAAGC,IAGlB,YAAAwB,iBAAR,WACI,GAAIX,KAAKJ,MAAMuB,cAAe,CAC1B,IAAMpC,EAAeiB,KAAKJ,MAAMb,KAAKqC,MAAQpB,KAAKJ,MAAMb,KACvD,UAA2BsC,UAAUtC,GAAS,UAA2BsC,UAAUtC,GAAMuC,OACtFtB,KAAKJ,MAAMuB,iBAvEhB,EAAAI,aAA0C,CAC7C1C,UAAW,cAGR,EAAAoC,QAA0C,CAC7CO,aAAa,EACbC,YAAY,EACZC,MAAM,EACNC,QAAS,CAAC,IAAkBrC,YAAa,IAAkBC,WAAY,IAAkBC,aACzFoC,UAAW,CACP,aAAc,eACd,QAAS,mBAgErB,EA5EA,CAAgC","file":"assets/998.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {CodeEditor} from '../CodeEditor';\r\nimport {CodeMirrorModes} from '../EditorConstants';\r\n\r\nexport class CodeEditorExamples extends React.Component<{}, {}> {\r\n    render() {\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Code Editor using codemirror</label>\r\n                    <CodeEditor value=\"\" mode={CodeMirrorModes.Python} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Code Editor using codemirror in readonly mode</label>\r\n                    <CodeEditor value=\"\" mode={CodeMirrorModes.Python} readOnly />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Code Editor using codemirror with an action on change</label>\r\n                    <CodeEditor value=\"\" mode={CodeMirrorModes.Python} onChange={(code: string) => alert(code)} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export const CodeMirrorGutters = {\r\n    LineNumbers: 'CodeMirror-linenumbers',\r\n    FoldGutter: 'CodeMirror-foldgutter',\r\n    LintMarkers: 'CodeMirror-lint-markers',\r\n};\r\n\r\nexport const CodeMirrorModes = {\r\n    JSON: 'application/json',\r\n    XML: 'xml',\r\n    Python: 'python',\r\n};\r\n","import 'codemirror/addon/dialog/dialog';\r\nimport 'codemirror/addon/dialog/dialog.css';\r\nimport 'codemirror/addon/hint/anyword-hint';\r\nimport 'codemirror/addon/hint/show-hint';\r\nimport 'codemirror/addon/hint/show-hint.css';\r\nimport 'codemirror/addon/search/jump-to-line';\r\nimport 'codemirror/addon/search/matchesonscrollbar';\r\nimport 'codemirror/addon/search/search';\r\nimport 'codemirror/mode/python/python';\r\n\r\nimport * as CodeMirror from 'codemirror';\r\nimport * as React from 'react';\r\nimport * as ReactCodeMirror from 'react-codemirror2';\r\nimport * as _ from 'underscore';\r\n\r\nimport {CodeMirrorGutters} from './EditorConstants';\r\n\r\nexport interface ICodeEditorProps {\r\n    value: string;\r\n    readOnly?: boolean;\r\n    onChange?: (code: string) => void;\r\n    onMount?: (codemirror: ReactCodeMirror.Controlled) => void;\r\n    errorMessage?: string;\r\n    mode: any; // string or object ex.: {name: \"javascript\", json: true}\r\n    extraKeywords?: string[];\r\n    className?: string;\r\n}\r\n\r\nexport interface CodeEditorState {\r\n    value: string;\r\n}\r\n\r\nexport class CodeEditor extends React.Component<ICodeEditorProps, CodeEditorState> {\r\n    static defaultProps: Partial<ICodeEditorProps> = {\r\n        className: 'mod-border',\r\n    };\r\n\r\n    static Options: CodeMirror.EditorConfiguration = {\r\n        lineNumbers: true,\r\n        foldGutter: true,\r\n        lint: true,\r\n        gutters: [CodeMirrorGutters.LineNumbers, CodeMirrorGutters.FoldGutter, CodeMirrorGutters.LintMarkers],\r\n        extraKeys: {\r\n            'Ctrl-Space': 'autocomplete',\r\n            'Alt-F': 'findPersistent',\r\n        },\r\n    };\r\n\r\n    private codemirror = React.createRef<ReactCodeMirror.Controlled>();\r\n    private editor: ReactCodeMirror.IInstance;\r\n\r\n    constructor(props: ICodeEditorProps, state: CodeEditorState) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            value: props.value,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onMount?.(this.codemirror.current);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ICodeEditorProps) {\r\n        if (prevProps.value !== this.props.value && this.editor) {\r\n            this.setState({value: this.props.value});\r\n            this.editor.getDoc().clearHistory();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ReactCodeMirror.Controlled\r\n                ref={this.codemirror}\r\n                editorDidMount={(editor: ReactCodeMirror.IInstance) => {\r\n                    this.editor = editor;\r\n                    this.addExtraKeywords();\r\n                }}\r\n                onBeforeChange={(editor, data, value: string) => {\r\n                    this.setState({value});\r\n                }}\r\n                value={this.state.value}\r\n                onChange={(editor, data, value: string) => this.handleChange(value)}\r\n                options={_.extend({}, CodeEditor.Options, {\r\n                    readOnly: this.removeCursorWhenEditorIsReadOnly(),\r\n                    mode: this.props.mode,\r\n                })}\r\n                className={this.props.className}\r\n            />\r\n        );\r\n    }\r\n\r\n    private removeCursorWhenEditorIsReadOnly() {\r\n        return this.props.readOnly ? 'nocursor' : this.props.readOnly;\r\n    }\r\n\r\n    private handleChange(code: string) {\r\n        this.props.onChange?.(code);\r\n    }\r\n\r\n    private addExtraKeywords() {\r\n        if (this.props.extraKeywords) {\r\n            const mode: string = this.props.mode.name || this.props.mode;\r\n            (CodeMirror as any).helpers.hintWords[mode] = (CodeMirror as any).helpers.hintWords[mode].concat(\r\n                this.props.extraKeywords\r\n            );\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}