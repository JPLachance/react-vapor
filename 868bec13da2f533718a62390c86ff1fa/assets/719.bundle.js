(window.webpackJsonp=window.webpackJsonp||[]).push([[719],{1807:function(r,s,t){"use strict";t.r(s),s.default="import {shallow} from 'enzyme';\r\nimport * as React from 'react';\r\nimport {range} from 'underscore';\r\nimport {JSXRenderable} from '../../utils/JSXUtils';\r\nimport {ISplitLayoutProps, SplitLayout} from './SplitLayout';\r\n\r\ndescribe('SplitLayout', () => {\r\n    const testClassesString = 'some classes';\r\n    const testClassesArray = ['some', 'classes'];\r\n\r\n    const basicProps: ISplitLayoutProps = {\r\n        leftChildren: <div className=\"left\"></div>,\r\n        rightChildren: <div className=\"right\"></div>,\r\n    };\r\n\r\n    it('should render without error with basic props and one child on each side', () => {\r\n        expect(() => shallow(<SplitLayout {...basicProps} />)).not.toThrow();\r\n    });\r\n\r\n    it('should render without error with basic props and multiple children on each side', () => {\r\n        const leftChildren = range(2).map(() => basicProps.leftChildren) as JSXRenderable;\r\n        const rightChildren = range(2).map(() => basicProps.rightChildren) as JSXRenderable;\r\n        expect(() => shallow(<SplitLayout leftChildren={leftChildren} rightChildren={rightChildren} />)).not.toThrow();\r\n    });\r\n\r\n    it('should render without error with basic props and extra classes as string on containers', () => {\r\n        expect(() =>\r\n            shallow(\r\n                <SplitLayout\r\n                    {...basicProps}\r\n                    className={testClassesString}\r\n                    leftContainerClassName={testClassesString}\r\n                    rightContainerClassName={testClassesString}\r\n                />\r\n            )\r\n        ).not.toThrow();\r\n    });\r\n\r\n    it('should render without error with basic props and extra classes as array on containers', () => {\r\n        expect(() =>\r\n            shallow(\r\n                <SplitLayout\r\n                    {...basicProps}\r\n                    className={testClassesArray}\r\n                    leftContainerClassName={testClassesArray}\r\n                    rightContainerClassName={testClassesArray}\r\n                />\r\n            )\r\n        ).not.toThrow();\r\n    });\r\n\r\n    describe('SplitLayout Content', () => {\r\n        it('should render with a left child in first column and a right child in right column', () => {\r\n            const splitLayout = shallow(<SplitLayout {...basicProps} />);\r\n\r\n            expect(\r\n                splitLayout\r\n                    .find('.column')\r\n                    .first()\r\n                    .find('.left').length\r\n            ).toBe(1);\r\n            expect(\r\n                splitLayout\r\n                    .find('.column')\r\n                    .last()\r\n                    .find('.right').length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should render with left children in first column and right children in right column with multiple children', () => {\r\n            const leftChildren = range(2).map(() => basicProps.leftChildren) as JSXRenderable;\r\n            const rightChildren = range(2).map(() => basicProps.rightChildren) as JSXRenderable;\r\n            const splitLayout = shallow(<SplitLayout leftChildren={leftChildren} rightChildren={rightChildren} />);\r\n\r\n            expect(\r\n                splitLayout\r\n                    .find('.column')\r\n                    .first()\r\n                    .html()\r\n                    .match(/left/g).length\r\n            ).toBe(2);\r\n            expect(\r\n                splitLayout\r\n                    .find('.column')\r\n                    .last()\r\n                    .html()\r\n                    .match(/right/g).length\r\n            ).toBe(2);\r\n        });\r\n\r\n        it('should render with extra classes on container if passed in props as string', () => {\r\n            const splitLayout = shallow(<SplitLayout {...basicProps} className={testClassesString} />);\r\n            testClassesString.split(' ').forEach((testClass) => {\r\n                expect(splitLayout.find('.split-layout').hasClass(testClass)).toBe(true);\r\n            });\r\n        });\r\n\r\n        it('should render with extra classes on container if passed in props as array', () => {\r\n            const splitLayout = shallow(<SplitLayout {...basicProps} className={testClassesArray} />);\r\n            testClassesArray.forEach((testClass) => {\r\n                expect(splitLayout.find('.split-layout').hasClass(testClass)).toBe(true);\r\n            });\r\n        });\r\n\r\n        it('should render with extra classes on left children container if passed in props as string', () => {\r\n            const splitLayout = shallow(<SplitLayout {...basicProps} leftContainerClassName={testClassesString} />);\r\n            testClassesString.split(' ').forEach((testClass) => {\r\n                expect(\r\n                    splitLayout\r\n                        .find('.column')\r\n                        .first()\r\n                        .hasClass(testClass)\r\n                ).toBe(true);\r\n            });\r\n        });\r\n\r\n        it('should render with extra classes on left children container if passed in props as array', () => {\r\n            const splitLayout = shallow(<SplitLayout {...basicProps} leftContainerClassName={testClassesArray} />);\r\n            testClassesArray.forEach((testClass) => {\r\n                expect(\r\n                    splitLayout\r\n                        .find('.column')\r\n                        .first()\r\n                        .hasClass(testClass)\r\n                ).toBe(true);\r\n            });\r\n        });\r\n\r\n        it('should render with extra classes on right children container if passed in props as string', () => {\r\n            const splitLayout = shallow(<SplitLayout {...basicProps} rightContainerClassName={testClassesString} />);\r\n            testClassesString.split(' ').forEach((testClass) => {\r\n                expect(\r\n                    splitLayout\r\n                        .find('.column')\r\n                        .last()\r\n                        .hasClass(testClass)\r\n                ).toBe(true);\r\n            });\r\n        });\r\n\r\n        it('should render with extra classes on right children container if passed in props as array', () => {\r\n            const splitLayout = shallow(<SplitLayout {...basicProps} rightContainerClassName={testClassesArray} />);\r\n            testClassesArray.forEach((testClass) => {\r\n                expect(\r\n                    splitLayout\r\n                        .find('.column')\r\n                        .last()\r\n                        .hasClass(testClass)\r\n                ).toBe(true);\r\n            });\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=719.bundle.js.map