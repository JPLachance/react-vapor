{"version":3,"sources":["webpack:///./src/components/checkbox/examples/CheckboxExamples.tsx?cb24","webpack:///./src/components/input/Input.tsx?1d15","webpack:///./src/components/input/Label.tsx?dafb","webpack:///./src/utils/PropsToOmitUtils.ts?e979","webpack:///./src/components/input/InputDescription.tsx?8553","webpack:///./src/components/input/LabeledInput.tsx?95a1","webpack:///./src/components/checkbox/Checkbox.tsx?f70c","webpack:///./src/components/checkbox/CheckboxSelectors.ts?36c9","webpack:///./src/components/checkbox/CheckboxConnected.ts?a6f3","webpack:///./src/components/checkbox/GroupableCheckboxConnected.tsx?54dd"],"names":["CheckboxExamples","Checkboxset","GroupableCheckboxConnectedExamples","description","checked","setChecked","title","level","label","id","clearSides","defaultChecked","disabled","indeterminate","onClick","isParent","parentId1","parentId","name","enabled","dispatch","undefined","defaultDisabled","parentId2","validatedInputTypes","inputPropsToOmit","props","state","valid","componentWillMount","this","onRender","validOnMount","validateOnMount","validate","defaultValue","disabledOnMount","componentWillUnmount","onDestroy","componentDidUpdate","prevProps","value","innerInput","reset","getInnerValue","setState","handleBlur","onBlur","handleChange","onChange","validOnChange","validateOnChange","handleClick","e","handleKeyUp","event","onKeyUp","getLabel","labelProps","labelTitle","key","htmlFor","render","classes","type","innerInputClasses","invalid","inputElements","className","ref","min","minimum","max","maximum","input","children","disabledTooltip","placement","Right","defaultProps","required","validMessage","invalidMessage","attributes","internalComponentPropsToOmit","PropsToOmitUtils","internal","InputDescription","LabeledInput","message","helpText","headerClassName","optionalInformation","header","information","Top","svgName","svgClass","componentDidMount","updateIndeterminate","getElementsByTagName","length","handleOnClick","preventDefault","stopPropagation","readOnly","CheckboxSelectors","getIsSelected","checkboxes","checkbox","CheckboxConnected","ownProps","mergeProps","GroupableCheckboxConnected","groupableCheckboxesState","groupableCheckboxes","parent","nbChecked","total"],"mappings":"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","file":"assets/963.bundle.js","sourcesContent":["import * as React from 'react';\n\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\nimport {ExamplesStore} from '../../../../docs/Store';\nimport {Button} from '../../button/Button';\nimport {Label} from '../../input/Label';\nimport {LabeledInput} from '../../input/LabeledInput';\nimport {Section} from '../../section/Section';\nimport {Checkbox} from '../Checkbox';\nimport {CheckboxConnected} from '../CheckboxConnected';\nimport {toggleDisabledAllGroupedCheckbox} from '../GroupableCheckboxActions';\nimport {GroupableCheckboxConnected} from '../GroupableCheckboxConnected';\n\nexport const CheckboxExamples: ExampleComponent = () => (\n    <Section>\n        <Checkboxset />\n        <GroupableCheckboxConnectedExamples />\n    </Section>\n);\n\nCheckboxExamples.description = 'Checkboxes allow users to select multiple options from a set.';\n\n// start-print\n\nconst Checkboxset: React.FunctionComponent = () => {\n    const [checked, setChecked] = React.useState(false);\n\n    return (\n        <Section title=\"Checkbox set\">\n            <Section level={2} title=\"Checkboxes with labels\">\n                <LabeledInput label=\"The label of the checkbox set\">\n                    <CheckboxConnected id=\"checkbox1\" clearSides>\n                        <Label>An unchecked checkbox</Label>\n                    </CheckboxConnected>\n                    <CheckboxConnected id=\"checkbox2\" defaultChecked={true} clearSides>\n                        <Label>A checked checkbox</Label>\n                    </CheckboxConnected>\n                    <CheckboxConnected id=\"checkbox3\" disabled={true} clearSides>\n                        <Label>A force disabled checkbox</Label>\n                    </CheckboxConnected>\n                    <CheckboxConnected id=\"checkbox4\" indeterminate={true} clearSides>\n                        <Label>A force checked and indeterminate (partially selected) checkbox</Label>\n                    </CheckboxConnected>\n                    <Checkbox id=\"checkbox5\" checked={checked} onClick={() => setChecked(!checked)}>\n                        <Label>A checkbox with local state</Label>\n                    </Checkbox>\n                </LabeledInput>\n            </Section>\n            <Section level={2}>\n                <LabeledInput label=\"A checkbox with no label\">\n                    <CheckboxConnected id=\"checkbox-nolabel\" />\n                </LabeledInput>\n            </Section>\n        </Section>\n    );\n};\n\nconst GroupableCheckboxConnectedExamples: React.FunctionComponent = () => {\n    const toggleDisabledAllCheckboxes = (id: string, disabled?: boolean) => {\n        ExamplesStore.dispatch(toggleDisabledAllGroupedCheckbox(id, undefined, disabled));\n    };\n    const parentId1 = 'parentId1';\n    const parentId2 = 'parentId2';\n\n    return (\n        <Section level={2} title=\"Groupable Checkboxes\">\n            <Section>\n                <LabeledInput label=\"A groupable checkbox with some child checkboxes selected by default\">\n                    <GroupableCheckboxConnected id={parentId1} isParent clearSides>\n                        <Label>A parent checkbox connected</Label>\n                    </GroupableCheckboxConnected>\n                    <GroupableCheckboxConnected id={parentId1 + 1} parentId={parentId1} defaultChecked={true}>\n                        <Label>Checkbox child 1</Label>\n                    </GroupableCheckboxConnected>\n                    <GroupableCheckboxConnected id={parentId1 + 2} parentId={parentId1} defaultChecked={false}>\n                        <Label>Checkbox child 2</Label>\n                    </GroupableCheckboxConnected>\n                    <GroupableCheckboxConnected id={parentId1 + 3} parentId={parentId1} defaultChecked={true}>\n                        <Label>Checkbox child 3</Label>\n                    </GroupableCheckboxConnected>\n                    <GroupableCheckboxConnected id={parentId1 + 4} parentId={parentId1} defaultChecked={false}>\n                        <Label>Checkbox child 4</Label>\n                    </GroupableCheckboxConnected>\n                </LabeledInput>\n                <br />\n            </Section>\n            <Section>\n                <LabeledInput label=\"A groupable checkbox with all checkboxes disabled or enabled\">\n                    <div>\n                        <Button\n                            name={'Toggle checkboxes'}\n                            enabled\n                            onClick={() => toggleDisabledAllCheckboxes(parentId2)}\n                        />\n                    </div>\n                    <GroupableCheckboxConnected id={parentId2} isParent defaultDisabled clearSides>\n                        <Label>A parent checkbox connected</Label>\n                    </GroupableCheckboxConnected>\n                    <GroupableCheckboxConnected\n                        id={parentId2 + 1}\n                        parentId={parentId2}\n                        defaultChecked={true}\n                        defaultDisabled\n                    >\n                        <Label>Checkbox child 1</Label>\n                    </GroupableCheckboxConnected>\n                    <GroupableCheckboxConnected\n                        id={parentId2 + 2}\n                        parentId={parentId2}\n                        defaultChecked={false}\n                        defaultDisabled\n                    >\n                        <Label>Checkbox child 2</Label>\n                    </GroupableCheckboxConnected>\n                    <GroupableCheckboxConnected\n                        id={parentId2 + 3}\n                        parentId={parentId2}\n                        defaultChecked={true}\n                        defaultDisabled\n                    >\n                        <Label>Checkbox child 3</Label>\n                    </GroupableCheckboxConnected>\n                    <GroupableCheckboxConnected\n                        id={parentId2 + 4}\n                        parentId={parentId2}\n                        defaultChecked={false}\n                        defaultDisabled\n                    >\n                        <Label>Checkbox child 4</Label>\n                    </GroupableCheckboxConnected>\n                </LabeledInput>\n            </Section>\n        </Section>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\nimport {contains, isUndefined, uniqueId} from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {PropsToOmitUtils} from '../../utils/PropsToOmitUtils';\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IInputState} from './InputReducers';\r\nimport {ILabelProps, Label} from './Label';\r\n\r\nconst validatedInputTypes: string[] = ['number', 'text', 'password'];\r\n\r\ntype IInputNativeTagOwnProps = Omit<\r\n    React.AllHTMLAttributes<HTMLInputElement>,\r\n    'defaultValue' | 'onClick' | 'onChange' | 'onBlur' | 'value'\r\n>;\r\n\r\nexport interface IInputAdditionalOwnProps {\r\n    id?: string;\r\n    classes?: IClassName;\r\n    innerInputClasses?: IClassName;\r\n    validate?: (value: any) => boolean;\r\n    labelTitle?: React.ReactNode;\r\n    labelProps?: ILabelProps;\r\n    validateOnChange?: boolean;\r\n    disabledOnMount?: boolean;\r\n    validateOnMount?: boolean;\r\n    disabledTooltip?: string;\r\n    minimum?: number /* @deprecated use min instead */;\r\n    maximum?: number /* @deprecated use max instead */;\r\n    onBlur?: (value: string) => void;\r\n    defaultValue?: string;\r\n}\r\n\r\nexport interface IInputNativeTagStateProps {\r\n    value?: string;\r\n    checked?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IInputAdditionalStateProps {\r\n    valid?: boolean;\r\n    indeterminate?: boolean;\r\n}\r\n\r\nexport interface IInputStateProps extends IInputNativeTagStateProps, IInputAdditionalStateProps {}\r\n\r\nexport interface IInputDispatchProps {\r\n    onDestroy?: () => void;\r\n    onRender?: (value?: string, valid?: boolean, disabled?: boolean) => void;\r\n    onChange?: (value?: string, valid?: boolean) => void;\r\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nconst inputPropsToOmit = keys<IInputAdditionalOwnProps & IInputAdditionalStateProps & IInputDispatchProps>();\r\n\r\nexport interface IInputOwnProps extends IInputAdditionalOwnProps, IInputNativeTagOwnProps {}\r\n\r\nexport interface IInputProps extends IInputOwnProps, Partial<IInputStateProps>, Partial<IInputDispatchProps> {}\r\n\r\nexport interface IInputComponentState {\r\n    valid: boolean;\r\n}\r\n\r\nexport class Input extends React.Component<IInputProps, IInputComponentState> {\r\n    private innerInput: HTMLInputElement;\r\n\r\n    static defaultProps: Partial<IInputProps> = {\r\n        id: uniqueId('input'),\r\n        type: 'text',\r\n        valid: true,\r\n        labelTitle: '',\r\n        required: true,\r\n    };\r\n\r\n    constructor(props: IInputProps, state: IInputState) {\r\n        super(props, state);\r\n        this.state = {\r\n            valid: this.props.valid,\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            // undefined validOnMount will default to true in the state\r\n            const validOnMount =\r\n                this.props.validateOnMount && this.props.validate && this.props.validate(this.props.defaultValue || '');\r\n\r\n            this.props.onRender(this.props.defaultValue, validOnMount, this.props.disabledOnMount);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IInputProps) {\r\n        if (this.props.valid !== prevProps.valid) {\r\n            this.validate();\r\n        }\r\n\r\n        if (prevProps.value !== this.props.value && this.innerInput) {\r\n            this.innerInput.value = this.props.value;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.innerInput.value = '';\r\n    }\r\n\r\n    getInnerValue(): string {\r\n        return (this.innerInput && this.innerInput.value) || '';\r\n    }\r\n\r\n    validate() {\r\n        this.setState({\r\n            valid: this.props.valid && !(this.props.validate && !this.props.validate(this.getInnerValue())),\r\n        });\r\n    }\r\n\r\n    private handleBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(this.getInnerValue());\r\n        }\r\n    }\r\n\r\n    private handleChange() {\r\n        if (this.props.onChange) {\r\n            const validOnChange =\r\n                this.props.validateOnChange && this.props.validate && this.props.validate(this.getInnerValue());\r\n            this.props.onChange(this.getInnerValue(), validOnChange);\r\n        }\r\n    }\r\n\r\n    private handleClick(e: React.MouseEvent<HTMLElement>) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n\r\n    private handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(event);\r\n        }\r\n    }\r\n\r\n    private getLabel(): React.ReactNode {\r\n        const {labelProps, labelTitle} = this.props;\r\n        if (typeof labelTitle === 'string') {\r\n            return labelTitle || this.props.validate ? (\r\n                <Label key={this.props.id + 'label'} htmlFor={this.props.id} {...labelProps}>\r\n                    {labelTitle}\r\n                </Label>\r\n            ) : null;\r\n        } else {\r\n            return labelTitle;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames(\r\n            'input-wrapper validate',\r\n            {\r\n                'input-field': contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.classes\r\n        );\r\n        const innerInputClasses = classNames(\r\n            {\r\n                invalid: !this.state.valid && contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.innerInputClasses\r\n        );\r\n\r\n        const inputElements = [\r\n            <input\r\n                key={this.props.id}\r\n                id={this.props.id}\r\n                className={innerInputClasses}\r\n                defaultValue={!isUndefined(this.props.value) ? this.props.value : this.props.defaultValue}\r\n                ref={(innerInput: HTMLInputElement) => (this.innerInput = innerInput)}\r\n                onBlur={() => this.handleBlur()}\r\n                onChange={() => this.handleChange()}\r\n                onKeyUp={(event: React.KeyboardEvent<HTMLInputElement>) => this.handleKeyUp(event)}\r\n                min={this.props.minimum}\r\n                max={this.props.maximum}\r\n                {..._.omit(this.props, [...PropsToOmitUtils.input, ...inputPropsToOmit])}\r\n            />,\r\n            this.getLabel(),\r\n            this.props.children,\r\n        ];\r\n\r\n        return this.props.disabled && this.props.disabledTooltip ? (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                <Tooltip title={this.props.disabledTooltip} placement={TooltipPlacement.Right}>\r\n                    {inputElements}\r\n                </Tooltip>\r\n            </div>\r\n        ) : (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                {inputElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ILabelProps {\r\n    type?: string;\r\n    classes?: string[];\r\n    validMessage?: string;\r\n    invalidMessage?: string;\r\n}\r\n\r\nexport class Label extends React.Component<ILabelProps & React.HTMLProps<HTMLLabelElement>, any> {\r\n    render() {\r\n        const classes = classNames(this.props.classes);\r\n        const {validMessage, invalidMessage, children, ...attributes} = this.props;\r\n        return (\r\n            <label\r\n                className={classes}\r\n                data-valid-message={validMessage}\r\n                data-invalid-message={invalidMessage}\r\n                {...attributes}\r\n            >\r\n                {children}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","const internalComponentPropsToOmit: string[] = ['children', 'dangerouslySetInnerHTML'];\r\n\r\n// We omit those props for the input native tag because those props are reserved for the Input component and\r\n// to stay compatible with the old interface\r\nconst inputTagPropsToOmit: string[] = [\r\n    ...internalComponentPropsToOmit,\r\n    'defaultValue',\r\n    'onClick',\r\n    'onChange',\r\n    'onBlur',\r\n    'value',\r\n    'valid',\r\n];\r\n\r\nexport const PropsToOmitUtils = {\r\n    internal: internalComponentPropsToOmit,\r\n    input: inputTagPropsToOmit,\r\n};\r\n","import * as React from 'react';\n\nexport const InputDescription: React.FunctionComponent = ({children}) => (\n    <section className=\"text-dark-medium-grey help-text\">{children}</section>\n);\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\nimport {Svg} from '../svg/Svg';\nimport {Tooltip} from '../tooltip/Tooltip';\nimport {InputDescription} from './InputDescription';\n\nexport interface ILabeledInputProps {\n    label?: React.ReactNode;\n    message?: React.ReactNode;\n    helpText?: React.ReactNode;\n    headerClassName?: string;\n    optionalInformation?: string;\n}\n\nexport const LabeledInput: React.FunctionComponent<ILabeledInputProps> = ({\n    children,\n    label,\n    message,\n    helpText: description,\n    headerClassName,\n    optionalInformation: information,\n}) => {\n    const header =\n        !!label || !!information ? (\n            <header className={classNames('label', 'text-light-blue', headerClassName)}>\n                {!!label ? <span>{label}</span> : null}\n                {!!information ? (\n                    <Tooltip title={information} placement={TooltipPlacement.Top} className=\"ml1\">\n                        <Svg svgName=\"info-14\" svgClass=\"icon fill-medium-grey\" />\n                    </Tooltip>\n                ) : null}\n            </header>\n        ) : null;\n\n    return (\n        <div className=\"labeled-input\">\n            {header}\n            {children}\n            {!!message && <InputDescription>{message}</InputDescription>}\n            {!!description && <InputDescription>{description}</InputDescription>}\n        </div>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport {IInputProps, Input} from '../input/Input';\r\n\r\nexport interface ICheckboxOwnProps {\r\n    handleOnClick?: (isChecked: boolean) => void;\r\n    clearSides?: boolean;\r\n}\r\n\r\nexport interface ICheckboxStateProps {\r\n    defaultDisabled?: boolean;\r\n}\r\n\r\nexport interface ICheckboxProps extends ICheckboxOwnProps, ICheckboxStateProps, IInputProps {}\r\n\r\nexport class Checkbox extends React.Component<ICheckboxProps> {\r\n    componentDidMount() {\r\n        this.updateIndeterminate();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updateIndeterminate();\r\n    }\r\n\r\n    private updateIndeterminate() {\r\n        const inputElements = (ReactDOM.findDOMNode(this) as Element).getElementsByTagName('input');\r\n        if (inputElements.length) {\r\n            inputElements[0].indeterminate = !!this.props.indeterminate;\r\n        }\r\n    }\r\n\r\n    private handleOnClick(e: React.MouseEvent<HTMLElement>) {\r\n        if (!this.props.disabled) {\r\n            if (this.props.onClick) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.props.onClick(e);\r\n            }\r\n            if (this.props.handleOnClick) {\r\n                this.props.handleOnClick(this.props.checked);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes: string = classNames(\r\n            'coveo-checkbox-label',\r\n            {disabled: !!this.props.disabled, 'checkbox-clear': this.props.clearSides},\r\n            this.props.classes\r\n        );\r\n        const innerInputClasses: string = classNames(\r\n            'coveo-checkbox',\r\n            'react-vapor-checkbox',\r\n            this.props.innerInputClasses\r\n        );\r\n        return (\r\n            <Input\r\n                {...this.props}\r\n                classes={[classes]}\r\n                innerInputClasses={[innerInputClasses]}\r\n                type=\"checkbox\"\r\n                onClick={(e: React.MouseEvent<HTMLElement>) => this.handleOnClick(e)}\r\n                readOnly\r\n            >\r\n                <button type=\"button\" disabled={!!this.props.disabled}></button>\r\n                {this.props.children}\r\n            </Input>\r\n        );\r\n    }\r\n}\r\n","import {createSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {ICheckboxState} from './CheckboxReducers';\r\n\r\nconst get = (state: IReactVaporState, {id}: {id: string}) => {\r\n    return _.findWhere(state.checkboxes, {id});\r\n};\r\n\r\nconst getIsSelected = createSelector(get, (checkbox: ICheckboxState): boolean => checkbox && checkbox.checked);\r\n\r\nexport const CheckboxSelectors = {\r\n    getIsSelected,\r\n};\r\n","import {connect} from 'react-redux';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IInputDispatchProps, IInputOwnProps, IInputStateProps} from '../input/Input';\r\nimport {Checkbox, ICheckboxProps} from './Checkbox';\r\nimport {addCheckbox, ICheckboxActionPayload, removeCheckbox, toggleCheckbox} from './CheckboxActions';\r\nimport {CheckboxSelectors} from './CheckboxSelectors';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IInputOwnProps): IInputStateProps => ({\r\n    checked: CheckboxSelectors.getIsSelected(state, {id: ownProps.id}),\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<ICheckboxActionPayload>) => void,\r\n    ownProps: IInputOwnProps\r\n): IInputDispatchProps => {\r\n    return {\r\n        onRender: () => dispatch(addCheckbox(ownProps.id, ownProps.defaultChecked)),\r\n        onDestroy: () => dispatch(removeCheckbox(ownProps.id)),\r\n        onClick: (e: React.MouseEvent<HTMLElement>) => dispatch(toggleCheckbox(ownProps.id)),\r\n    };\r\n};\r\n\r\nexport const CheckboxConnected: React.ComponentClass<ICheckboxProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Checkbox);\r\n","import {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IInputDispatchProps, IInputStateProps} from '../input/Input';\r\nimport {Checkbox, ICheckboxProps} from './Checkbox';\r\nimport {ICheckboxState} from './CheckboxReducers';\r\nimport {\r\n    addGroupedCheckbox,\r\n    IGroupableCheckboxActionPayload,\r\n    removeGroupedCheckbox,\r\n    toggleGroupedCheckbox,\r\n} from './GroupableCheckboxActions';\r\nimport {IGroupableCheckboxesState} from './GroupableCheckboxReducers';\r\n\r\nexport interface IGroupableCheckboxOwnProps extends ICheckboxProps {\r\n    isParent?: boolean;\r\n    parentId?: string;\r\n}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IGroupableCheckboxOwnProps): IInputStateProps => {\r\n    const groupableCheckboxesState: IGroupableCheckboxesState = _.findWhere(state.groupableCheckboxes, {\r\n        parentId: ownProps.parentId || ownProps.id,\r\n    });\r\n    if (groupableCheckboxesState) {\r\n        const checkbox: ICheckboxState = ownProps.isParent\r\n            ? groupableCheckboxesState.parent\r\n            : _.findWhere(groupableCheckboxesState.checkboxes, {id: ownProps.id});\r\n        return {\r\n            checked: checkbox ? checkbox.checked : !!ownProps.defaultChecked,\r\n            disabled: checkbox ? checkbox.disabled : !!ownProps.defaultDisabled,\r\n            indeterminate:\r\n                ownProps.isParent &&\r\n                groupableCheckboxesState.nbChecked > 0 &&\r\n                groupableCheckboxesState.nbChecked < groupableCheckboxesState.total,\r\n        };\r\n    }\r\n\r\n    return {\r\n        checked: !!ownProps.defaultChecked,\r\n        disabled: !!ownProps.defaultDisabled,\r\n        indeterminate: false,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IGroupableCheckboxActionPayload>) => void,\r\n    ownProps: IGroupableCheckboxOwnProps\r\n): IInputDispatchProps => {\r\n    return {\r\n        onRender: () =>\r\n            dispatch(\r\n                addGroupedCheckbox(\r\n                    ownProps.id,\r\n                    ownProps.defaultChecked,\r\n                    !!ownProps.defaultDisabled,\r\n                    ownProps.parentId,\r\n                    !!ownProps.isParent\r\n                )\r\n            ),\r\n        onDestroy: () => dispatch(removeGroupedCheckbox(ownProps.id, ownProps.parentId, !!ownProps.isParent)),\r\n        onClick: () => dispatch(toggleGroupedCheckbox(ownProps.id, ownProps.parentId, !!ownProps.isParent)),\r\n    };\r\n};\r\n\r\nexport const GroupableCheckboxConnected: React.ComponentClass<IGroupableCheckboxOwnProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Checkbox);\r\n"],"sourceRoot":""}