{"version":3,"sources":["webpack:///./src/components/tables/tests/TableRowReducers.spec.ts"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/860.bundle.js","sourcesContent":["export default \"import {IReduxAction} from '../../../utils/ReduxUtils';\\r\\nimport {ITableRowActionPayload, TableRowActions, unselectAllRows} from '../TableRowActions';\\r\\nimport {\\r\\n    ITableRowState,\\r\\n    tableRowInitialState,\\r\\n    tableRowReducer,\\r\\n    tableRowsInitialState,\\r\\n    tableRowsReducer,\\r\\n} from '../TableRowReducers';\\r\\n\\r\\ndescribe('Tables', () => {\\r\\n    describe('TableRowReducers', () => {\\r\\n        const doesNotMatter = false;\\r\\n        const genericAction: IReduxAction<ITableRowActionPayload> = {\\r\\n            type: 'DO_SOMETHING',\\r\\n            payload: {\\r\\n                id: 'row1',\\r\\n            },\\r\\n        };\\r\\n\\r\\n        it('should return the default state if the action is not defined and the state is undefined', () => {\\r\\n            const collapsibleRowsState: ITableRowState[] = tableRowsReducer(undefined, genericAction);\\r\\n\\r\\n            expect(collapsibleRowsState).toBe(tableRowsInitialState);\\r\\n        });\\r\\n\\r\\n        it('should return the default state if the action is not defined and the state is undefined for one row', () => {\\r\\n            const collapsibleRowState: ITableRowState = tableRowReducer(undefined, genericAction);\\r\\n\\r\\n            expect(collapsibleRowState).toBe(tableRowInitialState);\\r\\n        });\\r\\n\\r\\n        it('should return the old state when the action is not defined', () => {\\r\\n            const oldState: ITableRowState[] = [tableRowInitialState];\\r\\n            const collapsibleRowsState: ITableRowState[] = tableRowsReducer(oldState, genericAction);\\r\\n\\r\\n            expect(collapsibleRowsState).toBe(oldState);\\r\\n        });\\r\\n\\r\\n        it('should return the old state when the action is not defined for one row', () => {\\r\\n            const oldState: ITableRowState = tableRowInitialState;\\r\\n            const collapsibleRowState: ITableRowState = tableRowReducer(oldState, genericAction);\\r\\n\\r\\n            expect(collapsibleRowState).toBe(oldState);\\r\\n        });\\r\\n\\r\\n        it('should return the old state with one more CollapsibleRowState when the action is \\\"ADD_ROW\\\"', () => {\\r\\n            let oldState: ITableRowState[] = tableRowsInitialState;\\r\\n            const action: IReduxAction<ITableRowActionPayload> = {\\r\\n                type: TableRowActions.add,\\r\\n                payload: {\\r\\n                    id: 'row1',\\r\\n                },\\r\\n            };\\r\\n            let collapsibleRowsState: ITableRowState[] = tableRowsReducer(oldState, action);\\r\\n\\r\\n            expect(collapsibleRowsState.length).toBe(oldState.length + 1);\\r\\n            expect(collapsibleRowsState.filter((row) => row.id === action.payload.id).length).toBe(1);\\r\\n\\r\\n            oldState = collapsibleRowsState;\\r\\n            action.payload.id = 'row2';\\r\\n            collapsibleRowsState = tableRowsReducer(oldState, action);\\r\\n\\r\\n            expect(collapsibleRowsState.length).toBe(oldState.length + 1);\\r\\n            expect(collapsibleRowsState.filter((row) => row.id === action.payload.id).length).toBe(1);\\r\\n        });\\r\\n\\r\\n        it('should return the old state without the CollapsibleRowState with the timer id when the action is \\\"REMOVE_ROW\\\"', () => {\\r\\n            let oldState: ITableRowState[] = [\\r\\n                {\\r\\n                    id: 'row2',\\r\\n                    opened: false,\\r\\n                    selected: false,\\r\\n                },\\r\\n                {\\r\\n                    id: 'row1',\\r\\n                    opened: true,\\r\\n                    selected: false,\\r\\n                },\\r\\n                {\\r\\n                    id: 'row3',\\r\\n                    opened: false,\\r\\n                    selected: false,\\r\\n                },\\r\\n            ];\\r\\n            const action: IReduxAction<ITableRowActionPayload> = {\\r\\n                type: TableRowActions.remove,\\r\\n                payload: {\\r\\n                    id: 'row1',\\r\\n                },\\r\\n            };\\r\\n            let collapsibleRowsState: ITableRowState[] = tableRowsReducer(oldState, action);\\r\\n\\r\\n            expect(collapsibleRowsState.length).toBe(oldState.length - 1);\\r\\n            expect(collapsibleRowsState.filter((row) => row.id === action.payload.id).length).toBe(0);\\r\\n\\r\\n            oldState = collapsibleRowsState;\\r\\n            action.payload.id = 'row2';\\r\\n            collapsibleRowsState = tableRowsReducer(oldState, action);\\r\\n\\r\\n            expect(collapsibleRowsState.length).toBe(oldState.length - 1);\\r\\n            expect(collapsibleRowsState.filter((row) => row.id === action.payload.id).length).toBe(0);\\r\\n        });\\r\\n\\r\\n        describe('collapsible behaviors', () => {\\r\\n            let oldState: ITableRowState[];\\r\\n            let openValue: boolean;\\r\\n\\r\\n            beforeEach(() => {\\r\\n                openValue = false;\\r\\n                oldState = [\\r\\n                    {id: 'row2', opened: openValue, selected: doesNotMatter},\\r\\n                    {id: 'row3', opened: openValue, selected: doesNotMatter},\\r\\n                    {id: 'row1', opened: openValue, selected: doesNotMatter},\\r\\n                ];\\r\\n            });\\r\\n\\r\\n            it('should toggle the opened property if the action is \\\"TOGGLE_COLLAPSE_ROW\\\" and opened is not specified', () => {\\r\\n                const action: IReduxAction<ITableRowActionPayload> = {\\r\\n                    type: TableRowActions.toggleOpen,\\r\\n                    payload: {id: 'row1'},\\r\\n                };\\r\\n                let collapsibleRowsState: ITableRowState[] = tableRowsReducer(oldState, action);\\r\\n\\r\\n                expect(collapsibleRowsState.length).toBe(oldState.length);\\r\\n                expect(collapsibleRowsState.filter((row) => row.id === action.payload.id)[0].opened).toBe(!openValue);\\r\\n                expect(collapsibleRowsState.filter((row) => row.id !== action.payload.id)[0].opened).toBe(openValue);\\r\\n\\r\\n                collapsibleRowsState = tableRowsReducer(collapsibleRowsState, action);\\r\\n\\r\\n                expect(collapsibleRowsState.filter((row) => row.id === action.payload.id)[0].opened).toBe(openValue);\\r\\n                expect(collapsibleRowsState.filter((row) => row.id !== action.payload.id)[0].opened).toBe(openValue);\\r\\n            });\\r\\n\\r\\n            it('should set the opened property to the value specified by the action \\\"TOGGLE_COLLAPSE_ROW\\\"', () => {\\r\\n                const setToTrue: IReduxAction<ITableRowActionPayload> = {\\r\\n                    type: TableRowActions.toggleOpen,\\r\\n                    payload: {\\r\\n                        id: 'row1',\\r\\n                        opened: true,\\r\\n                    },\\r\\n                };\\r\\n                const setToFalse: IReduxAction<ITableRowActionPayload> = {\\r\\n                    type: TableRowActions.toggleOpen,\\r\\n                    payload: {\\r\\n                        id: 'row1',\\r\\n                        opened: false,\\r\\n                    },\\r\\n                };\\r\\n                let collapsibleRowsState: ITableRowState[] = tableRowsReducer(oldState, setToTrue);\\r\\n\\r\\n                expect(collapsibleRowsState.length).toBe(oldState.length);\\r\\n                expect(collapsibleRowsState.filter((row) => row.id === setToTrue.payload.id)[0].opened).toBe(true);\\r\\n                expect(collapsibleRowsState.filter((row) => row.id !== setToTrue.payload.id)[0].opened).toBe(openValue);\\r\\n\\r\\n                collapsibleRowsState = tableRowsReducer(collapsibleRowsState, setToTrue);\\r\\n\\r\\n                expect(collapsibleRowsState.filter((row) => row.id === setToTrue.payload.id)[0].opened).toBe(true);\\r\\n                expect(collapsibleRowsState.filter((row) => row.id !== setToTrue.payload.id)[0].opened).toBe(openValue);\\r\\n\\r\\n                collapsibleRowsState = tableRowsReducer(collapsibleRowsState, setToFalse);\\r\\n\\r\\n                expect(collapsibleRowsState.filter((row) => row.id === setToTrue.payload.id)[0].opened).toBe(false);\\r\\n                expect(collapsibleRowsState.filter((row) => row.id !== setToTrue.payload.id)[0].opened).toBe(openValue);\\r\\n            });\\r\\n\\r\\n            it('should return the old state when the action \\\"TOGGLE_COLLAPSE_ROW\\\" does not target the specified tableId', () => {\\r\\n                oldState = [\\r\\n                    {\\r\\n                        id: 'row2',\\r\\n                        tableId: 'table3',\\r\\n                        opened: false,\\r\\n                        selected: false,\\r\\n                    },\\r\\n                    {\\r\\n                        id: 'row1',\\r\\n                        tableId: 'table3',\\r\\n                        opened: true,\\r\\n                        selected: false,\\r\\n                    },\\r\\n                    {\\r\\n                        id: 'row3',\\r\\n                        tableId: 'table3',\\r\\n                        opened: false,\\r\\n                        selected: false,\\r\\n                    },\\r\\n                ];\\r\\n                const action: IReduxAction<ITableRowActionPayload> = {\\r\\n                    type: TableRowActions.toggleOpen,\\r\\n                    payload: {\\r\\n                        id: 'row1',\\r\\n                        tableId: 'table2',\\r\\n                    },\\r\\n                };\\r\\n                const nexState: ITableRowState[] = tableRowsReducer(oldState, action);\\r\\n\\r\\n                expect(nexState).toEqual(oldState);\\r\\n            });\\r\\n        });\\r\\n\\r\\n        describe('selected behavior', () => {\\r\\n            let oldState: ITableRowState[];\\r\\n            const actionMaker = (rowId: string): IReduxAction<ITableRowActionPayload> => ({\\r\\n                type: TableRowActions.select,\\r\\n                payload: {id: rowId},\\r\\n            });\\r\\n\\r\\n            beforeEach(() => {\\r\\n                oldState = [\\r\\n                    {id: 'row2', opened: doesNotMatter, selected: false},\\r\\n                    {id: 'row3', opened: doesNotMatter, selected: false},\\r\\n                    {id: 'row1', opened: doesNotMatter, selected: false},\\r\\n                ];\\r\\n            });\\r\\n\\r\\n            it('should select the row with the corresponding id and leave the rest unselected', () => {\\r\\n                const action = actionMaker('row2');\\r\\n                const rowsState = tableRowsReducer(oldState, action);\\r\\n\\r\\n                expect(rowsState.filter((row) => row.id === action.payload.id)[0].selected).toBe(true);\\r\\n                expect(rowsState.filter((row) => row.id !== action.payload.id).every((row) => !row.selected)).toBe(\\r\\n                    true\\r\\n                );\\r\\n            });\\r\\n\\r\\n            it('should preserve the same selected row if you perform the exact same toggle action twice', () => {\\r\\n                const action = actionMaker('row2');\\r\\n                const rowsState = tableRowsReducer(tableRowsReducer(oldState, action), action);\\r\\n\\r\\n                expect(rowsState.filter((row) => row.id === action.payload.id)[0].selected).toBe(true);\\r\\n                expect(rowsState.filter((row) => row.id !== action.payload.id).every((row) => !row.selected)).toBe(\\r\\n                    true\\r\\n                );\\r\\n            });\\r\\n\\r\\n            it('should select a new row on the second time the toggle action is performed with a new row id', () => {\\r\\n                const action1 = actionMaker('row1');\\r\\n                const action2 = actionMaker('row2');\\r\\n                const rowsState = tableRowsReducer(tableRowsReducer(oldState, action1), action2);\\r\\n\\r\\n                expect(rowsState.filter((row) => row.id === action2.payload.id)[0].selected).toBe(true);\\r\\n                expect(rowsState.filter((row) => row.id !== action2.payload.id).every((row) => !row.selected)).toBe(\\r\\n                    true\\r\\n                );\\r\\n            });\\r\\n\\r\\n            it('should unselect all rows having a table id identical to the one received in the payload', () => {\\r\\n                const tableId = 'tableId';\\r\\n                const action = unselectAllRows(tableId);\\r\\n\\r\\n                const currentStateWithTableId = oldState.map((rowState) => ({...rowState, tableId, selected: true}));\\r\\n\\r\\n                expect(tableRowsReducer(currentStateWithTableId, action).every((row) => !row.selected)).toBe(true);\\r\\n            });\\r\\n\\r\\n            it('should leave all rows not having a table id identical to the one received in the payload', () => {\\r\\n                const tableId = 'tableId';\\r\\n                const action = unselectAllRows(tableId);\\r\\n\\r\\n                const currentStateWithTableId = oldState.map((rowState) => ({\\r\\n                    ...rowState,\\r\\n                    tableId: `different${tableId}`,\\r\\n                    selected: true,\\r\\n                }));\\r\\n\\r\\n                expect(tableRowsReducer(currentStateWithTableId, action).every((row) => row.selected)).toBe(true);\\r\\n            });\\r\\n\\r\\n            it('should return the old state when the action does not target the specified tableId', () => {\\r\\n                oldState = [\\r\\n                    {\\r\\n                        id: 'row2',\\r\\n                        tableId: 'table3',\\r\\n                        opened: false,\\r\\n                        selected: false,\\r\\n                    },\\r\\n                    {\\r\\n                        id: 'row1',\\r\\n                        tableId: 'table3',\\r\\n                        opened: true,\\r\\n                        selected: false,\\r\\n                    },\\r\\n                    {\\r\\n                        id: 'row3',\\r\\n                        tableId: 'table3',\\r\\n                        opened: false,\\r\\n                        selected: false,\\r\\n                    },\\r\\n                ];\\r\\n                const action: IReduxAction<ITableRowActionPayload> = {\\r\\n                    type: TableRowActions.select,\\r\\n                    payload: {\\r\\n                        id: 'row1',\\r\\n                        tableId: 'table2',\\r\\n                    },\\r\\n                };\\r\\n                const nexState: ITableRowState[] = tableRowsReducer(oldState, action);\\r\\n\\r\\n                expect(nexState).toEqual(oldState);\\r\\n            });\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}