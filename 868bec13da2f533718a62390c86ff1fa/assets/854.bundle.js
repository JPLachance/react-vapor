(window.webpackJsonp=window.webpackJsonp||[]).push([[854],{1942:function(e,t,n){"use strict";n.r(t),t.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {TableSortingOrder} from '../TableConstants';\r\nimport {ITableHeaderCellProps, TableHeaderCell} from '../TableHeaderCell';\r\n\r\ndescribe('Tables', () => {\r\n    let title: string;\r\n    let className: string;\r\n\r\n    describe('<TableHeaderCell />', () => {\r\n        it('should render without errors', () => {\r\n            title = 'Header 1';\r\n\r\n            expect(() => {\r\n                shallow(<TableHeaderCell title={title} />);\r\n            }).not.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('<TableHeaderCell />', () => {\r\n        let tableHeaderCell: ReactWrapper<ITableHeaderCellProps, any>;\r\n\r\n        beforeEach(() => {\r\n            document.getElementById('App').innerHTML = '<table><thead><tr id=\"AppTableHeadRow\"></tr></thead></table>';\r\n\r\n            title = 'Header 1';\r\n            className = 'special';\r\n\r\n            tableHeaderCell = mount(<TableHeaderCell title={title} className={className} />, {\r\n                attachTo: document.getElementById('AppTableHeadRow'),\r\n            });\r\n        });\r\n\r\n        afterEach(() => {\r\n            tableHeaderCell.detach();\r\n        });\r\n\r\n        it('should have the sorted attribute UNSORTED as a default prop', () => {\r\n            expect(tableHeaderCell.props().sorted).toBe(TableSortingOrder.UNSORTED);\r\n        });\r\n\r\n        it('should get its title as a prop', () => {\r\n            const titleProp = tableHeaderCell.props().title;\r\n\r\n            expect(titleProp).toBeDefined();\r\n            expect(titleProp).toBe(title);\r\n        });\r\n\r\n        it('should get its class name as a prop', () => {\r\n            const classNameProp = tableHeaderCell.props().className;\r\n\r\n            expect(classNameProp).toBeDefined();\r\n            expect(classNameProp).toBe(className);\r\n        });\r\n\r\n        it('should have the class sent as a prop', () => {\r\n            expect(tableHeaderCell.find('th').hasClass(className)).toBe(true);\r\n        });\r\n\r\n        it('should display the title sent as a prop', () => {\r\n            expect(tableHeaderCell.html()).toContain(title);\r\n        });\r\n\r\n        it('should call onMount if it is set as a prop and attributeToSort is defined', () => {\r\n            const onMountSpy = jasmine.createSpy('onMount');\r\n\r\n            tableHeaderCell.unmount();\r\n            tableHeaderCell.setProps({onMount: onMountSpy, attributeToSort: 'i am defined', onUnmount: _.noop});\r\n            tableHeaderCell.mount();\r\n\r\n            expect(onMountSpy).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should not call onMount if it is set as a prop and attributeToSort is undefined', () => {\r\n            const onMountSpy = jasmine.createSpy('onMount');\r\n\r\n            tableHeaderCell.unmount();\r\n            tableHeaderCell.setProps({onMount: onMountSpy, onUnmount: _.noop});\r\n            tableHeaderCell.mount();\r\n\r\n            expect(onMountSpy).not.toHaveBeenCalled();\r\n        });\r\n\r\n        it('should call onSort on click of the header cell if it is set as a prop and attributeToSort is defined', () => {\r\n            const onSortSpy = jasmine.createSpy('onSortSpy');\r\n\r\n            tableHeaderCell.setProps({onSort: onSortSpy, attributeToSort: 'i am defined'});\r\n            tableHeaderCell.simulate('click');\r\n\r\n            expect(onSortSpy).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should not call onSort on click of the header cell if it is set as a prop and attributeToSort is undefined', () => {\r\n            const onSortSpy = jasmine.createSpy('onSortSpy');\r\n\r\n            tableHeaderCell.setProps({onSort: onSortSpy});\r\n            tableHeaderCell.simulate('click');\r\n\r\n            expect(onSortSpy).not.toHaveBeenCalled();\r\n        });\r\n\r\n        it('should call onUnmount if it is set as a prop', () => {\r\n            const onUnmountSpy = jasmine.createSpy('onUnmount');\r\n\r\n            tableHeaderCell.setProps({onUnmount: onUnmountSpy});\r\n            tableHeaderCell.unmount();\r\n\r\n            expect(onUnmountSpy).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should call onClickCallBack if it is set as a prop', () => {\r\n            const onClickCallBackSpy = jasmine.createSpy('onClickCallBackSpy');\r\n            tableHeaderCell.setProps({onClickCallback: onClickCallBackSpy});\r\n\r\n            tableHeaderCell.find('th').simulate('click');\r\n\r\n            expect(onClickCallBackSpy).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        describe('sort icon', () => {\r\n            const svgProps = {svgName: 'asc-desc', className: 'tables-sort icon'};\r\n            const sortDefaultClass = 'admin-sort';\r\n            const sortAscendingClass = 'admin-sort-ascending';\r\n            const sortDescendingClass = 'admin-sort-descending';\r\n            const throwIfSvgNotPresent = () => {\r\n                expect(tableHeaderCell.find(Svg).length).toBe(1);\r\n                expect(tableHeaderCell.find(Svg).props()).toEqual(jasmine.objectContaining(svgProps));\r\n            };\r\n\r\n            it('should not be present if the cell has no sort', () => {\r\n                expect(tableHeaderCell.find(Svg).length).toBe(0);\r\n            });\r\n\r\n            it('should have a sort icon in an unsorted state if it has sort in state UNSORTED', () => {\r\n                tableHeaderCell.setProps({sorted: TableSortingOrder.UNSORTED, attributeToSort: 'anyWouldDo'}).update();\r\n\r\n                throwIfSvgNotPresent();\r\n                expect(tableHeaderCell.find(`.${sortDefaultClass}`).length).toBe(1);\r\n                expect(tableHeaderCell.find(`.${sortAscendingClass}`).length).toBe(0);\r\n                expect(tableHeaderCell.find(`.${sortDescendingClass}`).length).toBe(0);\r\n            });\r\n\r\n            it('should have a sort icon in a sorted ascending state if it has sort in state ASCENDING', () => {\r\n                tableHeaderCell.setProps({sorted: TableSortingOrder.ASCENDING, attributeToSort: 'anyWouldDo'}).update();\r\n\r\n                throwIfSvgNotPresent();\r\n                expect(tableHeaderCell.find(`.${sortDefaultClass}`).length).toBe(1);\r\n                expect(tableHeaderCell.find(`.${sortAscendingClass}`).length).toBe(1);\r\n                expect(tableHeaderCell.find(`.${sortDescendingClass}`).length).toBe(0);\r\n            });\r\n\r\n            it('should have a sort icon in a sorted descending state if it has sort in state DESCENDING', () => {\r\n                tableHeaderCell\r\n                    .setProps({sorted: TableSortingOrder.DESCENDING, attributeToSort: 'anyWouldDo'})\r\n                    .update();\r\n\r\n                throwIfSvgNotPresent();\r\n                expect(tableHeaderCell.find(`.${sortDefaultClass}`).length).toBe(1);\r\n                expect(tableHeaderCell.find(`.${sortAscendingClass}`).length).toBe(0);\r\n                expect(tableHeaderCell.find(`.${sortDescendingClass}`).length).toBe(1);\r\n            });\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=854.bundle.js.map