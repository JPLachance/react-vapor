(window.webpackJsonp=window.webpackJsonp||[]).push([[337],{1432:function(e,n,t){"use strict";t.r(n),n.default="import * as _ from 'underscore';\r\nimport {keyCode} from '../../../utils/InputUtils';\r\nimport {IReduxAction} from '../../../utils/ReduxUtils';\r\nimport {DropdownSearchActions, IOptionsDropdownSearchPayload} from '../DropdownSearchActions';\r\nimport {\r\n    addUniqueSelectedOption,\r\n    deselectAllOptions,\r\n    deselectLastSelectedOption,\r\n    deselectOption,\r\n    dropdownSearchInitialState,\r\n    dropdownSearchReducer,\r\n    getFilteredOptions,\r\n    getNextIndexPosition,\r\n    IDropdownSearchState,\r\n    multiSelectOption,\r\n} from '../DropdownSearchReducers';\r\n\r\nexport const multiSelectDropdownSearchReducer = (\r\n    state: IDropdownSearchState = dropdownSearchInitialState,\r\n    action: IReduxAction<IOptionsDropdownSearchPayload>\r\n): IDropdownSearchState => {\r\n    switch (action.type) {\r\n        case DropdownSearchActions.addMultiSelect:\r\n            return {\r\n                ...state,\r\n                id: action.payload.id,\r\n                options: action.payload.dropdownOptions,\r\n                filterText: '',\r\n                isOpened: false,\r\n            };\r\n        case DropdownSearchActions.deselectOption:\r\n            return {\r\n                ...state,\r\n                options: deselectOption(state.options, action.payload.selectedOptionValue),\r\n                id: action.payload.id,\r\n                isOpened: false,\r\n                activeOption: undefined,\r\n            };\r\n        case DropdownSearchActions.deselectAllOptions:\r\n            return {\r\n                ...state,\r\n                options: deselectAllOptions(state.options),\r\n                id: action.payload.id,\r\n            };\r\n        case DropdownSearchActions.multiSelect:\r\n            return {\r\n                ...state,\r\n                options: multiSelectOption(state.options, action.payload.addedSelectedOption),\r\n                id: action.payload.id,\r\n                isOpened: true,\r\n            };\r\n        case DropdownSearchActions.addCustomSelectedOption:\r\n            return {\r\n                ...state,\r\n                options: addUniqueSelectedOption(state.options, action.payload.selectedOptionValue),\r\n                id: action.payload.id,\r\n                isOpened: true,\r\n            };\r\n        case DropdownSearchActions.onKeyDownMultiselect:\r\n            const keyPressed = action.payload.keyCode;\r\n            const isFirstSelectedOption = keyPressed === keyCode.upArrow && state.activeOption === state.options[0];\r\n            const filteredOptions = getFilteredOptions(state);\r\n            if (_.contains([keyCode.upArrow, keyCode.downArrow], keyPressed)) {\r\n                return {\r\n                    ...state,\r\n                    isOpened: !isFirstSelectedOption,\r\n                    activeOption: !isFirstSelectedOption\r\n                        ? filteredOptions[getNextIndexPosition(filteredOptions, state.activeOption, keyPressed)]\r\n                        : undefined,\r\n                    setFocusOnDropdownButton: isFirstSelectedOption,\r\n                };\r\n            } else if (_.contains([keyCode.enter, keyCode.tab], keyPressed) && state.activeOption) {\r\n                return {\r\n                    ...state,\r\n                    options: multiSelectOption(state.options, state.activeOption),\r\n                    id: action.payload.id,\r\n                    isOpened: true,\r\n                    activeOption: undefined,\r\n                    filterText: '',\r\n                    setFocusOnDropdownButton: true,\r\n                };\r\n            } else if (\r\n                _.contains([keyCode.enter, keyCode.tab], keyPressed) &&\r\n                !state.activeOption &&\r\n                state.filterText\r\n            ) {\r\n                return {\r\n                    ...state,\r\n                    options: addUniqueSelectedOption(state.options, state.filterText),\r\n                    id: action.payload.id,\r\n                    isOpened: true,\r\n                    activeOption: undefined,\r\n                    filterText: '',\r\n                    setFocusOnDropdownButton: true,\r\n                };\r\n            } else if (keyPressed === keyCode.backspace) {\r\n                if (state.filterText === '') {\r\n                    return {\r\n                        ...state,\r\n                        options: deselectLastSelectedOption(state.options),\r\n                        id: action.payload.id,\r\n                        isOpened: true,\r\n                        activeOption: undefined,\r\n                        setFocusOnDropdownButton: true,\r\n                    };\r\n                }\r\n            } else if (keyPressed === keyCode.escape) {\r\n                return {\r\n                    ...state,\r\n                    isOpened: false,\r\n                };\r\n            } else if (keyPressed === -1) {\r\n                return {\r\n                    ...state,\r\n                    id: action.payload.id,\r\n                    activeOption: undefined,\r\n                    setFocusOnDropdownButton: false,\r\n                };\r\n            }\r\n            return {\r\n                ...state,\r\n                id: action.payload.id,\r\n                activeOption: undefined,\r\n                isOpened: true,\r\n                setFocusOnDropdownButton: false,\r\n            };\r\n        default:\r\n            return dropdownSearchReducer(state, action);\r\n    }\r\n};\r\n"}}]);
//# sourceMappingURL=337.bundle.js.map