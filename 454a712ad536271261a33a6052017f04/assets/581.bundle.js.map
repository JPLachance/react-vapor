{"version":3,"sources":["webpack:///./src/components/navigation/perPage/tests/NavigationPerPageReducers.spec.ts"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/581.bundle.js","sourcesContent":["export default \"import {IReduxAction} from '../../../../utils/ReduxUtils';\\r\\nimport {IChangePerPageActionPayload, IPerPageActionPayload, PerPageActions} from '../NavigationPerPageActions';\\r\\nimport {\\r\\n    IPerPageState,\\r\\n    perPageCompositeInitialState,\\r\\n    perPageCompositeReducer,\\r\\n    perPageInitialState,\\r\\n    perPageReducer,\\r\\n} from '../NavigationPerPageReducers';\\r\\n\\r\\ndescribe('Reducers', () => {\\r\\n    describe('NavigationPerPageReducers', () => {\\r\\n        const genericAction: IReduxAction<IChangePerPageActionPayload> = {\\r\\n            type: 'DO_SOMETHING',\\r\\n            payload: {\\r\\n                id: 'per-page',\\r\\n                perPage: 20,\\r\\n            },\\r\\n        };\\r\\n\\r\\n        it('should return the default state if the action is not defined and the state is undefined', () => {\\r\\n            const perPageCompositeState = perPageCompositeReducer(undefined, genericAction);\\r\\n\\r\\n            expect(perPageCompositeState).toBe(perPageCompositeInitialState);\\r\\n        });\\r\\n\\r\\n        it('should return the default state if the action is not defined and the state is undefined for a specific perPage', () => {\\r\\n            const perPageState = perPageReducer(undefined, genericAction);\\r\\n\\r\\n            expect(perPageState).toBe(perPageInitialState);\\r\\n        });\\r\\n\\r\\n        it('should return the old state when the action is not defined', () => {\\r\\n            const oldState: IPerPageState[] = [perPageInitialState];\\r\\n            const perPageCompositeState: IPerPageState[] = perPageCompositeReducer(oldState, genericAction);\\r\\n\\r\\n            expect(perPageCompositeState).toBe(oldState);\\r\\n        });\\r\\n\\r\\n        it('should return the old state when the action is not defined for a specific perPage', () => {\\r\\n            const oldState: IPerPageState = {\\r\\n                id: 'per-page',\\r\\n                perPage: 20,\\r\\n            };\\r\\n            const pageNbState = perPageReducer(oldState, genericAction);\\r\\n\\r\\n            expect(pageNbState).toBe(oldState);\\r\\n        });\\r\\n\\r\\n        it('should return the old state with one more PerPageState when the action is \\\"ADD_PER_PAGE\\\"', () => {\\r\\n            let oldState: IPerPageState[] = perPageCompositeInitialState;\\r\\n            const action: IReduxAction<IChangePerPageActionPayload> = {\\r\\n                type: PerPageActions.add,\\r\\n                payload: {\\r\\n                    id: 'per-page',\\r\\n                    perPage: 30,\\r\\n                },\\r\\n            };\\r\\n            let perPageCompositeState: IPerPageState[] = perPageCompositeReducer(oldState, action);\\r\\n\\r\\n            expect(perPageCompositeState.length).toBe(oldState.length + 1);\\r\\n            expect(perPageCompositeState.filter((p) => p.id === action.payload.id).length).toBe(1);\\r\\n\\r\\n            oldState = perPageCompositeState;\\r\\n            action.payload.id = 'per-page2';\\r\\n            perPageCompositeState = perPageCompositeReducer(oldState, action);\\r\\n\\r\\n            expect(perPageCompositeState.length).toBe(oldState.length + 1);\\r\\n            expect(perPageCompositeState.filter((p) => p.id === action.payload.id).length).toBe(1);\\r\\n        });\\r\\n\\r\\n        it('should return the old state without the PerPageState with the action id when the action is \\\"REMOVE_PER_PAGE\\\"', () => {\\r\\n            let oldState: IPerPageState[] = [\\r\\n                {\\r\\n                    id: 'per-page',\\r\\n                    perPage: 20,\\r\\n                },\\r\\n                {\\r\\n                    id: 'per-page2',\\r\\n                    perPage: 50,\\r\\n                },\\r\\n                {\\r\\n                    id: 'per-page1',\\r\\n                    perPage: 300,\\r\\n                },\\r\\n            ];\\r\\n            const action: IReduxAction<IPerPageActionPayload> = {\\r\\n                type: PerPageActions.remove,\\r\\n                payload: {\\r\\n                    id: 'per-page2',\\r\\n                },\\r\\n            };\\r\\n            let perPageCompositeState: IPerPageState[] = perPageCompositeReducer(oldState, action);\\r\\n\\r\\n            expect(perPageCompositeState.length).toBe(oldState.length - 1);\\r\\n            expect(perPageCompositeState.filter((p) => p.id === action.payload.id).length).toBe(0);\\r\\n\\r\\n            oldState = perPageCompositeState;\\r\\n            action.payload.id = 'per-page';\\r\\n            perPageCompositeState = perPageCompositeReducer(oldState, action);\\r\\n\\r\\n            expect(perPageCompositeState.length).toBe(oldState.length - 1);\\r\\n            expect(perPageCompositeState.filter((p) => p.id === action.payload.id).length).toBe(0);\\r\\n        });\\r\\n\\r\\n        it('should change the page number of the action id when action is \\\"CHANGE_PER_PAGE\\\" and action id equals state id', () => {\\r\\n            const oldState: IPerPageState = {\\r\\n                id: 'per-page',\\r\\n                perPage: 20,\\r\\n            };\\r\\n            const newState: IPerPageState = {\\r\\n                id: 'per-page',\\r\\n                perPage: 10,\\r\\n            };\\r\\n            const action: IReduxAction<IPerPageActionPayload> = {\\r\\n                type: PerPageActions.change,\\r\\n                payload: newState,\\r\\n            };\\r\\n            const perPageCompositeState = perPageCompositeReducer([oldState], action);\\r\\n\\r\\n            expect(perPageCompositeState[0]).toEqual(jasmine.objectContaining(newState));\\r\\n        });\\r\\n\\r\\n        it('should change the page number of the action id when action is \\\"CHANGE_PER_PAGE\\\" and action id does not equal state id', () => {\\r\\n            const oldState: IPerPageState = {\\r\\n                id: 'pageId',\\r\\n                perPage: 20,\\r\\n            };\\r\\n            const newState: IPerPageState = {\\r\\n                id: 'aDifferentPageId',\\r\\n                perPage: 10,\\r\\n            };\\r\\n            const action: IReduxAction<IPerPageActionPayload> = {\\r\\n                type: PerPageActions.change,\\r\\n                payload: newState,\\r\\n            };\\r\\n            const perPageCompositeState = perPageCompositeReducer([oldState], action);\\r\\n\\r\\n            expect(perPageCompositeState[0]).toEqual(jasmine.objectContaining(oldState));\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}