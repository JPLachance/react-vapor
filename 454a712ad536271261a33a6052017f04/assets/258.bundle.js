(window.webpackJsonp=window.webpackJsonp||[]).push([[258],{1358:function(o,e,t){"use strict";t.r(e),e.default="import {mountWithStore, shallowWithStore} from 'enzyme-redux';\nimport * as React from 'react';\nimport {ChromePicker} from 'react-color';\nimport {getStoreMock, ReactVaporMockStore, TestUtils} from '../../utils/tests/TestUtils';\nimport {addInput, removeInput} from '../input/InputActions';\nimport {InputConnected} from '../input/InputConnected';\nimport {InputSelectors} from '../input/InputSelectors';\nimport {ColorPicker} from './ColorPicker';\n\ndescribe('ColorPicker', () => {\n    let store: ReactVaporMockStore;\n\n    beforeEach(() => {\n        store = getStoreMock();\n    });\n\n    it('should mount and unmount without error', () => {\n        expect(() => {\n            const picker = shallowWithStore(<ColorPicker />, store);\n            picker.unmount();\n        }).not.toThrow();\n    });\n\n    it('should render a ChromeColorPicker ', () => {\n        const picker = shallowWithStore(<ColorPicker />, store).dive();\n        expect(picker.find(ChromePicker).length).toBe(1);\n    });\n\n    it('should pass down props to ChromePicker', () => {\n        const picker = shallowWithStore(<ColorPicker disableAlpha={true} />, store).dive();\n        expect(picker.find(ChromePicker).props().disableAlpha).toBe(true);\n    });\n\n    it('should render an InputConnected', () => {\n        const picker = shallowWithStore(<ColorPicker />, store).dive();\n        expect(picker.find(InputConnected).length).toBe(1);\n    });\n\n    it('should sync the InputConnected and ChromePicker with color props', () => {\n        const picker = shallowWithStore(<ColorPicker defaultColor=\"#fff\" />, store).dive();\n        expect(picker.find(ChromePicker).prop('color')).toBe('#fff');\n        expect(picker.find(InputConnected).prop('defaultValue')).toBe('#fff');\n    });\n\n    it('should make the color available from state', () => {\n        const nonMockStore = TestUtils.buildStore();\n        mountWithStore(<ColorPicker defaultColor=\"#47FF21\" id=\"color-picker-test\" />, nonMockStore);\n        expect(InputSelectors.getValue(nonMockStore.getState(), {id: 'color-picker-test'})).toBe('#47FF21');\n    });\n\n    it('should add state input on mount', () => {\n        mountWithStore(<ColorPicker id=\"foo\" />, store);\n        expect(store.getActions()).toContain(addInput('foo'));\n    });\n\n    it('should remove state input on destroy', () => {\n        const picker = mountWithStore(<ColorPicker id=\"foo\" />, store);\n        picker.unmount();\n        expect(store.getActions()).toContain(removeInput('foo'));\n    });\n});\n"}}]);
//# sourceMappingURL=258.bundle.js.map