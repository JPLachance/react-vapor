(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{1241:function(n,e,t){"use strict";t.r(e),e.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IActionOptions} from '../Action';\r\nimport {ILinkActionProps, LinkAction} from '../LinkAction';\r\n\r\ndescribe('Actions', () => {\r\n    const action: IActionOptions = {\r\n        name: 'action',\r\n        link: 'http://coveo.com',\r\n        target: '_blank',\r\n        enabled: true,\r\n    };\r\n\r\n    describe('<LinkAction />', () => {\r\n        it('should render without errors', () => {\r\n            expect(() => {\r\n                shallow(<LinkAction action={action} />);\r\n            }).not.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('<LinkAction />', () => {\r\n        let linkAction: ReactWrapper<ILinkActionProps, any>;\r\n        const simple: boolean = false;\r\n\r\n        beforeEach(() => {\r\n            linkAction = mount(<LinkAction action={action} simple={simple} />, {\r\n                attachTo: document.getElementById('App'),\r\n            });\r\n        });\r\n\r\n        afterEach(() => {\r\n            linkAction.detach();\r\n        });\r\n\r\n        it('should get an action as a prop', () => {\r\n            const actionProp = linkAction.props().action;\r\n\r\n            expect(actionProp).toBeDefined();\r\n            expect(actionProp).toEqual(jasmine.objectContaining(action));\r\n        });\r\n\r\n        it('should get if the action is simple (no html) as a prop', () => {\r\n            const simpleProp = linkAction.props().simple;\r\n\r\n            expect(simpleProp).toBeDefined();\r\n            expect(simpleProp).toBe(simple);\r\n        });\r\n\r\n        it('should render a <Action /> component', () => {\r\n            expect(linkAction.find('Action').length).toBe(1);\r\n        });\r\n\r\n        it('should have a target attribute if there is a target for the action', () => {\r\n            const expectedTarget = 'target=\"' + action.target + '\"';\r\n            expect(linkAction.html()).toContain(expectedTarget);\r\n\r\n            const newAction = _.extend({}, action);\r\n            newAction.target = undefined;\r\n            linkAction.setProps({action: newAction, simple: simple});\r\n\r\n            expect(linkAction.html()).not.toContain(expectedTarget);\r\n        });\r\n\r\n        it('should have a \"noopener noreferrer\" as rel attribute if there is a target for the action', () => {\r\n            const expectedRel = 'rel=\"noopener noreferrer\"';\r\n            expect(linkAction.html()).toContain(expectedRel);\r\n\r\n            const newAction = _.extend({}, action);\r\n            newAction.target = undefined;\r\n            linkAction.setProps({action: newAction, simple: simple});\r\n\r\n            expect(linkAction.html()).not.toContain(expectedRel);\r\n        });\r\n\r\n        it('should have flex classes if action is not simple', () => {\r\n            const expectedFlexClass = 'inline-flex';\r\n            const expectedCenterFlexClass = 'flex-center';\r\n\r\n            expect(linkAction.find('a').hasClass(expectedFlexClass)).toBe(true);\r\n            expect(linkAction.find('a').hasClass(expectedCenterFlexClass)).toBe(true);\r\n\r\n            linkAction.setProps({action: action, simple: true});\r\n\r\n            expect(linkAction.find('a').hasClass(expectedFlexClass)).toBe(false);\r\n            expect(linkAction.find('a').hasClass(expectedCenterFlexClass)).toBe(false);\r\n        });\r\n\r\n        it('shoud have the enabled class if the action is enabled', () => {\r\n            expect(linkAction.find('a').hasClass('enabled')).toBe(true);\r\n        });\r\n\r\n        it('shoud not have the state-disabled class if the action is enabled', () => {\r\n            expect(linkAction.find('a').hasClass('state-disabled')).toBe(false);\r\n        });\r\n\r\n        describe('disabled action', () => {\r\n            beforeEach(() => {\r\n                linkAction.setProps({action: {...action, enabled: false}});\r\n            });\r\n\r\n            it('shoud not have the enabled class', () => {\r\n                expect(linkAction.find('a').hasClass('enabled')).toBe(false);\r\n            });\r\n\r\n            it('shoud have the state-disabled class if hideDisabled set to false is passed as prop', () => {\r\n                linkAction.setProps({action: {...action, enabled: false, hideDisabled: false}});\r\n                expect(linkAction.find('a').hasClass('state-disabled')).toBe(true);\r\n            });\r\n\r\n            it('should have no target provided', () => {\r\n                expect(linkAction.find('a').prop('target')).toBeUndefined();\r\n            });\r\n\r\n            it('should have no href provided', () => {\r\n                expect(linkAction.find('a').prop('href')).toBeUndefined();\r\n            });\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=140.bundle.js.map