(window.webpackJsonp=window.webpackJsonp||[]).push([[828],{1915:function(e,t,n){"use strict";n.r(t),t.default="import * as _ from 'underscore';\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {ITableRowActionPayload, TableRowActions} from './TableRowActions';\r\n\r\nexport interface ITableRowState {\r\n    id: string;\r\n    opened: boolean;\r\n    selected: boolean;\r\n    tableId?: string;\r\n    rowId?: string;\r\n}\r\n\r\nexport const tableRowInitialState: ITableRowState = {id: undefined, opened: undefined, selected: undefined};\r\nexport const tableRowsInitialState: ITableRowState[] = [];\r\n\r\nexport const tableRowReducer = (\r\n    state: ITableRowState = tableRowInitialState,\r\n    action: IReduxAction<ITableRowActionPayload>\r\n): ITableRowState => {\r\n    switch (action.type) {\r\n        case TableRowActions.add:\r\n            return {\r\n                id: action.payload.id,\r\n                tableId: action.payload.tableId,\r\n                rowId: action.payload.rowId,\r\n                opened: false,\r\n                selected: false,\r\n            };\r\n        case TableRowActions.toggleOpen:\r\n            if (state.tableId !== action.payload.tableId) {\r\n                return state;\r\n            }\r\n            return _.isUndefined(action.payload.opened)\r\n                ? {...state, opened: state.id === action.payload.id && !state.opened}\r\n                : {...state, opened: state.id === action.payload.id && action.payload.opened};\r\n        case TableRowActions.select:\r\n            return state.tableId === action.payload.tableId\r\n                ? {...state, selected: state.id === action.payload.id}\r\n                : state;\r\n        case TableRowActions.unselectAll:\r\n            return state.tableId === action.payload.tableId ? {...state, selected: false, opened: false} : state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const tableRowsReducer = (\r\n    state: ITableRowState[] = tableRowsInitialState,\r\n    action: IReduxAction<ITableRowActionPayload>\r\n): ITableRowState[] => {\r\n    switch (action.type) {\r\n        case TableRowActions.add:\r\n            return [...state, tableRowReducer(undefined, action)];\r\n        case TableRowActions.remove:\r\n            return _.reject(state, (row: ITableRowState) => {\r\n                return action.payload.id === row.id;\r\n            });\r\n        case TableRowActions.toggleOpen:\r\n        case TableRowActions.select:\r\n        case TableRowActions.unselectAll:\r\n            return state.map((row: ITableRowState) => tableRowReducer(row, action));\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"}}]);
//# sourceMappingURL=828.bundle.js.map