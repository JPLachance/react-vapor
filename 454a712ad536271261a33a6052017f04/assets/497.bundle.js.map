{"version":3,"sources":["webpack:///./src/components/menu/MenuConnected.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/497.bundle.js","sourcesContent":["export default \"import * as classNames from 'classnames';\\r\\nimport * as React from 'react';\\r\\nimport * as ReactDOM from 'react-dom';\\r\\nimport {IReactVaporState} from '../../ReactVapor';\\r\\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\\r\\nimport {Svg} from '../svg/Svg';\\r\\nimport {addMenu, removeMenu, toggleMenu} from './MenuActions';\\r\\nimport {IMenuState} from './MenuReducers';\\r\\n\\r\\nexport interface IMenuOwnProps {\\r\\n    id: string;\\r\\n    className?: string;\\r\\n    toggleClassName?: string;\\r\\n    dropdownClassName?: string;\\r\\n    positionRight?: boolean;\\r\\n    closeOnSelectItem?: boolean;\\r\\n    buttonSvg?: React.ReactNode;\\r\\n    customOffset?: number;\\r\\n}\\r\\n\\r\\nexport interface IMenuStateProps {\\r\\n    isOpen?: boolean;\\r\\n}\\r\\n\\r\\nexport interface IMenuDispatchProps {\\r\\n    onRender?: () => void;\\r\\n    onDestroy?: () => void;\\r\\n    onToggleMenu?: () => void;\\r\\n    onDocumentClick?: () => void;\\r\\n}\\r\\n\\r\\nexport interface IMenuProps extends IMenuOwnProps, IMenuStateProps, IMenuDispatchProps {}\\r\\n\\r\\nconst mapStateToProps = (state: IReactVaporState, ownProps: IMenuOwnProps): IMenuStateProps => {\\r\\n    const menu: IMenuState = state.menus[ownProps.id];\\r\\n\\r\\n    return {\\r\\n        isOpen: menu && menu.open,\\r\\n    };\\r\\n};\\r\\n\\r\\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IMenuOwnProps): IMenuDispatchProps => ({\\r\\n    onRender: () => dispatch(addMenu(ownProps.id)),\\r\\n    onDestroy: () => dispatch(removeMenu(ownProps.id)),\\r\\n    onToggleMenu: () => dispatch(toggleMenu(ownProps.id)),\\r\\n    onDocumentClick: () => dispatch(toggleMenu(ownProps.id, false)),\\r\\n});\\r\\n\\r\\n@ReduxConnect(mapStateToProps, mapDispatchToProps)\\r\\nexport class MenuConnected extends React.Component<IMenuProps, {}> {\\r\\n    private list: HTMLDivElement;\\r\\n    private button: HTMLButtonElement;\\r\\n\\r\\n    static defaultProps: Partial<IMenuProps> = {\\r\\n        positionRight: false,\\r\\n        closeOnSelectItem: true,\\r\\n        customOffset: 0,\\r\\n    };\\r\\n\\r\\n    componentWillMount() {\\r\\n        this.props.onRender();\\r\\n        document.addEventListener('mousedown', this.handleDocumentClick);\\r\\n    }\\r\\n\\r\\n    componentWillUnmount() {\\r\\n        this.props.onDestroy();\\r\\n        document.removeEventListener('mousedown', this.handleDocumentClick);\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        const pickerClasses = classNames('select-dropdown dropdown', this.props.className, {\\r\\n            open: this.props.isOpen,\\r\\n        });\\r\\n        const dropdownClasses = classNames(\\r\\n            'select-dropdown-container absolute bg-pure-white',\\r\\n            this.props.dropdownClassName,\\r\\n            {\\r\\n                hidden: !this.props.isOpen,\\r\\n            }\\r\\n        );\\r\\n        return (\\r\\n            <div className={pickerClasses}>\\r\\n                <button\\r\\n                    className={classNames('btn menu-toggle', this.props.toggleClassName, {\\r\\n                        'bg-light-grey': this.props.isOpen,\\r\\n                    })}\\r\\n                    type=\\\"button\\\"\\r\\n                    onMouseUp={(e: React.MouseEvent<HTMLElement>) => this.onToggleMenu(e)}\\r\\n                    ref={(ref: HTMLButtonElement) => (this.button = ref)}\\r\\n                >\\r\\n                    {this.props.buttonSvg ? this.props.buttonSvg : this.getDefaultSvg()}\\r\\n                </button>\\r\\n                <div\\r\\n                    className={dropdownClasses}\\r\\n                    ref={(ref: HTMLDivElement) => (this.list = ref)}\\r\\n                    onClick={() => this.onClickMenu()}\\r\\n                >\\r\\n                    {this.props.children}\\r\\n                </div>\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n\\r\\n    private onClickMenu() {\\r\\n        if (this.props.closeOnSelectItem) {\\r\\n            this.props.onDocumentClick();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    private getDefaultSvg() {\\r\\n        return <Svg svgName=\\\"more-append\\\" svgClass=\\\"fill-medium-blue icon mod-lg\\\" />;\\r\\n    }\\r\\n\\r\\n    private onToggleMenu(e: React.SyntheticEvent<HTMLElement>) {\\r\\n        this.setListPosition();\\r\\n\\r\\n        e.stopPropagation();\\r\\n        e.preventDefault();\\r\\n\\r\\n        this.props.onToggleMenu();\\r\\n    }\\r\\n\\r\\n    private setListPosition() {\\r\\n        if (this.button) {\\r\\n            this.list.style.minWidth = `${this.button.clientWidth + 2}px`;\\r\\n            this.props.positionRight\\r\\n                ? (this.list.style.right = `${this.button.offsetLeft + this.props.customOffset}px`)\\r\\n                : (this.list.style.left = `${this.button.offsetLeft + this.props.customOffset}px`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    private handleDocumentClick = (e: MouseEvent) => {\\r\\n        if (this.props.isOpen && document.body.contains(e.target as HTMLElement)) {\\r\\n            const list: Element | Text = ReactDOM.findDOMNode(this.list);\\r\\n            const button: Element | Text = ReactDOM.findDOMNode(this.button);\\r\\n\\r\\n            if (!list.contains(e.target as Node) && !button.contains(e.target as Node)) {\\r\\n                this.props.onDocumentClick();\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n}\\r\\n\""],"sourceRoot":""}