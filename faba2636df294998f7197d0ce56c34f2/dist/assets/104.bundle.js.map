{"version":3,"sources":["webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/actions/ActionBar.tsx?d37a","webpack:///./src/components/actions/PrimaryAction.tsx?99b6","webpack:///./src/components/actions/LinkAction.tsx?6c14","webpack:///./src/components/actions/Action.tsx?aa30","webpack:///./src/components/actions/TriggerActionConnected.tsx?81e8","webpack:///./src/components/actions/PrimaryActionConnected.tsx?6039","webpack:///./src/components/section/index.ts?360e","webpack:///./src/components/inlinePrompt/InlinePrompt.tsx?d979","webpack:///./src/components/actions/filters/ItemFilter.tsx?17bf","webpack:///./src/components/actions/SecondaryActions.tsx?a067","webpack:///./src/components/actions/ActionsDropdown.tsx?b330","webpack:///./src/components/dropdown/DropdownConnected.tsx?3b40","webpack:///./src/components/dropdown/Dropdown.tsx?7709","webpack:///./src/components/actions/ActionDropdownItem.tsx?d416","webpack:///./src/components/actions/ActionConstants.tsx?f96d"],"names":["Section","children","title","description","className","mods","level","titleProps","H","Actions","primaryActions","props","actions","filter","primary","map","action","index","primaryAction","withReduxState","enabled","disabled","parentId","id","key","secondaryActions","secondaryActionsView","forEach","moreLabel","prompt","Prompt","length","options","Filter","itemFilter","label","itemFilterLabel","item","itemTooltipProps","onClear","clearItemFilter","crop","itemFilterCropLength","componentDidMount","this","onRender","componentWillUnmount","onDestroy","render","containerClasses","defaultClasses","extraContainerClasses","isLoading","withSmallActions","prefixContentElement","prefixContent","style","width","removeDefaultContainerClasses","ActionBar","defaultProps","ActionBarConnected","state","ownProps","actionBar","actionBars","prompts","indexOf","itemFilters","hideDisabled","dispatch","onClearItemFilter","link","actionClasses","simple","opts","href","undefined","target","rel","name","icon","tooltipPlacement","tooltip","actionIcon","svgName","svgClass","inside","placement","Right","onTriggerAction","confirmData","requiresConfirmation","onTriggerConfirm","confirmLabel","trigger","onConfirm","cancel","buttonLabels","choices","confirm","confirmType","onCloseDropdown","onClick","TriggerActionConnected","userChoice","isOpened","TriggerAction","PrimaryActionConnected","mergeProps","InlinePromptConnected","onCancel","choice","type","opened","itemFilterText","itemFilterLength","Math","abs","substring","SecondaryActions","lastFilteredAction","filteredActions","separator","actionItems","actionsItems","cursor","ActionsDropdown","toggleContent","dropdownItems","DropdownConnected","dropdowns","onDocumentClick","handleClick","handleDocumentClick","e","dropdown","contains","componentWillMount","document","addEventListener","removeEventListener","dropdownClasses","open","ref","ActionDropdownItem","ACTION_SEPARATOR"],"mappings":"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","file":"assets/104.bundle.js","sourcesContent":["import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Content, IContentProps} from '../content/Content';\r\nimport {InlinePromptConnected} from '../inlinePrompt/InlinePrompt';\r\nimport {removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {IPromptState} from '../inlinePrompt/InlinePromptReducers';\r\nimport {ITooltipProps} from '../tooltip/Tooltip';\r\nimport {IActionOptions} from './Action';\r\nimport {addActionBar, removeActionBar} from './ActionBarActions';\r\nimport {IActionBarState} from './ActionBarReducers';\r\nimport {ItemFilter} from './filters/ItemFilter';\r\nimport {addItemFilter, filterItems, removeItemFilter} from './filters/ItemFilterActions';\r\nimport {IItemFilterState} from './filters/ItemFilterReducers';\r\nimport {PrimaryAction} from './PrimaryAction';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\nimport {SecondaryActions} from './SecondaryActions';\r\n\r\nexport interface IActionBarProps {\r\n    id?: string;\r\n    itemFilterLabel?: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClearItemFilter?: () => void;\r\n    extraContainerClasses?: string[];\r\n    removeDefaultContainerClasses?: boolean;\r\n    withSmallActions?: boolean;\r\n    prefixContent?: IContentProps;\r\n    width?: number;\r\n    moreLabel?: string;\r\n    itemFilterCropLength?: number;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport class ActionBar extends React.PureComponent<\r\n    IActionBarProps & Partial<ReturnType<typeof mapStateToProps>> & Partial<ReturnType<typeof mapDispatchToProps>>\r\n> {\r\n    static defaultProps: Partial<IActionBarProps> = {\r\n        extraContainerClasses: [],\r\n        withSmallActions: false,\r\n    };\r\n\r\n    static defaultClasses = [\r\n        'coveo-table-actions-container',\r\n        'mod-cancel-header-padding',\r\n        'mod-border-bottom',\r\n        'mod-align-header',\r\n    ];\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        const containerClasses = classNames(this.defaultClasses, this.props.extraContainerClasses, {\r\n            'mod-deactivate-pointer': !!this.props.isLoading,\r\n            'small-actions-container': this.props.withSmallActions,\r\n        });\r\n\r\n        const prefixContentElement = this.props.prefixContent ? <Content {...this.props.prefixContent} /> : null;\r\n\r\n        return (\r\n            <div className={containerClasses} style={this.props.width ? {width: this.props.width} : null}>\r\n                {prefixContentElement}\r\n                <this.Filter />\r\n                <this.Actions />\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private get defaultClasses(): string {\r\n        return classNames(this.props.removeDefaultContainerClasses ? '' : ActionBar.defaultClasses);\r\n    }\r\n\r\n    private Actions: React.FunctionComponent = () => {\r\n        const primaryActions =\r\n            this.props.actions\r\n                ?.filter(({primary}) => !!primary)\r\n                .map((action: IActionOptions, index: number) => {\r\n                    const primaryAction = this.props.withReduxState ? (\r\n                        <PrimaryActionConnected\r\n                            action={{...action, enabled: !this.props.disabled}}\r\n                            parentId={this.props.id}\r\n                        />\r\n                    ) : (\r\n                        <PrimaryAction action={{...action, enabled: !this.props.disabled}} />\r\n                    );\r\n                    return (\r\n                        <div className=\"action primary-action\" key={`primary-${index}`}>\r\n                            {primaryAction}\r\n                        </div>\r\n                    );\r\n                }) ?? [];\r\n\r\n        const secondaryActions: IActionOptions[] = this.props.actions?.filter(({primary}) => !primary) ?? [];\r\n\r\n        let secondaryActionsView: JSX.Element = null;\r\n        if (!_.isEmpty(secondaryActions)) {\r\n            secondaryActions.forEach((action: IActionOptions) => ({...action, enabled: !this.props.disabled}));\r\n            secondaryActionsView = (\r\n                <SecondaryActions\r\n                    id={this.props.id}\r\n                    moreLabel={this.props.moreLabel}\r\n                    actions={secondaryActions}\r\n                    disabled={this.props.disabled}\r\n                />\r\n            );\r\n        }\r\n\r\n        const actions = this.props.prompt ? (\r\n            <this.Prompt />\r\n        ) : (\r\n            <>\r\n                {primaryActions}\r\n                {secondaryActionsView}\r\n            </>\r\n        );\r\n\r\n        return primaryActions.length || secondaryActionsView || this.props.prompt ? (\r\n            <div className=\"coveo-table-actions\">{actions}</div>\r\n        ) : null;\r\n    };\r\n\r\n    private Prompt: React.FunctionComponent = () =>\r\n        this.props.prompt?.options ? (\r\n            <div className=\"prompt\">\r\n                <InlinePromptConnected {...this.props.prompt} />\r\n            </div>\r\n        ) : null;\r\n\r\n    private Filter: React.FunctionComponent = () =>\r\n        this.props.itemFilter ? (\r\n            <ItemFilter\r\n                label={this.props.itemFilterLabel}\r\n                item={this.props.itemFilter}\r\n                itemTooltipProps={this.props.itemTooltipProps}\r\n                onClear={this.props.clearItemFilter}\r\n                crop={this.props.itemFilterCropLength}\r\n            />\r\n        ) : null;\r\n}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IActionBarProps) => {\r\n    const actionBar: IActionBarState = _.findWhere(state.actionBars, {id: ownProps.id});\r\n    const prompt: IPromptState = _.find(state.prompts, ({id}) => id.indexOf(ownProps.id) >= 0);\r\n    const itemFilter: IItemFilterState = _.findWhere(state.itemFilters, {id: ownProps.id});\r\n\r\n    return {\r\n        withReduxState: true,\r\n        actions: actionBar?.actions.filter(({enabled, hideDisabled}) => enabled || hideDisabled === false) ?? [],\r\n        isLoading: actionBar?.isLoading ?? false,\r\n        prompt,\r\n        itemFilter: itemFilter?.item ?? '',\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IActionBarProps) => ({\r\n    onRender: () => {\r\n        dispatch(addActionBar(ownProps.id));\r\n        if (ownProps.itemFilterLabel) {\r\n            dispatch(addItemFilter(ownProps.id));\r\n        }\r\n    },\r\n    onDestroy: () => {\r\n        dispatch(removeActionBar(ownProps.id));\r\n        dispatch(removeItemFilter(ownProps.id));\r\n        dispatch(removePrompt(ownProps.id));\r\n    },\r\n    clearItemFilter: () => {\r\n        ownProps.onClearItemFilter?.();\r\n        dispatch(filterItems(ownProps.id, ''));\r\n    },\r\n});\r\n\r\nexport const ActionBarConnected = connect(mapStateToProps, mapDispatchToProps)(ActionBar);\r\n","import * as React from 'react';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {IBasicActionProps} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerAction, TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IPrimaryActionOwnProps extends React.ClassAttributes<PrimaryAction>, IBasicActionProps {\r\n    parentId?: string;\r\n}\r\n\r\nexport interface IPrimaryActionStateProps extends IReduxStatePossibleProps {}\r\n\r\nexport interface IPrimaryActionProps extends IPrimaryActionOwnProps, IPrimaryActionStateProps {}\r\n\r\nexport class PrimaryAction extends React.Component<IPrimaryActionProps, any> {\r\n    render() {\r\n        const action: JSX.Element = this.props.action.link ? (\r\n            <LinkAction action={this.props.action} />\r\n        ) : this.props.withReduxState ? (\r\n            <TriggerActionConnected action={this.props.action} parentId={this.props.parentId} />\r\n        ) : (\r\n            <TriggerAction action={this.props.action} />\r\n        );\r\n\r\n        return <div>{action}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Action, IBasicActionProps} from './Action';\r\n\r\nexport interface ILinkActionProps extends React.ClassAttributes<LinkAction>, IBasicActionProps {}\r\n\r\nexport class LinkAction extends React.Component<ILinkActionProps> {\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && !this.props.action.hideDisabled,\r\n            'inline-flex flex-center': !this.props.simple,\r\n        });\r\n        const opts: React.AllHTMLAttributes<HTMLAnchorElement> = {\r\n            children: <Action action={this.props.action} simple={this.props.simple} />,\r\n        };\r\n        const href = this.props.action.enabled ? this.props.action.link : undefined;\r\n        if (this.props.action.target) {\r\n            opts.target = this.props.action.enabled ? this.props.action.target : undefined;\r\n            opts.rel = 'noopener noreferrer';\r\n        }\r\n\r\n        return <a className={actionClasses} href={href} title={this.props.action.name} {...opts} />;\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IConfirmButtonLabel {\r\n    cancel: string;\r\n    confirm: string;\r\n}\r\n\r\nexport interface IConfirmData {\r\n    confirmType: string;\r\n    confirmLabel?: string;\r\n    buttonLabels?: IConfirmButtonLabel;\r\n}\r\n\r\nexport interface IBaseActionOptions {\r\n    enabled: boolean;\r\n    name?: string;\r\n    link?: string;\r\n    target?: string;\r\n    primary?: boolean;\r\n    tooltip?: string;\r\n    tooltipPlacement?: string;\r\n    hideDisabled?: boolean;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport interface IActionOptions extends IBaseActionOptions {\r\n    icon?: string;\r\n    iconClass?: string;\r\n    id?: string;\r\n    trigger?: () => void;\r\n    unrepeatable?: boolean;\r\n    callOnDoubleClick?: boolean;\r\n    requiresConfirmation?: IConfirmData;\r\n    separator?: boolean;\r\n    grouped?: boolean;\r\n    subActions?: IActionOptions[];\r\n    hidden?: boolean;\r\n}\r\n\r\nexport interface IBasicActionProps {\r\n    action: IActionOptions;\r\n    simple?: boolean;\r\n}\r\n\r\nexport interface IActionProps extends React.ClassAttributes<Action>, IBasicActionProps {}\r\n\r\nexport class Action extends React.Component<IActionProps, any> {\r\n    static defaultProps: Partial<IActionOptions> = {\r\n        hideDisabled: true,\r\n    };\r\n\r\n    render() {\r\n        const {icon, id, name, tooltipPlacement, tooltip} = this.props.action;\r\n        const actionIcon: JSX.Element = icon ? (\r\n            <Svg svgName={icon} className=\"action-icon\" svgClass=\"icon fill-medium-blue\" />\r\n        ) : (\r\n            <Svg svgName=\"more\" className=\"action-icon action-icon-more\" svgClass=\"icon icon-medium fill-medium-blue\" />\r\n        );\r\n        const inside: string | JSX.Element = this.props.simple ? (\r\n            name\r\n        ) : (\r\n            <span className=\"inline-flex flex-center\">\r\n                {actionIcon}\r\n                <span className=\"action-label\" data-trigger={id || name}>\r\n                    {name}\r\n                </span>\r\n            </span>\r\n        );\r\n        const placement: string = tooltipPlacement || TooltipPlacement.Right;\r\n        const wholeAction: JSX.Element = tooltip ? (\r\n            <Tooltip title={tooltip} placement={placement}>\r\n                {inside}\r\n            </Tooltip>\r\n        ) : (\r\n            <span>{inside}</span>\r\n        );\r\n\r\n        return wholeAction;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {closeDropdown} from '../dropdown/DropdownActions';\r\nimport {IUserChoice} from '../inlinePrompt/InlinePrompt';\r\nimport {addPrompt, removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {Action, IBasicActionProps, IConfirmData} from './Action';\r\n\r\nexport interface ITriggerActionOwnProps extends React.ClassAttributes<TriggerAction>, IBasicActionProps {\r\n    confirmLabel?: string;\r\n    parentId?: string;\r\n}\r\n\r\nexport interface ITriggerActionProps extends ITriggerActionOwnProps, Partial<ReturnType<typeof mapDispatchToProps>> {}\r\n\r\nexport const CONFIRM_LABEL: string = 'Are you sure?';\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: ITriggerActionOwnProps\r\n) => ({\r\n    onTriggerConfirm: (onClick: () => void, userChoice: IUserChoice, className: string) => {\r\n        dispatch(addPrompt(ownProps.parentId, {onClick, userChoice, isOpened: false, className}));\r\n    },\r\n    onConfirm: () => dispatch(removePrompt(ownProps.parentId)),\r\n    onCloseDropdown: () => dispatch(closeDropdown(ownProps.parentId)),\r\n});\r\n\r\nexport class TriggerAction extends React.Component<ITriggerActionProps, any> {\r\n    private onTriggerAction() {\r\n        const confirmData: IConfirmData = this.props.action.requiresConfirmation;\r\n        if (confirmData && this.props.onTriggerConfirm) {\r\n            const confirmLabel: string =\r\n                this.props.confirmLabel || this.props.action.requiresConfirmation.confirmLabel || CONFIRM_LABEL;\r\n            const icon: string = this.props.action.icon;\r\n            this.props.onTriggerConfirm(\r\n                () => {\r\n                    if (this.props.action.trigger) {\r\n                        this.props.action.trigger();\r\n                    }\r\n                    if (this.props.onConfirm) {\r\n                        this.props.onConfirm();\r\n                    }\r\n                },\r\n                {\r\n                    icon: icon,\r\n                    description: confirmLabel,\r\n                    cancel: confirmData.buttonLabels.cancel,\r\n                    choices: {\r\n                        confirm: confirmData.buttonLabels.confirm,\r\n                    },\r\n                },\r\n                confirmData.confirmType\r\n            );\r\n        } else {\r\n            if (this.props.action.trigger) {\r\n                this.props.action.trigger();\r\n                this.props.onCloseDropdown && this.props.onCloseDropdown();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && (this.props.simple || !this.props.action.hideDisabled),\r\n            disabled: !this.props.action.enabled && !this.props.simple,\r\n        });\r\n\r\n        return (\r\n            <span\r\n                onClick={() => this.props.action.enabled && this.onTriggerAction()}\r\n                className={actionClasses}\r\n                title={this.props.action.name}\r\n            >\r\n                <Action action={this.props.action} simple={this.props.simple} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport const TriggerActionConnected = connect(undefined, mapDispatchToProps)(TriggerAction);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IPrimaryActionProps, IPrimaryActionStateProps, PrimaryAction} from './PrimaryAction';\r\n\r\nconst mapStateToProps = (): IPrimaryActionStateProps => ({\r\n    withReduxState: true,\r\n});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport const PrimaryActionConnected: React.ComponentClass<IPrimaryActionProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(PrimaryAction);\r\n","export * from './Section';\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {removePrompt} from './InlinePromptActions';\r\n\r\nexport interface IUserChoice {\r\n    description?: string;\r\n    cancel?: string;\r\n    choices?: Record<string, string>;\r\n    icon?: string;\r\n}\r\n\r\nexport interface IInlinePromptOptions {\r\n    onClick: () => void;\r\n    userChoice: IUserChoice;\r\n    isOpened?: boolean;\r\n    className?: string;\r\n}\r\n\r\nexport interface IInlinePromptProps {\r\n    id?: string;\r\n    options: IInlinePromptOptions;\r\n}\r\n\r\nexport const InlinePrompt: React.FunctionComponent<IInlinePromptProps &\r\n    Partial<ReturnType<typeof mapDispatchToProps>>> = ({options, onCancel}) => {\r\n    const icon: JSX.Element = options.userChoice.icon ? (\r\n        <Svg svgName={options.userChoice.icon} className=\"prompt-icon mr1\" svgClass=\"icon mod-2x fill-medium-blue\" />\r\n    ) : null;\r\n\r\n    const choices: JSX.Element[] = _.map(options.userChoice.choices, (choice: string) => (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn action mod-danger prompt-action enabled\"\r\n            onClick={options.onClick}\r\n            key={choice}\r\n        >\r\n            {choice}\r\n        </button>\r\n    ));\r\n\r\n    const description: JSX.Element = options.userChoice.description ? (\r\n        <span className=\"description\">{options.userChoice.description}</span>\r\n    ) : null;\r\n\r\n    const cancel: JSX.Element = options.userChoice.cancel ? (\r\n        <button type=\"button\" className=\"btn cancel prompt-action enabled\" onClick={onCancel}>\r\n            {options.userChoice.cancel}\r\n        </button>\r\n    ) : null;\r\n\r\n    const className = classNames(`prompt-${options.className ?? 'info'}`, {opened: options.isOpened});\r\n\r\n    return (\r\n        <span className={className}>\r\n            <span className=\"label-confirmation\">\r\n                {icon}\r\n                {description}\r\n            </span>\r\n            {choices}\r\n            {cancel}\r\n        </span>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IInlinePromptProps) => ({\r\n    onCancel: () => dispatch(removePrompt(ownProps.id)),\r\n});\r\n\r\nexport const InlinePromptConnected = connect(null, mapDispatchToProps)(InlinePrompt);\r\n","import * as React from 'react';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ITooltipProps, Tooltip} from '../../tooltip/Tooltip';\r\n\r\nexport interface IItemFilterProps extends React.ClassAttributes<ItemFilter> {\r\n    label: string;\r\n    item: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClear: () => void;\r\n    crop?: number;\r\n}\r\n\r\nexport const ELLIPSIS: string = '...';\r\n\r\nexport class ItemFilter extends React.Component<IItemFilterProps, any> {\r\n    render() {\r\n        let itemFilterText: string = this.props.item;\r\n        if (this.props.crop) {\r\n            const itemFilterLength: number = itemFilterText.length;\r\n\r\n            if (itemFilterLength > Math.abs(this.props.crop)) {\r\n                itemFilterText =\r\n                    this.props.crop > 0\r\n                        ? itemFilterText.substring(0, this.props.crop) + ELLIPSIS\r\n                        : ELLIPSIS + itemFilterText.substring(itemFilterLength + this.props.crop, itemFilterLength);\r\n            }\r\n        }\r\n\r\n        const itemFilter: JSX.Element = this.props.itemTooltipProps ? (\r\n            <Tooltip {...this.props.itemTooltipProps}>\r\n                <span className=\"item-filter-item\">{itemFilterText}</span>\r\n            </Tooltip>\r\n        ) : (\r\n            <span className=\"item-filter-item\">{itemFilterText}</span>\r\n        );\r\n\r\n        return (\r\n            <div className=\"coveo-table-actions item-filter\">\r\n                <span className=\"item-filter-label\">{this.props.label}: </span>\r\n                {itemFilter}\r\n                <button className=\"item-filter-clear\" onClick={() => this.props.onClear()}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-dark-blue\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {isEmpty} from 'underscore';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {ActionsDropdown} from './ActionsDropdown';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\n\r\nexport interface ISecondaryActionsProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const SecondaryActions: React.FunctionComponent<ISecondaryActionsProps> = ({\r\n    actions,\r\n    id,\r\n    moreLabel,\r\n    disabled = false,\r\n}) => {\r\n    let lastFilteredAction: IActionOptions = null;\r\n    const filteredActions = actions\r\n        // filter out disabled actions\r\n        .filter((action: IActionOptions) => action.separator || action.enabled || action.hideDisabled === false)\r\n        // Filter out all separator that are preceded by another separator\r\n        .filter((action: IActionOptions) => {\r\n            if (!action.separator || (action.separator && lastFilteredAction && !lastFilteredAction.separator)) {\r\n                lastFilteredAction = action;\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        // Filter out the last action if it's a separator\r\n        .filter((action: IActionOptions, index: number, actionItems: IActionOptions[]) => {\r\n            return index < actionItems.length - 1 || !action.separator;\r\n        });\r\n\r\n    if (isEmpty(filteredActions)) {\r\n        return null;\r\n    } else {\r\n        const actionsItems: JSX.Element =\r\n            filteredActions?.length === 1 ? (\r\n                <PrimaryActionConnected action={filteredActions[0]} parentId={id} />\r\n            ) : (\r\n                <ActionsDropdown\r\n                    moreLabel={moreLabel}\r\n                    actions={filteredActions}\r\n                    id={`${id}_actionsDropdown`}\r\n                    disabled={disabled}\r\n                />\r\n            );\r\n        return (\r\n            <div className=\"dropdown action primary-action\" style={{cursor: disabled ? 'default' : 'pointer'}}>\r\n                {actionsItems}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * @deprecated use SecondaryActions directly\r\n */\r\nexport const SecondaryActionsConnected = SecondaryActions;\r\n","import * as React from 'react';\r\n\r\nimport {DropdownConnected} from '../dropdown/DropdownConnected';\r\nimport {Svg} from '../svg/Svg';\r\nimport {IActionOptions} from './Action';\r\nimport {ActionDropdownItem} from './ActionDropdownItem';\r\n\r\nexport interface IActionsDropdownProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const MORE_LABEL: string = 'More';\r\n\r\nexport const ActionsDropdown: React.FunctionComponent<IActionsDropdownProps> = ({\r\n    actions,\r\n    moreLabel,\r\n    id,\r\n    disabled = false,\r\n}) => {\r\n    const actionItems = actions?.map((action: IActionOptions, index: number) => (\r\n        <ActionDropdownItem key={`action-${action.id ?? index}`} action={action} parentId={id} />\r\n    ));\r\n\r\n    const toggleContent: JSX.Element[] = [\r\n        <Svg\r\n            key=\"action-dropdown-toggle-icon\"\r\n            svgName=\"more\"\r\n            className=\"action-icon\"\r\n            svgClass=\"icon icon-medium fill-medium-blue\"\r\n        />,\r\n        <span key=\"action-dropdown-toggle-label\" className=\"action-label\" data-trigger=\"more\">\r\n            {moreLabel || MORE_LABEL}\r\n        </span>,\r\n    ];\r\n\r\n    return <DropdownConnected toggleContent={toggleContent} dropdownItems={actionItems} id={id} disabled={disabled} />;\r\n};\r\n\r\n/**\r\n * @deprecated use ActionsDropdown directly instead\r\n */\r\nexport const ActionsDropdownConnected = ActionsDropdown;\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {Dropdown, IDropdownDispatchProps, IDropdownOwnProps, IDropdownProps, IDropdownStateProps} from './Dropdown';\r\nimport {addDropdown, closeDropdown, removeDropdown, toggleDropdown} from './DropdownActions';\r\nimport {IDropdownState} from './DropdownReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IDropdownOwnProps): IDropdownStateProps => {\r\n    const item: IDropdownState = _.findWhere(state.dropdowns, {id: ownProps.id});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IDropdownOwnProps\r\n): IDropdownDispatchProps => ({\r\n    onRender: () => dispatch(addDropdown(ownProps.id)),\r\n    onDestroy: () => dispatch(removeDropdown(ownProps.id)),\r\n    onClick: () => dispatch(toggleDropdown(ownProps.id)),\r\n    onDocumentClick: () => dispatch(closeDropdown(ownProps.id)),\r\n});\r\n\r\nexport const DropdownConnected: React.ComponentClass<IDropdownProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Dropdown);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nexport interface IDropdownOwnProps extends React.ClassAttributes<Dropdown> {\r\n    id?: string;\r\n    toggleContent: JSX.Element[];\r\n    dropdownItems: JSX.Element[];\r\n    className?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IDropdownStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IDropdownDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onClick?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IDropdownProps extends IDropdownOwnProps, IDropdownStateProps, IDropdownDispatchProps {}\r\n\r\nexport class Dropdown extends React.Component<IDropdownProps, any> {\r\n    private dropdown: HTMLDivElement;\r\n\r\n    private handleClick = () => {\r\n        if (!this.props.disabled) {\r\n            this.props.onClick?.();\r\n        }\r\n    };\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.dropdown);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dropdownClasses = classNames(\r\n            'dropdown',\r\n            {\r\n                open: this.props.isOpened,\r\n                'cursor-default': this.props.disabled,\r\n            },\r\n            this.props.className\r\n        );\r\n\r\n        return (\r\n            <div className={dropdownClasses} ref={(dropdown: HTMLDivElement) => (this.dropdown = dropdown)}>\r\n                <span\r\n                    className={classNames('dropdown-toggle inline-flex flex-center', {\r\n                        'disabled transparency-4 cursor-default': this.props.disabled,\r\n                    })}\r\n                    onClick={() => this.handleClick()}\r\n                >\r\n                    {this.props.toggleContent}\r\n                </span>\r\n                <ul className=\"dropdown-menu normal-height\">{this.props.dropdownItems}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IActionDropdownItemProps {\r\n    action: IActionOptions;\r\n    parentId?: string;\r\n}\r\n\r\nexport const ActionDropdownItem: React.FunctionComponent<IActionDropdownItemProps> = ({parentId, action}) => {\r\n    if (action.separator) {\r\n        return <li className=\"divider\" />;\r\n    }\r\n\r\n    if (action.link) {\r\n        return (\r\n            <li>\r\n                <LinkAction action={action} simple={true} />\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <TriggerActionConnected action={action} simple={true} parentId={parentId} />\r\n        </li>\r\n    );\r\n};\r\n","import {IActionOptions} from './Action';\r\n\r\nexport const ACTION_SEPARATOR: IActionOptions = {\r\n    separator: true,\r\n    enabled: true,\r\n};\r\n"],"sourceRoot":""}