{"version":3,"sources":["webpack:///./src/components/examples/ListBoxExampleConnected.tsx?1ff9"],"names":[],"mappings":"2FAAA,OAAe","file":"assets/52.bundle.js","sourcesContent":["export default \"import * as React from 'react';\\r\\nimport {\\r\\n    Button,\\r\\n    convertItemsBoxToStringList,\\r\\n    convertStringListToItemsBox,\\r\\n    IDispatch,\\r\\n    IItemBoxProps,\\r\\n    ListBoxConnected,\\r\\n    ReduxConnect,\\r\\n    ReduxUtils,\\r\\n} from 'react-vapor';\\r\\n\\r\\nimport {IReactVaporExampleState} from '../../Reducers';\\r\\nimport {addListBoxExample, removeListBoxExample, updateListBoxExample} from './ListBoxExampleActions';\\r\\n\\r\\ninterface IListBoxExamplesDispatchProps {\\r\\n    updateOptions: () => void;\\r\\n    addListBoxExample: () => void;\\r\\n    removeListBoxExample: () => void;\\r\\n}\\r\\n\\r\\ninterface IListBoxExamplesStateProps {\\r\\n    items?: IItemBoxProps[];\\r\\n}\\r\\n\\r\\ninterface IListBoxExamplesProps extends Partial<IListBoxExamplesDispatchProps>, Partial<IListBoxExamplesStateProps> {\\r\\n    id: string;\\r\\n    multi?: boolean;\\r\\n}\\r\\n\\r\\nconst randomValue1To100 = () => {\\r\\n    return Math.floor(Math.random() * 100 + 1);\\r\\n};\\r\\n\\r\\nconst mapStateToProps = (\\r\\n    state: IReactVaporExampleState,\\r\\n    ownProps: IListBoxExamplesProps\\r\\n): IListBoxExamplesStateProps => {\\r\\n    const listBoxExample = state.listBoxExampleState[ownProps.id];\\r\\n    if (listBoxExample) {\\r\\n        return {\\r\\n            items: convertStringListToItemsBox(listBoxExample.options),\\r\\n        };\\r\\n    }\\r\\n\\r\\n    return {};\\r\\n};\\r\\n\\r\\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IListBoxExamplesProps): IListBoxExamplesDispatchProps => ({\\r\\n    updateOptions: () => {\\r\\n        dispatch(\\r\\n            updateListBoxExample(ownProps.id, [\\r\\n                ...convertItemsBoxToStringList(ownProps.items),\\r\\n                `${randomValue1To100()}_new_value`,\\r\\n            ])\\r\\n        );\\r\\n    },\\r\\n    addListBoxExample: () => dispatch(addListBoxExample(ownProps.id, convertItemsBoxToStringList(ownProps.items))),\\r\\n    removeListBoxExample: () => dispatch(removeListBoxExample(ownProps.id)),\\r\\n});\\r\\n\\r\\n@ReduxConnect(mapStateToProps, mapDispatchToProps, ReduxUtils.defaultMergeProps)\\r\\nexport class ListBoxExampleConnected extends React.Component<IListBoxExamplesProps> {\\r\\n    componentWillMount() {\\r\\n        this.props.addListBoxExample();\\r\\n    }\\r\\n\\r\\n    componentWillUnmount() {\\r\\n        this.props.removeListBoxExample();\\r\\n    }\\r\\n\\r\\n    private handleOnClick() {\\r\\n        this.props.updateOptions();\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return (\\r\\n            <div>\\r\\n                <ListBoxConnected id={this.props.id} items={this.props.items} multi={!!this.props.multi} />\\r\\n                <Button\\r\\n                    key={this.props.id + 'button'}\\r\\n                    classes={['my2']}\\r\\n                    enabled={true}\\r\\n                    name=\\\"Update options with a reset on selected values\\\"\\r\\n                    onClick={() => this.handleOnClick()}\\r\\n                />\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\";"],"sourceRoot":""}