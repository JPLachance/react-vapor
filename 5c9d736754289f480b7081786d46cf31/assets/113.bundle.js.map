{"version":3,"sources":["webpack:///../../src/util/index.ts","webpack:///../../src/constants/words.ts","webpack:///../src/index.ts","webpack:///../../src/lib/LoremIpsum.ts","webpack:///../../src/constants/formats.ts","webpack:///../../src/constants/lineEndings.ts","webpack:///../../src/lib/generator.ts","webpack:///../../src/util/capitalize.ts","webpack:///../../src/util/isNode.ts","webpack:///../../src/util/isReactNative.ts","webpack:///../../src/util/isWindows.ts","webpack:///../../src/constants/platforms.ts","webpack:///../../src/util/makeArrayOfLength.ts","webpack:///../../src/util/makeArrayOfStrings.ts","webpack:///./src/components/examples/SplitLayoutExamples.tsx"],"names":["count","format","paragraphLowerBound","paragraphUpperBound","random","sentenceLowerBound","sentenceUpperBound","units","words","WORDS","suffix","options","sentencesPerParagraph","max","min","wordsPerSentence","lorem","LoremIpsum","generateParagraphs","generateSentences","generateWords","FORMAT_PLAIN","FORMATS","indexOf","toLowerCase","Error","join","this","generator","Generator","isReactNative","isNode","isWindows","LINE_ENDINGS","WIN32","POSIX","str","FORMAT_HTML","strings","map","formatString","num","generateRandomWords","generateRandomParagraph","makeString","bind","formatStrings","makeArrayOfStrings","getLineEnding","seed","Math","floor","length","generateRandomInteger","makeArrayOfLength","reduce","accumulator","index","pluckRandomWord","trim","capitalize","generateRandomSentence","trimmed","charAt","toUpperCase","slice","module","exports","navigator","product","process","platform","SUPPORTED_PLATFORMS","DARWIN","LINUX","Array","apply","item","exampleTextLeft","exampleTextRight","SplitLayoutExamples","className","leftChildren","rightChildren","i","key","numberOfSteps","currentStep","leftContainerClassName","rightContainerClassName"],"mappings":"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","file":"assets/113.bundle.js","sourcesContent":["import capitalize from \"./capitalize\";\r\nimport isNode from \"./isNode\";\r\nimport isReactNative from \"./isReactNative\";\r\nimport isWindows from \"./isWindows\";\r\nimport makeArrayOfLength from \"./makeArrayOfLength\";\r\nimport makeArrayOfStrings from \"./makeArrayOfStrings\";\r\n\r\nexport {\r\n  capitalize,\r\n  isNode,\r\n  isReactNative,\r\n  isWindows,\r\n  makeArrayOfLength,\r\n  makeArrayOfStrings,\r\n};\r\n","export const WORDS = [\r\n  \"ad\",\r\n  \"adipisicing\",\r\n  \"aliqua\",\r\n  \"aliquip\",\r\n  \"amet\",\r\n  \"anim\",\r\n  \"aute\",\r\n  \"cillum\",\r\n  \"commodo\",\r\n  \"consectetur\",\r\n  \"consequat\",\r\n  \"culpa\",\r\n  \"cupidatat\",\r\n  \"deserunt\",\r\n  \"do\",\r\n  \"dolor\",\r\n  \"dolore\",\r\n  \"duis\",\r\n  \"ea\",\r\n  \"eiusmod\",\r\n  \"elit\",\r\n  \"enim\",\r\n  \"esse\",\r\n  \"est\",\r\n  \"et\",\r\n  \"eu\",\r\n  \"ex\",\r\n  \"excepteur\",\r\n  \"exercitation\",\r\n  \"fugiat\",\r\n  \"id\",\r\n  \"in\",\r\n  \"incididunt\",\r\n  \"ipsum\",\r\n  \"irure\",\r\n  \"labore\",\r\n  \"laboris\",\r\n  \"laborum\",\r\n  \"Lorem\",\r\n  \"magna\",\r\n  \"minim\",\r\n  \"mollit\",\r\n  \"nisi\",\r\n  \"non\",\r\n  \"nostrud\",\r\n  \"nulla\",\r\n  \"occaecat\",\r\n  \"officia\",\r\n  \"pariatur\",\r\n  \"proident\",\r\n  \"qui\",\r\n  \"quis\",\r\n  \"reprehenderit\",\r\n  \"sint\",\r\n  \"sit\",\r\n  \"sunt\",\r\n  \"tempor\",\r\n  \"ullamco\",\r\n  \"ut\",\r\n  \"velit\",\r\n  \"veniam\",\r\n  \"voluptate\",\r\n];\r\n","import { WORDS } from \"./constants/words\";\r\nimport { IPrng } from \"./lib/generator\";\r\nimport LoremIpsum from \"./lib/LoremIpsum\";\r\n\r\nexport interface ILoremIpsumParams {\r\n  count?: number;\r\n  format?: \"plain\" | \"html\";\r\n  paragraphLowerBound?: number;\r\n  paragraphUpperBound?: number;\r\n  random?: IPrng;\r\n  sentenceLowerBound?: number;\r\n  sentenceUpperBound?: number;\r\n  units?: \"words\" | \"word\" | \"sentences\" | \"sentence\" | \"paragraphs\" | \"paragraph\";\r\n  words?: string[];\r\n  suffix?: string;\r\n}\r\n\r\nconst loremIpsum = ({\r\n  count = 1,\r\n  format = \"plain\",\r\n  paragraphLowerBound = 3,\r\n  paragraphUpperBound = 7,\r\n  random,\r\n  sentenceLowerBound = 5,\r\n  sentenceUpperBound = 15,\r\n  units = \"sentences\",\r\n  words = WORDS,\r\n  suffix = \"\",\r\n}: ILoremIpsumParams = {}): string => {\r\n  const options = {\r\n    random,\r\n    sentencesPerParagraph: {\r\n      max: paragraphUpperBound,\r\n      min: paragraphLowerBound,\r\n    },\r\n    words,\r\n    wordsPerSentence: {\r\n      max: sentenceUpperBound,\r\n      min: sentenceLowerBound,\r\n    },\r\n  };\r\n\r\n  const lorem: LoremIpsum = new LoremIpsum(options, format, suffix);\r\n\r\n  switch (units) {\r\n    case \"paragraphs\":\r\n    case \"paragraph\":\r\n      return lorem.generateParagraphs(count);\r\n    case \"sentences\":\r\n    case \"sentence\":\r\n      return lorem.generateSentences(count);\r\n    case \"words\":\r\n    case \"word\":\r\n      return lorem.generateWords(count);\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport { loremIpsum, LoremIpsum };\r\n","import { FORMAT_HTML, FORMAT_PLAIN, FORMATS } from \"../constants/formats\";\r\nimport { LINE_ENDINGS } from \"../constants/lineEndings\";\r\nimport Generator, { IGeneratorOptions } from \"../lib/generator\";\r\nimport { isNode, isReactNative, isWindows, makeArrayOfStrings } from \"../util\";\r\n\r\nclass LoremIpsum {\r\n  public generator: Generator;\r\n  public format: string;\r\n  public suffix?: string;\r\n\r\n  constructor(\r\n    options: IGeneratorOptions = {},\r\n    format: string = FORMAT_PLAIN,\r\n    suffix?: string,\r\n  ) {\r\n    if (FORMATS.indexOf(format.toLowerCase()) === -1) {\r\n      throw new Error(\r\n        `${format} is an invalid format. Please use ${FORMATS.join(\" or \")}.`,\r\n      );\r\n    }\r\n\r\n    this.format = format.toLowerCase();\r\n    this.suffix = suffix;\r\n    this.generator = new Generator(options);\r\n  }\r\n\r\n  public getLineEnding() {\r\n    if (this.suffix) {\r\n      return this.suffix;\r\n    }\r\n\r\n    if (!isReactNative() && isNode() && isWindows()) {\r\n      return LINE_ENDINGS.WIN32;\r\n    }\r\n\r\n    return LINE_ENDINGS.POSIX;\r\n  }\r\n\r\n  public formatString(str: string): string {\r\n    if (this.format === FORMAT_HTML) {\r\n      return `<p>${str}</p>`;\r\n    }\r\n    return str;\r\n  }\r\n\r\n  public formatStrings(strings: string[]): string[] {\r\n    return strings.map((str) => this.formatString(str));\r\n  }\r\n\r\n  public generateWords(num?: number): string {\r\n    return this.formatString(this.generator.generateRandomWords(num));\r\n  }\r\n\r\n  public generateSentences(num?: number): string {\r\n    return this.formatString(this.generator.generateRandomParagraph(num));\r\n  }\r\n\r\n  public generateParagraphs(num: number): string {\r\n    const makeString = this.generator.generateRandomParagraph.bind(\r\n      this.generator,\r\n    );\r\n    return this.formatStrings(makeArrayOfStrings(num, makeString)).join(\r\n      this.getLineEnding(),\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoremIpsum;\r\n","export const FORMAT_HTML = \"html\";\r\nexport const FORMAT_PLAIN = \"plain\";\r\nexport const FORMATS = [FORMAT_HTML, FORMAT_PLAIN];\r\n","export const LINE_ENDINGS = {\r\n  POSIX: \"\\n\",\r\n  WIN32: \"\\r\\n\",\r\n};\r\n","import { WORDS } from \"../constants/words\";\r\nimport { capitalize, makeArrayOfLength } from \"../util\";\r\n\r\nexport interface IBounds {\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport type IPrng = () => number;\r\n\r\nexport type ISeedRandom = new (seed?: string) => IPrng;\r\n\r\nexport interface IMath {\r\n  seedrandom: ISeedRandom;\r\n}\r\n\r\nexport interface IGeneratorOptions {\r\n  sentencesPerParagraph?: IBounds;\r\n  wordsPerSentence?: IBounds;\r\n  random?: IPrng;\r\n  seed?: string;\r\n  words?: string[];\r\n}\r\n\r\nclass Generator {\r\n  public sentencesPerParagraph: IBounds;\r\n  public wordsPerSentence: IBounds;\r\n  public random: IPrng;\r\n  public words: string[];\r\n\r\n  constructor({\r\n    sentencesPerParagraph = { max: 7, min: 3 },\r\n    wordsPerSentence = { max: 15, min: 5 },\r\n    random,\r\n    seed,\r\n    words = WORDS,\r\n  }: IGeneratorOptions = {}) {\r\n    if (sentencesPerParagraph.min > sentencesPerParagraph.max) {\r\n      throw new Error(\r\n        `Minimum number of sentences per paragraph (${\r\n          sentencesPerParagraph.min\r\n        }) cannot exceed maximum (${sentencesPerParagraph.max}).`,\r\n      );\r\n    }\r\n\r\n    if (wordsPerSentence.min > wordsPerSentence.max) {\r\n      throw new Error(\r\n        `Minimum number of words per sentence (${\r\n          wordsPerSentence.min\r\n        }) cannot exceed maximum (${wordsPerSentence.max}).`,\r\n      );\r\n    }\r\n\r\n    this.sentencesPerParagraph = sentencesPerParagraph;\r\n    this.words = words;\r\n    this.wordsPerSentence = wordsPerSentence;\r\n    this.random = random || Math.random;\r\n  }\r\n\r\n  public generateRandomInteger(min: number, max: number): number {\r\n    return Math.floor(this.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  public generateRandomWords(num?: number): string {\r\n    const { min, max } = this.wordsPerSentence;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.pluckRandomWord()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public generateRandomSentence(num?: number): string {\r\n    return `${capitalize(this.generateRandomWords(num))}.`;\r\n  }\r\n\r\n  public generateRandomParagraph(num?: number): string {\r\n    const { min, max } = this.sentencesPerParagraph;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.generateRandomSentence()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public pluckRandomWord(): string {\r\n    const min = 0;\r\n    const max = this.words.length - 1;\r\n    const index = this.generateRandomInteger(min, max);\r\n    return this.words[index];\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n","/**\r\n * @param str  A string that may or may not be capitalized.\r\n * @returns    A capitalized string.\r\n */\r\nconst capitalize = (str: string): string => {\r\n  const trimmed = str.trim();\r\n  return trimmed.charAt(0).toUpperCase() + trimmed.slice(1);\r\n};\r\n\r\nexport default capitalize;\r\n","/**\r\n * @returns  True if the runtime is NodeJS.\r\n */\r\nconst isNode = (): boolean => {\r\n  return typeof module !== \"undefined\" && !!module.exports;\r\n};\r\n\r\nexport default isNode;\r\n","/**\r\n * @returns  True if runtime is ReactNative.\r\n */\r\nconst isReactNative = (): boolean => {\r\n  return (\r\n    typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\"\r\n  );\r\n};\r\n\r\nexport default isReactNative;\r\n","import { SUPPORTED_PLATFORMS } from \"../constants/platforms\";\r\n\r\n/**\r\n * @returns True if process is windows.\r\n */\r\nconst isWindows = (): boolean => {\r\n  return typeof process !== \"undefined\" && process.platform === SUPPORTED_PLATFORMS.WIN32;\r\n};\r\n\r\nexport default isWindows;\r\n","export const SUPPORTED_PLATFORMS = {\r\n  DARWIN: \"darwin\",\r\n  LINUX: \"linux\",\r\n  WIN32: \"win32\",\r\n};\r\n","/**\r\n * @param length Length \"x\".\r\n * @returns      An array of indexes of length \"x\".\r\n */\r\nconst makeArrayOfLength = (length: number = 0): number[] => {\r\n  return Array.apply(null, Array(length)).map(\r\n    (item: any, index: number): number => index,\r\n  );\r\n};\r\n\r\nexport default makeArrayOfLength;\r\n","import { makeArrayOfLength } from \".\";\r\n/**\r\n * @param length  Length \"x\".\r\n * @returns       An array of strings of length \"x\".\r\n */\r\nconst makeArrayOfStrings = (\r\n  length: number,\r\n  makeString: () => string,\r\n): string[] => {\r\n  const arr = makeArrayOfLength(length);\r\n  return arr.map(() => makeString());\r\n};\r\n\r\nexport default makeArrayOfStrings;\r\n","import {loremIpsum} from 'lorem-ipsum';\r\nimport * as React from 'react';\r\nimport {SplitLayout, StepProgressBar} from 'react-vapor';\r\nimport {range} from 'underscore';\r\n\r\nconst exampleTextLeft = `I am a left child. ${loremIpsum({count: 5, sentenceUpperBound: 15})}`;\r\nconst exampleTextRight = `I am a right child. ${loremIpsum({count: 5, sentenceUpperBound: 15})}`;\r\n\r\nexport const SplitLayoutExamples = () => (\r\n    <div className=\"mt2\">\r\n        <div className=\"form-group\">\r\n            <label className=\"form-control-label\">SplitLayout with one JSX.Element on each side</label>\r\n            <div className=\"form-control\">\r\n                <SplitLayout\r\n                    leftChildren={<div className=\"p1\">{exampleTextLeft}</div>}\r\n                    rightChildren={<div className=\"p1\">{exampleTextRight}</div>}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label className=\"form-control-label\">SplitLayout with multiple JSX.Elements on each side</label>\r\n            <div className=\"form-control\">\r\n                <SplitLayout\r\n                    leftChildren={range(2).map((i) => (\r\n                        <div key={i} className=\"p1\">\r\n                            {exampleTextLeft}\r\n                        </div>\r\n                    ))}\r\n                    rightChildren={[\r\n                        <div key=\"div\" className=\"p1\">\r\n                            Something is loading:\r\n                        </div>,\r\n                        <StepProgressBar key=\"progress\" className=\"p1\" numberOfSteps={10} currentStep={5} />,\r\n                    ]}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label className=\"form-control-label\">SplitLayout with classes on container</label>\r\n            <div className=\"form-control\">\r\n                <SplitLayout\r\n                    leftChildren={<div className=\"p1\">{exampleTextLeft}</div>}\r\n                    rightChildren={<div className=\"p1\">{exampleTextRight}</div>}\r\n                    className=\"text-medium-blue bold\"\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label className=\"form-control-label\">SplitLayout with classes on left and right children container</label>\r\n            <div className=\"form-control\">\r\n                <div className=\"form-control\">\r\n                    <SplitLayout\r\n                        leftChildren={range(2).map((i) => (\r\n                            <div key={i} className=\"p1\">\r\n                                {exampleTextLeft}\r\n                            </div>\r\n                        ))}\r\n                        rightChildren={range(2).map((i) => (\r\n                            <div key={i} className=\"p1\">\r\n                                {exampleTextRight}\r\n                            </div>\r\n                        ))}\r\n                        leftContainerClassName=\"text-medium-blue bold\"\r\n                        rightContainerClassName=\"text-orange italic\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n"],"sourceRoot":""}