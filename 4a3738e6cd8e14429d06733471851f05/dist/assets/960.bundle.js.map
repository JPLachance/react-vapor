{"version":3,"sources":["webpack:///./src/components/radio/examples/RadioExamples.tsx?0355","webpack:///./src/components/input/Input.tsx?1d15","webpack:///./src/components/input/Label.tsx?dafb","webpack:///./src/utils/PropsToOmitUtils.ts?e979","webpack:///./src/components/input/InputDescription.tsx?8553","webpack:///./src/components/input/LabeledInput.tsx?95a1","webpack:///./src/components/radio/RadioSelect.tsx?93ae","webpack:///./src/components/radio/RadioSelectSelectors.ts?dc90","webpack:///./src/components/radio/Radio.tsx?1970","webpack:///./src/components/radio/RadioSelectConnected.tsx?d1ff"],"names":["RadioExamples","title","RadioSelectExample","RadioSelectDisabledExample","description","level","label","id","disabledTooltip","disabledValuesOnMount","valueOnMount","onChangeCallback","name","value","className","enabled","onClick","dispatch","disabledValues","disabled","onMount","onUnmount","validatedInputTypes","inputPropsToOmit","props","state","valid","componentWillMount","this","onRender","validOnMount","validateOnMount","validate","defaultValue","disabledOnMount","componentWillUnmount","onDestroy","componentDidUpdate","prevProps","innerInput","reset","getInnerValue","setState","handleBlur","onBlur","handleChange","onChange","validOnChange","validateOnChange","handleClick","e","handleKeyUp","event","onKeyUp","getLabel","labelProps","labelTitle","key","htmlFor","render","classes","type","innerInputClasses","invalid","inputElements","ref","min","minimum","max","maximum","input","children","placement","Right","defaultProps","required","validMessage","invalidMessage","attributes","internalComponentPropsToOmit","PropsToOmitUtils","internal","InputDescription","LabeledInput","message","helpText","headerClassName","optionalInformation","header","information","Top","svgName","svgClass","componentDidMount","map","child","checked","isValueDisabled","handleToggle","childValue","get","radioSelects","RadioSelectSelectors","getValue","radioSelect","getDisabledValue","RadioSelectConnected","ownProps","mergeProps"],"mappings":"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","file":"assets/960.bundle.js","sourcesContent":["import * as React from 'react';\n\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\nimport {ExamplesStore} from '../../../../docs/Store';\nimport {Button} from '../../button/Button';\nimport {Label} from '../../input/Label';\nimport {LabeledInput} from '../../input/LabeledInput';\nimport {Section} from '../../section/Section';\nimport {Radio} from '../Radio';\nimport {IRadioSelectProps} from '../RadioSelect';\nimport {setRadioSelect} from '../RadioSelectActions';\nimport {RadioSelectConnected} from '../RadioSelectConnected';\n\nexport interface IRadioSelectExampleProps extends IRadioSelectProps {\n    defaultValue?: string;\n}\n\nexport interface IRadioSelectExampleState {\n    value: string;\n}\n\nexport const RadioExamples: ExampleComponent = () => (\n    <Section title=\"Radio set\">\n        <RadioSelectExample />\n        <RadioSelectDisabledExample />\n    </Section>\n);\n\nRadioExamples.description = 'Radio Buttons allow for the selection of a single option among a set of options.';\n\nconst radioSelectConnectedId = 'radioselectconnected';\n\n// start-print\n\nconst RadioSelectExample: React.FunctionComponent = () => (\n    <Section level={2} title=\"Radio select with redux store\">\n        <LabeledInput label=\"The Label of the Radio Select\">\n            <RadioSelectConnected\n                id=\"radioselectconnected\"\n                disabledTooltip=\"you see me because of the disabledTooltip prop\"\n                disabledValuesOnMount={['blue']}\n                valueOnMount={'brown'}\n                onChangeCallback={() => 'insert a callBack function here'}\n            >\n                <Radio id=\"Option1\" name=\"enabledOptions\" value=\"blue\">\n                    <Label>Blue</Label>\n                </Radio>\n                <Radio id=\"Option2\" name=\"enabledOptions\" value=\"green\">\n                    <Label>Green</Label>\n                    <div className=\"mod-align-with-radio-label text-lynch mt1\">\n                        The green color has an optional description.\n                    </div>\n                </Radio>\n                <Radio id=\"Option3\" name=\"enabledOptions\" value=\"brown\">\n                    <Label>Brown</Label>\n                </Radio>\n            </RadioSelectConnected>\n        </LabeledInput>\n        <Section level={3}>\n            <Button\n                enabled\n                name=\"disable blue option\"\n                onClick={() =>\n                    ExamplesStore.dispatch(setRadioSelect(radioSelectConnectedId, {disabledValues: ['blue']}))\n                }\n            />\n            <Button\n                enabled\n                name=\"enable blue option\"\n                onClick={() => ExamplesStore.dispatch(setRadioSelect(radioSelectConnectedId, {disabledValues: []}))}\n            />\n        </Section>\n    </Section>\n);\n\nconst RadioSelectDisabledExample: React.FunctionComponent = () => (\n    <Section level={3}>\n        <LabeledInput label=\"A Radio Select with all options disabled\">\n            <RadioSelectConnected\n                value=\"a-value\"\n                disabled\n                onMount={() => 'I am Mounted, just for you!'}\n                onUnmount={() => 'This is the end, my friend...'}\n            >\n                <Radio id=\"Option4\" name=\"disabledOptions\" value=\"yellow\">\n                    <Label>Yellow</Label>\n                </Radio>\n                <Radio id=\"Option5\" name=\"disabledOptions\" value=\"red\">\n                    <Label>Red</Label>\n                </Radio>\n            </RadioSelectConnected>\n        </LabeledInput>\n    </Section>\n);\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\nimport {contains, isUndefined, uniqueId} from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {PropsToOmitUtils} from '../../utils/PropsToOmitUtils';\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IInputState} from './InputReducers';\r\nimport {ILabelProps, Label} from './Label';\r\n\r\nconst validatedInputTypes: string[] = ['number', 'text', 'password'];\r\n\r\ntype IInputNativeTagOwnProps = Omit<\r\n    React.AllHTMLAttributes<HTMLInputElement>,\r\n    'defaultValue' | 'onClick' | 'onChange' | 'onBlur' | 'value'\r\n>;\r\n\r\nexport interface IInputAdditionalOwnProps {\r\n    id?: string;\r\n    classes?: IClassName;\r\n    innerInputClasses?: IClassName;\r\n    validate?: (value: any) => boolean;\r\n    labelTitle?: React.ReactNode;\r\n    labelProps?: ILabelProps;\r\n    validateOnChange?: boolean;\r\n    disabledOnMount?: boolean;\r\n    validateOnMount?: boolean;\r\n    disabledTooltip?: string;\r\n    minimum?: number /* @deprecated use min instead */;\r\n    maximum?: number /* @deprecated use max instead */;\r\n    onBlur?: (value: string) => void;\r\n    defaultValue?: string;\r\n}\r\n\r\nexport interface IInputNativeTagStateProps {\r\n    value?: string;\r\n    checked?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IInputAdditionalStateProps {\r\n    valid?: boolean;\r\n    indeterminate?: boolean;\r\n}\r\n\r\nexport interface IInputStateProps extends IInputNativeTagStateProps, IInputAdditionalStateProps {}\r\n\r\nexport interface IInputDispatchProps {\r\n    onDestroy?: () => void;\r\n    onRender?: (value?: string, valid?: boolean, disabled?: boolean) => void;\r\n    onChange?: (value?: string, valid?: boolean) => void;\r\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nconst inputPropsToOmit = keys<IInputAdditionalOwnProps & IInputAdditionalStateProps & IInputDispatchProps>();\r\n\r\nexport interface IInputOwnProps extends IInputAdditionalOwnProps, IInputNativeTagOwnProps {}\r\n\r\nexport interface IInputProps extends IInputOwnProps, Partial<IInputStateProps>, Partial<IInputDispatchProps> {}\r\n\r\nexport interface IInputComponentState {\r\n    valid: boolean;\r\n}\r\n\r\nexport class Input extends React.Component<IInputProps, IInputComponentState> {\r\n    private innerInput: HTMLInputElement;\r\n\r\n    static defaultProps: Partial<IInputProps> = {\r\n        id: uniqueId('input'),\r\n        type: 'text',\r\n        valid: true,\r\n        labelTitle: '',\r\n        required: true,\r\n    };\r\n\r\n    constructor(props: IInputProps, state: IInputState) {\r\n        super(props, state);\r\n        this.state = {\r\n            valid: this.props.valid,\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            // undefined validOnMount will default to true in the state\r\n            const validOnMount =\r\n                this.props.validateOnMount && this.props.validate && this.props.validate(this.props.defaultValue || '');\r\n\r\n            this.props.onRender(this.props.defaultValue, validOnMount, this.props.disabledOnMount);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IInputProps) {\r\n        if (this.props.valid !== prevProps.valid) {\r\n            this.validate();\r\n        }\r\n\r\n        if (prevProps.value !== this.props.value && this.innerInput) {\r\n            this.innerInput.value = this.props.value;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.innerInput.value = '';\r\n    }\r\n\r\n    getInnerValue(): string {\r\n        return (this.innerInput && this.innerInput.value) || '';\r\n    }\r\n\r\n    validate() {\r\n        this.setState({\r\n            valid: this.props.valid && !(this.props.validate && !this.props.validate(this.getInnerValue())),\r\n        });\r\n    }\r\n\r\n    private handleBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(this.getInnerValue());\r\n        }\r\n    }\r\n\r\n    private handleChange() {\r\n        if (this.props.onChange) {\r\n            const validOnChange =\r\n                this.props.validateOnChange && this.props.validate && this.props.validate(this.getInnerValue());\r\n            this.props.onChange(this.getInnerValue(), validOnChange);\r\n        }\r\n    }\r\n\r\n    private handleClick(e: React.MouseEvent<HTMLElement>) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n\r\n    private handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(event);\r\n        }\r\n    }\r\n\r\n    private getLabel(): React.ReactNode {\r\n        const {labelProps, labelTitle} = this.props;\r\n        if (typeof labelTitle === 'string') {\r\n            return labelTitle || this.props.validate ? (\r\n                <Label key={this.props.id + 'label'} htmlFor={this.props.id} {...labelProps}>\r\n                    {labelTitle}\r\n                </Label>\r\n            ) : null;\r\n        } else {\r\n            return labelTitle;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames(\r\n            'input-wrapper validate',\r\n            {\r\n                'input-field': contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.classes\r\n        );\r\n        const innerInputClasses = classNames(\r\n            {\r\n                invalid: !this.state.valid && contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.innerInputClasses\r\n        );\r\n\r\n        const inputElements = [\r\n            <input\r\n                key={this.props.id}\r\n                id={this.props.id}\r\n                className={innerInputClasses}\r\n                defaultValue={!isUndefined(this.props.value) ? this.props.value : this.props.defaultValue}\r\n                ref={(innerInput: HTMLInputElement) => (this.innerInput = innerInput)}\r\n                onBlur={() => this.handleBlur()}\r\n                onChange={() => this.handleChange()}\r\n                onKeyUp={(event: React.KeyboardEvent<HTMLInputElement>) => this.handleKeyUp(event)}\r\n                min={this.props.minimum}\r\n                max={this.props.maximum}\r\n                {..._.omit(this.props, [...PropsToOmitUtils.input, ...inputPropsToOmit])}\r\n            />,\r\n            this.getLabel(),\r\n            this.props.children,\r\n        ];\r\n\r\n        return this.props.disabled && this.props.disabledTooltip ? (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                <Tooltip title={this.props.disabledTooltip} placement={TooltipPlacement.Right}>\r\n                    {inputElements}\r\n                </Tooltip>\r\n            </div>\r\n        ) : (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                {inputElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ILabelProps {\r\n    type?: string;\r\n    classes?: string[];\r\n    validMessage?: string;\r\n    invalidMessage?: string;\r\n}\r\n\r\nexport class Label extends React.Component<ILabelProps & React.HTMLProps<HTMLLabelElement>, any> {\r\n    render() {\r\n        const classes = classNames(this.props.classes);\r\n        const {validMessage, invalidMessage, children, ...attributes} = this.props;\r\n        return (\r\n            <label\r\n                className={classes}\r\n                data-valid-message={validMessage}\r\n                data-invalid-message={invalidMessage}\r\n                {...attributes}\r\n            >\r\n                {children}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","const internalComponentPropsToOmit: string[] = ['children', 'dangerouslySetInnerHTML'];\r\n\r\n// We omit those props for the input native tag because those props are reserved for the Input component and\r\n// to stay compatible with the old interface\r\nconst inputTagPropsToOmit: string[] = [\r\n    ...internalComponentPropsToOmit,\r\n    'defaultValue',\r\n    'onClick',\r\n    'onChange',\r\n    'onBlur',\r\n    'value',\r\n    'valid',\r\n];\r\n\r\nexport const PropsToOmitUtils = {\r\n    internal: internalComponentPropsToOmit,\r\n    input: inputTagPropsToOmit,\r\n};\r\n","import * as React from 'react';\n\nexport const InputDescription: React.FunctionComponent = ({children}) => (\n    <section className=\"text-dark-medium-grey help-text\">{children}</section>\n);\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\nimport {Svg} from '../svg/Svg';\nimport {Tooltip} from '../tooltip/Tooltip';\nimport {InputDescription} from './InputDescription';\n\nexport interface ILabeledInputProps {\n    label?: React.ReactNode;\n    message?: React.ReactNode;\n    helpText?: React.ReactNode;\n    headerClassName?: string;\n    optionalInformation?: string;\n}\n\nexport const LabeledInput: React.FunctionComponent<ILabeledInputProps> = ({\n    children,\n    label,\n    message,\n    helpText: description,\n    headerClassName,\n    optionalInformation: information,\n}) => {\n    const header =\n        !!label || !!information ? (\n            <header className={classNames('label', 'text-light-blue', headerClassName)}>\n                {!!label ? <span>{label}</span> : null}\n                {!!information ? (\n                    <Tooltip title={information} placement={TooltipPlacement.Top} className=\"ml1\">\n                        <Svg svgName=\"info-14\" svgClass=\"icon fill-medium-grey\" />\n                    </Tooltip>\n                ) : null}\n            </header>\n        ) : null;\n\n    return (\n        <div className=\"labeled-input\">\n            {header}\n            {children}\n            {!!message && <InputDescription>{message}</InputDescription>}\n            {!!description && <InputDescription>{description}</InputDescription>}\n        </div>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {ToggleForm} from '../childForm/ToggleForm';\r\nimport {Radio} from './Radio';\r\n\r\nexport interface IRadioSelectOnChangeCallback {\r\n    onChange?: (value: string, id?: string, e?: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nexport interface IRadioSelectProps extends IRadioSelectOnChangeCallback {\r\n    id?: string;\r\n    name?: string;\r\n    className?: string;\r\n    value?: string;\r\n    disabled?: boolean;\r\n    disabledTooltip?: string;\r\n    children?: Array<React.ReactElement<Radio>> | Array<React.ReactElement<ToggleForm>>;\r\n    onChangeCallback?: (value: string, id?: string, e?: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nexport interface IRadioSelectConnectedProps {\r\n    valueOnMount?: string;\r\n    disabledValuesOnMount?: string[];\r\n}\r\n\r\nexport interface IRadioSelectDispatchProps extends IRadioSelectOnChangeCallback {\r\n    onMount?: (id: string, valueOnMount: string, disabledValues: string[]) => void;\r\n    onUnmount?: (id: string) => void;\r\n}\r\n\r\nexport interface IRadioSelectStateProps {\r\n    value?: string;\r\n    disabledValues?: string[];\r\n}\r\n\r\nexport interface IRadioSelectAllProps\r\n    extends IRadioSelectProps,\r\n        IRadioSelectConnectedProps,\r\n        IRadioSelectDispatchProps,\r\n        IRadioSelectStateProps {}\r\n\r\nexport class RadioSelect extends React.PureComponent<IRadioSelectAllProps> {\r\n    componentDidMount() {\r\n        this.props.onMount?.(this.props.id, this.props.valueOnMount, this.props.disabledValuesOnMount);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onUnmount?.(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.map(this.props.children, (child: React.ReactElement<any>) => {\r\n            return React.cloneElement(child, {\r\n                name: child.props.name || this.props.name,\r\n                checked: this.props.value === child.props.value,\r\n                disabled: this.isValueDisabled(child.props.value),\r\n                disabledTooltip: this.props.disabledTooltip,\r\n                onClick: (e: React.MouseEvent<HTMLElement>) => {\r\n                    child.props.onClick && child.props.onClick(e);\r\n                    this.handleToggle(child.props.value, e);\r\n                },\r\n            });\r\n        });\r\n\r\n        return <div className={classNames('form-control radio-select', this.props.className)}>{children}</div>;\r\n    }\r\n\r\n    private handleToggle(value: string, e: React.MouseEvent<HTMLElement>) {\r\n        this.props.onChange?.(value, this.props.id, e);\r\n        this.props.onChangeCallback?.(value, this.props.id, e);\r\n    }\r\n\r\n    private isValueDisabled(childValue: string): boolean {\r\n        return (\r\n            this.props.disabled || (!!this.props.disabledValues && _.contains(this.props.disabledValues, childValue))\r\n        );\r\n    }\r\n}\r\n","import {createSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IRadioSelectState, radioSelectInitialState} from './RadioSelectReducers';\r\n\r\nconst get = (state: IReactVaporState, {id}: {id: string}): IRadioSelectState => {\r\n    return _.findWhere(state.radioSelects, {id}) || radioSelectInitialState;\r\n};\r\n\r\nconst getValue = createSelector(get, (radioSelect: IRadioSelectState) => radioSelect && radioSelect.value);\r\n\r\nconst getDisabledValue = createSelector(\r\n    get,\r\n    (radioSelect: IRadioSelectState) => radioSelect && radioSelect.disabledValues\r\n);\r\nexport const RadioSelectSelectors = {\r\n    get,\r\n    getValue,\r\n    getDisabledValue,\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {IInputProps, Input} from '../input/Input';\r\n\r\nexport class Radio extends Input {\r\n    static defaultProps: Partial<IInputProps> = {\r\n        ...Input.defaultProps,\r\n        checked: false,\r\n        disabled: false,\r\n    };\r\n\r\n    render() {\r\n        const classes: string = classNames('radio-option', this.props.classes);\r\n        return <Input {...this.props} classes={[classes]} type=\"radio\" />;\r\n    }\r\n}\r\n","import {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    IRadioSelectAllProps,\r\n    IRadioSelectDispatchProps,\r\n    IRadioSelectProps,\r\n    IRadioSelectStateProps,\r\n    RadioSelect,\r\n} from './RadioSelect';\r\nimport {removeRadioSelect, setRadioSelect} from './RadioSelectActions';\r\nimport {RadioSelectSelectors} from './RadioSelectSelectors';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IRadioSelectProps): IRadioSelectStateProps => ({\r\n    value: RadioSelectSelectors.getValue(state, {id: ownProps.id}),\r\n    disabledValues: RadioSelectSelectors.getDisabledValue(state, {id: ownProps.id}),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch): IRadioSelectDispatchProps => ({\r\n    onMount: (id: string, valueOnMount: string, disabledValuesOnMount?: string[]) =>\r\n        dispatch(setRadioSelect(id, {value: valueOnMount, disabledValues: disabledValuesOnMount})),\r\n    onUnmount: (id: string) => dispatch(removeRadioSelect(id)),\r\n    onChange: (value: string, id: string) => dispatch(setRadioSelect(id, {value})),\r\n});\r\n\r\nexport const RadioSelectConnected: React.ComponentClass<IRadioSelectAllProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(RadioSelect);\r\n"],"sourceRoot":""}