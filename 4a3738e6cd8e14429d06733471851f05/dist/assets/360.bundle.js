(window.webpackJsonp=window.webpackJsonp||[]).push([[360],{1450:function(e,r,t){"use strict";t.r(r),r.default="import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {FacetMoreRows} from './FacetMoreRows';\r\nimport {FacetMoreRowsConnected} from './FacetMoreRowsConnected';\r\nimport {FacetMoreToggle} from './FacetMoreToggle';\r\nimport {FacetMoreToggleConnected} from './FacetMoreToggleConnected';\r\nimport {FacetRow} from './FacetRow';\r\n\r\nexport interface IFacet {\r\n    name: string;\r\n    formattedName: string;\r\n    tooltipLabel?: string;\r\n    count?: string;\r\n    exclude?: boolean;\r\n}\r\n\r\nexport interface IFacetOwnProps extends React.ClassAttributes<Facet> {\r\n    facet: IFacet;\r\n    facetRows: IFacet[];\r\n    toggleFacet: (facet: string, facetRow: IFacet) => void;\r\n    clearFacet: (facet: string) => void;\r\n    clearFacetLabel?: string;\r\n    maxRowsToShow?: number;\r\n    maxTooltipLabelLength?: number;\r\n    excludeTooltipMessage?(facetsRowName: string): string;\r\n}\r\n\r\nexport interface IFacetStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    selectedFacetRows?: IFacet[];\r\n}\r\n\r\nexport interface IFacetDispatchProps {\r\n    onRender?: (facet: string) => void;\r\n    onDestroy?: (facet: string) => void;\r\n    onToggleFacet?: (facet: string, facetRow: IFacet) => void;\r\n    onClearFacet?: (facet: string) => void;\r\n}\r\n\r\nexport interface IFacetChildrenProps {\r\n    moreLabel?: string;\r\n    filterPlaceholder?: string;\r\n    enableExclusions?: boolean;\r\n}\r\n\r\nexport interface IFacetProps extends IFacetOwnProps, IFacetStateProps, IFacetDispatchProps, IFacetChildrenProps {}\r\n\r\nexport const CLEAR_FACET_LABEL: string = 'Clear';\r\n\r\nexport class Facet extends React.Component<IFacetProps, any> {\r\n    static defaultProps: Partial<IFacetProps> = {\r\n        clearFacetLabel: CLEAR_FACET_LABEL,\r\n        selectedFacetRows: [],\r\n        maxRowsToShow: 5,\r\n    };\r\n\r\n    private buildFacet = (facetRow: IFacet) => {\r\n        this.props.toggleFacet(this.props.facet.name, facetRow);\r\n        if (this.props.onToggleFacet) {\r\n            this.props.onToggleFacet(this.props.facet.name, facetRow);\r\n        }\r\n    };\r\n\r\n    private clearFacet = () => {\r\n        this.props.clearFacet(this.props.facet.name);\r\n        if (this.props.onClearFacet) {\r\n            this.props.onClearFacet(this.props.facet.name);\r\n        }\r\n    };\r\n\r\n    private sortFacetRows(facetRows: IFacet[]) {\r\n        return _.sortBy(facetRows, (facetRow: IFacet) => facetRow.formattedName.toLowerCase());\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.facetRows.length && !this.props.selectedFacetRows.length) {\r\n            return null;\r\n        }\r\n        const removeSelectedClass: string =\r\n            'facet-header-eraser' + (this.props.selectedFacetRows.length ? '' : ' hidden');\r\n        const selected: IFacet[] = this.sortFacetRows(this.props.selectedFacetRows);\r\n        const unselected: IFacet[] = this.sortFacetRows(this.props.facetRows);\r\n        const allRows: IFacet[] = _.union(selected, unselected);\r\n        const facetRows: IFacet[] = _.uniq(allRows, false, (item) => item.name);\r\n        const rows: JSX.Element[] = _.map(facetRows, (facetRow: IFacet) => {\r\n            const isSelected: boolean = _.contains(_.pluck(selected, 'name'), facetRow.name);\r\n            return (\r\n                <FacetRow\r\n                    key={facetRow.name}\r\n                    facet={this.props.facet.name}\r\n                    facetRow={facetRow}\r\n                    onToggleFacet={this.buildFacet}\r\n                    isChecked={isSelected}\r\n                    enableExclusions={this.props.enableExclusions}\r\n                    maxTooltipLabelLength={this.props.maxTooltipLabelLength}\r\n                    excludeTooltipMessage={this.props.excludeTooltipMessage}\r\n                />\r\n            );\r\n        });\r\n        let rowsToShow: number = Math.max(this.props.selectedFacetRows.length, this.props.maxRowsToShow);\r\n        // If there is only 1 extra row, show it instead of the moreRowsToggle\r\n        if (rows.length === rowsToShow + 1) {\r\n            rowsToShow += 1;\r\n        }\r\n        const moreRowsToggle: JSX.Element =\r\n            rows.length > rowsToShow ? (\r\n                this.props.withReduxState ? (\r\n                    <FacetMoreToggleConnected facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                ) : (\r\n                    <FacetMoreToggle facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                )\r\n            ) : null;\r\n        const facetClasses: string = this.props.facet.name + ' facet' + (this.props.isOpened ? ' facet-opened' : '');\r\n\r\n        return (\r\n            <div className={facetClasses}>\r\n                <div className=\"facet-header\">\r\n                    <div className={removeSelectedClass} onClick={() => this.clearFacet()}>\r\n                        <Tooltip\r\n                            className=\"remove-selected-tooltip\"\r\n                            title={`${this.props.clearFacetLabel} ${this.props.facet.formattedName}`}\r\n                        >\r\n                            <Svg svgName=\"clear\" className=\"icon fill-medium-grey\" />\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className=\"facet-header-title bold text-medium-blue\">{this.props.facet.formattedName}</div>\r\n                </div>\r\n                <ul className=\"facet-values\">\r\n                    {rows.slice(0, rowsToShow)}\r\n                    {moreRowsToggle}\r\n                </ul>\r\n                {this.getMoreRows(!!moreRowsToggle, rows.slice(rowsToShow))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMoreRows(needMoreRows: boolean, rows: JSX.Element[]): JSX.Element {\r\n        if (needMoreRows) {\r\n            return this.props.withReduxState ? (\r\n                <FacetMoreRowsConnected\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            ) : (\r\n                <FacetMoreRows\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n"}}]);
//# sourceMappingURL=360.bundle.js.map