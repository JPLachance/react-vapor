(window.webpackJsonp=window.webpackJsonp||[]).push([[550],{1639:function(n,e,t){"use strict";t.r(e),e.default="import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Input} from '../input/Input';\r\nimport {Label} from '../input/Label';\r\nimport {AddInputAction} from './AddInputAction';\r\nimport {DeleteInputAction} from './DeleteInputAction';\r\nimport * as styles from './styles/SplitMultilineInput.scss';\r\n\r\nexport interface ISplitInput {\r\n    id: string;\r\n    label: string;\r\n    placeholder?: string;\r\n    validation?: (value: any) => boolean;\r\n    validationMessage?: string;\r\n}\r\n\r\nexport interface ISplitValue {\r\n    [inputId: string]: any;\r\n}\r\n\r\nexport interface ISplitMultilineInputOwnProps {\r\n    inputs: ISplitInput[];\r\n    defaultValues: ISplitValue[];\r\n    onChange?: (values: ISplitValue[]) => void;\r\n}\r\n\r\nexport interface ISplitMultilineInputProps extends ISplitMultilineInputOwnProps {}\r\n\r\nexport interface ISplitMultilineInputState {\r\n    values: ISplitValue[];\r\n}\r\n\r\nexport class SplitMultilineInput extends React.PureComponent<ISplitMultilineInputProps, ISplitMultilineInputState> {\r\n    static inputLineClass: string = 'flex space-between relative pb1';\r\n\r\n    constructor(props: ISplitMultilineInputProps, state: ISplitMultilineInputState) {\r\n        super(props, state);\r\n        this.state = {\r\n            values: this.props.defaultValues,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISplitMultilineInputProps) {\r\n        if (!_.isEqual(prevProps.defaultValues, this.props.defaultValues)) {\r\n            this.setState({\r\n                values: this.props.defaultValues,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.inputBlock}>\r\n                <ul>\r\n                    {this.getDeletableInputs()}\r\n                    {this.getNewInput()}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getDeletableInputs() {\r\n        return _.map(this.state.values, (values: ISplitValue, index: number) => {\r\n            const labelIds: string[] = _.keys(values);\r\n            const inputLength: number = labelIds.length;\r\n            const inputs: JSX.Element[] = _.map(labelIds, (labelId: string, inputIndex: number) => {\r\n                const input: ISplitInput = _.findWhere(this.props.inputs, {id: labelId});\r\n\r\n                if (input) {\r\n                    const deleteButton: JSX.Element =\r\n                        inputIndex + 1 === inputLength ? (\r\n                            <DeleteInputAction onClick={() => this.removeLine(index)} />\r\n                        ) : null;\r\n                    let inputRef: Input;\r\n                    return (\r\n                        <Input\r\n                            validateOnChange\r\n                            labelTitle={input.label}\r\n                            labelProps={{invalidMessage: input.validationMessage}}\r\n                            ref={(ref: Input) => (inputRef = ref)}\r\n                            classes={styles.input}\r\n                            value={values[labelId]}\r\n                            placeholder={input.placeholder}\r\n                            validate={input.validation ? (value: any) => input.validation(value) : undefined}\r\n                            key={labelId + inputIndex}\r\n                            onChange={(value?: string, valid?: boolean) =>\r\n                                this.changeValue(value, valid, index, labelId, inputRef)\r\n                            }\r\n                        >\r\n                            {deleteButton}\r\n                        </Input>\r\n                    );\r\n                }\r\n            });\r\n\r\n            return (\r\n                <li key={`split-${index}`} className={SplitMultilineInput.inputLineClass}>\r\n                    {inputs}\r\n                </li>\r\n            );\r\n        });\r\n    }\r\n\r\n    private getNewInput() {\r\n        const inputRefs: Input[] = [];\r\n        const inputs: JSX.Element[] = _.map(this.props.inputs, (input: ISplitInput, inputIndex: number) => (\r\n            <Input\r\n                ref={(ref: Input) => inputRefs.push(ref)}\r\n                key={`add-${inputIndex}`}\r\n                classes={styles.input}\r\n                placeholder={input.placeholder}\r\n                validate={input.validation ? (value: any) => input.validation(value) : undefined}\r\n            >\r\n                <Label invalidMessage={input.validationMessage}>{!this.state.values.length ? input.label : ''}</Label>\r\n                {inputIndex + 1 === this.props.inputs.length ? (\r\n                    <AddInputAction onClick={() => this.addLine(inputRefs)} />\r\n                ) : null}\r\n            </Input>\r\n        ));\r\n        return (\r\n            <li key=\"new-input\" className={SplitMultilineInput.inputLineClass}>\r\n                {inputs}\r\n            </li>\r\n        );\r\n    }\r\n\r\n    private removeLine(index: number) {\r\n        const values: ISplitValue[] = [...this.state.values.slice(0, index), ...this.state.values.slice(index + 1)];\r\n        this.setState(\r\n            {\r\n                values,\r\n            },\r\n            this.handleChange\r\n        );\r\n    }\r\n\r\n    private addLine(inputRefs: Input[]) {\r\n        let inError: boolean = false;\r\n        const newValue: ISplitValue = {};\r\n        _.each(this.props.inputs, (input: ISplitInput, inputIndex: number) => {\r\n            const value: any = inputRefs[inputIndex].getInnerValue();\r\n\r\n            inputRefs[inputIndex].validate();\r\n\r\n            inError = inError || (input.validation && !input.validation(value));\r\n            newValue[input.id] = value;\r\n        });\r\n\r\n        if (!inError) {\r\n            this.setState(\r\n                {\r\n                    values: [...this.state.values, newValue],\r\n                },\r\n                this.handleChange\r\n            );\r\n            _.each(inputRefs, (inputRef: Input) => inputRef.reset());\r\n        }\r\n    }\r\n\r\n    private changeValue(value: string, valid: boolean, index: number, labelId: string, inputRef: Input) {\r\n        if (_.isUndefined(valid) || valid) {\r\n            const values: ISplitValue[] = this.state.values.slice(0);\r\n            values[index][labelId] = value;\r\n            this.setState(\r\n                {\r\n                    values,\r\n                },\r\n                this.handleChange\r\n            );\r\n        } else {\r\n            inputRef.validate();\r\n        }\r\n    }\r\n\r\n    private handleChange() {\r\n        if (this.props.onChange) {\r\n            this.props.onChange(this.state.values);\r\n        }\r\n    }\r\n}\r\n"}}]);
//# sourceMappingURL=550.bundle.js.map