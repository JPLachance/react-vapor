(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{1239:function(n,r,t){"use strict";t.r(r),r.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport {IActionOptions} from '../Action';\r\nimport {IPrimaryActionProps, PrimaryAction} from '../PrimaryAction';\r\n\r\ndescribe('Actions', () => {\r\n    const actions: IActionOptions[] = [\r\n        {\r\n            name: 'action',\r\n            link: 'http://google.com',\r\n            target: '_blank',\r\n            enabled: true,\r\n        },\r\n        {\r\n            name: 'action2',\r\n            trigger: jasmine.createSpy('triggerMethod'),\r\n            enabled: true,\r\n        },\r\n    ];\r\n\r\n    describe('<PrimaryAction />', () => {\r\n        it('should render without errors', () => {\r\n            expect(() => {\r\n                shallow(<PrimaryAction action={actions[0]} />);\r\n            }).not.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('<PrimaryAction />', () => {\r\n        let primaryAction: ReactWrapper<IPrimaryActionProps, any>;\r\n\r\n        beforeEach(() => {\r\n            primaryAction = mount(<PrimaryAction action={actions[0]} />, {attachTo: document.getElementById('App')});\r\n        });\r\n\r\n        afterEach(() => {\r\n            primaryAction.detach();\r\n        });\r\n\r\n        it('should get an action as a prop', () => {\r\n            const actionProp = primaryAction.props().action;\r\n\r\n            expect(actionProp).toBeDefined();\r\n            expect(actionProp).toEqual(jasmine.objectContaining(actions[0]));\r\n        });\r\n\r\n        it('should display a <LinkAction /> component if the action is a link action', () => {\r\n            expect(primaryAction.find('LinkAction').length).toBe(1);\r\n            expect(primaryAction.find('TriggerAction').length).toBe(0);\r\n        });\r\n\r\n        it('should display a <TriggerAction /> component if the action is a trigger action', () => {\r\n            primaryAction.setProps({action: actions[1]});\r\n\r\n            expect(primaryAction.find('TriggerAction').length).toBe(1);\r\n            expect(primaryAction.find('LinkAction').length).toBe(0);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=143.bundle.js.map