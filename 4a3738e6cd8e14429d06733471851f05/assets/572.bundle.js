(window.webpackJsonp=window.webpackJsonp||[]).push([[572],{1663:function(n,e,a){"use strict";a.r(e),e.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {INavigationPaginationSelectProps, NavigationPaginationSelect} from '../NavigationPaginationSelect';\r\n\r\ndescribe('NavigationPaginationSelect', () => {\r\n    const basicNavigationPaginationSelectProps: INavigationPaginationSelectProps = {\r\n        selected: false,\r\n        pageNb: 2,\r\n        onPageClick: jasmine.createSpy('onPageClick'),\r\n    };\r\n\r\n    describe('<NavigationPaginationSelect />', () => {\r\n        it('should render without errors', () => {\r\n            expect(() => {\r\n                shallow(<NavigationPaginationSelect {...basicNavigationPaginationSelectProps} />);\r\n            }).not.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('<NavigationPaginationSelect />', () => {\r\n        let navigationPaginationSelect: ReactWrapper<INavigationPaginationSelectProps, any>;\r\n\r\n        beforeEach(() => {\r\n            navigationPaginationSelect = mount(\r\n                <NavigationPaginationSelect {...basicNavigationPaginationSelectProps} />,\r\n                {attachTo: document.getElementById('App')}\r\n            );\r\n        });\r\n\r\n        afterEach(() => {\r\n            navigationPaginationSelect.detach();\r\n        });\r\n\r\n        it('should get if it is selected as a prop', () => {\r\n            const selectedProp = navigationPaginationSelect.props().selected;\r\n\r\n            expect(selectedProp).toBeDefined();\r\n            expect(selectedProp).toBe(basicNavigationPaginationSelectProps.selected);\r\n        });\r\n\r\n        it('should get the page number as a prop', () => {\r\n            const pageNbProp = navigationPaginationSelect.props().pageNb;\r\n\r\n            expect(pageNbProp).toBeDefined();\r\n            expect(pageNbProp).toBe(basicNavigationPaginationSelectProps.pageNb);\r\n        });\r\n\r\n        it('should get what to do on click as a prop', () => {\r\n            const onPageClickProp = navigationPaginationSelect.props().onPageClick;\r\n\r\n            expect(onPageClickProp).toBeDefined();\r\n        });\r\n\r\n        it('should be selectable if not selected', () => {\r\n            const newNavigationPaginationSelectProps = _.extend(basicNavigationPaginationSelectProps, {selected: true});\r\n            expect(navigationPaginationSelect.find('.flat-select-option').hasClass('selectable')).toBe(true);\r\n\r\n            navigationPaginationSelect.setProps(newNavigationPaginationSelectProps);\r\n\r\n            expect(navigationPaginationSelect.find('.flat-select-option').hasClass('selectable')).toBe(false);\r\n        });\r\n\r\n        it('should display the page number', () => {\r\n            expect(navigationPaginationSelect.html()).toContain(\r\n                (basicNavigationPaginationSelectProps.pageNb + 1).toString()\r\n            );\r\n        });\r\n\r\n        it('should call onPageClick on page click', () => {\r\n            expect(basicNavigationPaginationSelectProps.onPageClick).not.toHaveBeenCalled();\r\n\r\n            navigationPaginationSelect.find('a').simulate('click');\r\n\r\n            expect(basicNavigationPaginationSelectProps.onPageClick).toHaveBeenCalled();\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=572.bundle.js.map