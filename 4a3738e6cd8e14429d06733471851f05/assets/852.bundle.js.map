{"version":3,"sources":["webpack:///./src/components/tables/tests/TableHeaderCellConnected.spec.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/852.bundle.js","sourcesContent":["export default \"import {mount, ReactWrapper} from 'enzyme';\\r\\nimport * as React from 'react';\\r\\nimport {Provider} from 'react-redux';\\r\\nimport {Store} from 'redux';\\r\\nimport {IReactVaporState} from '../../../ReactVapor';\\r\\nimport {clearState} from '../../../utils/ReduxUtils';\\r\\nimport {TestUtils} from '../../../utils/tests/TestUtils';\\r\\nimport {TableSortingOrder} from '../TableConstants';\\r\\nimport {ITableHeaderCellProps, TableHeaderCell} from '../TableHeaderCell';\\r\\nimport {TableHeaderCellConnected} from '../TableHeaderCellConnected';\\r\\n\\r\\ndescribe('Tables', () => {\\r\\n    describe('<TableHeaderCellConnected />', () => {\\r\\n        let wrapper: ReactWrapper<any, any>;\\r\\n        let store: Store<IReactVaporState>;\\r\\n        let basicTableHeaderCellConnectedProps;\\r\\n        let tableHeaderCell: ReactWrapper<ITableHeaderCellProps, any>;\\r\\n\\r\\n        beforeEach(() => {\\r\\n            basicTableHeaderCellConnectedProps = {\\r\\n                title: 'awesome attribute title',\\r\\n                id: 'header-cell',\\r\\n                attributeToSort: 'awesomeAttribute',\\r\\n                tableId: 'table-id',\\r\\n            };\\r\\n\\r\\n            store = TestUtils.buildStore();\\r\\n\\r\\n            wrapper = mount(\\r\\n                <Provider store={store}>\\r\\n                    <table>\\r\\n                        <thead>\\r\\n                            <tr>\\r\\n                                <TableHeaderCellConnected {...basicTableHeaderCellConnectedProps} />\\r\\n                                <TableHeaderCellConnected {...basicTableHeaderCellConnectedProps} id=\\\"header-cell-2\\\" />\\r\\n                            </tr>\\r\\n                        </thead>\\r\\n                    </table>\\r\\n                </Provider>,\\r\\n                {attachTo: document.getElementById('App')}\\r\\n            );\\r\\n            tableHeaderCell = wrapper.find(TableHeaderCell).first();\\r\\n        });\\r\\n\\r\\n        afterEach(() => {\\r\\n            store.dispatch(clearState());\\r\\n            wrapper.detach();\\r\\n        });\\r\\n\\r\\n        it('should get its sorted prop from the state', () => {\\r\\n            const sortedProp = tableHeaderCell.props().sorted;\\r\\n\\r\\n            expect(sortedProp).toBeDefined();\\r\\n            expect(sortedProp).toBe(TableSortingOrder.UNSORTED);\\r\\n        });\\r\\n\\r\\n        it('should get what to do onMount', () => {\\r\\n            const onMount = tableHeaderCell.props().onMount;\\r\\n\\r\\n            expect(onMount).toBeDefined();\\r\\n        });\\r\\n\\r\\n        it('should get what to do onUnmount', () => {\\r\\n            const onUnmount = tableHeaderCell.props().onUnmount;\\r\\n\\r\\n            expect(onUnmount).toBeDefined();\\r\\n        });\\r\\n\\r\\n        it('should get what to do onSort', () => {\\r\\n            const onSort = tableHeaderCell.props().onSort;\\r\\n\\r\\n            expect(onSort).toBeDefined();\\r\\n        });\\r\\n\\r\\n        it('should change the sorted attribute to ASCENDING after one click', () => {\\r\\n            tableHeaderCell.simulate('click');\\r\\n            wrapper.update();\\r\\n            expect(\\r\\n                wrapper\\r\\n                    .find(TableHeaderCell)\\r\\n                    .first()\\r\\n                    .props().sorted\\r\\n            ).toBe(TableSortingOrder.ASCENDING);\\r\\n        });\\r\\n\\r\\n        it('should change the sorted attribute to DESCENDING after two clicks', () => {\\r\\n            tableHeaderCell.simulate('click').simulate('click');\\r\\n            wrapper.update();\\r\\n            expect(\\r\\n                wrapper\\r\\n                    .find(TableHeaderCell)\\r\\n                    .first()\\r\\n                    .props().sorted\\r\\n            ).toBe(TableSortingOrder.DESCENDING);\\r\\n        });\\r\\n\\r\\n        it('should change the sorted attribute to ASCENDING after three clicks', () => {\\r\\n            tableHeaderCell\\r\\n                .simulate('click')\\r\\n                .simulate('click')\\r\\n                .simulate('click');\\r\\n            wrapper.update();\\r\\n            expect(\\r\\n                wrapper\\r\\n                    .find(TableHeaderCell)\\r\\n                    .first()\\r\\n                    .props().sorted\\r\\n            ).toBe(TableSortingOrder.ASCENDING);\\r\\n        });\\r\\n\\r\\n        it('should sort the clicked header cell and unsort the others with the same tableId', () => {\\r\\n            const tableHeaderCell2 = wrapper.find(TableHeaderCell).last();\\r\\n\\r\\n            tableHeaderCell.simulate('click');\\r\\n            wrapper.update();\\r\\n            expect(\\r\\n                wrapper\\r\\n                    .find(TableHeaderCell)\\r\\n                    .first()\\r\\n                    .props().sorted\\r\\n            ).toBe(TableSortingOrder.ASCENDING);\\r\\n\\r\\n            tableHeaderCell2.simulate('click');\\r\\n            expect(\\r\\n                wrapper\\r\\n                    .find(TableHeaderCell)\\r\\n                    .first()\\r\\n                    .props().sorted\\r\\n            ).toBe(TableSortingOrder.UNSORTED);\\r\\n            expect(\\r\\n                wrapper\\r\\n                    .find(TableHeaderCell)\\r\\n                    .last()\\r\\n                    .props().sorted\\r\\n            ).toBe(TableSortingOrder.ASCENDING);\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}