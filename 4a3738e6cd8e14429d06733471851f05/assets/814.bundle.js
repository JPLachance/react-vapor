(window.webpackJsonp=window.webpackJsonp||[]).push([[814],{1898:function(t,e,a){"use strict";a.r(e),e.default="import * as moment from 'moment';\r\nimport * as _ from 'underscore';\r\nimport {contains} from 'underscore.string';\r\nimport {convertUndefinedAndNullToEmptyString} from '../../utils/FalsyValuesUtils';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {addActionsToActionBar} from '../actions/ActionBarActions';\r\nimport {changeLastUpdated} from '../lastUpdated/LastUpdatedActions';\r\nimport {turnOffLoading, turnOnLoading} from '../loading/LoadingActions';\r\nimport {ITableHeadingAttribute, ITableOwnProps, ITableRowData} from './Table';\r\nimport {ITableStateModifier, modifyState} from './TableActions';\r\nimport {\r\n    DEFAULT_TABLE_PER_PAGE,\r\n    TABLE_PREDICATE_DEFAULT_VALUE,\r\n    TableChildComponent,\r\n    TableSortingOrder,\r\n} from './TableConstants';\r\nimport {ITableCompositeState, ITableState} from './TableReducers';\r\nimport {unselectAllRows} from './TableRowActions';\r\nimport {getTableChildComponentId, getTableLoadingIds} from './TableUtils';\r\n\r\nexport const dispatchPreTableStateModification = (tableId: string, dispatch: IDispatch) => {\r\n    dispatch(unselectAllRows(tableId));\r\n    dispatch(addActionsToActionBar(getTableChildComponentId(tableId, TableChildComponent.ACTION_BAR), []));\r\n    dispatch(turnOnLoading(getTableLoadingIds(tableId)));\r\n};\r\n\r\nexport const dispatchPostTableStateModification = (tableId: string, dispatch: IDispatch) => {\r\n    dispatch(turnOffLoading(getTableLoadingIds(tableId)));\r\n    dispatch(changeLastUpdated(getTableChildComponentId(tableId, TableChildComponent.LAST_UPDATED)));\r\n};\r\n\r\nexport const applyPredicatesOnDisplayedIds = (\r\n    nextDisplayedIds: string[],\r\n    tableDataById: ITableRowData,\r\n    tableCompositeState: ITableCompositeState\r\n): string[] => {\r\n    if (!_.isEmpty(tableCompositeState.predicates)) {\r\n        _.pairs(tableCompositeState.predicates).forEach((keyValuePair: string[]) => {\r\n            const attributeName = keyValuePair[0];\r\n            const attributeValue = keyValuePair[1];\r\n\r\n            if (attributeValue !== TABLE_PREDICATE_DEFAULT_VALUE) {\r\n                nextDisplayedIds = nextDisplayedIds.filter(\r\n                    (dataId: string) => tableDataById[dataId][attributeName] === attributeValue\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    return nextDisplayedIds;\r\n};\r\n\r\nexport const applyFilterOnDisplayedIds = (\r\n    nextDisplayedIds: string[],\r\n    tableDataById: ITableRowData,\r\n    tableCompositeState: ITableCompositeState,\r\n    tableOwnProps: ITableOwnProps\r\n): string[] => {\r\n    if (tableCompositeState.filter) {\r\n        const filterDefault = (dataId: string): boolean => {\r\n            return tableOwnProps.headingAttributes.some((headingAttribute: ITableHeadingAttribute) => {\r\n                const {attributeName, attributeFormatter, filterFormatter} = headingAttribute;\r\n                const attributeValue = tableDataById[dataId][attributeName];\r\n                let attributeValueToUse = filterFormatter\r\n                    ? filterFormatter(attributeValue, tableDataById[dataId])\r\n                    : attributeValue;\r\n                attributeValueToUse =\r\n                    !filterFormatter && attributeFormatter\r\n                        ? attributeFormatter(attributeValue, attributeName, tableDataById[dataId])\r\n                        : attributeValueToUse;\r\n                return contains(\r\n                    convertUndefinedAndNullToEmptyString(attributeValueToUse)\r\n                        .toString()\r\n                        .toLowerCase(),\r\n                    tableCompositeState.filter.toLowerCase()\r\n                );\r\n            });\r\n        };\r\n\r\n        const filterMethod = tableOwnProps.filterMethod\r\n            ? (dataId: string): boolean =>\r\n                  tableOwnProps.filterMethod(tableDataById[dataId], tableOwnProps, tableCompositeState.filter)\r\n            : filterDefault;\r\n\r\n        nextDisplayedIds = nextDisplayedIds.filter(filterMethod);\r\n    }\r\n\r\n    return nextDisplayedIds;\r\n};\r\n\r\nexport const applyDatePickerOnDisplayedIds = (\r\n    nextDisplayedIds: string[],\r\n    tableDataById: ITableRowData,\r\n    tableCompositeState: ITableCompositeState,\r\n    tableOwnProps: ITableOwnProps\r\n): string[] => {\r\n    const {from, to} = tableCompositeState;\r\n    const {datePicker} = tableOwnProps;\r\n    if (from && to && datePicker && datePicker.attributeName) {\r\n        nextDisplayedIds = nextDisplayedIds.filter((dataId: string): boolean =>\r\n            moment(tableDataById[dataId][datePicker.attributeName]).isBetween(from, to)\r\n        );\r\n    }\r\n\r\n    return nextDisplayedIds;\r\n};\r\n\r\nexport const applySortOnDisplayedIds = (\r\n    nextDisplayedIds: string[],\r\n    tableDataById: ITableRowData,\r\n    tableCompositeState: ITableCompositeState,\r\n    tableOwnProps: ITableOwnProps\r\n): string[] => {\r\n    const {sortState} = tableCompositeState;\r\n    if (sortState && sortState.order !== TableSortingOrder.UNSORTED && !_.isUndefined(sortState.attribute)) {\r\n        const headingAttributeToSort = _.findWhere(tableOwnProps.headingAttributes, {\r\n            attributeName: sortState.attribute,\r\n        });\r\n        const hasCustomSortByMethod = headingAttributeToSort && headingAttributeToSort.sortByMethod;\r\n        const hasCustomSortMethod = headingAttributeToSort && headingAttributeToSort.sortMethod;\r\n\r\n        if (hasCustomSortMethod) {\r\n            nextDisplayedIds = _.pluck(\r\n                headingAttributeToSort.sortMethod(\r\n                    _.map(nextDisplayedIds, (displayedId: string) => tableDataById[displayedId]),\r\n                    sortState.attribute,\r\n                    sortState.order === TableSortingOrder.ASCENDING\r\n                ),\r\n                'id'\r\n            );\r\n        } else if (hasCustomSortByMethod) {\r\n            nextDisplayedIds = _.sortBy(nextDisplayedIds, (displayedId: string): string => {\r\n                const cleanAttributeValue = convertUndefinedAndNullToEmptyString(\r\n                    tableDataById[displayedId][sortState.attribute]\r\n                );\r\n                return headingAttributeToSort.sortByMethod(cleanAttributeValue, tableDataById[displayedId]);\r\n            });\r\n        } else {\r\n            const defaultSortByMethod = (displayedId: string) => {\r\n                const cleanAttributeValue = convertUndefinedAndNullToEmptyString(\r\n                    tableDataById[displayedId][sortState.attribute]\r\n                );\r\n                return cleanAttributeValue.toString().toLowerCase();\r\n            };\r\n\r\n            nextDisplayedIds = _.sortBy(nextDisplayedIds, defaultSortByMethod);\r\n        }\r\n\r\n        if (!hasCustomSortMethod && sortState.order === TableSortingOrder.DESCENDING) {\r\n            nextDisplayedIds.reverse();\r\n        }\r\n    }\r\n\r\n    return nextDisplayedIds;\r\n};\r\n\r\nexport const applyPaginationOnDisplayedIds = (\r\n    nextDisplayedIds: string[],\r\n    tableCompositeState: ITableCompositeState\r\n): string[] => {\r\n    const startingIndex = (tableCompositeState.page || 0) * (tableCompositeState.perPage || DEFAULT_TABLE_PER_PAGE);\r\n    const endingIndex = startingIndex + (tableCompositeState.perPage || DEFAULT_TABLE_PER_PAGE);\r\n    nextDisplayedIds = nextDisplayedIds.slice(startingIndex, endingIndex);\r\n    return nextDisplayedIds;\r\n};\r\n\r\nexport const defaultTableStateModifier = (\r\n    tableOwnProps: ITableOwnProps,\r\n    tableCompositeState: ITableCompositeState\r\n): ITableStateModifier => {\r\n    return (tableState: ITableState): ITableState => {\r\n        const tableDataById = (tableCompositeState.data && tableCompositeState.data.byId) || {};\r\n        let nextDisplayedIds = [...((tableCompositeState.data && tableCompositeState.data.allIds) || [])];\r\n\r\n        nextDisplayedIds = applyPredicatesOnDisplayedIds(nextDisplayedIds, tableDataById, tableCompositeState);\r\n        nextDisplayedIds = applyFilterOnDisplayedIds(\r\n            nextDisplayedIds,\r\n            tableDataById,\r\n            tableCompositeState,\r\n            tableOwnProps\r\n        );\r\n        nextDisplayedIds = applyDatePickerOnDisplayedIds(\r\n            nextDisplayedIds,\r\n            tableDataById,\r\n            tableCompositeState,\r\n            tableOwnProps\r\n        );\r\n\r\n        const totalEntries = nextDisplayedIds.length;\r\n        const totalPages = Math.ceil(totalEntries / (tableCompositeState.perPage || DEFAULT_TABLE_PER_PAGE));\r\n\r\n        nextDisplayedIds = applySortOnDisplayedIds(nextDisplayedIds, tableDataById, tableCompositeState, tableOwnProps);\r\n        nextDisplayedIds = applyPaginationOnDisplayedIds(nextDisplayedIds, tableCompositeState);\r\n\r\n        return {\r\n            ...tableState,\r\n            data: {\r\n                ...tableState.data,\r\n                displayedIds: nextDisplayedIds,\r\n                totalEntries,\r\n                totalPages,\r\n            },\r\n        };\r\n    };\r\n};\r\n\r\nexport const defaultTableStateModifierThunk = (\r\n    tableOwnProps: ITableOwnProps,\r\n    shouldResetPage: boolean,\r\n    tableCompositeState: ITableCompositeState\r\n) => {\r\n    return (dispatch: IDispatch) => {\r\n        const tableStateModifier = defaultTableStateModifier(tableOwnProps, tableCompositeState);\r\n        dispatch(modifyState(tableOwnProps.id, tableStateModifier, shouldResetPage));\r\n        dispatch(turnOffLoading(getTableLoadingIds(tableOwnProps.id)));\r\n    };\r\n};\r\n\r\nexport const TableDataModifier = {\r\n    dispatchPreTableStateModification,\r\n    dispatchPostTableStateModification,\r\n    applyPredicatesOnDisplayedIds,\r\n    applyFilterOnDisplayedIds,\r\n    applyDatePickerOnDisplayedIds,\r\n    defaultTableStateModifier,\r\n    defaultTableStateModifierThunk,\r\n};\r\n"}}]);
//# sourceMappingURL=814.bundle.js.map