{"version":3,"sources":["webpack:///./src/components/select/examples/MultiSelectExamples.tsx?ea99","webpack:///./src/utils/UUID.ts?611d","webpack:///./src/components/dragAndDrop/DnDUtils.ts?6815","webpack:///./src/components/dropdownSearch/MultiSelectDropdownSearch/SelectedOption.tsx?08de","webpack:///./src/components/flatSelect/FlatSelectSelectors.ts?585e","webpack:///./src/components/flatSelect/FlatSelect.tsx?30fc","webpack:///./src/components/flatSelect/FlatSelectOption.tsx?11b2","webpack:///./src/components/flatSelect/FlatSelectConnected.tsx?87e7","webpack:///./src/components/select/hoc/SelectWithFilter.tsx?f401","webpack:///./src/components/select/MultiSelectConnected.tsx?5600","webpack:///./src/components/dropdownSearch/MultiSelectDropdownSearch/DraggableSelectedOption.tsx?56a6","webpack:///./src/components/select/hoc/SelectWithPredicate.tsx?7883","webpack:///./src/components/select/hoc/SelectComponents.tsx?4179"],"names":["defaultItems","displayValue","value","disabled","defaultFlatSelectOptions","id","generate","option","content","selected","props","state","second","item","hoc","append","className","first","drag","render","items","this","placeholder","deselectAllTooltipText","sortable","customValues","defaultCustomValues","matchFilter","filter","indexOf","options","matchPredicate","p","i","multiSelectStyle","width","selectClasses","repeat","predicate","parseInt","description","d","Date","now","replace","c","r","Math","random","floor","toString","context","DnDUtils","move","dragIndex","hoverIndex","list","callBack","moving","newOrder","splice","getBoxTarget","parameter","hover","monitor","component","getItem","index","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","getSelectedBoxSource","isDragging","beginDrag","parentDropTarget","TagControlContext","DecoratedClass","handleOnRemove","onRemoveClick","tooltipContent","count","children","label","tooltipLabel","key","title","placement","Top","delayShow","onClick","svgName","svgClass","getInput","ownProps","flatSelect","FlatSelectSelectors","getSelectedOptionId","flatSelectState","selectedOptionId","componentWillMount","onRender","componentWillUnmount","onDestroy","handleOnOptionClick","onOptionClick","getOptions","flatSelectOption","classes","group","optionPicker","selectable","tooltip","prepend","defaultProps","FlatSelectConnected","dispatch","defaultSelectedOptionId","length","mergeProps","SelectWithFilterPropsToOmit","selectWithFilter","Component","makeMapStateToProps","initialState","initialOwnProps","filterValue","getFilterText","isServer","getServerFilteredItems","getCustomItemsWithFilter","getListBoxSelected","mapDispatchToProps","onRenderFilter","onDestroyFilter","onSelectCustomValue","dividerId","handleOnClick","componentDidUpdate","prevProps","onUpdate","addItemBoxCustomValue","addItemBox","addValueText","divider","hidden","noResultFilter","noResultFilterText","duplicateValue","duplicateText","noItems","noItemsText","getAddValueButton","filterButton","isDuplicateValue","pluck","concat","allValuesAreSelected","contains","filterBoxClassNames","mb2","noResultItem","map","highlight","newProps","noDisabled","hasFocusableChild","onKeyDown","onKeyUp","isAutoFocus","displayName","filterText","enabled","tooltipPlacement","WrappedComponent","selectPropsKeys","getStateProps","getMultiSelectSelectedValues","onRemoveAll","onReorder","values","getButton","buttonAttrs","style","connectDropTarget","getSelectedOptionComponents","getRemoveAllSelectedOptionsButton","type","button","multi","getSelectedOptions","renderDraggableOption","renderOption","emptyPlaceholder","noSpanWrapper","compact","MultiSelect","connect","dropTarget","MultiSelectConnected","selectedOptionSource","cardTarget","DraggableSelectedOptionType","DraggableSelectedOptionPropsToOmit","opacity","connectDragPreview","connectDragSource","DraggableSelectedOption","dragSource","dragPreview","SelectWithPredicatePropsToOmit","selectWithPredicate","mapStateToProps","visible","SingleSelectWithFilter","SingleSelectWithPredicate","SingleSelectWithPredicateAndFilter","MultiSelectWithFilter","MultiSelectWithPredicate","MultiSelectWithPredicateAndFilter"],"mappings":"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","file":"assets/960.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {getReactNodeTextContent} from '../../../utils/JSXUtils';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {IFlatSelectOptionProps} from '../../flatSelect/FlatSelectOption';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {\r\n    MultiSelectWithFilter,\r\n    MultiSelectWithPredicate,\r\n    MultiSelectWithPredicateAndFilter,\r\n} from '../hoc/SelectComponents';\r\nimport {MultiSelectConnected} from '../MultiSelectConnected';\r\n\r\nconst defaultItems: IItemBoxProps[] = [\r\n    {displayValue: 'Test', value: '0'},\r\n    {displayValue: 'Test One', value: '1'},\r\n    {displayValue: 'Disabled', value: 'disabled', disabled: true},\r\n    {displayValue: 'Three', value: '3'},\r\n    {displayValue: 'Four', value: '4'},\r\n    {displayValue: 'Five', value: '5'},\r\n    {displayValue: 'Six', value: '6'},\r\n    {displayValue: 'Seven', value: '7'},\r\n];\r\n\r\nconst defaultFlatSelectOptions: IFlatSelectOptionProps[] = [\r\n    {id: UUID.generate(), option: {content: 'All'}, selected: true},\r\n    {id: UUID.generate(), option: {content: 'even'}},\r\n    {id: UUID.generate(), option: {content: 'odd'}},\r\n];\r\n\r\nexport interface IMultiSelectExamplesState {\r\n    first: IItemBoxProps[];\r\n    drag: IItemBoxProps[];\r\n    second: IItemBoxProps[];\r\n    hoc: IItemBoxProps[];\r\n}\r\n\r\nexport class MultiSelectExamples extends React.Component<{}, IMultiSelectExamplesState> {\r\n    static description =\r\n        'A multi-select component allows users to select one or more options from a set of predefined options, or, if relevant, to add custom options.';\r\n\r\n    constructor({props, state}: {props: {}; state: IMultiSelectExamplesState}) {\r\n        super(props, state);\r\n\r\n        const second = _.map(defaultItems, (item) => _.clone(item));\r\n        second[0].selected = true;\r\n\r\n        const hoc = _.map(defaultItems, (item) =>\r\n            _.extend({}, item, {append: {content: () => <span className=\"text-medium-grey ml1\">{item.value}</span>}})\r\n        );\r\n        hoc[0].selected = true;\r\n\r\n        this.state = {\r\n            first: _.clone(defaultItems),\r\n            drag: _.clone(defaultItems),\r\n            second,\r\n            hoc,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mb2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Simple Multi Select without items</label>\r\n                    <br />\r\n                    <MultiSelectConnected id={UUID.generate()} items={[]} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Simple Multi Select with only one items</label>\r\n                    <br />\r\n                    <MultiSelectConnected id={UUID.generate()} items={[{value: 'Single Item'}]} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select with filter, disabled</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={[{value: 'Single Item'}]} disabled />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Simple Multi Select with Custom Strings</label>\r\n                    <br />\r\n                    <MultiSelectConnected\r\n                        id={UUID.generate()}\r\n                        items={this.state.first}\r\n                        placeholder=\"Select something\"\r\n                        deselectAllTooltipText=\"Remove all\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Sortable Multi Select with Custom Strings</label>\r\n                    <br />\r\n                    <MultiSelectConnected\r\n                        id={UUID.generate()}\r\n                        items={this.state.first}\r\n                        placeholder=\"Select something\"\r\n                        deselectAllTooltipText=\"Remove all\"\r\n                        sortable\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={this.state.hoc} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter and Custom Values</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={this.state.hoc} customValues />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter, Custom Values and no items</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={[]} customValues />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter, Custom Values and list of items selectable\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={[{value: 'a'}, {value: 'b'}]} customValues />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter and list of items selectable\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={[{value: 'a'}, {value: 'b'}]} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter and default list</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter\r\n                        id={UUID.generate()}\r\n                        defaultCustomValues={['c', 'd']}\r\n                        items={[{value: 'a'}, {value: 'b'}]}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter, default list and Custom Values{' '}\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter\r\n                        id={UUID.generate()}\r\n                        defaultCustomValues={['c', 'd']}\r\n                        items={[{value: 'a'}, {value: 'b'}]}\r\n                        customValues\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter that only match display value\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        matchFilter={(filter: string, item: IItemBoxProps) =>\r\n                            getReactNodeTextContent(item.displayValue).indexOf(filter) !== -1\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Predicates</label>\r\n                    <br />\r\n                    <MultiSelectWithPredicate\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        options={defaultFlatSelectOptions}\r\n                        matchPredicate={(p: string, i: IItemBoxProps) => this.matchPredicate(p, i)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With 500px width</label>\r\n                    <br />\r\n                    <MultiSelectConnected\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        multiSelectStyle={{width: '500px'}}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select with width 100%</label>\r\n                    <br />\r\n                    <MultiSelectConnected\r\n                        id={'test'}\r\n                        items={this.state.hoc}\r\n                        selectClasses=\"mod-width-100\"\r\n                        multiSelectStyle={{width: '100%'}}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter and Predicates</label>\r\n                    <br />\r\n                    <MultiSelectWithPredicateAndFilter\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        options={defaultFlatSelectOptions}\r\n                        matchPredicate={(p: string, i: IItemBoxProps) => this.matchPredicate(p, i)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter, Predicate and Custom Values\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithPredicateAndFilter\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        options={defaultFlatSelectOptions}\r\n                        matchPredicate={(p: string, i: IItemBoxProps) => this.matchPredicate(p, i)}\r\n                        customValues\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter, default list and Custom Values{' '}\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter\r\n                        id={UUID.generate()}\r\n                        defaultCustomValues={['b'.repeat(100)]}\r\n                        items={[{value: 'a'.repeat(100)}]}\r\n                        customValues\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private matchPredicate(predicate: string, item: IItemBoxProps) {\r\n        const value = parseInt(item.value, 10);\r\n        if (predicate === defaultFlatSelectOptions[0].id) {\r\n            return true;\r\n        } else if (predicate === defaultFlatSelectOptions[1].id) {\r\n            return value % 2 === 0;\r\n        } else if (predicate === defaultFlatSelectOptions[2].id) {\r\n            return value % 2 === 1;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n","// tslint:disable\r\nexport class UUID {\r\n    // TODO: replace for https://www.npmjs.com/package/uuid\r\n    static generate() {\r\n        // Source: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n        let d = Date.now();\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\r\n            const r = (d + Math.random() * 16) % 16 | 0;\r\n            d = Math.floor(d / 16);\r\n            return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n        });\r\n    }\r\n}\r\n// tslint:enable\r\n","import {IDragSource, IDropTarget} from 'react-dnd';\r\nimport {DragDropContext} from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport {findDOMNode} from 'react-dom';\r\nimport * as _ from 'underscore';\r\nimport {DnDContainer, IDraggableContainerOwnProps} from './DnDContainer';\r\n\r\nconst move = (dragIndex: number, hoverIndex: number, list: any[], callBack: (listReorder: any[]) => void) => {\r\n    const moving = list[dragIndex];\r\n    const newOrder = [...list];\r\n\r\n    // Remove the element at position dragIndex\r\n    newOrder.splice(dragIndex, 1);\r\n\r\n    // Insert the moving element at hoverIndex\r\n    newOrder.splice(hoverIndex, 0, moving);\r\n\r\n    callBack(newOrder);\r\n};\r\n\r\nconst getBoxTarget = (parameter: string): IDropTarget => ({\r\n    hover(props: IDraggableContainerOwnProps, monitor: any, component?: DnDContainer): void {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = (findDOMNode(component) as Element).getBoundingClientRect();\r\n\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.move(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n    drop(props: IDraggableContainerOwnProps, monitor: any) {\r\n        monitor.getItem()[parameter] = null;\r\n    },\r\n});\r\n\r\nconst getSelectedBoxSource = (parameter: string): IDragSource => ({\r\n    isDragging(props: IDraggableContainerOwnProps, monitor: any) {\r\n        return props.id === monitor.getItem()[parameter];\r\n    },\r\n    beginDrag(props: IDraggableContainerOwnProps) {\r\n        return {...props};\r\n    },\r\n});\r\n\r\n// This object is usefull when the drag happen outside of the DraggableSelectedOption,\r\n// instead of making the child handle it, the parent catches the event\r\nconst parentDropTarget = {\r\n    drop: _.noop,\r\n};\r\n\r\nlet context: any;\r\nconst TagControlContext = (DecoratedClass: any) => {\r\n    if (!context) {\r\n        context = DragDropContext(HTML5Backend);\r\n    }\r\n    return context(DecoratedClass);\r\n};\r\n\r\nexport const DnDUtils = {\r\n    move,\r\n    getBoxTarget,\r\n    getSelectedBoxSource,\r\n    parentDropTarget,\r\n    TagControlContext,\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {TooltipPlacement} from '../../../utils/TooltipUtils';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {Tooltip} from '../../tooltip/Tooltip';\r\n\r\nexport interface ISelectedOptionProps {\r\n    value: string;\r\n    label: React.ReactNode;\r\n    onRemoveClick?: (value: string) => void;\r\n}\r\n\r\nexport class SelectedOption extends React.PureComponent<ISelectedOptionProps> {\r\n    handleOnRemove = () => {\r\n        this.props.onRemoveClick?.(this.props.value);\r\n    };\r\n\r\n    render() {\r\n        const tooltipContent = React.Children.count(this.props.children) > 0 ? this.props.children : this.props.label;\r\n        const tooltipLabel = typeof this.props.label === 'string' ? this.props.label : '';\r\n\r\n        return (\r\n            <div className=\"selected-option\" key={this.props.value}>\r\n                <Tooltip\r\n                    title={tooltipLabel}\r\n                    placement={TooltipPlacement.Top}\r\n                    className=\"selected-option-value\"\r\n                    delayShow={300}\r\n                >\r\n                    {tooltipContent}\r\n                </Tooltip>\r\n\r\n                <div className=\"remove-option\" onClick={this.handleOnRemove}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-medium-blue mod-small\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {createSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {flatSelectInitialState, IFlatSelectState} from './FlatSelectReducers';\r\n\r\nconst getInput = (state: IReactVaporState, ownProps: {id: string}): IFlatSelectState => {\r\n    return _.findWhere(state.flatSelect, {id: ownProps.id}) || flatSelectInitialState;\r\n};\r\n\r\nconst getSelectedOptionId = createSelector(\r\n    getInput,\r\n    (flatSelectState: IFlatSelectState): string => flatSelectState && flatSelectState.selectedOptionId\r\n);\r\n\r\nexport const FlatSelectSelectors = {\r\n    getInput,\r\n    getSelectedOptionId,\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {FlatSelectOption, IFlatSelectOptionProps} from './FlatSelectOption';\r\n\r\nexport interface IFlatSelectOwnProps {\r\n    id: string;\r\n    options: IFlatSelectOptionProps[];\r\n    classes?: string[];\r\n    group?: boolean;\r\n    optionPicker?: boolean;\r\n    defaultSelectedOptionId?: string;\r\n    onClick?: (option: IFlatSelectOptionProps) => void;\r\n}\r\n\r\nexport interface IFlatSelectStateProps {\r\n    selectedOptionId?: string;\r\n}\r\n\r\nexport interface IFlatSelectDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onOptionClick?: (option: IFlatSelectOptionProps) => void;\r\n}\r\n\r\nexport interface IFlatSelectProps extends IFlatSelectOwnProps, IFlatSelectStateProps, IFlatSelectDispatchProps {}\r\n\r\nexport class FlatSelect extends React.Component<IFlatSelectProps> {\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    private handleOnOptionClick(option: IFlatSelectOptionProps) {\r\n        if (this.props.onOptionClick) {\r\n            this.props.onOptionClick(option);\r\n        }\r\n\r\n        if (this.props.onClick) {\r\n            this.props.onClick(option);\r\n        }\r\n    }\r\n\r\n    private getOptions(): JSX.Element[] {\r\n        return _.map(this.props.options, (flatSelectOption: IFlatSelectOptionProps, index: number) => {\r\n            flatSelectOption.selected =\r\n                this.props.selectedOptionId && this.props.selectedOptionId === flatSelectOption.id;\r\n            flatSelectOption.onClick = (option: IFlatSelectOptionProps) => this.handleOnOptionClick(option);\r\n\r\n            return <FlatSelectOption key={index} {...flatSelectOption} />;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const classes: string = classNames(\r\n            'flat-select',\r\n            {\r\n                'mod-btn-group': this.props.group,\r\n                'mod-option-picker': this.props.optionPicker,\r\n            },\r\n            this.props.classes\r\n        );\r\n\r\n        return <div className={classes}>{this.getOptions()}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Content, IContentProps} from '../content/Content';\r\nimport {ITooltipProps, Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IFlatSelectOptionProps {\r\n    id: string;\r\n    option: IContentProps;\r\n    classes?: string[];\r\n    prepend?: IContentProps;\r\n    append?: IContentProps;\r\n    tooltip?: ITooltipProps;\r\n    selected?: boolean;\r\n    onClick?: (option: IFlatSelectOptionProps) => void;\r\n}\r\n\r\nexport class FlatSelectOption extends React.Component<IFlatSelectOptionProps, any> {\r\n    static defaultProps: Partial<IFlatSelectOptionProps> = {\r\n        selected: false,\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes: string = classNames(\r\n            'flat-select-option',\r\n            {\r\n                selectable: !this.props.selected,\r\n            },\r\n            this.props.classes\r\n        );\r\n\r\n        return (\r\n            <a className={classes} onClick={() => this.onClick()}>\r\n                <Tooltip {...this.props.tooltip}>\r\n                    {this.props.prepend ? <Content {...this.props.prepend} /> : null}\r\n                    {<Content {...this.props.option} />}\r\n                    {this.props.append ? <Content {...this.props.append} /> : null}\r\n                </Tooltip>\r\n            </a>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    FlatSelect,\r\n    IFlatSelectDispatchProps,\r\n    IFlatSelectOwnProps,\r\n    IFlatSelectProps,\r\n    IFlatSelectStateProps,\r\n} from './FlatSelect';\r\nimport {addFlatSelect, removeFlatSelect, selectFlatSelect} from './FlatSelectActions';\r\nimport {IFlatSelectOptionProps} from './FlatSelectOption';\r\nimport {FlatSelectSelectors} from './FlatSelectSelectors';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFlatSelectOwnProps): IFlatSelectStateProps => {\r\n    return {\r\n        selectedOptionId: FlatSelectSelectors.getSelectedOptionId(state, ownProps),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IFlatSelectOwnProps): IFlatSelectDispatchProps => ({\r\n    onRender: () =>\r\n        dispatch(\r\n            addFlatSelect(\r\n                ownProps.id,\r\n                ownProps.defaultSelectedOptionId || (ownProps.options.length && ownProps.options[0].id)\r\n            )\r\n        ),\r\n    onDestroy: () => dispatch(removeFlatSelect(ownProps.id)),\r\n    onOptionClick: (selected: IFlatSelectOptionProps) => dispatch(selectFlatSelect(ownProps.id, selected.id)),\r\n});\r\n\r\nexport const FlatSelectConnected: React.ComponentClass<IFlatSelectProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FlatSelect);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {WithServerSideProcessingProps} from '../../../hoc/withServerSideProcessing/withServerSideProcessing';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {addStringList, addValueStringList, removeStringList} from '../../../reusableState/customList/StringListActions';\r\nimport {IDispatch, ReduxConnect} from '../../../utils/ReduxUtils';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {Button, IButtonProps} from '../../button/Button';\r\nimport {IFilterBoxOwnProps} from '../../filterBox/FilterBox';\r\nimport {FilterBoxConnected} from '../../filterBox/FilterBoxConnected';\r\nimport {FilterBoxSelectors} from '../../filterBox/FilterBoxSelectors';\r\nimport {MatchFilter} from '../../filterBox/FilterBoxUtils';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ISelectOwnProps, ISelectSpecificProps} from '../SelectConnected';\r\nimport {SelectSelector} from '../SelectSelector';\r\n\r\nexport interface ISelectWithFilterOwnProps {\r\n    defaultCustomValues?: string[];\r\n    matchFilter?: MatchFilter;\r\n    customValues?: boolean;\r\n    addValueText?: (filterText: string) => string;\r\n    duplicateText?: string;\r\n    noResultFilterText?: (filterText: string) => string;\r\n    noItemsText?: string;\r\n    filterButton?: IButtonProps;\r\n    filter?: IFilterBoxOwnProps;\r\n}\r\n\r\nexport interface ISelectWithFilterStateProps {\r\n    filterValue: string;\r\n    selected: string[];\r\n    items: IItemBoxProps[];\r\n}\r\n\r\nexport interface ISelectWithFilterDispatchProps {\r\n    onRenderFilter: (items: string[]) => void;\r\n    onDestroyFilter: () => void;\r\n    onSelectCustomValue: (filterValue: string) => void;\r\n}\r\n\r\nconst SelectWithFilterPropsToOmit = keys<ISelectWithFilterOwnProps>();\r\n\r\nexport interface ISelectWithFilterProps\r\n    extends ISelectWithFilterOwnProps,\r\n        Partial<ISelectWithFilterStateProps>,\r\n        Partial<ISelectWithFilterDispatchProps>,\r\n        WithServerSideProcessingProps,\r\n        ISelectOwnProps {}\r\n\r\nexport const selectWithFilter = (\r\n    Component: React.ComponentType<ISelectWithFilterProps>\r\n): React.ComponentType<ISelectWithFilterProps> => {\r\n    const makeMapStateToProps = (initialState: IReactVaporState, initialOwnProps: ISelectWithFilterProps) =>\r\n        createStructuredSelector({\r\n            filterValue: FilterBoxSelectors.getFilterText,\r\n            items: initialOwnProps.isServer\r\n                ? SelectSelector.getServerFilteredItems\r\n                : SelectSelector.getCustomItemsWithFilter,\r\n            selected: SelectSelector.getListBoxSelected,\r\n        });\r\n\r\n    const mapDispatchToProps = (\r\n        dispatch: IDispatch,\r\n        ownProps: ISelectOwnProps & ISelectSpecificProps\r\n    ): ISelectWithFilterDispatchProps => ({\r\n        onRenderFilter: (items: string[]) => dispatch(addStringList(ownProps.id, items)),\r\n        onDestroyFilter: () => dispatch(removeStringList(ownProps.id)),\r\n        onSelectCustomValue: (filterValue: string) => dispatch(addValueStringList(ownProps.id, filterValue)),\r\n    });\r\n\r\n    @ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\n    class WrappedComponent extends React.Component<ISelectWithFilterProps> {\r\n        static displayName = `withFilter(${Component.displayName})`;\r\n        static defaultProps: Partial<ISelectWithFilterProps> = {\r\n            duplicateText: 'Cannot add a duplicate value',\r\n            noResultFilterText: (filterText: string) => `No results match \"${filterText}\"`,\r\n            noItemsText: 'No items, enter a new value',\r\n            addValueText: (filterText: string) => `Add \"${filterText}\"`,\r\n            filterButton: {\r\n                enabled: true,\r\n                tooltip: 'Add',\r\n                tooltipPlacement: 'top',\r\n            },\r\n            defaultCustomValues: [],\r\n        };\r\n\r\n        private dividerId: string = UUID.generate();\r\n\r\n        componentWillMount() {\r\n            this.props.onRenderFilter(this.props.defaultCustomValues);\r\n        }\r\n\r\n        componentDidUpdate(prevProps: ISelectWithFilterProps) {\r\n            if (prevProps.filterValue !== this.props.filterValue) {\r\n                this.props.onUpdate?.();\r\n            }\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            this.props.onDestroyFilter();\r\n        }\r\n\r\n        private addItemBoxCustomValue(): IItemBoxProps[] {\r\n            const addItemBox: IItemBoxProps = {\r\n                displayValue: this.props.addValueText(this.props.filterValue),\r\n                value: this.props.filterValue,\r\n                onOptionClick: () => this.props.onSelectCustomValue(this.props.filterValue),\r\n            };\r\n            const divider: IItemBoxProps[] = _.some(this.props.items, (item: IItemBoxProps) => !item.hidden)\r\n                ? [{value: this.dividerId, divider: true, disabled: true}]\r\n                : [];\r\n\r\n            return [addItemBox, ...divider];\r\n        }\r\n\r\n        private noResultFilter(): IItemBoxProps {\r\n            return {\r\n                value: this.props.noResultFilterText(this.props.filterValue),\r\n            };\r\n        }\r\n\r\n        private duplicateValue(): IItemBoxProps {\r\n            return {\r\n                value: this.props.duplicateText,\r\n                disabled: true,\r\n            };\r\n        }\r\n\r\n        private noItems(): IItemBoxProps {\r\n            return {\r\n                value: this.props.noItemsText,\r\n                disabled: true,\r\n            };\r\n        }\r\n\r\n        private handleOnClick = () => {\r\n            if (!_.isEmpty(this.props.filterValue)) {\r\n                this.props.onSelectCustomValue(this.props.filterValue);\r\n            }\r\n        };\r\n\r\n        private getAddValueButton(): React.ReactNode {\r\n            return (\r\n                this.props.customValues && (\r\n                    <div className=\"ml1\">\r\n                        <Button classes={['p1']} onClick={this.handleOnClick} {...this.props.filterButton}>\r\n                            <Svg svgName={'add'} className=\"icon mod-lg mod-align-with-text\" />\r\n                        </Button>\r\n                    </div>\r\n                )\r\n            );\r\n        }\r\n\r\n        private isDuplicateValue(): boolean {\r\n            return (\r\n                _.chain(this.props.items)\r\n                    .pluck('value')\r\n                    .concat(this.props.selected)\r\n                    .indexOf(this.props.filterValue)\r\n                    .value() !== -1\r\n            );\r\n        }\r\n\r\n        private allValuesAreSelected(): boolean {\r\n            return !_.chain(this.props.items)\r\n                .pluck('value')\r\n                .contains(this.props.selected)\r\n                .value();\r\n        }\r\n\r\n        render() {\r\n            const filterBoxClassNames: string = classNames({\r\n                'flex flex-center': this.props.customValues,\r\n                mb2: !!this.props.children,\r\n            });\r\n\r\n            let noResultItem: React.ReactNode = this.props.noResultItem || this.noResultFilter();\r\n            let items = this.props.items.map(\r\n                (item: IItemBoxProps): IItemBoxProps => ({...item, highlight: this.props.filterValue})\r\n            );\r\n\r\n            if (this.isDuplicateValue()) {\r\n                noResultItem = this.duplicateValue();\r\n            } else if (!_.isEmpty(this.props.filterValue) && this.props.customValues) {\r\n                items = [...this.addItemBoxCustomValue(), ...items];\r\n            } else if (this.props.customValues && _.every(items, (item) => item.hidden)) {\r\n                noResultItem = this.noItems();\r\n            } else if (items.length && this.allValuesAreSelected()) {\r\n                noResultItem = this.noItems();\r\n            }\r\n\r\n            const newProps = {\r\n                ..._.omit(this.props, [...SelectWithFilterPropsToOmit, 'selected']),\r\n                items,\r\n            };\r\n\r\n            return (\r\n                <Component\r\n                    {...newProps}\r\n                    noResultItem={noResultItem}\r\n                    noDisabled={this.props.customValues}\r\n                    hasFocusableChild\r\n                >\r\n                    <FilterBoxConnected\r\n                        {...this.props.filter}\r\n                        id={this.props.id}\r\n                        onKeyDown={(this.props as any).onKeyDown}\r\n                        onKeyUp={(this.props as any).onKeyUp}\r\n                        className={filterBoxClassNames}\r\n                        isAutoFocus\r\n                    >\r\n                        {this.getAddValueButton()}\r\n                    </FilterBoxConnected>\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return WrappedComponent;\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {DropTarget, IDropTargetProps} from 'react-dnd';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\r\nimport {DnDUtils} from '../dragAndDrop/DnDUtils';\r\nimport {\r\n    DraggableSelectedOption,\r\n    DraggableSelectedOptionType,\r\n} from '../dropdownSearch/MultiSelectDropdownSearch/DraggableSelectedOption';\r\nimport {SelectedOption} from '../dropdownSearch/MultiSelectDropdownSearch/SelectedOption';\r\nimport {IItemBoxProps} from '../itemBox/ItemBox';\r\nimport {clearListBoxOption, reorderListBoxOption, unselectListBoxOption} from '../listBox/ListBoxActions';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {ISelectButtonProps, ISelectOwnProps, ISelectProps, SelectConnected} from './SelectConnected';\r\nimport {SelectSelector} from './SelectSelector';\r\n\r\nexport interface IMultiSelectOwnProps extends ISelectProps, IDropTargetProps {\r\n    placeholder?: string;\r\n    emptyPlaceholder?: string;\r\n    deselectAllTooltipText?: string;\r\n    sortable?: boolean;\r\n    noDisabled?: boolean;\r\n    multiSelectStyle?: React.CSSProperties;\r\n}\r\n\r\nexport interface IMultiSelectStateProps {\r\n    selected?: string[];\r\n}\r\n\r\nexport interface IMultiSelectDispatchProps {\r\n    onRemoveClick?: (item: IItemBoxProps) => void;\r\n    onRemoveAll?: () => void;\r\n    onReorder?: (values: string[]) => void;\r\n}\r\n\r\nexport interface IMultiSelectProps extends IMultiSelectOwnProps, IMultiSelectStateProps, IMultiSelectDispatchProps {}\r\n\r\nconst selectPropsKeys = keys<ISelectOwnProps>();\r\n\r\nconst makeMapStateToProps = () => {\r\n    const getStateProps = createStructuredSelector({\r\n        selected: SelectSelector.getMultiSelectSelectedValues,\r\n    });\r\n\r\n    return (state: IReactVaporState, ownProps: IMultiSelectOwnProps): IMultiSelectStateProps =>\r\n        getStateProps(state, ownProps);\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IMultiSelectOwnProps): IMultiSelectDispatchProps => ({\r\n    onRemoveClick: (item: IItemBoxProps) => dispatch(unselectListBoxOption(ownProps.id, item.value)),\r\n    onRemoveAll: () => dispatch(clearListBoxOption(ownProps.id)),\r\n    onReorder: (values: string[]) => dispatch(reorderListBoxOption(ownProps.id, values)),\r\n});\r\n\r\n// This object is usefull when the drag happen outside of the DraggableSelectedOption,\r\n// instead of making the child handle it, the parent catches the event\r\nconst parentDropTarget = {\r\n    drop: _.noop,\r\n};\r\n\r\n@ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\n@DropTarget(DraggableSelectedOptionType, parentDropTarget, (connect: any) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))\r\nclass MultiSelect extends React.PureComponent<IMultiSelectProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IMultiSelectProps> = {\r\n        placeholder: 'Select an option',\r\n        emptyPlaceholder: 'No selected option',\r\n        deselectAllTooltipText: 'Deselect All',\r\n        sortable: false,\r\n        noDisabled: false,\r\n        multiSelectStyle: {},\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <SelectConnected\r\n                id={this.props.id}\r\n                key={this.props.id}\r\n                {..._.pick(this.props, selectPropsKeys)}\r\n                button={this.getButton}\r\n                multi\r\n            >\r\n                {this.props.children}\r\n            </SelectConnected>\r\n        );\r\n    }\r\n\r\n    private getSelectedOptionComponents(): React.ReactNode {\r\n        const selected = this.getSelectedOptions();\r\n\r\n        if (selected.length) {\r\n            return selected.map((item: IItemBoxProps, index: number) =>\r\n                this.props.sortable ? this.renderDraggableOption(item, index) : this.renderOption(item)\r\n            );\r\n        }\r\n        return <span className=\"multiselect-empty\">{this.props.emptyPlaceholder}</span>;\r\n    }\r\n\r\n    private renderOption(item: IItemBoxProps): JSX.Element {\r\n        const displayValue = item.displayValue || item.value;\r\n        return (\r\n            <SelectedOption\r\n                label={displayValue}\r\n                value={item.value}\r\n                key={item.value}\r\n                onRemoveClick={() => this.props.onRemoveClick(item)}\r\n            >\r\n                {displayValue}\r\n            </SelectedOption>\r\n        );\r\n    }\r\n\r\n    private renderDraggableOption(item: IItemBoxProps, index: number): JSX.Element {\r\n        return (\r\n            <div className=\"flex flex-row flex-center sortable-selected-option\" key={item.value}>\r\n                <span className=\"mr1 text-medium-grey\">{index + 1}</span>\r\n                <DraggableSelectedOption\r\n                    label={item.displayValue || item.value}\r\n                    value={item.value}\r\n                    onRemoveClick={() => this.props.onRemoveClick(item)}\r\n                    index={index}\r\n                    move={(dragIndex: number, hoverIndex: number) => this.move(dragIndex, hoverIndex)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private move(dragIndex: number, hoverIndex: number) {\r\n        const moving = this.props.selected[dragIndex];\r\n        const newOrder = [...this.props.selected];\r\n\r\n        // Remove the element at position dragIndex\r\n        newOrder.splice(dragIndex, 1);\r\n\r\n        // Insert the moving element at hoverIndex\r\n        newOrder.splice(hoverIndex, 0, moving);\r\n\r\n        this.props.onReorder(newOrder);\r\n    }\r\n\r\n    private getRemoveAllSelectedOptionsButton(): JSX.Element {\r\n        return this.getSelectedOptions().length > 1 ? (\r\n            <Tooltip title={this.props.deselectAllTooltipText} placement=\"top\" noSpanWrapper>\r\n                <div className=\"remove-all-selected-options ml1\" onClick={() => this.props.onRemoveAll()}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-medium-blue\" />\r\n                </div>\r\n            </Tooltip>\r\n        ) : null;\r\n    }\r\n\r\n    private getButton = (props: ISelectButtonProps): JSX.Element => {\r\n        const classes = classNames('multiselect-input', {'mod-sortable': this.props.sortable});\r\n        const buttonAttrs =\r\n            !this.props.noDisabled && this.props.selected && this.props.selected.length === this.props.items.length\r\n                ? {disabled: true}\r\n                : {disabled: this.props.disabled};\r\n        return (\r\n            <div className={classes} style={this.props.multiSelectStyle}>\r\n                {this.props.connectDropTarget(\r\n                    <div className=\"multiselect-selected flex flex-center flex-auto full-content\">\r\n                        <div className=\"selected-options-container truncate\">{this.getSelectedOptionComponents()}</div>\r\n                        {this.getRemoveAllSelectedOptionsButton()}\r\n                    </div>\r\n                )}\r\n                <button\r\n                    className=\"btn dropdown-toggle multiselect-add dropdown-toggle-placeholder\"\r\n                    type=\"button\"\r\n                    onKeyDown={props.onKeyDown}\r\n                    onKeyUp={props.onKeyUp}\r\n                    onClick={props.onClick}\r\n                    {...buttonAttrs}\r\n                >\r\n                    <span className=\"dropdown-no-value\">{this.props.placeholder}</span>\r\n                    <span className=\"dropdown-toggle-arrow\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    private getSelectedOptions(): IItemBoxProps[] {\r\n        if (this.props.sortable) {\r\n            return _.chain(this.props.selected)\r\n                .map((selected: string) => _.findWhere(this.props.items, {value: selected}))\r\n                .compact()\r\n                .value();\r\n        }\r\n\r\n        return this.props.items.filter((option: IItemBoxProps) => _.contains(this.props.selected, option.value));\r\n    }\r\n}\r\n\r\nexport const MultiSelectConnected: React.ComponentClass<IMultiSelectProps &\r\n    React.ButtonHTMLAttributes<HTMLButtonElement>> = DnDUtils.TagControlContext(MultiSelect);\r\n","import * as React from 'react';\r\nimport {DragSource, DropTarget, IDragSource, IDropTarget} from 'react-dnd';\r\nimport {findDOMNode} from 'react-dom';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ISelectedOptionProps, SelectedOption} from './SelectedOption';\r\n\r\nexport interface IDraggableSelectedOptionOwnProps {\r\n    isDragging?: boolean;\r\n    connectDragSource?: any;\r\n    connectDropTarget?: any;\r\n    connectDragPreview?: any;\r\n    index: number;\r\n    move: (dragIndex: number, hoverIndex: number) => void;\r\n}\r\n\r\nexport interface IDraggableSelectedOptionProps extends IDraggableSelectedOptionOwnProps, ISelectedOptionProps {}\r\n\r\nconst selectedOptionSource: IDragSource = {\r\n    isDragging(props: IDraggableSelectedOptionProps, monitor: any) {\r\n        return props.label === monitor.getItem().label;\r\n    },\r\n    beginDrag(props: IDraggableSelectedOptionProps) {\r\n        return {...props};\r\n    },\r\n};\r\n\r\nconst cardTarget: IDropTarget = {\r\n    hover(props: IDraggableSelectedOptionProps, monitor: any, component?: DraggableSelectedOption): void {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = (findDOMNode(component) as Element).getBoundingClientRect();\r\n\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.move(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n    drop(props: IDraggableSelectedOptionProps, monitor: any) {\r\n        monitor.getItem().label = null;\r\n    },\r\n};\r\n\r\nexport const DraggableSelectedOptionType = 'SELECTED_OPTION';\r\nconst DraggableSelectedOptionPropsToOmit = keys<IDraggableSelectedOptionOwnProps>();\r\n\r\n@DropTarget(DraggableSelectedOptionType, cardTarget, (connect: any) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))\r\n@DragSource(DraggableSelectedOptionType, selectedOptionSource, (connect: any, monitor: any) => ({\r\n    connectDragSource: connect.dragSource(),\r\n    connectDragPreview: connect.dragPreview(),\r\n    isDragging: monitor.isDragging(),\r\n}))\r\nexport class DraggableSelectedOption extends React.PureComponent<IDraggableSelectedOptionProps> {\r\n    render() {\r\n        const opacity = this.props.isDragging ? 0 : 1;\r\n\r\n        return this.props.connectDragPreview(\r\n            this.props.connectDropTarget(\r\n                <div className=\"selected-option-wrapper\" style={{opacity}}>\r\n                    <SelectedOption\r\n                        {..._.omit(this.props, DraggableSelectedOptionPropsToOmit)}\r\n                        label={this.props.isDragging ? null : this.props.label}\r\n                    >\r\n                        <div className=\"inline-flex\">\r\n                            {this.props.connectDragSource(\r\n                                <div className=\"move-option infline-flex cursor-move align-center\">\r\n                                    <Svg svgName=\"drag-drop\" svgClass=\"icon mod-small\" />\r\n                                </div>\r\n                            )}\r\n                            {this.props.label}\r\n                        </div>\r\n                    </SelectedOption>\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {WithServerSideProcessingProps} from '../../../hoc/withServerSideProcessing/withServerSideProcessing';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {FlatSelectConnected} from '../../flatSelect/FlatSelectConnected';\r\nimport {IFlatSelectOptionProps} from '../../flatSelect/FlatSelectOption';\r\nimport {FlatSelectSelectors} from '../../flatSelect/FlatSelectSelectors';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {ISelectProps} from '../SelectConnected';\r\n\r\nexport interface ISelectWithPredicateOwnProps {\r\n    options: IFlatSelectOptionProps[];\r\n    matchPredicate: (predicate: string, item: IItemBoxProps) => boolean;\r\n}\r\nconst SelectWithPredicatePropsToOmit = keys<ISelectWithPredicateOwnProps>();\r\ninterface SelectWithPredicateStateProps {\r\n    predicate: string;\r\n    items: IItemBoxProps[];\r\n}\r\n\r\nexport interface ISelectWithPredicateProps\r\n    extends ISelectWithPredicateOwnProps,\r\n        ISelectProps,\r\n        Partial<SelectWithPredicateStateProps>,\r\n        WithServerSideProcessingProps {}\r\n\r\nexport const selectWithPredicate = (\r\n    Component: React.ComponentType<ISelectProps>\r\n): React.ComponentType<ISelectWithPredicateProps> => {\r\n    const WrappedComponent: React.FunctionComponent<ISelectWithPredicateProps> = (props) => {\r\n        React.useEffect(() => {\r\n            props.onUpdate?.();\r\n        }, [props.predicate, props.onUpdate]);\r\n\r\n        return (\r\n            <Component {..._.omit(props, SelectWithPredicatePropsToOmit)}>\r\n                <FlatSelectConnected\r\n                    id={props.id}\r\n                    classes={['full-content-x']}\r\n                    options={props.options}\r\n                    group\r\n                    optionPicker\r\n                />\r\n                {props.children}\r\n            </Component>\r\n        );\r\n    };\r\n\r\n    WrappedComponent.displayName = `withPredicate(${Component.displayName})`;\r\n\r\n    return connect(mapStateToProps)(WrappedComponent);\r\n};\r\n\r\nfunction mapStateToProps(state: IReactVaporState, ownProps: ISelectWithPredicateProps): SelectWithPredicateStateProps {\r\n    const predicate = FlatSelectSelectors.getSelectedOptionId(state, {id: ownProps.id}) || ownProps.options[0].id;\r\n\r\n    const items = ownProps.isServer\r\n        ? ownProps.items\r\n        : _.map(ownProps.items, (item: IItemBoxProps) => {\r\n              const visible = ownProps.matchPredicate(predicate, item);\r\n\r\n              return {...item, hidden: !visible || item.hidden};\r\n          });\r\n\r\n    return {\r\n        items,\r\n        predicate,\r\n    };\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IMultiSelectOwnProps, MultiSelectConnected} from '../MultiSelectConnected';\r\nimport {ISingleSelectOwnProps, SingleSelectConnected} from '../SingleSelectConnected';\r\nimport {ISelectWithFilterProps, selectWithFilter} from './SelectWithFilter';\r\nimport {ISelectWithPredicateProps, selectWithPredicate} from './SelectWithPredicate';\r\n\r\ntype ButtonHTMLAttributes = React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nexport interface ISelectWithPredicateAndFilterProps extends ISelectWithFilterProps, ISelectWithPredicateProps {}\r\n\r\n// Single Select\r\nexport const SingleSelectWithFilter: React.ComponentType<ISelectWithFilterProps &\r\n    ISingleSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithFilter(SingleSelectConnected);\r\nexport const SingleSelectWithPredicate: React.ComponentType<ISelectWithPredicateProps &\r\n    ISingleSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithPredicate(SingleSelectConnected);\r\nexport const SingleSelectWithPredicateAndFilter: React.ComponentType<ISelectWithPredicateAndFilterProps &\r\n    ISingleSelectOwnProps &\r\n    ButtonHTMLAttributes> = _.compose(selectWithPredicate, selectWithFilter)(SingleSelectConnected);\r\n\r\n// Multi Select\r\nexport const MultiSelectWithFilter: React.ComponentType<ISelectWithFilterProps &\r\n    IMultiSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithFilter(MultiSelectConnected);\r\nexport const MultiSelectWithPredicate: React.ComponentType<ISelectWithPredicateProps &\r\n    IMultiSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithPredicate(MultiSelectConnected);\r\nexport const MultiSelectWithPredicateAndFilter: React.ComponentType<ISelectWithPredicateAndFilterProps &\r\n    IMultiSelectOwnProps &\r\n    ButtonHTMLAttributes> = _.compose(selectWithPredicate, selectWithFilter)(MultiSelectConnected);\r\n"],"sourceRoot":""}