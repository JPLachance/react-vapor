{"version":3,"sources":["webpack:///./src/components/facets/examples/FacetExamples.tsx?a9d1","webpack:///./src/components/facets/FacetMoreRows.tsx?56e2","webpack:///./src/components/facets/FacetMoreToggle.tsx?cdb2","webpack:///./src/components/facets/Facet.tsx?bcf1","webpack:///./src/components/facets/FacetMoreRowsConnected.tsx?9ea4","webpack:///./src/components/facets/FacetMoreToggleConnected.tsx?6fef","webpack:///./src/components/facets/FacetRow.tsx?d3d3"],"names":["render","facet","name","formattedName","facetRows","count","selectedFacetRows","exclude","moreFacetRows","concat","onToggleFacet","clearFacet","className","style","width","toggleFacet","enableExclusions","handleDocumentClick","e","props","isOpened","facetSearch","contains","target","onDocumentClick","componentWillMount","this","document","addEventListener","componentWillReceiveProps","nextProps","onOpen","componentWillUnmount","removeEventListener","componentDidUpdate","getElementsByTagName","focus","moreSearchClasses","rowsFiltered","filterText","length","facetRow","facetText","toLowerCase","filter","Boolean","resultsClass","filterBoxId","filterBox","withReduxState","id","filterPlaceholder","ref","handleOnChange","onToggleMore","moreClasses","moreLabel","onClick","nativeEvent","stopImmediatePropagation","type","onChange","buildFacet","onClearFacet","sortFacetRows","onRender","onDestroy","removeSelectedClass","selected","unselected","allRows","item","rows","isSelected","key","isChecked","maxTooltipLabelLength","excludeTooltipMessage","rowsToShow","Math","max","maxRowsToShow","moreRowsToggle","facetClasses","title","clearFacetLabel","svgName","slice","getMoreRows","needMoreRows","defaultProps","FacetMoreRowsConnected","state","ownProps","facets","filterItem","filters","opened","dispatch","mergeProps","FacetMoreToggleConnected","getExcludeCheckbox","preventDefault","checked","isExclude","stopEvent","svgClass","getLabel","getCount","maxCalculatedNameLength","label","tooltipLabel","placement","toggleFacetToExclude","getExcludeButton","event","stopPropagation"],"mappings":"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","file":"assets/968.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {Facet, IFacet} from '../Facet';\r\n\r\nexport class FacetExamples extends React.Component<any> {\r\n    render() {\r\n        const facet: IFacet = {name: 'facetTitle', formattedName: 'Facet Title'};\r\n        const facetRows: IFacet[] = [\r\n            {\r\n                name: 'row1',\r\n                formattedName: 'Row 1',\r\n            },\r\n            {\r\n                name: 'row2',\r\n                formattedName: 'Row 2 with a count',\r\n                count: '516',\r\n            },\r\n            {\r\n                name: 'row3',\r\n                formattedName: 'Row 3 with very long facet name that will get cut',\r\n            },\r\n        ];\r\n        const selectedFacetRows: IFacet[] = [\r\n            {\r\n                name: 'row2',\r\n                formattedName: 'Row 2',\r\n                exclude: true,\r\n            },\r\n            {\r\n                name: 'row1',\r\n                formattedName: 'Row 1',\r\n            },\r\n        ];\r\n        const moreFacetRows = facetRows.concat(\r\n            {\r\n                name: 'row4',\r\n                formattedName: 'Row 4',\r\n            },\r\n            {\r\n                name: 'row5',\r\n                formattedName: 'Row 5',\r\n            },\r\n            {\r\n                name: 'row6',\r\n                formattedName: 'Row 6',\r\n            },\r\n            {\r\n                name: 'row7',\r\n                formattedName: 'Row 7',\r\n            }\r\n        );\r\n\r\n        const onToggleFacet: (facet: string, facetRow: IFacet) => void = _.noop;\r\n        const clearFacet: (facet: string) => void = () => {\r\n            return;\r\n        };\r\n        return (\r\n            <div className=\"mt2\" style={{width: 300}}>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Facet</label>\r\n                    <Facet facet={facet} facetRows={facetRows} clearFacet={clearFacet} toggleFacet={onToggleFacet} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Facet with a selected row</label>\r\n                    <Facet\r\n                        facet={facet}\r\n                        facetRows={facetRows}\r\n                        selectedFacetRows={selectedFacetRows}\r\n                        clearFacet={clearFacet}\r\n                        toggleFacet={onToggleFacet}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Facet with many rows</label>\r\n                    <Facet\r\n                        facet={facet}\r\n                        facetRows={moreFacetRows}\r\n                        clearFacet={clearFacet}\r\n                        toggleFacet={onToggleFacet}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Facet with enabled exclude rows</label>\r\n                    <Facet\r\n                        facet={facet}\r\n                        facetRows={moreFacetRows}\r\n                        selectedFacetRows={selectedFacetRows}\r\n                        enableExclusions\r\n                        clearFacet={clearFacet}\r\n                        toggleFacet={onToggleFacet}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as _ from 'underscore';\r\nimport * as s from 'underscore.string';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {FilterBox} from '../filterBox/FilterBox';\r\nimport {FilterBoxConnected} from '../filterBox/FilterBoxConnected';\r\n\r\nexport interface IFacetMoreRowsOwnProps extends React.ClassAttributes<FacetMoreRows> {\r\n    facet: string;\r\n    facetRows: JSX.Element[];\r\n}\r\n\r\nexport interface IFacetMoreRowsStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    filterText?: string;\r\n}\r\n\r\nexport interface IFacetMoreRowsDispatchProps {\r\n    onOpen?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IFacetMoreRowsChildrenProps {\r\n    filterPlaceholder?: string;\r\n}\r\n\r\nexport interface IFacetMoreRowsProps\r\n    extends IFacetMoreRowsOwnProps,\r\n        IFacetMoreRowsDispatchProps,\r\n        IFacetMoreRowsStateProps,\r\n        IFacetMoreRowsChildrenProps {}\r\n\r\nexport class FacetMoreRows extends React.Component<IFacetMoreRowsProps, any> {\r\n    private facetSearch: HTMLDivElement;\r\n\r\n    componentWillMount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFacetMoreRowsProps) {\r\n        if (this.props.onOpen && !this.props.isOpened && nextProps.isOpened) {\r\n            this.props.onOpen();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isOpened) {\r\n            this.facetSearch.getElementsByTagName('input')[0].focus();\r\n        }\r\n    }\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.facetSearch);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const moreSearchClasses: string = 'facet-more-search' + (!this.props.isOpened ? ' hidden' : '');\r\n        const rowsFiltered: JSX.Element[] =\r\n            this.props.filterText && this.props.filterText.length\r\n                ? _.map(this.props.facetRows, (facetRow: JSX.Element) => {\r\n                      const facetText = facetRow.props.facetRow.formattedName;\r\n                      if (s.contains(facetText.toLowerCase(), this.props.filterText.toLowerCase())) {\r\n                          return facetRow;\r\n                      }\r\n                  }).filter(Boolean)\r\n                : this.props.facetRows;\r\n        const resultsClass: string = 'facet-search-results' + (!rowsFiltered.length ? ' hidden' : '');\r\n        const filterBoxId: string = 'filter-' + this.props.facet;\r\n        const filterBox: JSX.Element = this.props.withReduxState ? (\r\n            <FilterBoxConnected id={filterBoxId} filterPlaceholder={this.props.filterPlaceholder} />\r\n        ) : (\r\n            <FilterBox id={filterBoxId} filterPlaceholder={this.props.filterPlaceholder} />\r\n        );\r\n\r\n        return (\r\n            <div className={moreSearchClasses}>\r\n                <div className=\"facet-search\" ref={(facetSearch: HTMLDivElement) => (this.facetSearch = facetSearch)}>\r\n                    {filterBox}\r\n                </div>\r\n                <ul className={resultsClass}>{rowsFiltered}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface IFacetMoreToggleOwnProps extends React.ClassAttributes<FacetMoreToggle> {\r\n    facet: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport interface IFacetMoreToggleStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IFacetMoreToggleDispatchProps {\r\n    onToggleMore?: (facet: string) => void;\r\n}\r\n\r\nexport interface IFacetMoreToggleProps\r\n    extends IFacetMoreToggleOwnProps,\r\n        IFacetMoreToggleStateProps,\r\n        IFacetMoreToggleDispatchProps {}\r\n\r\nexport const FACET_TOGGLE_MORE_LABEL: string = 'More';\r\n\r\nexport class FacetMoreToggle extends React.Component<IFacetMoreToggleProps, any> {\r\n    private handleOnChange = () => {\r\n        if (this.props.onToggleMore) {\r\n            this.props.onToggleMore(this.props.facet);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const isOpened: boolean = this.props.isOpened ? this.props.isOpened : false;\r\n        const moreClasses: string = 'facet-value facet-selectable facet-more' + (isOpened ? ' hidden' : '');\r\n        const moreLabel: string = this.props.moreLabel || FACET_TOGGLE_MORE_LABEL;\r\n\r\n        return (\r\n            <li className={moreClasses} onClick={(e) => e.nativeEvent.stopImmediatePropagation()}>\r\n                <label className=\"coveo-checkbox-label facet-value-label\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"coveo-checkbox facet-checkbox-input\"\r\n                        onChange={() => this.handleOnChange()}\r\n                    />\r\n                    <span className=\"facet-more-button\"></span>\r\n                    <span className=\"label\">{moreLabel}</span>\r\n                </label>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {FacetMoreRows} from './FacetMoreRows';\r\nimport {FacetMoreRowsConnected} from './FacetMoreRowsConnected';\r\nimport {FacetMoreToggle} from './FacetMoreToggle';\r\nimport {FacetMoreToggleConnected} from './FacetMoreToggleConnected';\r\nimport {FacetRow} from './FacetRow';\r\n\r\nexport interface IFacet {\r\n    name: string;\r\n    formattedName: string;\r\n    tooltipLabel?: string;\r\n    count?: string;\r\n    exclude?: boolean;\r\n}\r\n\r\nexport interface IFacetOwnProps extends React.ClassAttributes<Facet> {\r\n    facet: IFacet;\r\n    facetRows: IFacet[];\r\n    toggleFacet: (facet: string, facetRow: IFacet) => void;\r\n    clearFacet: (facet: string) => void;\r\n    clearFacetLabel?: string;\r\n    maxRowsToShow?: number;\r\n    maxTooltipLabelLength?: number;\r\n    excludeTooltipMessage?(facetsRowName: string): string;\r\n}\r\n\r\nexport interface IFacetStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    selectedFacetRows?: IFacet[];\r\n}\r\n\r\nexport interface IFacetDispatchProps {\r\n    onRender?: (facet: string) => void;\r\n    onDestroy?: (facet: string) => void;\r\n    onToggleFacet?: (facet: string, facetRow: IFacet) => void;\r\n    onClearFacet?: (facet: string) => void;\r\n}\r\n\r\nexport interface IFacetChildrenProps {\r\n    moreLabel?: string;\r\n    filterPlaceholder?: string;\r\n    enableExclusions?: boolean;\r\n}\r\n\r\nexport interface IFacetProps extends IFacetOwnProps, IFacetStateProps, IFacetDispatchProps, IFacetChildrenProps {}\r\n\r\nexport const CLEAR_FACET_LABEL: string = 'Clear';\r\n\r\nexport class Facet extends React.Component<IFacetProps, any> {\r\n    static defaultProps: Partial<IFacetProps> = {\r\n        clearFacetLabel: CLEAR_FACET_LABEL,\r\n        selectedFacetRows: [],\r\n        maxRowsToShow: 5,\r\n    };\r\n\r\n    private buildFacet = (facetRow: IFacet) => {\r\n        this.props.toggleFacet(this.props.facet.name, facetRow);\r\n        if (this.props.onToggleFacet) {\r\n            this.props.onToggleFacet(this.props.facet.name, facetRow);\r\n        }\r\n    };\r\n\r\n    private clearFacet = () => {\r\n        this.props.clearFacet(this.props.facet.name);\r\n        if (this.props.onClearFacet) {\r\n            this.props.onClearFacet(this.props.facet.name);\r\n        }\r\n    };\r\n\r\n    private sortFacetRows(facetRows: IFacet[]) {\r\n        return _.sortBy(facetRows, (facetRow: IFacet) => facetRow.formattedName.toLowerCase());\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.facetRows.length && !this.props.selectedFacetRows.length) {\r\n            return null;\r\n        }\r\n        const removeSelectedClass: string =\r\n            'facet-header-eraser' + (this.props.selectedFacetRows.length ? '' : ' hidden');\r\n        const selected: IFacet[] = this.sortFacetRows(this.props.selectedFacetRows);\r\n        const unselected: IFacet[] = this.sortFacetRows(this.props.facetRows);\r\n        const allRows: IFacet[] = _.union(selected, unselected);\r\n        const facetRows: IFacet[] = _.uniq(allRows, false, (item) => item.name);\r\n        const rows: JSX.Element[] = _.map(facetRows, (facetRow: IFacet) => {\r\n            const isSelected: boolean = _.contains(_.pluck(selected, 'name'), facetRow.name);\r\n            return (\r\n                <FacetRow\r\n                    key={facetRow.name}\r\n                    facet={this.props.facet.name}\r\n                    facetRow={facetRow}\r\n                    onToggleFacet={this.buildFacet}\r\n                    isChecked={isSelected}\r\n                    enableExclusions={this.props.enableExclusions}\r\n                    maxTooltipLabelLength={this.props.maxTooltipLabelLength}\r\n                    excludeTooltipMessage={this.props.excludeTooltipMessage}\r\n                />\r\n            );\r\n        });\r\n        let rowsToShow: number = Math.max(this.props.selectedFacetRows.length, this.props.maxRowsToShow);\r\n        // If there is only 1 extra row, show it instead of the moreRowsToggle\r\n        if (rows.length === rowsToShow + 1) {\r\n            rowsToShow += 1;\r\n        }\r\n        const moreRowsToggle: JSX.Element =\r\n            rows.length > rowsToShow ? (\r\n                this.props.withReduxState ? (\r\n                    <FacetMoreToggleConnected facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                ) : (\r\n                    <FacetMoreToggle facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                )\r\n            ) : null;\r\n        const facetClasses: string = this.props.facet.name + ' facet' + (this.props.isOpened ? ' facet-opened' : '');\r\n\r\n        return (\r\n            <div className={facetClasses}>\r\n                <div className=\"facet-header\">\r\n                    <div className={removeSelectedClass} onClick={() => this.clearFacet()}>\r\n                        <Tooltip\r\n                            className=\"remove-selected-tooltip\"\r\n                            title={`${this.props.clearFacetLabel} ${this.props.facet.formattedName}`}\r\n                        >\r\n                            <Svg svgName=\"clear\" className=\"icon fill-medium-grey\" />\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className=\"facet-header-title bold text-medium-blue\">{this.props.facet.formattedName}</div>\r\n                </div>\r\n                <ul className=\"facet-values\">\r\n                    {rows.slice(0, rowsToShow)}\r\n                    {moreRowsToggle}\r\n                </ul>\r\n                {this.getMoreRows(!!moreRowsToggle, rows.slice(rowsToShow))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMoreRows(needMoreRows: boolean, rows: JSX.Element[]): JSX.Element {\r\n        if (needMoreRows) {\r\n            return this.props.withReduxState ? (\r\n                <FacetMoreRowsConnected\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            ) : (\r\n                <FacetMoreRows\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {filterThrough} from '../filterBox/FilterBoxActions';\r\nimport {IFilterState} from '../filterBox/FilterBoxReducers';\r\nimport {closeMoreFacetRows} from './FacetActions';\r\nimport {\r\n    FacetMoreRows,\r\n    IFacetMoreRowsDispatchProps,\r\n    IFacetMoreRowsOwnProps,\r\n    IFacetMoreRowsProps,\r\n    IFacetMoreRowsStateProps,\r\n} from './FacetMoreRows';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetMoreRowsOwnProps): IFacetMoreRowsStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet});\r\n    const filterItem: IFilterState = _.findWhere(state.filters, {id: 'filter-' + ownProps.facet});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n        filterText: filterItem ? filterItem.filterText : '',\r\n        withReduxState: true,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IFacetMoreRowsOwnProps\r\n): IFacetMoreRowsDispatchProps => ({\r\n    onOpen: () => dispatch(filterThrough('filter-' + ownProps.facet, '')),\r\n    onDocumentClick: () => dispatch(closeMoreFacetRows()),\r\n});\r\n\r\nexport const FacetMoreRowsConnected: React.ComponentClass<IFacetMoreRowsProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FacetMoreRows);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {toggleMoreFacetRows} from './FacetActions';\r\nimport {\r\n    FacetMoreToggle,\r\n    IFacetMoreToggleDispatchProps,\r\n    IFacetMoreToggleOwnProps,\r\n    IFacetMoreToggleProps,\r\n    IFacetMoreToggleStateProps,\r\n} from './FacetMoreToggle';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetMoreToggleOwnProps): IFacetMoreToggleStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void\r\n): IFacetMoreToggleDispatchProps => ({\r\n    onToggleMore: (facet: string) => dispatch(toggleMoreFacetRows(facet)),\r\n});\r\n\r\nexport const FacetMoreToggleConnected: React.ComponentClass<IFacetMoreToggleProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FacetMoreToggle);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IFacet} from './Facet';\r\n\r\nexport interface IFacetRowProps extends React.ClassAttributes<FacetRow> {\r\n    facetRow: IFacet;\r\n    facet: string;\r\n    onToggleFacet: (facetRow: IFacet) => void;\r\n    isChecked: boolean;\r\n    maxTooltipLabelLength?: number;\r\n    enableExclusions?: boolean;\r\n    excludeTooltipMessage?(facetsRowName: string): string;\r\n}\r\n\r\nexport class FacetRow extends React.Component<IFacetRowProps, any> {\r\n    static defaultProps: Partial<IFacetRowProps> = {\r\n        maxTooltipLabelLength: 25,\r\n    };\r\n\r\n    get isExclude(): boolean {\r\n        return !!this.props.enableExclusions && !!this.props.facetRow.exclude;\r\n    }\r\n\r\n    render() {\r\n        const className: string = classNames('facet-value', 'facet-selectable', {\r\n            'facet-exclude': this.props.enableExclusions,\r\n        });\r\n        return (\r\n            <li className={className}>\r\n                {this.getExcludeCheckbox()}\r\n                <label\r\n                    className=\"coveo-checkbox-label facet-value-label\"\r\n                    onClick={(e) => {\r\n                        // prevent event bubbling and trigger onToggleFacet only once no matter where you click on the row\r\n                        e.preventDefault();\r\n                        this.toggleFacet();\r\n                    }}\r\n                >\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name={this.props.facetRow.name}\r\n                        className=\"coveo-checkbox facet-checkbox-input\"\r\n                        checked={this.props.isChecked && !this.isExclude}\r\n                        onClick={this.stopEvent}\r\n                        onChange={_.noop}\r\n                    />\r\n                    <button type=\"button\" className={this.props.isChecked && this.isExclude ? 'exclude-box' : ''}>\r\n                        <Svg svgName=\"clear\" className=\"icon hide exclude-icon\" svgClass=\"fill-red\" />\r\n                    </button>\r\n                    {this.getLabel()}\r\n                    {this.getCount()}\r\n                </label>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    private getLabel(): JSX.Element {\r\n        const maxCalculatedNameLength = this.props.facetRow.count\r\n            ? this.props.maxTooltipLabelLength - this.props.facetRow.count.length\r\n            : this.props.maxTooltipLabelLength;\r\n\r\n        const className = classNames({'text-exclude': this.props.isChecked && this.isExclude});\r\n        const label: JSX.Element = <span className={className}>{this.props.facetRow.formattedName}</span>;\r\n\r\n        return this.props.facetRow.formattedName.length > maxCalculatedNameLength ? (\r\n            <Tooltip\r\n                title={this.props.facetRow.tooltipLabel || this.props.facetRow.formattedName}\r\n                placement=\"top\"\r\n                className=\"label\"\r\n            >\r\n                {label}\r\n            </Tooltip>\r\n        ) : (\r\n            <span className=\"label\">{label}</span>\r\n        );\r\n    }\r\n\r\n    private getCount(): JSX.Element {\r\n        if (!_.isUndefined(this.props.facetRow.count)) {\r\n            return (\r\n                <span\r\n                    className={classNames('facet-value-count', {\r\n                        'text-exclude': this.props.isChecked && this.isExclude,\r\n                    })}\r\n                >\r\n                    {this.props.facetRow.count}\r\n                </span>\r\n            );\r\n        }\r\n    }\r\n\r\n    private getExcludeCheckbox(): JSX.Element {\r\n        if (!!this.props.enableExclusions) {\r\n            return (\r\n                <div className=\"flex center-align facet-exclude-button\" onClick={() => this.toggleFacetToExclude()}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"coveo-checkbox\"\r\n                        checked={this.props.isChecked && this.isExclude}\r\n                        onClick={this.stopEvent}\r\n                        onChange={_.noop}\r\n                    />\r\n                    {this.getExcludeButton()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    private getExcludeButton(): JSX.Element {\r\n        return this.props.excludeTooltipMessage ? (\r\n            <Tooltip\r\n                className=\"exclude-button\"\r\n                title={this.props.excludeTooltipMessage(this.props.facetRow.formattedName)}\r\n            >\r\n                <Svg svgName=\"exclude\" className=\"icon\" svgClass=\"fill-medium-grey\" />\r\n            </Tooltip>\r\n        ) : (\r\n            <Svg svgName=\"exclude\" className=\"exclude-button icon\" svgClass=\"fill-medium-grey\" />\r\n        );\r\n    }\r\n\r\n    private stopEvent(event: React.MouseEvent<HTMLInputElement>): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    private toggleFacetToExclude(): void {\r\n        this.props.onToggleFacet({...this.props.facetRow, exclude: !this.isExclude});\r\n    }\r\n\r\n    private toggleFacet(): void {\r\n        this.props.onToggleFacet({...this.props.facetRow, exclude: false});\r\n    }\r\n}\r\n"],"sourceRoot":""}