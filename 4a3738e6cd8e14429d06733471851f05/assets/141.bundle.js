(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{1239:function(r,n,t){"use strict";t.r(n),n.default="import {mount, ReactWrapper} from 'enzyme';\r\nimport * as React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {Store} from 'redux';\r\n\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {clearState} from '../../../utils/ReduxUtils';\r\nimport {TestUtils} from '../../../utils/tests/TestUtils';\r\nimport {IActionOptions} from '../Action';\r\nimport {ActionsDropdown, IActionsDropdownProps} from '../ActionsDropdown';\r\nimport {ActionsDropdownConnected} from '../ActionsDropdownConnected';\r\nimport {TriggerActionConnected} from '../TriggerActionConnected';\r\n\r\ndescribe('Actions', () => {\r\n    const actionTrigger: jasmine.Spy = jasmine.createSpy('triggerMethod');\r\n\r\n    const id: string = 'dropdown-actions';\r\n    const actions: IActionOptions[] = [\r\n        {\r\n            name: 'action2',\r\n            trigger: actionTrigger,\r\n            enabled: true,\r\n        },\r\n    ];\r\n\r\n    describe('<ActionsDropdownConnected />', () => {\r\n        let wrapper: ReactWrapper<any, any>;\r\n        let actionsDropdown: ReactWrapper<IActionsDropdownProps, any>;\r\n        let store: Store<IReactVaporState>;\r\n\r\n        beforeEach(() => {\r\n            store = TestUtils.buildStore();\r\n\r\n            wrapper = mount(\r\n                <Provider store={store}>\r\n                    <ActionsDropdownConnected actions={actions} id={id} />\r\n                </Provider>,\r\n                {attachTo: document.getElementById('App')}\r\n            );\r\n            actionsDropdown = wrapper.find(ActionsDropdown).first();\r\n        });\r\n\r\n        afterEach(() => {\r\n            store.dispatch(clearState());\r\n            wrapper.detach();\r\n        });\r\n\r\n        it('should get an id as a prop', () => {\r\n            const idProp = actionsDropdown.props().id;\r\n\r\n            expect(idProp).toBeDefined();\r\n            expect(idProp).toBe(id);\r\n        });\r\n\r\n        it('should get an withReduxState as a prop', () => {\r\n            const withReduxStateProp = actionsDropdown.props().withReduxState;\r\n\r\n            expect(withReduxStateProp).toBeDefined();\r\n            expect(withReduxStateProp).toBe(true);\r\n        });\r\n\r\n        it('should display a TriggerActionConnected if there is a trigger action', () => {\r\n            expect(actionsDropdown.find(TriggerActionConnected).length).toBe(1);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=141.bundle.js.map