{"version":3,"sources":["webpack:///./src/components/datePicker/examples/DatePickerExamplesCommon.ts?c67c","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/calendar/Calendar.tsx?c175","webpack:///./src/components/modal/ModalFooter.tsx?7a8d","webpack:///./src/components/optionsCycle/OptionsCycle.tsx?83a4","webpack:///./src/components/tables/TableHeaderCell.tsx?1f86","webpack:///./src/components/optionPicker/OptionPicker.tsx?73dd","webpack:///./src/components/datePicker/DatesSelection.tsx?50dc","webpack:///./src/components/datePicker/DatePickerDropdownConnected.tsx?0ce5","webpack:///./src/components/tables/TableHeader.tsx?e8f6","webpack:///./src/components/optionsCycle/OptionsCycleConnected.tsx?3f1f","webpack:///./src/components/optionsCycle/OptionsCycleSelectors.ts?592f","webpack:///./src/components/calendar/CalendarConnected.tsx?e753","webpack:///./src/components/datePicker/DatePickerBox.tsx?dfc8","webpack:///./src/components/datePicker/DatesSelectionConnected.tsx?1a69","webpack:///./src/components/tables/TableHeaderCellConnected.tsx?1a23","webpack:///./src/components/optionPicker/Option.tsx?81ea","webpack:///./src/components/optionPicker/OptionPickerConnected.tsx?b3b0","webpack:///./src/components/datePicker/DatePickerDropdown.tsx?a7bf"],"names":["SELECTION_BOXES","title","quickOptions","label","value","subtract","toDate","toString","Date","isRange","withTime","hasSetToNowButton","color","blue","defaultQuickOptions","SELECTION_BOXES_LONG","FOUR_SELECTION_BOXES","CALENDAR_SELECTION_RULES","test","date","startOf","isFor","all","getDay","lower","upper","endDate","diff","range","DATE_RANGE_EXAMPLE","add","ButtonPropsToOmit","onClick","this","props","enabled","getTemplate","buttonClass","buttonElement","buttonAttrs","disabled","link","target","rel","href","className","name","children","tooltip","placement","tooltipPlacement","getClasses","primary","small","classes","render","defaultProps","Section","description","mods","level","titleProps","H","CalendarSelectionRuleType","DEFAULT_MONTHS","DEFAULT_YEARS","getPreviousYears","currentYear","getNextYears","DEFAULT_DAYS","MONTH_PICKER_ID","YEAR_PICKER_ID","getSelectedDatePicker","selectedDatePickers","calendarSelection","selected","filter","Boolean","length","handleClick","selectedDatePicker","id","handleInvalidDateSelected","onSelectUnselectable","componentWillReceiveProps","nextProps","onDateChange","index","limitToChange","currentLowerLimit","lowerLimit","currentUpperLimit","upperLimit","nextLowerLimit","nextUpperLimit","isDifferent","getMonth","years","indexOf","getFullYear","fillInDayInfos","day","isSelectable","selectionStart","selectionEnd","endOf","isSelected","isBetween","isSameOrAfter","isLowerLimit","isSame","isUpperLimit","selectionRules","rule","monthPickerProps","options","months","isInline","startingYearIndex","startingYear","Math","floor","yearPickerProps","orderedDays","days","startingDay","slice","daysHeaderColumns","monthPicker","withReduxState","startAt","startingMonth","currentOption","yearPicker","selectedYearOption","selectedYear","year","parseInt","selectedMonth","month","getMonthWeeks","weeks","week","dayFilled","key","tableClasses","selecting","wrapperClasses","simple","columns","headerClass","currentMonth","goToPreviousOption","onChange","newOptionIndex","goToNextOption","componentDidMount","onRender","componentWillUnmount","onDestroy","type","previousClassName","wrapAround","svgName","svgClass","buttonClassName","nextClassName","e","onSort","attributeToSort","onClickCallback","setWithFixedHeaderWrapper","titleNode","sortIcon","onMount","onUnmount","tableCellHasSort","sorted","headerCellClasses","ASCENDING","DESCENDING","UNSORTED","componentWillMount","option","isActive","activeLabel","datePicker","onBlur","onDateClick","quickOption","dates","split","handleOnBlur","formattedLowerLimit","getDateWithTimeString","inputLowerLimit","formattedUpperLimit","inputUpperLimit","formattedInputDate","isSmallSplit","isLarge","datePickerProps","setToNowTooltip","isSelecting","placeholder","separatorClasses","push","separator","join","upperLimitPlaceholder","lowerLimitPlaceholder","DatePickerDropdownConnected","state","ownProps","item","dropdowns","isOpened","opened","getDatePicker","dispatch","onDocumentClick","onApply","onCancel","onClear","mergeProps","column","TableHeaderCellClass","OptionsCycleConnected","getCurrentOption","OptionsCycleSelectors","cycle","optionsCycles","CalendarConnected","datePickers","calendarId","pickerId","isLinkedToDateRange","newValue","DatePickerBox","getCalendarId","calendarProps","calendar","datePickerClasses","inside","getdatePickerRightPart","footer","getdateSelectionBoxes","getClearOptions","datesSelectionBoxes","datesSelectionBox","boxId","quickOptionsProps","optionPicker","datesSelectionProps","isClearable","rangeLimit","initiallyUnselected","initialDateRange","dateSelection","clearLabel","datePickerId","DatesSelectionConnected","optionPickers","selectedValue","undefined","TableHeaderCellConnected","headerCell","tableHeaderCells","tableId","OptionPickerConnected","selectedLabel","DEFAULT_EXTRA_DROPDOWN_CLASSES","DEFAULT_EXTRA_DROPDOWN_TOGGLE_CLASSES","readonly","handleDocumentClick","dropdown","contains","handleCancel","document","addEventListener","removeEventListener","toLabel","labelSecondPart","appliedLowerLimit","formatDate","formattedUpper","appliedUpperLimit","dropdownClasses","extraDropdownClasses","open","menuClasses","onRight","toggleClasses","extraDropdownToggleClasses","ref","getDatePickerBox","handleApply","onBeforeApply","handleClear","getSimpleDate","hasExceededRangeLimit","hours","limitInMinutes","renderDatePickerWhenClosed","datePickerBoxProps","applyLabel","message","cancelLabel"],"mappings":"2FAAA,gNAOaA,EAAwC,CACjD,CACIC,MAAO,aACPC,aAAc,CACV,CACIC,MAAO,kBACPC,MAAO,WACH,WACKC,SAAS,GAAI,WACbC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,cACPC,MAAO,WACH,WACKC,SAAS,EAAG,UACZC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,iBACPC,MAAO,WACH,WACKC,SAAS,EAAG,WACZC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,kBACPC,MAAO,WACH,WACKC,SAAS,GAAI,WACbC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,YACPC,MAAO,WACH,WACKC,SAAS,EAAG,QACZC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,WACPC,MAAO,WACH,WACKC,SAAS,EAAG,OACZC,SACAC,WACL,KACA,IAAIC,MAAOD,cAGvBE,SAAS,EACTC,UAAU,EACVC,mBAAmB,EACnBC,MAAO,IAAiBC,OAI1BC,EAAsB,CACxB,CACIX,MAAO,WACPC,MAAO,WACH,WACKC,SAAS,EAAG,OACZC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,YACPC,MAAO,WACH,WACKC,SAAS,EAAG,QACZC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,aACPC,MAAO,WACH,WACKC,SAAS,EAAG,SACZC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,YACPC,MAAO,WACH,WACKC,SAAS,EAAG,QACZC,SACAC,WACL,KACA,IAAIC,MAAOD,cAIVQ,EAA6C,CACtD,CACId,MAAO,aACPC,aAAcY,EACdL,SAAS,EACTC,UAAU,EACVC,mBAAmB,EACnBC,MAAO,IAAiBC,OA0BnBG,GAfE,IAAiBH,KAWjB,IAAiBA,KAI0B,CACtD,CACIZ,MAAO,aACPC,aAAc,CACV,CACIC,MAAO,iBACPC,MAAO,WACH,WACKC,SAAS,EAAG,WACZC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,kBACPC,MAAO,WACH,WACKC,SAAS,GAAI,WACbC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,YACPC,MAAO,WACH,WACKC,SAAS,EAAG,QACZC,SACAC,WACL,KACA,IAAIC,MAAOD,aAEnB,CACIJ,MAAO,WACPC,MAAO,WACH,WACKC,SAAS,EAAG,OACZC,SACAC,WACL,KACA,IAAIC,MAAOD,cAGvBE,SAAS,EACTC,UAAU,EACVC,mBAAmB,EACnBC,MAAO,IAAiBC,QAInBI,EAAqD,CAC9D,CACIC,KAAM,SAACC,GACH,OAAAA,GACA,IACKC,QAAQ,OACRd,UACTe,MAAO,IAA0BC,KAErC,CACIJ,KAAM,SAACC,GAAe,OAAkB,IAAlBA,EAAKI,UAC3BF,MAAO,IAA0BG,OAErC,CACIN,KAAM,SAACC,GAAe,OAAkB,IAAlBA,EAAKI,UAC3BF,MAAO,IAA0BI,OAErC,CACIP,KAAM,SAACC,EAAYO,GAAkB,SAAOA,GAASC,KAAK,EAAOR,GAAO,QAAU,GAClFE,MAAO,IAA0BO,OAErC,CACIV,KAAM,SAACC,EAAYO,GAAkB,SAAOA,GAASC,KAAK,EAAOR,GAAO,QAAU,GAClFE,MAAO,IAA0BO,QAuD5BC,GAXE,IAAiBhB,KAOjB,IAA0BS,IAIc,CACnD,IAAShB,SACT,IACKwB,IAAI,EAAG,OACPxB,Y,ymBCpRHyB,EAAoB,CAAH,oHAEvB,2B,+CAyEA,OAzE4B,OAWhB,YAAAC,QAAR,WACQC,KAAKC,MAAMF,SAAWC,KAAKC,MAAMC,SACjCF,KAAKC,MAAMF,WAInB,YAAAI,YAAA,SAAYC,GAAZ,IACQC,EADR,OAGQC,EAAc,EAAH,KACR,OAAON,KAAKC,MAAOH,IAAkB,CACxCS,UAAWP,KAAKC,MAAMC,QACtBH,QAAS,WAAM,SAAKA,aAyBxB,OAtBIC,KAAKC,MAAMO,MACXF,EAAc,SAASA,EAAa,CAChCG,OAAQT,KAAKC,MAAMQ,OACnBC,IAAK,sBACLC,KAAMX,KAAKC,MAAMO,OAGrBH,EACI,uBAAGO,UAAcR,EAAW,kBAAsBE,GAC7CN,KAAKC,MAAMY,KACXb,KAAKC,MAAMa,WAIpBT,EACI,4BAAQO,UAAWR,GAAiBE,GAC/BN,KAAKC,MAAMY,KACXb,KAAKC,MAAMa,UAKhB,UAAUd,KAAKC,MAAMc,SAIzB,EAHA,gBAAC,IAAO,CAAC/C,MAAOgC,KAAKC,MAAMc,QAASC,UAAWhB,KAAKC,MAAMgB,iBAAkBL,UAAU,iBACjFP,IAOL,YAAAa,WAAR,WACI,OAAO,EACH,MACA,CACI,cAAelB,KAAKC,MAAMkB,QAC1B,YAAanB,KAAKC,MAAMmB,MACxB,2BAA4BpB,KAAKC,MAAMC,QACvC,oBAAqBF,KAAKC,MAAMkB,UAAYnB,KAAKC,MAAMC,SAE3DF,KAAKC,MAAMoB,UAInB,YAAAC,OAAA,WACI,OAAOtB,KAAKG,YAAYH,KAAKkB,eAtE1B,EAAAK,aAAsC,CACzCrB,SAAS,EACTW,KAAM,GACNE,QAAS,GACTI,SAAS,EACTC,OAAO,EACPH,iBAAkB,QAClBR,OAAQ,IAiEhB,EAzEA,CAA4B,c,oSCFfe,EAAkD,SAAC,G,IAC5DV,EAAA,EAAAA,SACA9C,EAAA,EAAAA,MACAyD,EAAA,EAAAA,YACAb,EAAA,EAAAA,UACAc,EAAA,EAAAA,KACA,IAAAC,aAAA,IAAQ,EAAR,IAEMC,EAA2C,CAC7ChB,UAAW,uBACXE,SAAU9C,GAER6D,EAAI,KAAIF,EAAQ,GACtB,OACI,4BAAUf,UAAW,EAAWA,EAAWc,EAAM,SAASC,EAAK,qCAC1D3D,GAAS,gBAAC6D,EAAC,KAAKD,IAChBH,GAAe,qBAAGb,UAAU,eAAea,GAC3CX,K,0pCCfAgB,EAA4B,CACrCzC,IAAK,MACLE,MAAO,QACPC,MAAO,QACPG,MAAO,SAmCEoC,EAA2B,WAE3BC,EAAa,EACnB,IAAUC,iBAAiB,IAAG,CACjC,IAAUC,YAAY5D,YACnB,IAAU6D,aAAa,KAGjBC,EAAyB,kBAEzBC,EAA0B,kBAE1BC,EAAyB,iBAEtC,2B,+CAyMA,OAzM8B,OAUlB,YAAAC,sBAAR,WACI,IAAMC,EAA0C,MAC5CxC,KAAKC,MAAMwC,mBACX,SAACA,GACG,GAAIA,EAAkBC,SAClB,OAAOD,KAGjBE,OAAOC,SAET,OAAOJ,EAAoBK,OAASL,EAAoB,GAAK,MAGzD,YAAAM,YAAR,SAAoB3E,GAChB,GAAI6B,KAAKC,MAAMF,QAAS,CACpB,IAAMgD,EAAuC/C,KAAKuC,wBAE9CQ,GACA/C,KAAKC,MAAMF,QAAQgD,EAAmBC,GAAID,EAAmBL,WAAa,IAAWlD,MAAOrB,KAKhG,YAAA8E,0BAAR,WACI,GAAIjD,KAAKC,MAAMiD,qBAAsB,CACjC,IAAMH,EAAuC/C,KAAKuC,wBAE9CQ,GACA/C,KAAKC,MAAMiD,qBAAqBH,EAAmBC,MAK/D,YAAAG,0BAAA,SAA0BC,GAA1B,WACQpD,KAAKC,MAAMoD,cAAgBrD,KAAKC,MAAMwC,kBAAkBI,QACxD,OAAOO,EAAUX,mBAAmB,SAACA,EAAqCa,GACtE,GAAI,EAAKrD,MAAMwC,kBAAkBa,GAAQ,CACrC,IAAIC,OAAa,EACXC,EAA0B,EAAKvD,MAAMwC,kBAAkBa,GAAOG,WAC9DC,EAA0B,EAAKzD,MAAMwC,kBAAkBa,GAAOK,WAC9DC,EAAuBnB,EAAkBgB,WACzCI,EAAuBpB,EAAkBkB,WAE3C,IAAUG,YAAYN,EAAmBI,EAAgB,UACzDL,EAAgBK,EACT,IAAUE,YAAYJ,EAAmBG,EAAgB,YAChEN,EAAgBM,GAGhBN,IACA,EAAKtD,MAAMoD,aAAa,EAAKpD,MAAM+C,GAAKX,EAAiBkB,EAAcQ,YACvE,EAAK9D,MAAMoD,aACP,EAAKpD,MAAM+C,GAAKV,EAChB,EAAKrC,MAAM+D,MAAMC,QAAQV,EAAcW,cAAc5F,mBAQ7E,YAAA6F,eAAA,SAAeC,GAAf,WA8CI,OA7CAA,EAAIC,cAAe,EAEnB,OAAOrE,KAAKC,MAAMwC,mBAAmB,SAACA,GAClC,IAAM6B,EAAgC7B,EAAkBgB,WAClD,EAAOhB,EAAkBgB,YAAYtE,QAAQ,OAC7C,KACAoF,EACF9B,EAAkBjE,SAAWiE,EAAkBkB,YAAclB,EAAkBgB,WACzE,EAAOhB,EAAkBkB,YAAYa,MAAM,OAC3CF,EACJG,EACFH,GAAkBC,GAAgBH,EAAIlF,KAAKwF,UAAUJ,EAAgBC,EAAc,MAAO,MAE9FH,EAAIC,aACA5B,EAAkBjE,SAClBiE,EAAkBC,WAAa,IAAWlD,OAC1CiD,EAAkBgB,WACZW,EAAIC,cAAgBD,EAAIlF,KAAKyF,cAAclC,EAAkBgB,YAC7DW,EAAIC,aACdD,EAAIK,WAAcL,EAAIC,cAAgBI,GAAeL,EAAIK,WACzDL,EAAIQ,aACCnC,EAAkBjE,SAAW4F,EAAIlF,KAAK2F,OAAOP,EAAgB,QAAWF,EAAIQ,aACjFR,EAAIU,aAAgBrC,EAAkBjE,SAAW4F,EAAIlF,KAAK2F,OAAON,EAAc,QAAWH,EAAIU,aAC9FV,EAAIzF,MAAQ8F,EAAahC,EAAkB9D,MAAQyF,EAAIzF,MAEvD,OAAO,EAAKsB,MAAM8E,gBAAgB,SAACC,GAC3BZ,EAAIC,eAEAW,EAAK5F,QAAU0C,EAA0BzC,KACxC2F,EAAK5F,QAAU0C,EAA0BvC,OACtCkD,EAAkBC,WAAa,IAAWnD,OAC7CyF,EAAK5F,QAAU0C,EAA0BtC,OACtCiD,EAAkBC,WAAa,IAAWlD,MAE9C4E,EAAIC,aAAeW,EAAK/F,KAAKmF,EAAIlF,KAAKb,UAEtC2G,EAAK5F,QAAU0C,EAA0BnC,OACzC8C,EAAkBC,WAAa,IAAWlD,QAE1C4E,EAAIC,aAAeW,EAAK/F,KAAKwD,EAAkBgB,WAAYW,EAAIlF,KAAKb,kBAM7E+F,GAGX,YAAA9C,OAAA,sBACU2D,EAAuC,CACzCC,QAASlF,KAAKC,MAAMkF,OACpBC,UAAU,GAGRC,EAA4BrF,KAAKC,MAAM+D,MAAMC,QAAQ,IAAU/B,YAAY5D,YAC3EgH,EACFtF,KAAKC,MAAMqF,eACVD,GAAqB,EAAIA,EAAoBE,KAAKC,MAAMxF,KAAKC,MAAM+D,MAAMnB,OAAS,IACjF4C,EAAsC,CACxCP,QAASlF,KAAKC,MAAM+D,MACpBoB,UAAU,GAGRM,EAAW,GACb1F,KAAKC,MAAM0F,KAAK3F,KAAKC,MAAM2F,cACxB5F,KAAKC,MAAM0F,KAAKE,MAAM7F,KAAKC,MAAM2F,YAAc,GAC/C5F,KAAKC,MAAM0F,KAAKE,MAAM,EAAG7F,KAAKC,MAAM2F,cAErCE,EAA6C,MAAMJ,GAAa,SAACtB,GAAgB,OAAEpG,MAAOoG,MAE1F2B,EAAc/F,KAAKC,MAAM+F,eAC3B,gBAAC,IAAqB,GAClBhD,GAAIhD,KAAKC,MAAM+C,GAAKX,EACpB4D,QAASjG,KAAKC,MAAMiG,eAChBjB,IAGR,gBAAC,IAAY,GAACkB,cAAenG,KAAKC,MAAMiG,eAAmBjB,IAGzDmB,EAAapG,KAAKC,MAAM+F,eAC1B,gBAAC,IAAqB,GAAChD,GAAIhD,KAAKC,MAAM+C,GAAKV,EAAgB2D,QAASX,GAAkBG,IAEtF,gBAAC,IAAY,GAACU,cAAeb,GAAkBG,IAG7CY,EAAsB,cAAcrG,KAAKC,MAAMqG,cAA0ChB,EAA1BtF,KAAKC,MAAMqG,aAC1EC,EAAOC,SAASxG,KAAKC,MAAM+D,MAAMqC,GAAqB,IACtDI,EAAiB,cAAczG,KAAKC,MAAMwG,eAE1CzG,KAAKC,MAAMiG,cADXlG,KAAKC,MAAMwG,cAEXC,EAAkB,IAAUC,cAAc,IAAIpI,KAAKgI,EAAME,GAAgBzG,KAAKC,MAAM2F,aACpFgB,EAAuB,MAAMF,GAAO,SAACG,GACvC,IAAMlB,EAAsB,MAAMkB,GAAM,SAACzC,GACrC,IAAM0C,EAAY,EAAK3C,eAAeC,GACtC,OACI,gBAAC,IAAW,CACR2C,IAAKD,EAAU5H,KAAKZ,WACpB8F,IAAK0C,EACL/G,QAAS,SAAC5B,GAAgB,SAAK2E,YAAY3E,IAC3C+E,qBAAsB,WAAM,SAAKD,kCAK7C,OAAO,sBAAI8D,IAAK,QAAQpB,EAAK,GAAGoB,KAAQpB,MAGtCqB,EAAuB,EAAW,QAAS,gBAAiB,CAC9DC,YAAajH,KAAKuC,0BAGhB2E,EAAyB,EAAW,WAAY,CAClD,gBAAiBlH,KAAKC,MAAMkH,SAGhC,OACI,uBAAKvG,UAAWsG,GACZ,uBAAKtG,UAAU,sBACVmF,EACAK,GAEL,yBAAOxF,UAAWoG,GACd,gBAAC,IAAW,CAACI,QAAStB,EAAmBuB,YAAY,sBACrD,6BAAQT,MAnMjB,EAAArF,aAAwC,CAC3CwD,eAAgB,GAChBf,MAAOhC,EACPmD,OAAQpD,EACR4D,KAAMvD,EACN8D,cAAe,IAAUoB,aACzB1B,YAAa,GAkMrB,EAzMA,CAA8B,c,2YC5D9B,2B,+CAMA,OANiC,OAC7B,YAAAtE,OAAA,WACI,IAAMD,EAAU,EAAW,eAAgBrB,KAAKC,MAAMoB,SAEtD,OAAO,uBAAKT,UAAWS,GAAUrB,KAAKC,MAAMa,WAEpD,EANA,CAAiC,c,mZC2BjC,2B,+CA4DA,OA5DkC,OAMtB,YAAAyG,mBAAR,WACI,GAAIvH,KAAKC,MAAMuH,SAAU,CACrB,IAAMC,EAAiBzH,KAAKC,MAAMkG,cAC5BnG,KAAKC,MAAMkG,cAAgB,EAC3BnG,KAAKC,MAAMiF,QAAQrC,OAAS,EAClC7C,KAAKC,MAAMuH,SAASC,KAIpB,YAAAC,eAAR,WACI,GAAI1H,KAAKC,MAAMuH,SAAU,CACrB,IAAMC,EACFzH,KAAKC,MAAMkG,gBAAkBnG,KAAKC,MAAMiF,QAAQrC,OAAS,EAAI,EAAI7C,KAAKC,MAAMkG,cAAgB,EAChGnG,KAAKC,MAAMuH,SAASC,KAI5B,YAAAE,kBAAA,W,QACuB,QAAnB,KAAA3H,KAAKC,OAAM2H,gBAAQ,kBAGvB,YAAAC,qBAAA,W,QACwB,QAApB,KAAA7H,KAAKC,OAAM6H,iBAAS,kBAGxB,YAAAxG,OAAA,sBACI,OACI,uBACIV,UAAW,EAAW,iCAAkCZ,KAAKC,MAAMW,UAAW,CAC1E,aAAcZ,KAAKC,MAAMmF,YAG7B,0BACI2C,KAAK,SACLnH,UAAW,EAAW,uCAAwCZ,KAAKC,MAAM+H,mBACzEjI,QAAS,WAAM,SAAKwH,sBACpBhH,UAAWP,KAAKC,MAAMgI,YAA2C,IAA7BjI,KAAKC,MAAMkG,eAE/C,gBAAC,IAAG,CAAC+B,QAAQ,qBAAqBC,SAAS,gCAE/C,wBAAMvH,UAAW,EAAW,uBAAwBZ,KAAKC,MAAMmI,kBAC1DpI,KAAKC,MAAMiF,QAAQlF,KAAKC,MAAMkG,gBAEnC,0BACI4B,KAAK,SACLnH,UAAW,EAAW,mCAAoCZ,KAAKC,MAAMoI,eACrEtI,QAAS,WAAM,SAAK2H,kBACpBnH,UAAWP,KAAKC,MAAMgI,YAAcjI,KAAKC,MAAMkG,gBAAkBnG,KAAKC,MAAMiF,QAAQrC,OAAS,GAE7F,gBAAC,IAAG,CAACqF,QAAQ,sBAAsBC,SAAS,kCAtDrD,EAAA5G,aAA4C,CAC/C4E,cAAe,EACf8B,YAAY,GAyDpB,EA5DA,CAAkC,c,kaCHlC,2B,+CA2DA,OA3DqC,OAKzB,YAAAnF,YAAR,SAAoBwF,GACZtI,KAAKC,MAAMsI,QAAUvI,KAAKC,MAAMuI,iBAChCxI,KAAKC,MAAMsI,SAGXvI,KAAKC,MAAMwI,iBACXzI,KAAKC,MAAMwI,gBAAgBH,IAI3B,YAAAI,0BAAR,SAAkCC,EAA4BC,GAC1D,OACI,uBAAKhI,UAAU,0BACV+H,EACAC,IAKb,YAAAjB,kBAAA,WACQ3H,KAAKC,MAAM4I,SAAW7I,KAAKC,MAAMuI,iBACjCxI,KAAKC,MAAM4I,WAInB,YAAAhB,qBAAA,WACQ7H,KAAKC,MAAM6I,WACX9I,KAAKC,MAAM6I,aAInB,YAAAxH,OAAA,sBACUyH,GAAoB,cAAc/I,KAAKC,MAAM+I,WAAahJ,KAAKC,MAAMuI,gBACrEI,EAAwBG,EAC1B,uBAAKnI,UAAU,mBACX,gBAAC,IAAG,CAACsH,QAAQ,WAAWtH,UAAU,sBAEtC,KAEEqI,EAAoB,EAAWjJ,KAAKC,MAAMW,UAAW,CACvD,aAAcmI,EACd,uBAAwB/I,KAAKC,MAAM+I,SAAW,IAAkBE,UAChE,wBAAyBlJ,KAAKC,MAAM+I,SAAW,IAAkBG,aAGrE,OACI,sBACIvI,UAAWqI,EACXlJ,QAAS,SAACuI,GAAoD,SAAKxF,YAAYwF,KAE9EtI,KAAK0I,0BAA0B1I,KAAKC,MAAMjC,MAAO4K,KAtDvD,EAAArH,aAA+C,CAClDyH,OAAQ,IAAkBI,UAyDlC,EA3DA,CAAqC,c,oZCRrC,2B,+CAkCA,OAlCkC,OACtB,YAAAtG,YAAR,SAAoB3E,EAAeD,GAC3B8B,KAAKC,MAAMF,SACXC,KAAKC,MAAMF,QAAQ5B,EAAOD,IAIlC,YAAAmL,mBAAA,WACQrJ,KAAKC,MAAM2H,UACX5H,KAAKC,MAAM2H,YAInB,YAAAC,qBAAA,WACQ7H,KAAKC,MAAM6H,WACX9H,KAAKC,MAAM6H,aAInB,YAAAxG,OAAA,sBACU4D,EAAyB,MAAMlF,KAAKC,MAAMiF,SAAS,SAACoE,EAAiBhG,GACvE,OACI,sBAAIyD,IAAK,UAAU,EAAK9G,MAAM+C,GAAE,IAAIM,GAChC,gBAAC,IAAM,CACHgG,OAAQA,EACRvJ,QAAS,SAAC5B,EAAeD,GAAkB,SAAK4E,YAAY3E,EAAOD,IACnEqL,SAAU,EAAKtJ,MAAMuJ,aAAeF,EAAOpL,QAAU,EAAK+B,MAAMuJ,kBAMhF,OAAO,sBAAI5I,UAAU,wCAAwCsE,IAErE,EAlCA,CAAkC,c,omBCkClC,2B,+CAoGA,OApGoC,OAQxB,YAAA7B,aAAR,SAAqBnE,EAAY4F,EAAuB2E,GAChDzJ,KAAKC,MAAMyJ,QACX1J,KAAKC,MAAMyJ,OAAOxK,EAAM4F,EAAc2E,IAItC,YAAAE,YAAR,SAAoB7E,GACZ9E,KAAKC,MAAMF,SACXC,KAAKC,MAAMF,QAAQ+E,IAI3B,YAAAuE,mBAAA,WACQrJ,KAAKC,MAAM2H,UACX5H,KAAKC,MAAM2H,YAInB,YAAAC,qBAAA,WACQ7H,KAAKC,MAAM6H,WACX9H,KAAKC,MAAM6H,aAInB,YAAA3E,0BAAA,SAA0BC,GACtB,GAAIA,EAAUwG,aAAexG,EAAUwG,cAAgB5J,KAAKC,MAAM2J,YAAa,CAC3E,IAAMC,EAAkBzG,EAAUwG,YAAYE,MAAM,KAEpD9J,KAAKqD,aAAa,IAAI9E,KAAKsL,EAAM,KAAK,GAAO,GAEzCA,EAAMhH,OAAS,GACf7C,KAAKqD,aAAa,IAAI9E,KAAKsL,EAAM,KAAK,GAAM,KAKhD,YAAAE,aAAR,SAAqB7K,EAAY4F,QAAA,IAAAA,OAAA,GAC7B,IAAMkF,EAA8B,IAAUC,sBAAsBjK,KAAKC,MAAMiK,iBACzEC,EAA8B,IAAUF,sBAAsBjK,KAAKC,MAAMmK,iBACzEC,EAA6B,IAAUJ,sBAAsB/K,KAG7D4F,GAAgBkF,IAAwBK,GACzCvF,GAAgBqF,IAAwBE,IAEzCrK,KAAKqD,aAAanE,EAAM4F,IAIhC,YAAAxD,OAAA,sBACUgJ,EAAetK,KAAKC,MAAMzB,UAAYwB,KAAKC,MAAMvB,kBACjD6L,EAAUvK,KAAKC,MAAMxB,UAAauB,KAAKC,MAAMzB,SAAWwB,KAAKC,MAAMvB,kBACnEwI,GAA0BoD,GAAgBC,EAAU,GAAK,kBACzDC,EAAoC,CACtC/L,SAAUuB,KAAKC,MAAMxB,SACrBC,kBAAmBsB,KAAKC,MAAMvB,kBAC9B+L,gBAAiBzK,KAAKC,MAAMwK,gBAC5BC,YAAa1K,KAAKC,MAAMyK,YACxB3K,QAAS,SAAC+E,GAA0B,SAAK6E,YAAY7E,IACrD4E,OAAQ,SAACxK,EAAY4F,GAA0B,SAAKiF,aAAa7K,EAAM4F,IACvE6F,YAAa,IAEXC,EAA6B,CAAC,kBAChCL,GACAK,EAAiBC,KAAK,gBAE1B,IAAMC,EAAyB9K,KAAKC,MAAMzB,QACtC,wBAAMoC,UAAWgK,EAAiBG,KAAK,MACnC,kCAEJ,KACE1M,EAAsB2B,KAAKC,MAAMzB,QACnC,gBAAC,IAAU,GACPmF,YAAU,EACVzE,KAAMc,KAAKC,MAAM0D,YACb6G,EAAe,CACnBG,YAAa3K,KAAKC,MAAM+K,yBAE5B,KAEJ,OACI,uBAAKpK,UAAWsG,GACZ,gBAAC,IAAU,GACPhI,KAAMc,KAAKC,MAAMwD,YACb+G,EAAe,CACnBG,YAAa3K,KAAKC,MAAMgL,yBAE3BH,EACAzM,IA/FN,EAAAkD,aAA8C,CACjD0J,sBALuC,sBAMvCD,sBALuC,qBAMvCpB,YAAa,GACbc,YAAa,IA+FrB,EApGA,CAAoC,c,iCCzDpC,wHAkEaQ,EAA8E,aA9CnE,SACpBC,EACAC,GAEA,IAAMC,EAAuB,YAAYF,EAAMG,UAAW,CAACtI,GAAIoI,EAASpI,KAExE,MAAO,CACHuI,SAAUF,GAAQA,EAAKG,OACvB/B,WAAY,IAAoBgC,cAAcN,EAAO,CAACnI,GAAIoI,EAASpI,KACnEgD,gBAAgB,MAIG,SACvB0F,EACAN,GACmC,OACnCxD,SAAU,WAAM,OAAA8D,EAAS,YAAYN,EAASpI,MAC9C8E,UAAW,WAAM,OAAA4D,EAAS,YAAeN,EAASpI,MAClDjD,QAAS,SAAC0J,GACNiC,EAAS,YAAeN,EAASpI,KAC7ByG,IACAiC,EAAS,YAAmBjC,EAAWzG,KACvC0I,EAAS,YAAWjC,EAAWzG,GAAI,IAAWzD,UAGtDoM,gBAAiB,WAAM,OAAAD,EAAS,YAAcN,EAASpI,MACvD4I,QAAS,WACLF,EAAS,YAAcN,EAASpI,KAChC0I,EAAS,YAAgBN,EAASpI,KAClC0I,EAAS,YAAiBN,EAASpI,MAEvC6I,SAAU,SAACvE,EAAsBpF,EAAqBqJ,GAC9CA,IACAG,EAAS,YAAmB,YAAYN,EAASpI,GAAK,IAAmBsE,IACzEoE,EAAS,YAAmB,YAAYN,EAASpI,GAAK,IAAkBd,IACxEwJ,EAAS,YAAiBN,EAASpI,KACnC0I,EAAS,YAAmBN,EAASpI,KACrC0I,EAAS,YAAcN,EAASpI,OAGxC8I,QAAS,WACLJ,EAAS,YAAeN,EAASpI,SAOrC,IAAW+I,WAH4E,CAIzF,M,mnBC1DF,2B,+CAkBA,OAlBiC,OAC7B,YAAAzK,OAAA,sBACU8F,EAAyB,MAC3BpH,KAAKC,MAAMmH,SACX,SAAC4E,EAA+B1I,GAC5B,IAAM2I,EACF,EAAKhM,MAAM+F,gBAAkBgG,EAAOxD,gBAAkB,IAA2B,IAErF,OAAO,gBAACyD,EAAoB,GAAClF,IAAK,OAAMiF,EAAOhJ,IAAMM,IAAa0I,OAI1E,OACI,yBAAOpL,UAAW,EAAWZ,KAAKC,MAAMoH,cACpC,0BAAKD,KAIrB,EAlBA,CAAiC,c,iCCZjC,gFA8Ba8E,EAAmG,aAhBxF,SACpBf,EACAC,GAC0B,OAC1BjF,cAAe,IAAsBgG,iBAAiBhB,EAAO,CAACnI,GAAIoI,EAASpI,GAAIiD,QAASmF,EAASnF,cAG1E,SACvByF,EACAN,GAC6B,OAC7BxD,SAAU,WAAM,OAAA8D,EAAS,YAAgBN,EAASpI,GAAIoI,EAASnF,WAC/D6B,UAAW,WAAM,OAAA4D,EAAS,YAAmBN,EAASpI,MACtDwE,SAAU,SAAClE,GAAkB,OAAAoI,EAAS,YAAmBN,EAASpI,GAAIM,QAMtE,IAAWyI,WAHiG,CAI9G,M,iCCnCF,6CASaK,EAAwB,CACjCD,iBANqB,SAAChB,EAAyBlL,GAC/C,IAAMoM,EAAQ,YAAYlB,EAAMmB,cAAe,CAACtJ,GAAI/C,EAAM+C,KAC1D,OAAO,SAASqJ,EAAO,gBAAiBpM,EAAMgG,SAAW,M,iCCN7D,sGAwEasG,EAA0D,aA/C/C,SAACpB,EAAyBC,GAC9C,IAAM3E,EAAgB,YAAY0E,EAAMmB,cAAe,CAACtJ,GAAIoI,EAASpI,GAAK,MACpEsD,EAAe,YAAY6E,EAAMmB,cAAe,CAACtJ,GAAIoI,EAASpI,GAAK,MAEzE,MAAO,CACHgD,gBAAgB,EAChBS,cAAeA,EAAgBA,EAAcN,cAAgB,EAC7DG,aAAcA,EAAeA,EAAaH,cAAgB,EAC1D1D,kBAAmB,QAAQ0I,EAAMqB,YAAa,CAACC,WAAYrB,EAASpI,SAIjD,SACvB0I,EACAN,GACyB,OACzBrL,QAAS,SAAC2M,EAAkB5H,EAAuB3G,GAC/CuN,EAAS,YAAmBgB,IACxBvO,GAAS2G,EACT4G,EACI,YACIgB,EACA,EAAOvO,GACFqG,MAAM,OACNnG,WAGNF,GACPuN,EAAS,YAA2BgB,EAAUvO,IAIzC,cAAciN,EAASuB,sBAAyBvB,EAASuB,sBAC1DjB,EAAS,YAA2BgB,EAAUvO,IAC9CuN,EAAS,YAAWgB,EAAU,IAAWnN,UAG7CmM,EAAS,YAAiBgB,KAGlCxJ,qBAAsB,SAACwJ,GACnBhB,EAAS,YAA2BgB,EAAU,OAC9ChB,EAAS,YAAWgB,EAAU,IAAWlN,SAE7C6D,aAAc,SAACqJ,EAAkBE,GAAqB,OAAAlB,EAAS,YAAmBgB,EAAUE,QAM5F,IAAWb,WAHwD,CAIrE,M,+pBChBF,2B,+CAmHA,OAnHmC,OAS/B,YAAA1C,mBAAA,WACIrJ,KAAKgD,GAAK6J,EAAcC,cAAc9M,KAAKC,MAAM+C,KAGrD,YAAA1B,OAAA,WACI,IAAMyL,EAAgC,CAClC/J,GAAIhD,KAAKgD,GACTmC,OAAQnF,KAAKC,MAAMkF,OACnBe,cAAelG,KAAKC,MAAMiG,cAC1BlC,MAAOhE,KAAKC,MAAM+D,MAClBsB,aAActF,KAAKC,MAAMqF,aACzBK,KAAM3F,KAAKC,MAAM0F,KACjBC,YAAa5F,KAAKC,MAAM2F,YACxBb,eAAgB/E,KAAKC,MAAM8E,eAC3B4H,oBAAqB3M,KAAKC,MAAM0M,oBAChCxF,OAAQnH,KAAKC,MAAMkH,QAGjB6F,EAAwBhN,KAAKC,MAAM+F,eACrC,gBAAC,IAAiB,KAAK+G,IAEvB,gBAAC,IAAQ,MAGPE,EAA4B,EAAW,kBAAmB,OAAQ,cAAe,CACnF9F,OAAQnH,KAAKC,MAAMkH,SAGjB+F,EAAsBlN,KAAKC,MAAMkH,OAAS,EAG5C,uBAAKvG,UAAU,QACVoM,EACAhN,KAAKmN,0BAId,OACI,uBAAKvM,UAAWqM,GACXC,EACAlN,KAAKC,MAAMmN,SAKhB,YAAAD,uBAAR,WACI,OACI,uBAAKvM,UAAU,oEACVZ,KAAKqN,wBACLrN,KAAKsN,oBAKV,YAAAD,sBAAR,sBACI,OAAO,MAAMrN,KAAKC,MAAMsN,qBAAqB,SAACC,GAC1C,IAAMC,EAAmB,EAAKxN,MAAM+C,GAAE,IAAI,UAAUwK,EAAkBxP,OAEhE0P,EAAwC,CAC1C1K,GAAIyK,EACJvI,QAASsI,EAAkBvP,cAEzB0P,EAA4B,EAAK1N,MAAM+F,eACzC,gBAAC,IAAqB,KAAK0H,IAE3B,gBAAC,IAAY,KAAKA,IAGhBE,EAA4C,CAC9C5K,GAAIyK,EACJhP,SAAU+O,EAAkB/O,SAC5BC,kBAAmB8O,EAAkB9O,kBACrC+L,gBAAiB,EAAKxK,MAAMwK,gBAC5BjM,QAASgP,EAAkBhP,QAC3BqP,YAAa,EAAK5N,MAAM4N,YACxBC,WAAYN,EAAkBM,WAC9BnP,MAAO6O,EAAkB7O,MACzB8N,WAAY,EAAKzJ,GACjBiI,sBAAuB,EAAKhL,MAAMgL,sBAClCD,sBAAuB,EAAK/K,MAAM+K,sBAClC+C,oBAAqB,EAAK9N,MAAM8N,oBAChCC,iBAAkB,EAAK/N,MAAM+N,kBAE3BC,EAA6B,EAAKhO,MAAM+F,eAC1C,gBAAC,IAAuB,KAAK4H,IAE7B,gBAAC,IAAc,KAAKA,IAGxB,OACI,uBAAK7G,IAAK0G,GACN,sBAAI7M,UAAU,yBAAyB4M,EAAkBxP,OACxD2P,EACAM,OAMT,YAAAX,gBAAR,sBACI,OAAOtN,KAAKC,MAAM4N,YACd,0BAAQ9F,KAAK,SAAShI,QAAS,WAAM,SAAKE,MAAM6L,WAAWlL,UAAU,8BAChEZ,KAAKC,MAAMiO,YAEhB,MAhHD,EAAA3M,aAA6C,CAChD2M,WATgC,SAY7B,EAAApB,cAAgB,SAACqB,GAAyB,kBAAYA,GA8GjE,EAnHA,CAAmC,c,iCC3DnC,sFA4EaC,EAAsE,aArD3D,SAACjD,EAAyBC,GAC9C,IAAMC,EAAyB,YAAYF,EAAMqB,YAAa,CAACxJ,GAAIoI,EAASpI,KACtE2K,EAAmC,YAAYxC,EAAMkD,cAAe,CAACrL,GAAIoI,EAASpI,KAExF,MAAO,CACHS,WAAY4H,EAAOA,EAAK5H,WAAa,IAAIlF,KACzCoF,WAAY0H,EAAOA,EAAK1H,WAAa,IAAIpF,KACzC2L,gBAAiBmB,EAAOA,EAAKnB,gBAAkB,IAAI3L,KACnD6L,gBAAiBiB,EAAOA,EAAKjB,gBAAkB,IAAI7L,KACnDqL,YAAa+D,EAAeA,EAAaW,cAAgB,GACzD5D,YAAaW,EAAOA,EAAK3I,SAAW,OAIjB,SACvBgJ,EACAN,GAC+B,OAC/BxD,SAAU,WACN8D,EACI,YACIN,EAASpI,GACToI,EAAS5M,QACT4M,EAAS0C,WACT1C,EAASzM,MACTyM,EAASqB,WACTrB,EAAS2C,oBACT3C,EAASyC,iBACTU,EACAnD,EAAS4C,oBAIrBlG,UAAW,WAAM,OAAA4D,EAAS,YAAiBN,EAASpI,MACpD0G,OAAQ,SAACxK,EAAY4F,EAAuB6I,QAAA,IAAAA,OAAA,GACpC7I,EACA4G,EAAS,YAA2BN,EAASpI,GAAI9D,KAEjDwM,EAAS,YAA2BN,EAASpI,GAAI9D,IAC5CkM,EAAS5M,SACVkN,EAAS,YAA2BN,EAASpI,GAAI9D,KAIpDyO,GACDjC,EAAS,YAAmBN,EAASpI,GAAI,GAAI,MAGrDjD,QAAS,SAAC+E,GACN4G,EAAS,YAAWN,EAASpI,GAAI8B,EAAe,IAAWtF,MAAQ,IAAWD,YAOlF,IAAWwM,WAHoE,CAIjF,M,iCChFF,uEA6BayC,EAAwE,aAjB7D,SAACrD,EAAyBC,GAC9C,IAAMqD,EAAoCtD,EAAMuD,iBAAiBtD,EAASpI,IAE1E,MAAO,CACHgG,OAAQyF,GAAcA,EAAWzF,WAId,SACvB0C,EACAN,GACgC,OAChCvC,QAAS,WAAM,OAAA6C,EAAS,YAAcN,EAASpI,GAAIoI,EAAS5C,gBAAiB4C,EAASuD,WACtFpG,OAAQ,WAAM,OAAAmD,EAAS,YAAmBN,EAASpI,GAAIoI,EAAS5C,gBAAiB4C,EAASuD,WAC1F7F,UAAW,WAAM,OAAA4C,EAAS,YAAiBN,EAASpI,SAMpD,IAAW+I,WAHsE,CAInF,M,oYCpBF,2B,+CAcA,OAd4B,OACxB,YAAAzK,OAAA,sBACUlB,EAAcJ,KAAKC,MAAMsJ,SAAW,SAAW,GAErD,OACI,0BACIxB,KAAK,SACLnH,UAAWR,EACXL,QAAS,WAAM,SAAKE,MAAMF,QAAQ,EAAKE,MAAMqJ,OAAOnL,QAAS,EAAK8B,MAAMqJ,OAAOpL,SAE9E8B,KAAKC,MAAMqJ,OAAOpL,QAInC,EAdA,CAA4B,c,iCCb5B,8EA+Ba0Q,EAAkE,aAjBvD,SAACzD,EAAyBC,GAC9C,IAAMC,EAA2B,YAAYF,EAAMkD,cAAe,CAACrL,GAAIoI,EAASpI,KAEhF,MAAO,CACHwG,YAAa6B,EAAOA,EAAKwD,cAAgB,OAItB,SACvBnD,EACAN,GAC6B,OAC7BxD,SAAU,WAAM,OAAA8D,EAAS,YAAgBN,EAASpI,MAClD8E,UAAW,WAAM,OAAA4D,EAAS,YAAmBN,EAASpI,MACtDjD,QAAS,SAAC5B,EAAeD,GAAkB,OAAAwN,EAAS,YAAmBN,EAASpI,GAAI9E,EAAOC,QAM3F,IAAW4N,WAHgE,CAI7E,M,2gCCuCW+C,EAA2C,GAC3CC,EAAkD,GAI/D,yE,OA0FY,EAAAjM,YAAc,WACd,EAAK7C,MAAMF,UAAY,EAAKE,MAAM+O,UAClC,EAAK/O,MAAMF,QAAQ,EAAKE,MAAMwJ,aAI9B,EAAAwF,oBAAsB,SAAC3G,IACM,cAAqB,EAAK4G,UAC7CC,SAAS7G,EAAE7H,SAAmB,EAAKR,MAAMsL,WACnD,EAAKtL,MAAM0L,kBACX,EAAKyD,iB,EA2GjB,OA/MwC,OAcpC,YAAAzH,kBAAA,WACQ3H,KAAKC,MAAM2H,UACX5H,KAAKC,MAAM2H,WAGX5H,KAAKC,MAAM0L,kBAAoB3L,KAAKC,MAAM+O,UAC1CK,SAASC,iBAAiB,QAAStP,KAAKiP,sBAIhD,YAAApH,qBAAA,WACQ7H,KAAKC,MAAM0L,kBAAoB3L,KAAKC,MAAM+O,UAC1CK,SAASE,oBAAoB,QAASvP,KAAKiP,qBAG3CjP,KAAKC,MAAM6H,WACX9H,KAAKC,MAAM6H,aAInB,YAAAxG,OAAA,sBACQpD,EAAgB8B,KAAKC,MAAM/B,MAC3BsR,EAAuB,KACvBC,EAA0B,GAE9B,GAAIzP,KAAKC,MAAMwJ,YAAczJ,KAAKC,MAAMwJ,WAAWiG,oBAC/CxR,EAAQ8B,KAAK2P,WAAW3P,KAAKC,MAAMwJ,WAAWiG,mBAC1C1P,KAAKC,MAAMwJ,WAAWjL,SAAS,CAC/B,IAAMoR,EAAiB5P,KAAK2P,WAAW3P,KAAKC,MAAMwJ,WAAWoG,mBACzDD,IAAmB1R,IACnBsR,EACI,wBACI5O,UAAW,EAAW,MAAOZ,KAAKC,MAAM+O,SAAW,mBAAqB,mBAEvEhP,KAAKC,MAAMuP,SAGpBC,EAAkBG,GAK9B,IAAME,EAA0B,aAAW,EAAD,EAAI9P,KAAKC,MAAM8P,qBAAsB,oBAAoB,WAAY,CAC3GC,KAAMhQ,KAAKC,MAAMsL,aAGf0E,EAAsB,EAAW,gBAAiB,gBAAiB,CACrE,WAAYjQ,KAAKC,MAAMiQ,UAGrBC,EAAgB,EAClB,8CACAnQ,KAAKC,MAAMmQ,2BACX,CACI,+BAAgCpQ,KAAKC,MAAMwJ,aAAezJ,KAAKC,MAAMwJ,WAAWiG,oBAGxF,OACI,uBAAK9O,UAAW,EAAW,uBAAwBZ,KAAKC,MAAMW,YAC1D,uBAAKA,UAAWkP,EAAiBO,IAAK,SAACnB,GAA6B,OAAC,EAAKA,SAAWA,IACjF,0BAAQtO,UAAWuP,EAAepQ,QAASC,KAAK8C,YAAavC,SAAUP,KAAKC,MAAM+O,UAC9E,wBAAMpO,UAAU,2BACZ,6BACK1C,EACAsR,EACAC,IAGT,wBAAM7O,UAAU,2BAEpB,uBAAKA,UAAWqP,GAAcjQ,KAAKsQ,uBAoB3C,YAAAC,YAAR,WACQvQ,KAAKC,MAAMuQ,eACXxQ,KAAKC,MAAMuQ,gBAGXxQ,KAAKC,MAAM2L,SACX5L,KAAKC,MAAM2L,WAIX,YAAAwD,aAAR,WACI,GAAIpP,KAAKC,MAAM4L,SAAU,CACrB,IAAMvE,EACFtH,KAAKC,MAAMwJ,YAAczJ,KAAKC,MAAMwJ,WAAWiG,kBACzC1P,KAAKC,MAAMwJ,WAAWiG,kBAAkB3L,WACxC,IAAUuD,aACdtD,EAAkBhE,KAAKC,MAAM+D,OAAS,IACtC9B,EACFlC,KAAKC,MAAMwJ,YAAczJ,KAAKC,MAAMwJ,WAAWiG,kBACzC1P,KAAKC,MAAMwJ,WAAWiG,kBAAkBxL,cACxC,IAAUhC,YACpBlC,KAAKC,MAAM4L,SAASvE,EAActD,EAAMC,QAAQ/B,EAAY5D,YAAa0B,KAAKC,MAAMsL,YAIpF,YAAAkF,YAAR,WACQzQ,KAAKC,MAAM6L,SACX9L,KAAKC,MAAM6L,WAIX,YAAA6D,WAAR,SAAmBzQ,GACf,OAAOc,KAAKC,MAAMsN,oBAAoB1K,QAAU7C,KAAKC,MAAMsN,oBAAoB,GAAG9O,SAC5E,IAAUwL,sBAAsB/K,GAChC,IAAUwR,cAAcxR,IAG1B,YAAAyR,sBAAR,WACI,GAAI3Q,KAAKC,MAAMwJ,YAAczJ,KAAKC,MAAMwJ,WAAWqE,WAAY,CACrD,uCAAClH,EAAA,EAAAA,MAAOjB,EAAA,EAAAA,KAAMiL,EAAA,EAAAA,MACdC,GACDjK,EAAgB,MAARA,EAAgB,IAAMjB,EAAc,KAAPA,EAAc,IAAMiL,EAAgB,GAARA,EAAa,GAKnF,OAJ8B,EAAO5Q,KAAKC,MAAMwJ,WAAWW,iBAAiB1K,KACxE,EAAOM,KAAKC,MAAMwJ,WAAWS,iBAC7B,WAEmB2G,EAG3B,OAAO,GAGH,YAAAP,iBAAR,sBACI,GAAItQ,KAAKC,MAAMsL,UAAYvL,KAAKC,MAAM6Q,2BAA4B,CAC9D,IAAMH,EAAwB3Q,KAAK2Q,wBAC7BI,EAA0C,CAC5CtG,gBAAiBzK,KAAKC,MAAMwK,gBAC5B8C,oBAAqBvN,KAAKC,MAAMsN,oBAChCpI,OAAQnF,KAAKC,MAAMkF,OACnBe,cAAelG,KAAKC,MAAMiG,cAC1BlC,MAAOhE,KAAKC,MAAM+D,MAClBsB,aAActF,KAAKC,MAAMqF,aACzBK,KAAM3F,KAAKC,MAAM0F,KACjBC,YAAa5F,KAAKC,MAAM2F,YACxBb,eAAgB/E,KAAKC,MAAM8E,eAC3BkG,sBAAuBjL,KAAKC,MAAMgL,sBAClCD,sBAAuBhL,KAAKC,MAAM+K,sBAClC2B,oBAAqB3M,KAAKC,MAAM0M,oBAChCkB,YAAa7N,KAAKC,MAAM4N,YACxBE,oBAAqB/N,KAAKC,MAAM8N,oBAChCG,WAAYlO,KAAKC,MAAMiO,WACvB/G,OAAQnH,KAAKC,MAAMkH,OACnB6G,iBAAkBhO,KAAKC,MAAM+N,iBAC7BlC,QAAS,WAAM,SAAK2E,eACpBrD,OACI,gBAAC,IAAW,CAAC/L,QAAS,CAAC,cACnB,gBAAC,IAAM,CACHnB,SAAUyQ,EACV9P,KAAMb,KAAKC,MAAM+Q,WACjB5P,OAAO,EACPD,SAAS,EACTJ,QAAS4P,EAAwB3Q,KAAKC,MAAMwJ,WAAWqE,WAAWmD,QAAU,GAC5EhQ,iBAAkB,OAClBlB,QAAS,WAAM,SAAKwQ,iBAExB,gBAAC,IAAM,CACHrQ,SAAS,EACTW,KAAMb,KAAKC,MAAMiR,YACjB9P,OAAO,EACPD,SAAS,EACTpB,QAAS,WAAM,SAAKqP,oBAMpC,OAAOpP,KAAKC,MAAM+F,eACd,gBAAC,IAAa,GAACA,gBAAc,EAAChD,GAAIhD,KAAKC,MAAM+C,IAAQ+N,IAErD,gBAAC,IAAa,KAAKA,MA1MxB,EAAAxP,aAAkD,CACrDrD,MAXkD,cAYlD8S,WAXwC,QAYxCE,YAXyC,SAYzC1B,QAXgC,KAYhCO,qBAAsBjB,EACtBsB,2BAA4BrB,EAC5B+B,4BAXsD,EAYtDjD,aAAa,GAsMrB,EA/MA,CAAwC","file":"assets/3.bundle.js","sourcesContent":["import * as moment from 'moment';\r\nimport {DATES_SEPARATOR} from '../../../utils/DateUtils';\r\nimport {CalendarSelectionRuleType, ICalendarSelectionRule} from '../../calendar/Calendar';\r\nimport {DatePickerColors} from '../DatePicker';\r\nimport {IDatesSelectionBox} from '../DatePickerBox';\r\nimport {DatePickerDateRange} from '../DatePickerConstants';\r\n\r\nexport const SELECTION_BOXES: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: [\r\n            {\r\n                label: 'Last 10 seconds',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(10, 'seconds')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last minute',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'minute')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last 5 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(5, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last 30 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(30, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last hour',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'hour')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last day',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'day')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n        ],\r\n        isRange: true,\r\n        withTime: true,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nconst defaultQuickOptions = [\r\n    {\r\n        label: 'Last day',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'day')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n    {\r\n        label: 'Last week',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'week')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n    {\r\n        label: 'Last month',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'month')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n    {\r\n        label: 'Last year',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'year')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOXES_LONG: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: defaultQuickOptions,\r\n        isRange: true,\r\n        withTime: true,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOXES_LONG_WITHOUT_TIME: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: defaultQuickOptions,\r\n        isRange: true,\r\n        withTime: false,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOXES_WITHOUT_TIME_AND_NOW: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: defaultQuickOptions,\r\n        isRange: true,\r\n        withTime: false,\r\n        hasSetToNowButton: false,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const FOUR_SELECTION_BOXES: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: [\r\n            {\r\n                label: 'Last 5 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(5, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last 30 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(30, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last hour',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'hour')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last day',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'day')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n        ],\r\n        isRange: true,\r\n        withTime: true,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const CALENDAR_SELECTION_RULES: ICalendarSelectionRule[] = [\r\n    {\r\n        test: (date: Date) =>\r\n            date >=\r\n            moment()\r\n                .startOf('day')\r\n                .toDate(), // You cannot select a date in the past\r\n        isFor: CalendarSelectionRuleType.all,\r\n    },\r\n    {\r\n        test: (date: Date) => date.getDay() !== 6, // You cannot start your selection on a Saturday\r\n        isFor: CalendarSelectionRuleType.lower,\r\n    },\r\n    {\r\n        test: (date: Date) => date.getDay() !== 0, // You cannot end your selection on a Sunday\r\n        isFor: CalendarSelectionRuleType.upper,\r\n    },\r\n    {\r\n        test: (date: Date, endDate: Date) => moment(endDate).diff(moment(date), 'day') >= 0, // The end of your selection cannot be before the start of your selection\r\n        isFor: CalendarSelectionRuleType.range,\r\n    },\r\n    {\r\n        test: (date: Date, endDate: Date) => moment(endDate).diff(moment(date), 'day') <= 7, // You cannot select more than 7 days at a time\r\n        isFor: CalendarSelectionRuleType.range,\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOX: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Select date',\r\n        quickOptions: [\r\n            {\r\n                label: 'A year ago',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'year')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n            {\r\n                label: 'A month ago',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'month')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n            {\r\n                label: 'A week ago',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'week')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n            {\r\n                label: 'Yesterday',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'day')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n        ],\r\n        isRange: false,\r\n        withTime: false,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const CALENDAR_SELECTION_RULES_SINGLE_DATE: ICalendarSelectionRule[] = [\r\n    {\r\n        test: (date: Date) => date.getFullYear() > 1700 || date.getFullYear() < 4000, // You cannot select a date before year 1700 and over 4000\r\n        isFor: CalendarSelectionRuleType.all,\r\n    },\r\n];\r\n\r\nexport const DATE_RANGE_EXAMPLE: DatePickerDateRange = [\r\n    moment().toDate(),\r\n    moment()\r\n        .add(3, 'day')\r\n        .toDate(),\r\n];\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as moment from 'moment';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {DateUtils} from '../../utils/DateUtils';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {DateLimits} from '../datePicker/DatePickerActions';\r\nimport {IDatePickerState} from '../datePicker/DatePickerReducers';\r\nimport {IOptionsCycleProps, OptionsCycle} from '../optionsCycle/OptionsCycle';\r\nimport {OptionsCycleConnected} from '../optionsCycle/OptionsCycleConnected';\r\nimport {TableHeader} from '../tables/TableHeader';\r\nimport {ITableHeaderCellProps} from '../tables/TableHeaderCell';\r\nimport {CalendarDay, IDay} from './CalendarDay';\r\n\r\nexport const CalendarSelectionRuleType = {\r\n    all: 'ALL',\r\n    lower: 'LOWER',\r\n    upper: 'UPPER',\r\n    range: 'RANGE',\r\n};\r\n\r\nexport interface ICalendarSelectionRule {\r\n    test: (date: Date, secondDate?: Date) => boolean;\r\n    isFor: string;\r\n}\r\n\r\nexport interface ICalendarOwnProps extends React.ClassAttributes<Calendar> {\r\n    id?: string;\r\n    months?: string[];\r\n    startingMonth?: number;\r\n    years?: string[];\r\n    startingYear?: number;\r\n    days?: string[];\r\n    startingDay?: number;\r\n    selectionRules?: ICalendarSelectionRule[];\r\n    isLinkedToDateRange?: boolean;\r\n    simple?: boolean;\r\n}\r\n\r\nexport interface ICalendarStateProps extends IReduxStatePossibleProps {\r\n    selectedMonth?: number;\r\n    selectedYear?: number;\r\n    calendarSelection?: IDatePickerState[];\r\n}\r\n\r\nexport interface ICalendarDispatchProps {\r\n    onClick?: (pickerId: string, isUpperLimit: boolean, value: Date) => void;\r\n    onDateChange?: (cycleId: string, newValue: number) => void;\r\n    onSelectUnselectable?: (pickerId: string) => void;\r\n}\r\n\r\nexport interface ICalendarProps extends ICalendarOwnProps, ICalendarStateProps, ICalendarDispatchProps {}\r\n\r\nexport const DEFAULT_MONTHS: string[] = moment.months();\r\n\r\nexport const DEFAULT_YEARS: string[] = [\r\n    ...DateUtils.getPreviousYears(10),\r\n    DateUtils.currentYear.toString(),\r\n    ...DateUtils.getNextYears(10),\r\n];\r\n\r\nexport const DEFAULT_DAYS: string[] = moment.weekdaysShort();\r\n\r\nexport const MONTH_PICKER_ID: string = 'calendar-months';\r\n\r\nexport const YEAR_PICKER_ID: string = 'calendar-years';\r\n\r\nexport class Calendar extends React.Component<ICalendarProps, any> {\r\n    static defaultProps: Partial<ICalendarProps> = {\r\n        selectionRules: [],\r\n        years: DEFAULT_YEARS,\r\n        months: DEFAULT_MONTHS,\r\n        days: DEFAULT_DAYS,\r\n        startingMonth: DateUtils.currentMonth,\r\n        startingDay: 0,\r\n    };\r\n\r\n    private getSelectedDatePicker(): IDatePickerState {\r\n        const selectedDatePickers: IDatePickerState[] = _.map(\r\n            this.props.calendarSelection,\r\n            (calendarSelection: IDatePickerState) => {\r\n                if (calendarSelection.selected) {\r\n                    return calendarSelection;\r\n                }\r\n            }\r\n        ).filter(Boolean);\r\n\r\n        return selectedDatePickers.length ? selectedDatePickers[0] : null;\r\n    }\r\n\r\n    private handleClick(value: Date) {\r\n        if (this.props.onClick) {\r\n            const selectedDatePicker: IDatePickerState = this.getSelectedDatePicker();\r\n\r\n            if (selectedDatePicker) {\r\n                this.props.onClick(selectedDatePicker.id, selectedDatePicker.selected === DateLimits.upper, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleInvalidDateSelected() {\r\n        if (this.props.onSelectUnselectable) {\r\n            const selectedDatePicker: IDatePickerState = this.getSelectedDatePicker();\r\n\r\n            if (selectedDatePicker) {\r\n                this.props.onSelectUnselectable(selectedDatePicker.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: ICalendarProps) {\r\n        if (this.props.onDateChange && this.props.calendarSelection.length) {\r\n            _.each(nextProps.calendarSelection, (calendarSelection: IDatePickerState, index: number) => {\r\n                if (this.props.calendarSelection[index]) {\r\n                    let limitToChange: Date;\r\n                    const currentLowerLimit: Date = this.props.calendarSelection[index].lowerLimit;\r\n                    const currentUpperLimit: Date = this.props.calendarSelection[index].upperLimit;\r\n                    const nextLowerLimit: Date = calendarSelection.lowerLimit;\r\n                    const nextUpperLimit: Date = calendarSelection.upperLimit;\r\n\r\n                    if (DateUtils.isDifferent(currentLowerLimit, nextLowerLimit, 'minute')) {\r\n                        limitToChange = nextLowerLimit;\r\n                    } else if (DateUtils.isDifferent(currentUpperLimit, nextUpperLimit, 'minute')) {\r\n                        limitToChange = nextUpperLimit;\r\n                    }\r\n\r\n                    if (limitToChange) {\r\n                        this.props.onDateChange(this.props.id + MONTH_PICKER_ID, limitToChange.getMonth());\r\n                        this.props.onDateChange(\r\n                            this.props.id + YEAR_PICKER_ID,\r\n                            this.props.years.indexOf(limitToChange.getFullYear().toString())\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    fillInDayInfos(day: IDay): IDay {\r\n        day.isSelectable = true;\r\n\r\n        _.each(this.props.calendarSelection, (calendarSelection: IDatePickerState) => {\r\n            const selectionStart: moment.Moment = calendarSelection.lowerLimit\r\n                ? moment(calendarSelection.lowerLimit).startOf('day')\r\n                : null;\r\n            const selectionEnd: moment.Moment =\r\n                calendarSelection.isRange && calendarSelection.upperLimit && calendarSelection.lowerLimit\r\n                    ? moment(calendarSelection.upperLimit).endOf('day')\r\n                    : selectionStart;\r\n            const isSelected =\r\n                selectionStart && selectionEnd && day.date.isBetween(selectionStart, selectionEnd, 'day', '[]');\r\n\r\n            day.isSelectable =\r\n                calendarSelection.isRange &&\r\n                calendarSelection.selected === DateLimits.upper &&\r\n                calendarSelection.lowerLimit\r\n                    ? day.isSelectable && day.date.isSameOrAfter(calendarSelection.lowerLimit)\r\n                    : day.isSelectable;\r\n            day.isSelected = (day.isSelectable && isSelected) || day.isSelected;\r\n            day.isLowerLimit =\r\n                (calendarSelection.isRange && day.date.isSame(selectionStart, 'day')) || day.isLowerLimit;\r\n            day.isUpperLimit = (calendarSelection.isRange && day.date.isSame(selectionEnd, 'day')) || day.isUpperLimit;\r\n            day.color = isSelected ? calendarSelection.color : day.color;\r\n\r\n            _.each(this.props.selectionRules, (rule: ICalendarSelectionRule) => {\r\n                if (day.isSelectable) {\r\n                    if (\r\n                        rule.isFor === CalendarSelectionRuleType.all ||\r\n                        (rule.isFor === CalendarSelectionRuleType.lower &&\r\n                            calendarSelection.selected === DateLimits.lower) ||\r\n                        (rule.isFor === CalendarSelectionRuleType.upper &&\r\n                            calendarSelection.selected === DateLimits.upper)\r\n                    ) {\r\n                        day.isSelectable = rule.test(day.date.toDate());\r\n                    } else if (\r\n                        rule.isFor === CalendarSelectionRuleType.range &&\r\n                        calendarSelection.selected === DateLimits.upper\r\n                    ) {\r\n                        day.isSelectable = rule.test(calendarSelection.lowerLimit, day.date.toDate());\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return day;\r\n    }\r\n\r\n    render() {\r\n        const monthPickerProps: IOptionsCycleProps = {\r\n            options: this.props.months,\r\n            isInline: true,\r\n        };\r\n\r\n        const startingYearIndex: number = this.props.years.indexOf(DateUtils.currentYear.toString());\r\n        const startingYear: number =\r\n            this.props.startingYear ||\r\n            (startingYearIndex >= 0 ? startingYearIndex : Math.floor(this.props.years.length / 2));\r\n        const yearPickerProps: IOptionsCycleProps = {\r\n            options: this.props.years,\r\n            isInline: true,\r\n        };\r\n\r\n        const orderedDays: string[] = [\r\n            this.props.days[this.props.startingDay],\r\n            ...this.props.days.slice(this.props.startingDay + 1),\r\n            ...this.props.days.slice(0, this.props.startingDay),\r\n        ];\r\n        const daysHeaderColumns: ITableHeaderCellProps[] = _.map(orderedDays, (day: string) => ({title: day}));\r\n\r\n        const monthPicker = this.props.withReduxState ? (\r\n            <OptionsCycleConnected\r\n                id={this.props.id + MONTH_PICKER_ID}\r\n                startAt={this.props.startingMonth}\r\n                {...monthPickerProps}\r\n            />\r\n        ) : (\r\n            <OptionsCycle currentOption={this.props.startingMonth} {...monthPickerProps} />\r\n        );\r\n\r\n        const yearPicker = this.props.withReduxState ? (\r\n            <OptionsCycleConnected id={this.props.id + YEAR_PICKER_ID} startAt={startingYear} {...yearPickerProps} />\r\n        ) : (\r\n            <OptionsCycle currentOption={startingYear} {...yearPickerProps} />\r\n        );\r\n\r\n        const selectedYearOption = !_.isUndefined(this.props.selectedYear) ? this.props.selectedYear : startingYear;\r\n        const year = parseInt(this.props.years[selectedYearOption], 10);\r\n        const selectedMonth = !_.isUndefined(this.props.selectedMonth)\r\n            ? this.props.selectedMonth\r\n            : this.props.startingMonth;\r\n        const month: IDay[][] = DateUtils.getMonthWeeks(new Date(year, selectedMonth), this.props.startingDay);\r\n        const weeks: JSX.Element[] = _.map(month, (week: IDay[]) => {\r\n            const days: JSX.Element[] = _.map(week, (day: IDay) => {\r\n                const dayFilled = this.fillInDayInfos(day);\r\n                return (\r\n                    <CalendarDay\r\n                        key={dayFilled.date.toString()}\r\n                        day={dayFilled}\r\n                        onClick={(value: Date) => this.handleClick(value)}\r\n                        onSelectUnselectable={() => this.handleInvalidDateSelected()}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return <tr key={`week-${days[0].key}`}>{days}</tr>;\r\n        });\r\n\r\n        const tableClasses: string = classNames('table', 'calendar-grid', {\r\n            selecting: !!this.getSelectedDatePicker(),\r\n        });\r\n\r\n        const wrapperClasses: string = classNames('calendar', {\r\n            'mod-width-50': !this.props.simple,\r\n        });\r\n\r\n        return (\r\n            <div className={wrapperClasses}>\r\n                <div className=\"calendar-header p2\">\r\n                    {monthPicker}\r\n                    {yearPicker}\r\n                </div>\r\n                <table className={tableClasses}>\r\n                    <TableHeader columns={daysHeaderColumns} headerClass=\"mod-no-border-top\" />\r\n                    <tbody>{weeks}</tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\n\r\nexport interface IModalFooterProps {\r\n    classes?: IClassName;\r\n}\r\n\r\nexport class ModalFooter extends React.Component<IModalFooterProps, {}> {\r\n    render() {\r\n        const classes = classNames('modal-footer', this.props.classes);\r\n\r\n        return <div className={classes}>{this.props.children}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nimport {Svg} from '../svg/Svg';\r\n\r\nexport interface IOptionsCycleConnectedOwnProps {\r\n    id: string;\r\n    startAt?: number;\r\n}\r\n\r\nexport interface IOptionsCycleOwnProps {\r\n    options: React.ReactNode[];\r\n    isInline?: boolean;\r\n    wrapAround?: boolean;\r\n    className?: string;\r\n    previousClassName?: string;\r\n    nextClassName?: string;\r\n    buttonClassName?: string;\r\n}\r\n\r\nexport interface IOptionsCycleStateProps {\r\n    currentOption: number;\r\n}\r\n\r\nexport interface IOptionsCycleDispatchProps {\r\n    onRender: () => void;\r\n    onDestroy: () => void;\r\n    onChange: (index: number) => void;\r\n}\r\n\r\nexport interface IOptionsCycleProps\r\n    extends IOptionsCycleOwnProps,\r\n        Partial<IOptionsCycleStateProps>,\r\n        Partial<IOptionsCycleDispatchProps> {}\r\n\r\nexport class OptionsCycle extends React.Component<IOptionsCycleProps> {\r\n    static defaultProps: Partial<IOptionsCycleProps> = {\r\n        currentOption: 0,\r\n        wrapAround: true,\r\n    };\r\n\r\n    private goToPreviousOption() {\r\n        if (this.props.onChange) {\r\n            const newOptionIndex = this.props.currentOption\r\n                ? this.props.currentOption - 1\r\n                : this.props.options.length - 1;\r\n            this.props.onChange(newOptionIndex);\r\n        }\r\n    }\r\n\r\n    private goToNextOption() {\r\n        if (this.props.onChange) {\r\n            const newOptionIndex =\r\n                this.props.currentOption === this.props.options.length - 1 ? 0 : this.props.currentOption + 1;\r\n            this.props.onChange(newOptionIndex);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classNames('options-cycle text-medium-blue', this.props.className, {\r\n                    'mod-inline': this.props.isInline,\r\n                })}\r\n            >\r\n                <button\r\n                    type=\"button\"\r\n                    className={classNames('options-cycle-button previous-option', this.props.previousClassName)}\r\n                    onClick={() => this.goToPreviousOption()}\r\n                    disabled={!this.props.wrapAround && this.props.currentOption === 0}\r\n                >\r\n                    <Svg svgName=\"arrow-left-rounded\" svgClass=\"icon fill-dark-blue mod-16\" />\r\n                </button>\r\n                <span className={classNames('options-cycle-option', this.props.buttonClassName)}>\r\n                    {this.props.options[this.props.currentOption]}\r\n                </span>\r\n                <button\r\n                    type=\"button\"\r\n                    className={classNames('options-cycle-button next-option', this.props.nextClassName)}\r\n                    onClick={() => this.goToNextOption()}\r\n                    disabled={!this.props.wrapAround && this.props.currentOption === this.props.options.length - 1}\r\n                >\r\n                    <Svg svgName=\"arrow-right-rounded\" svgClass=\"icon fill-dark-blue mod-16\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {TableSortingOrder} from './TableConstants';\r\n\r\nexport interface ITableHeaderCellOwnProps extends React.ClassAttributes<TableHeaderCell> {\r\n    title: React.ReactNode;\r\n    id?: string;\r\n    attributeToSort?: string;\r\n    tableId?: string;\r\n    className?: IClassName;\r\n    withFixedHeader?: boolean;\r\n    onClickCallback?: (e: React.MouseEvent<HTMLTableHeaderCellElement>) => void;\r\n}\r\n\r\nexport interface ITableHeaderStateProps {\r\n    sorted?: TableSortingOrder;\r\n}\r\n\r\nexport interface ITableHeaderCellDispatchProps {\r\n    onMount?: () => void;\r\n    onSort?: () => void;\r\n    onUnmount?: () => void;\r\n}\r\n\r\nexport interface ITableHeaderCellProps\r\n    extends ITableHeaderCellOwnProps,\r\n        ITableHeaderStateProps,\r\n        ITableHeaderCellDispatchProps {}\r\n\r\nexport class TableHeaderCell extends React.Component<ITableHeaderCellProps, any> {\r\n    static defaultProps: Partial<ITableHeaderCellProps> = {\r\n        sorted: TableSortingOrder.UNSORTED,\r\n    };\r\n\r\n    private handleClick(e: React.MouseEvent<HTMLTableHeaderCellElement>) {\r\n        if (this.props.onSort && this.props.attributeToSort) {\r\n            this.props.onSort();\r\n        }\r\n\r\n        if (this.props.onClickCallback) {\r\n            this.props.onClickCallback(e);\r\n        }\r\n    }\r\n\r\n    private setWithFixedHeaderWrapper(titleNode: React.ReactNode, sortIcon: React.ReactNode) {\r\n        return (\r\n            <div className=\"fixed-header-container\">\r\n                {titleNode}\r\n                {sortIcon}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.onMount && this.props.attributeToSort) {\r\n            this.props.onMount();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onUnmount) {\r\n            this.props.onUnmount();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const tableCellHasSort = !_.isUndefined(this.props.sorted) && !!this.props.attributeToSort;\r\n        const sortIcon: JSX.Element = tableCellHasSort ? (\r\n            <div className=\"admin-sort-icon\">\r\n                <Svg svgName=\"asc-desc\" className=\"tables-sort icon\" />\r\n            </div>\r\n        ) : null;\r\n\r\n        const headerCellClasses = classNames(this.props.className, {\r\n            'admin-sort': tableCellHasSort,\r\n            'admin-sort-ascending': this.props.sorted === TableSortingOrder.ASCENDING,\r\n            'admin-sort-descending': this.props.sorted === TableSortingOrder.DESCENDING,\r\n        });\r\n\r\n        return (\r\n            <th\r\n                className={headerCellClasses}\r\n                onClick={(e: React.MouseEvent<HTMLTableHeaderCellElement>) => this.handleClick(e)}\r\n            >\r\n                {this.setWithFixedHeaderWrapper(this.props.title, sortIcon)}\r\n            </th>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IOption, Option} from './Option';\r\n\r\nexport interface IOptionPickerOwnProps extends React.ClassAttributes<OptionPicker> {\r\n    id?: string;\r\n    options: IOption[];\r\n}\r\n\r\nexport interface IOptionPickerStateProps {\r\n    activeLabel?: string;\r\n}\r\n\r\nexport interface IOptionPickerDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onClick?: (value: string, label: string) => void;\r\n}\r\n\r\nexport interface IOptionPickerProps\r\n    extends IOptionPickerOwnProps,\r\n        IOptionPickerStateProps,\r\n        IOptionPickerDispatchProps {}\r\n\r\nexport class OptionPicker extends React.Component<IOptionPickerProps, any> {\r\n    private handleClick(value: string, label: string) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(value, label);\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const options: JSX.Element[] = _.map(this.props.options, (option: IOption, index: number) => {\r\n            return (\r\n                <li key={`option-${this.props.id}-${index}`}>\r\n                    <Option\r\n                        option={option}\r\n                        onClick={(value: string, label: string) => this.handleClick(value, label)}\r\n                        isActive={this.props.activeLabel && option.label === this.props.activeLabel}\r\n                    />\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return <ul className=\"option-picker flex flex-wrap mt2 mb2\">{options}</ul>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {DATES_SEPARATOR, DateUtils} from '../../utils/DateUtils';\r\nimport {DatePicker, IDatePickerProps} from './DatePicker';\r\nimport {DatePickerDateRange} from './DatePickerConstants';\r\n\r\nexport interface IRangeLimit {\r\n    weeks?: number;\r\n    days?: number;\r\n    hours?: number;\r\n    message?: string;\r\n}\r\n\r\nexport interface IDatesSelectionOwnProps extends React.ClassAttributes<DatesSelection> {\r\n    id?: string;\r\n    withTime?: boolean;\r\n    hasSetToNowButton?: boolean;\r\n    isRange?: boolean;\r\n    isClearable?: boolean;\r\n    rangeLimit?: IRangeLimit;\r\n    color?: string;\r\n    calendarId?: string;\r\n    defaultLowerLimit?: Date;\r\n    defaultUpperLimit?: Date;\r\n    lowerLimitPlaceholder?: string;\r\n    upperLimitPlaceholder?: string;\r\n    initiallyUnselected?: boolean;\r\n    initialDateRange?: DatePickerDateRange;\r\n}\r\n\r\nexport interface IDatesSelectionStateProps {\r\n    lowerLimit?: Date;\r\n    upperLimit?: Date;\r\n    inputLowerLimit?: Date;\r\n    inputUpperLimit?: Date;\r\n    quickOption?: string;\r\n    isSelecting?: string;\r\n}\r\n\r\nexport interface IDatesSelectionDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onClick?: (isUpperLimit: boolean) => void;\r\n    onBlur?: (date: Date, isUpperLimit: boolean, datePicker?: boolean) => void;\r\n}\r\n\r\nexport interface IDatesSelectionChildrenProps {\r\n    setToNowTooltip?: string;\r\n}\r\n\r\nexport interface IDatesSelectionProps\r\n    extends IDatesSelectionOwnProps,\r\n        IDatesSelectionStateProps,\r\n        IDatesSelectionDispatchProps,\r\n        IDatesSelectionChildrenProps {}\r\n\r\nexport const LOWER_LIMIT_PLACEHOLDER: string = 'Select a start date';\r\nexport const UPPER_LIMIT_PLACEHOLDER: string = 'Select an end date';\r\n\r\nexport class DatesSelection extends React.Component<IDatesSelectionProps, any> {\r\n    static defaultProps: Partial<IDatesSelectionProps> = {\r\n        lowerLimitPlaceholder: LOWER_LIMIT_PLACEHOLDER,\r\n        upperLimitPlaceholder: UPPER_LIMIT_PLACEHOLDER,\r\n        quickOption: '',\r\n        isSelecting: '',\r\n    };\r\n\r\n    private onDateChange(date: Date, isUpperLimit: boolean, datePicker?: boolean) {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(date, isUpperLimit, datePicker);\r\n        }\r\n    }\r\n\r\n    private onDateClick(isUpperLimit: boolean) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(isUpperLimit);\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IDatesSelectionProps) {\r\n        if (nextProps.quickOption && nextProps.quickOption !== this.props.quickOption) {\r\n            const dates: string[] = nextProps.quickOption.split(DATES_SEPARATOR);\r\n\r\n            this.onDateChange(new Date(dates[0]), false, true);\r\n\r\n            if (dates.length > 1) {\r\n                this.onDateChange(new Date(dates[1]), true, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleOnBlur(date: Date, isUpperLimit: boolean = false) {\r\n        const formattedLowerLimit: string = DateUtils.getDateWithTimeString(this.props.inputLowerLimit);\r\n        const formattedUpperLimit: string = DateUtils.getDateWithTimeString(this.props.inputUpperLimit);\r\n        const formattedInputDate: string = DateUtils.getDateWithTimeString(date);\r\n\r\n        if (\r\n            (!isUpperLimit && formattedLowerLimit !== formattedInputDate) ||\r\n            (isUpperLimit && formattedUpperLimit !== formattedInputDate)\r\n        ) {\r\n            this.onDateChange(date, isUpperLimit);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const isSmallSplit = this.props.isRange && !this.props.hasSetToNowButton;\r\n        const isLarge = this.props.withTime || (this.props.isRange && this.props.hasSetToNowButton);\r\n        const wrapperClasses: string = !isSmallSplit || isLarge ? '' : 'mod-inline flex';\r\n        const datePickerProps: IDatePickerProps = {\r\n            withTime: this.props.withTime,\r\n            hasSetToNowButton: this.props.hasSetToNowButton,\r\n            setToNowTooltip: this.props.setToNowTooltip,\r\n            isSelecting: this.props.isSelecting,\r\n            onClick: (isUpperLimit: boolean) => this.onDateClick(isUpperLimit),\r\n            onBlur: (date: Date, isUpperLimit: boolean) => this.handleOnBlur(date, isUpperLimit),\r\n            placeholder: '',\r\n        };\r\n        const separatorClasses: string[] = ['date-separator'];\r\n        if (isLarge) {\r\n            separatorClasses.push('mod-vertical');\r\n        }\r\n        const separator: JSX.Element = this.props.isRange ? (\r\n            <span className={separatorClasses.join(' ')}>\r\n                <span>-</span>\r\n            </span>\r\n        ) : null;\r\n        const toDate: JSX.Element = this.props.isRange ? (\r\n            <DatePicker\r\n                upperLimit\r\n                date={this.props.upperLimit}\r\n                {...datePickerProps}\r\n                placeholder={this.props.upperLimitPlaceholder}\r\n            />\r\n        ) : null;\r\n\r\n        return (\r\n            <div className={wrapperClasses}>\r\n                <DatePicker\r\n                    date={this.props.lowerLimit}\r\n                    {...datePickerProps}\r\n                    placeholder={this.props.lowerLimitPlaceholder}\r\n                />\r\n                {separator}\r\n                {toDate}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {MONTH_PICKER_ID, YEAR_PICKER_ID} from '../calendar/Calendar';\r\nimport {addDropdown, closeDropdown, removeDropdown, toggleDropdown} from '../dropdown/DropdownActions';\r\nimport {IDropdownState} from '../dropdown/DropdownReducers';\r\nimport {resetOptionPickers} from '../optionPicker/OptionPickerActions';\r\nimport {changeOptionsCycle} from '../optionsCycle/OptionsCycleActions';\r\nimport {applyDatePicker, clearSelection, DateLimits, resetDatePickers, selectDate} from './DatePickerActions';\r\nimport {\r\n    DatePickerDropdown,\r\n    IDatePickerDropdownDispatchProps,\r\n    IDatePickerDropdownOwnProps,\r\n    IDatePickerDropdownProps,\r\n    IDatePickerDropdownStateProps,\r\n} from './DatePickerDropdown';\r\nimport {IDatePickerState} from './DatePickerReducers';\r\nimport {DatePickerSelectors} from './DatePickerSelectors';\r\n\r\nconst mapStateToProps = (\r\n    state: IReactVaporState,\r\n    ownProps: IDatePickerDropdownOwnProps\r\n): IDatePickerDropdownStateProps => {\r\n    const item: IDropdownState = _.findWhere(state.dropdowns, {id: ownProps.id});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n        datePicker: DatePickerSelectors.getDatePicker(state, {id: ownProps.id}),\r\n        withReduxState: true,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IDatePickerDropdownOwnProps\r\n): IDatePickerDropdownDispatchProps => ({\r\n    onRender: () => dispatch(addDropdown(ownProps.id)),\r\n    onDestroy: () => dispatch(removeDropdown(ownProps.id)),\r\n    onClick: (datePicker: IDatePickerState) => {\r\n        dispatch(toggleDropdown(ownProps.id));\r\n        if (datePicker) {\r\n            dispatch(resetOptionPickers(datePicker.id));\r\n            dispatch(selectDate(datePicker.id, DateLimits.lower));\r\n        }\r\n    },\r\n    onDocumentClick: () => dispatch(closeDropdown(ownProps.id)),\r\n    onApply: () => {\r\n        dispatch(closeDropdown(ownProps.id));\r\n        dispatch(applyDatePicker(ownProps.id));\r\n        dispatch(resetDatePickers(ownProps.id));\r\n    },\r\n    onCancel: (currentMonth: number, currentYear: number, isOpened: boolean) => {\r\n        if (isOpened) {\r\n            dispatch(changeOptionsCycle(`calendar-${ownProps.id}${MONTH_PICKER_ID}`, currentMonth));\r\n            dispatch(changeOptionsCycle(`calendar-${ownProps.id}${YEAR_PICKER_ID}`, currentYear));\r\n            dispatch(resetDatePickers(ownProps.id));\r\n            dispatch(resetOptionPickers(ownProps.id));\r\n            dispatch(closeDropdown(ownProps.id));\r\n        }\r\n    },\r\n    onClear: () => {\r\n        dispatch(clearSelection(ownProps.id));\r\n    },\r\n});\r\n\r\nexport const DatePickerDropdownConnected: React.ComponentClass<IDatePickerDropdownProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(DatePickerDropdown);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {ITableHeaderCellProps, TableHeaderCell} from './TableHeaderCell';\r\nimport {TableHeaderCellConnected} from './TableHeaderCellConnected';\r\n\r\nexport interface ITableHeaderProps extends React.ClassAttributes<TableHeader>, IReduxStatePossibleProps {\r\n    columns: ITableHeaderCellProps[];\r\n    headerClass?: IClassName;\r\n}\r\n\r\nexport class TableHeader extends React.Component<ITableHeaderProps, any> {\r\n    render() {\r\n        const columns: JSX.Element[] = _.map(\r\n            this.props.columns,\r\n            (column: ITableHeaderCellProps, index: number): JSX.Element => {\r\n                const TableHeaderCellClass =\r\n                    this.props.withReduxState && column.attributeToSort ? TableHeaderCellConnected : TableHeaderCell;\r\n\r\n                return <TableHeaderCellClass key={`th-${column.id || index}`} {...column} />;\r\n            }\r\n        );\r\n\r\n        return (\r\n            <thead className={classNames(this.props.headerClass)}>\r\n                <tr>{columns}</tr>\r\n            </thead>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    IOptionsCycleConnectedOwnProps,\r\n    IOptionsCycleDispatchProps,\r\n    IOptionsCycleProps,\r\n    IOptionsCycleStateProps,\r\n    OptionsCycle,\r\n} from './OptionsCycle';\r\nimport {addOptionsCycle, changeOptionsCycle, removeOptionsCycle} from './OptionsCycleActions';\r\nimport {OptionsCycleSelectors} from './OptionsCycleSelectors';\r\n\r\nconst mapStateToProps = (\r\n    state: IReactVaporState,\r\n    ownProps: IOptionsCycleConnectedOwnProps\r\n): IOptionsCycleStateProps => ({\r\n    currentOption: OptionsCycleSelectors.getCurrentOption(state, {id: ownProps.id, startAt: ownProps.startAt}),\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IOptionsCycleConnectedOwnProps\r\n): IOptionsCycleDispatchProps => ({\r\n    onRender: () => dispatch(addOptionsCycle(ownProps.id, ownProps.startAt)),\r\n    onDestroy: () => dispatch(removeOptionsCycle(ownProps.id)),\r\n    onChange: (index: number) => dispatch(changeOptionsCycle(ownProps.id, index)),\r\n});\r\n\r\nexport const OptionsCycleConnected: React.ComponentClass<IOptionsCycleProps & IOptionsCycleConnectedOwnProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(OptionsCycle);\r\n","import * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\n\r\nconst getCurrentOption = (state: IReactVaporState, props: {id: string; startAt?: number}): number => {\r\n    const cycle = _.findWhere(state.optionsCycles, {id: props.id});\r\n    return _.result(cycle, 'currentOption', props.startAt || 0);\r\n};\r\n\r\nexport const OptionsCycleSelectors = {\r\n    getCurrentOption,\r\n};\r\n","import * as moment from 'moment';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    changeDatePickerLowerLimit,\r\n    changeDatePickerUpperLimit,\r\n    DateLimits,\r\n    resetDatePickers,\r\n    selectDate,\r\n} from '../datePicker/DatePickerActions';\r\nimport {resetOptionPickers} from '../optionPicker/OptionPickerActions';\r\nimport {changeOptionsCycle} from '../optionsCycle/OptionsCycleActions';\r\nimport {\r\n    Calendar,\r\n    ICalendarDispatchProps,\r\n    ICalendarOwnProps,\r\n    ICalendarProps,\r\n    ICalendarStateProps,\r\n    MONTH_PICKER_ID,\r\n    YEAR_PICKER_ID,\r\n} from './Calendar';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: ICalendarOwnProps): ICalendarStateProps => {\r\n    const selectedMonth = _.findWhere(state.optionsCycles, {id: ownProps.id + MONTH_PICKER_ID});\r\n    const selectedYear = _.findWhere(state.optionsCycles, {id: ownProps.id + YEAR_PICKER_ID});\r\n\r\n    return {\r\n        withReduxState: true,\r\n        selectedMonth: selectedMonth ? selectedMonth.currentOption : 0,\r\n        selectedYear: selectedYear ? selectedYear.currentOption : 0,\r\n        calendarSelection: _.where(state.datePickers, {calendarId: ownProps.id}),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: ICalendarOwnProps\r\n): ICalendarDispatchProps => ({\r\n    onClick: (pickerId: string, isUpperLimit: boolean, value: Date) => {\r\n        dispatch(resetOptionPickers(pickerId));\r\n        if (value && isUpperLimit) {\r\n            dispatch(\r\n                changeDatePickerUpperLimit(\r\n                    pickerId,\r\n                    moment(value)\r\n                        .endOf('day')\r\n                        .toDate()\r\n                )\r\n            );\r\n        } else if (value) {\r\n            dispatch(changeDatePickerLowerLimit(pickerId, value));\r\n\r\n            // mirror upper limit to lower limit if not linked with a date range\r\n            // this will cause the selected lower limit date to display in the calendar right after selection of the lower limit date\r\n            if (!_.isUndefined(ownProps.isLinkedToDateRange) && !ownProps.isLinkedToDateRange) {\r\n                dispatch(changeDatePickerUpperLimit(pickerId, value));\r\n                dispatch(selectDate(pickerId, DateLimits.lower));\r\n            }\r\n        } else {\r\n            dispatch(resetDatePickers(pickerId));\r\n        }\r\n    },\r\n    onSelectUnselectable: (pickerId: string) => {\r\n        dispatch(changeDatePickerUpperLimit(pickerId, null));\r\n        dispatch(selectDate(pickerId, DateLimits.upper));\r\n    },\r\n    onDateChange: (pickerId: string, newValue: number) => dispatch(changeOptionsCycle(pickerId, newValue)),\r\n});\r\n\r\nexport const CalendarConnected: React.ComponentClass<ICalendarProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Calendar);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport * as s from 'underscore.string';\r\n\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Calendar, ICalendarProps, ICalendarSelectionRule} from '../calendar/Calendar';\r\nimport {CalendarConnected} from '../calendar/CalendarConnected';\r\nimport {IOption} from '../optionPicker/Option';\r\nimport {IOptionPickerProps, OptionPicker} from '../optionPicker/OptionPicker';\r\nimport {OptionPickerConnected} from '../optionPicker/OptionPickerConnected';\r\nimport {DatePickerDateRange} from './DatePickerConstants';\r\nimport {DatesSelection, IDatesSelectionProps, IRangeLimit} from './DatesSelection';\r\nimport {DatesSelectionConnected} from './DatesSelectionConnected';\r\n\r\nexport interface IDatesSelectionBox {\r\n    title: string;\r\n    quickOptions?: IOption[];\r\n    isRange?: boolean;\r\n    rangeLimit?: IRangeLimit;\r\n    withTime?: boolean;\r\n    hasSetToNowButton?: boolean;\r\n    color?: string;\r\n}\r\n\r\nexport interface IDatePickerBoxOwnProps extends React.ClassAttributes<DatePickerBox> {\r\n    id?: string;\r\n    datesSelectionBoxes: IDatesSelectionBox[];\r\n    setToNowTooltip?: string;\r\n    isClearable?: boolean;\r\n    clearLabel?: string;\r\n    initiallyUnselected?: boolean;\r\n    simple?: boolean;\r\n    footer?: JSX.Element;\r\n    onClear?: () => void;\r\n}\r\n\r\nexport interface IDatePickerBoxStateProps extends IReduxStatePossibleProps {}\r\n\r\nexport interface IDatePickerBoxChildrenProps {\r\n    months?: string[];\r\n    startingMonth?: number;\r\n    years?: string[];\r\n    startingYear?: number;\r\n    days?: string[];\r\n    startingDay?: number;\r\n    selectionRules?: ICalendarSelectionRule[];\r\n    lowerLimitPlaceholder?: string;\r\n    upperLimitPlaceholder?: string;\r\n    isLinkedToDateRange?: boolean;\r\n    initialDateRange?: DatePickerDateRange;\r\n}\r\n\r\nexport const DEFAULT_CLEAR_DATE_LABEL = 'Clear';\r\n\r\nexport interface IDatePickerBoxProps\r\n    extends IDatePickerBoxOwnProps,\r\n        IDatePickerBoxStateProps,\r\n        IDatePickerBoxChildrenProps {}\r\n\r\nexport class DatePickerBox extends React.Component<IDatePickerBoxProps, any> {\r\n    static defaultProps: Partial<IDatePickerBoxProps> = {\r\n        clearLabel: DEFAULT_CLEAR_DATE_LABEL,\r\n    };\r\n\r\n    static getCalendarId = (datePickerId: string) => `calendar-${datePickerId}`;\r\n\r\n    private id: string;\r\n\r\n    componentWillMount() {\r\n        this.id = DatePickerBox.getCalendarId(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        const calendarProps: ICalendarProps = {\r\n            id: this.id,\r\n            months: this.props.months,\r\n            startingMonth: this.props.startingMonth,\r\n            years: this.props.years,\r\n            startingYear: this.props.startingYear,\r\n            days: this.props.days,\r\n            startingDay: this.props.startingDay,\r\n            selectionRules: this.props.selectionRules,\r\n            isLinkedToDateRange: this.props.isLinkedToDateRange,\r\n            simple: this.props.simple,\r\n        };\r\n\r\n        const calendar: JSX.Element = this.props.withReduxState ? (\r\n            <CalendarConnected {...calendarProps} />\r\n        ) : (\r\n            <Calendar />\r\n        );\r\n\r\n        const datePickerClasses: string = classNames('date-picker-box', 'flex', 'flex-column', {\r\n            simple: this.props.simple,\r\n        });\r\n\r\n        const inside: JSX.Element = this.props.simple ? (\r\n            calendar\r\n        ) : (\r\n            <div className=\"flex\">\r\n                {calendar}\r\n                {this.getdatePickerRightPart()}\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className={datePickerClasses}>\r\n                {inside}\r\n                {this.props.footer}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getdatePickerRightPart(): JSX.Element {\r\n        return (\r\n            <div className=\"date-selection mod-width-50 mod-border-left mod-small-content p2\">\r\n                {this.getdateSelectionBoxes()}\r\n                {this.getClearOptions()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getdateSelectionBoxes(): JSX.Element[] {\r\n        return _.map(this.props.datesSelectionBoxes, (datesSelectionBox: IDatesSelectionBox) => {\r\n            const boxId: string = `${this.props.id}-${s.slugify(datesSelectionBox.title)}`;\r\n\r\n            const quickOptionsProps: IOptionPickerProps = {\r\n                id: boxId,\r\n                options: datesSelectionBox.quickOptions,\r\n            };\r\n            const optionPicker: JSX.Element = this.props.withReduxState ? (\r\n                <OptionPickerConnected {...quickOptionsProps} />\r\n            ) : (\r\n                <OptionPicker {...quickOptionsProps} />\r\n            );\r\n\r\n            const datesSelectionProps: IDatesSelectionProps = {\r\n                id: boxId,\r\n                withTime: datesSelectionBox.withTime,\r\n                hasSetToNowButton: datesSelectionBox.hasSetToNowButton,\r\n                setToNowTooltip: this.props.setToNowTooltip,\r\n                isRange: datesSelectionBox.isRange,\r\n                isClearable: this.props.isClearable,\r\n                rangeLimit: datesSelectionBox.rangeLimit,\r\n                color: datesSelectionBox.color,\r\n                calendarId: this.id,\r\n                lowerLimitPlaceholder: this.props.lowerLimitPlaceholder,\r\n                upperLimitPlaceholder: this.props.upperLimitPlaceholder,\r\n                initiallyUnselected: this.props.initiallyUnselected,\r\n                initialDateRange: this.props.initialDateRange,\r\n            };\r\n            const dateSelection: JSX.Element = this.props.withReduxState ? (\r\n                <DatesSelectionConnected {...datesSelectionProps} />\r\n            ) : (\r\n                <DatesSelection {...datesSelectionProps} />\r\n            );\r\n\r\n            return (\r\n                <div key={boxId}>\r\n                    <h3 className=\"bold text-medium-blue\">{datesSelectionBox.title}</h3>\r\n                    {optionPicker}\r\n                    {dateSelection}\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    private getClearOptions(): JSX.Element {\r\n        return this.props.isClearable ? (\r\n            <button type=\"button\" onClick={() => this.props.onClear()} className=\"clear-selection-button mt2\">\r\n                {this.props.clearLabel}\r\n            </button>\r\n        ) : null;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {changeOptionPicker} from '../optionPicker/OptionPickerActions';\r\nimport {IOptionPickerState} from '../optionPicker/OptionPickerReducers';\r\nimport {\r\n    addDatePicker,\r\n    changeDatePickerLowerLimit,\r\n    changeDatePickerUpperLimit,\r\n    DateLimits,\r\n    removeDatePicker,\r\n    selectDate,\r\n} from './DatePickerActions';\r\nimport {IDatePickerState} from './DatePickerReducers';\r\nimport {\r\n    DatesSelection,\r\n    IDatesSelectionDispatchProps,\r\n    IDatesSelectionOwnProps,\r\n    IDatesSelectionProps,\r\n    IDatesSelectionStateProps,\r\n} from './DatesSelection';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IDatesSelectionOwnProps): IDatesSelectionStateProps => {\r\n    const item: IDatePickerState = _.findWhere(state.datePickers, {id: ownProps.id});\r\n    const optionPicker: IOptionPickerState = _.findWhere(state.optionPickers, {id: ownProps.id});\r\n\r\n    return {\r\n        lowerLimit: item ? item.lowerLimit : new Date(),\r\n        upperLimit: item ? item.upperLimit : new Date(),\r\n        inputLowerLimit: item ? item.inputLowerLimit : new Date(),\r\n        inputUpperLimit: item ? item.inputUpperLimit : new Date(),\r\n        quickOption: optionPicker ? optionPicker.selectedValue : '',\r\n        isSelecting: item ? item.selected : '',\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IDatesSelectionOwnProps\r\n): IDatesSelectionDispatchProps => ({\r\n    onRender: () => {\r\n        dispatch(\r\n            addDatePicker(\r\n                ownProps.id,\r\n                ownProps.isRange,\r\n                ownProps.rangeLimit,\r\n                ownProps.color,\r\n                ownProps.calendarId,\r\n                ownProps.initiallyUnselected,\r\n                ownProps.isClearable,\r\n                undefined,\r\n                ownProps.initialDateRange\r\n            )\r\n        );\r\n    },\r\n    onDestroy: () => dispatch(removeDatePicker(ownProps.id)),\r\n    onBlur: (date: Date, isUpperLimit: boolean, optionPicker = false) => {\r\n        if (isUpperLimit) {\r\n            dispatch(changeDatePickerUpperLimit(ownProps.id, date));\r\n        } else {\r\n            dispatch(changeDatePickerLowerLimit(ownProps.id, date));\r\n            if (!ownProps.isRange) {\r\n                dispatch(changeDatePickerUpperLimit(ownProps.id, date));\r\n            }\r\n        }\r\n\r\n        if (!optionPicker) {\r\n            dispatch(changeOptionPicker(ownProps.id, '', ''));\r\n        }\r\n    },\r\n    onClick: (isUpperLimit: boolean) => {\r\n        dispatch(selectDate(ownProps.id, isUpperLimit ? DateLimits.upper : DateLimits.lower));\r\n    },\r\n});\r\n\r\nexport const DatesSelectionConnected: React.ComponentClass<IDatesSelectionProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(DatesSelection);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    ITableHeaderCellDispatchProps,\r\n    ITableHeaderCellOwnProps,\r\n    ITableHeaderCellProps,\r\n    TableHeaderCell,\r\n} from './TableHeaderCell';\r\nimport {addHeaderCell, removeHeaderCell, sortFromHeaderCell} from './TableHeaderCellActions';\r\nimport {ITableHeaderCellState} from './TableHeaderCellReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: ITableHeaderCellOwnProps) => {\r\n    const headerCell: ITableHeaderCellState = state.tableHeaderCells[ownProps.id];\r\n\r\n    return {\r\n        sorted: headerCell && headerCell.sorted,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: IDispatch,\r\n    ownProps: ITableHeaderCellOwnProps\r\n): ITableHeaderCellDispatchProps => ({\r\n    onMount: () => dispatch(addHeaderCell(ownProps.id, ownProps.attributeToSort, ownProps.tableId)),\r\n    onSort: () => dispatch(sortFromHeaderCell(ownProps.id, ownProps.attributeToSort, ownProps.tableId)),\r\n    onUnmount: () => dispatch(removeHeaderCell(ownProps.id)),\r\n});\r\n\r\nexport const TableHeaderCellConnected: React.ComponentClass<ITableHeaderCellProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(TableHeaderCell);\r\n","import * as React from 'react';\r\n\r\nexport interface IOption {\r\n    label: string;\r\n    value: () => string;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IOptionProps extends React.ClassAttributes<Option> {\r\n    option: IOption;\r\n    isActive: boolean;\r\n    onClick: (value: string, label: string) => void;\r\n}\r\n\r\nexport class Option extends React.Component<IOptionProps, any> {\r\n    render() {\r\n        const buttonClass = this.props.isActive ? 'active' : '';\r\n\r\n        return (\r\n            <button\r\n                type=\"button\"\r\n                className={buttonClass}\r\n                onClick={() => this.props.onClick(this.props.option.value(), this.props.option.label)}\r\n            >\r\n                {this.props.option.label}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    IOptionPickerDispatchProps,\r\n    IOptionPickerOwnProps,\r\n    IOptionPickerProps,\r\n    IOptionPickerStateProps,\r\n    OptionPicker,\r\n} from './OptionPicker';\r\nimport {addOptionPicker, changeOptionPicker, removeOptionPicker} from './OptionPickerActions';\r\nimport {IOptionPickerState} from './OptionPickerReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IOptionPickerOwnProps): IOptionPickerStateProps => {\r\n    const item: IOptionPickerState = _.findWhere(state.optionPickers, {id: ownProps.id});\r\n\r\n    return {\r\n        activeLabel: item ? item.selectedLabel : '',\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IOptionPickerOwnProps\r\n): IOptionPickerDispatchProps => ({\r\n    onRender: () => dispatch(addOptionPicker(ownProps.id)),\r\n    onDestroy: () => dispatch(removeOptionPicker(ownProps.id)),\r\n    onClick: (value: string, label: string) => dispatch(changeOptionPicker(ownProps.id, label, value)),\r\n});\r\n\r\nexport const OptionPickerConnected: React.ComponentClass<IOptionPickerProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(OptionPicker);\r\n","import * as classNames from 'classnames';\r\nimport * as moment from 'moment';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport {DateUtils} from '../../utils/DateUtils';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Button} from '../button/Button';\r\nimport {DEFAULT_YEARS, ICalendarSelectionRule} from '../calendar/Calendar';\r\nimport {ModalFooter} from '../modal/ModalFooter';\r\nimport {DatePickerBox, IDatePickerBoxChildrenProps, IDatePickerBoxProps, IDatesSelectionBox} from './DatePickerBox';\r\nimport {DatePickerDateRange} from './DatePickerConstants';\r\nimport {IDatePickerState} from './DatePickerReducers';\r\n\r\nexport interface IDatePickerDropdownOwnProps extends React.ClassAttributes<DatePickerDropdown> {\r\n    label?: string;\r\n    className?: string;\r\n    id?: string;\r\n    applyLabel?: string;\r\n    cancelLabel?: string;\r\n    toLabel?: string;\r\n    onRight?: boolean;\r\n    onBeforeApply?: () => void;\r\n    extraDropdownClasses?: string[];\r\n    extraDropdownToggleClasses?: string[];\r\n    renderDatePickerWhenClosed?: boolean;\r\n    initiallyUnselected?: boolean;\r\n    isClearable?: boolean;\r\n    attributeName?: string;\r\n    readonly?: boolean;\r\n}\r\n\r\nexport interface IDatePickerDropdownChildrenProps extends IDatePickerBoxChildrenProps {\r\n    datesSelectionBoxes: IDatesSelectionBox[];\r\n    setToNowTooltip?: string;\r\n    clearLabel?: string;\r\n    months?: string[];\r\n    startingMonth?: number;\r\n    years?: string[];\r\n    startingYear?: number;\r\n    days?: string[];\r\n    startingDay?: number;\r\n    selectionRules?: ICalendarSelectionRule[];\r\n    lowerLimitPlaceholder?: string;\r\n    upperLimitPlaceholder?: string;\r\n    isLinkedToDateRange?: boolean;\r\n    simple?: boolean;\r\n    initialDateRange?: DatePickerDateRange;\r\n}\r\n\r\nexport interface IDatePickerDropdownStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    datePicker?: IDatePickerState;\r\n}\r\n\r\nexport interface IDatePickerDropdownDispatchProps {\r\n    onApply?: () => void;\r\n    onCancel?: (currentMonth: number, currentYear: number, isOpened: boolean) => void;\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onClick?: (datePicker: IDatePickerState) => void;\r\n    onDocumentClick?: () => void;\r\n    onClear?: () => void;\r\n}\r\n\r\nexport interface IDatePickerDropdownProps\r\n    extends IDatePickerDropdownOwnProps,\r\n        IDatePickerDropdownStateProps,\r\n        IDatePickerDropdownDispatchProps,\r\n        IDatePickerDropdownChildrenProps {}\r\n\r\nexport const DEFAULT_DATE_PICKER_DROPDOWN_LABEL: string = 'Select date';\r\nexport const DEFAULT_APPLY_DATE_LABEL: string = 'Apply';\r\nexport const DEFAULT_CANCEL_DATE_LABEL: string = 'Cancel';\r\nexport const DEFAULT_TO_LABEL: string = 'to';\r\nexport const DEFAULT_EXTRA_DROPDOWN_CLASSES: string[] = [];\r\nexport const DEFAULT_EXTRA_DROPDOWN_TOGGLE_CLASSES: string[] = [];\r\nexport const DEFAULT_RENDER_DATEPICKER_WHEN_CLOSED: boolean = true;\r\nexport const DEFAULT_INITIALY_UNSELECTED: boolean = false;\r\n\r\nexport class DatePickerDropdown extends React.Component<IDatePickerDropdownProps, any> {\r\n    static defaultProps: Partial<IDatePickerDropdownProps> = {\r\n        label: DEFAULT_DATE_PICKER_DROPDOWN_LABEL,\r\n        applyLabel: DEFAULT_APPLY_DATE_LABEL,\r\n        cancelLabel: DEFAULT_CANCEL_DATE_LABEL,\r\n        toLabel: DEFAULT_TO_LABEL,\r\n        extraDropdownClasses: DEFAULT_EXTRA_DROPDOWN_CLASSES,\r\n        extraDropdownToggleClasses: DEFAULT_EXTRA_DROPDOWN_TOGGLE_CLASSES,\r\n        renderDatePickerWhenClosed: DEFAULT_RENDER_DATEPICKER_WHEN_CLOSED,\r\n        isClearable: false,\r\n    };\r\n\r\n    private dropdown: HTMLDivElement;\r\n\r\n    componentDidMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n\r\n        if (this.props.onDocumentClick && !this.props.readonly) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick && !this.props.readonly) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let label: string = this.props.label;\r\n        let toLabel: JSX.Element = null;\r\n        let labelSecondPart: string = '';\r\n\r\n        if (this.props.datePicker && this.props.datePicker.appliedLowerLimit) {\r\n            label = this.formatDate(this.props.datePicker.appliedLowerLimit);\r\n            if (this.props.datePicker.isRange) {\r\n                const formattedUpper = this.formatDate(this.props.datePicker.appliedUpperLimit);\r\n                if (formattedUpper !== label) {\r\n                    toLabel = (\r\n                        <span\r\n                            className={classNames('mx1', this.props.readonly ? 'text-medium-grey' : 'text-dark-grey')}\r\n                        >\r\n                            {this.props.toLabel}\r\n                        </span>\r\n                    );\r\n                    labelSecondPart = formattedUpper;\r\n                }\r\n            }\r\n        }\r\n\r\n        const dropdownClasses: string = classNames(...this.props.extraDropdownClasses, 'dropdown-wrapper', 'dropdown', {\r\n            open: this.props.isOpened,\r\n        });\r\n\r\n        const menuClasses: string = classNames('dropdown-menu', 'normal-height', {\r\n            'on-right': this.props.onRight,\r\n        });\r\n\r\n        const toggleClasses = classNames(\r\n            'dropdown-toggle btn inline-flex flex-center',\r\n            this.props.extraDropdownToggleClasses,\r\n            {\r\n                'dropdown-toggle-placeholder': !this.props.datePicker || !this.props.datePicker.appliedLowerLimit,\r\n            }\r\n        );\r\n        return (\r\n            <div className={classNames('date-picker-dropdown', this.props.className)}>\r\n                <div className={dropdownClasses} ref={(dropdown: HTMLDivElement) => (this.dropdown = dropdown)}>\r\n                    <button className={toggleClasses} onClick={this.handleClick} disabled={this.props.readonly}>\r\n                        <span className=\"dropdown-selected-value\">\r\n                            <label>\r\n                                {label}\r\n                                {toLabel}\r\n                                {labelSecondPart}\r\n                            </label>\r\n                        </span>\r\n                        <span className=\"dropdown-toggle-arrow\"></span>\r\n                    </button>\r\n                    <div className={menuClasses}>{this.getDatePickerBox()}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleClick = () => {\r\n        if (this.props.onClick && !this.props.readonly) {\r\n            this.props.onClick(this.props.datePicker);\r\n        }\r\n    };\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        const dropdown: Element | Text = ReactDOM.findDOMNode(this.dropdown);\r\n        if (!dropdown.contains(e.target as Node) && this.props.isOpened) {\r\n            this.props.onDocumentClick();\r\n            this.handleCancel();\r\n        }\r\n    };\r\n\r\n    private handleApply() {\r\n        if (this.props.onBeforeApply) {\r\n            this.props.onBeforeApply();\r\n        }\r\n\r\n        if (this.props.onApply) {\r\n            this.props.onApply();\r\n        }\r\n    }\r\n\r\n    private handleCancel() {\r\n        if (this.props.onCancel) {\r\n            const currentMonth: number =\r\n                this.props.datePicker && this.props.datePicker.appliedLowerLimit\r\n                    ? this.props.datePicker.appliedLowerLimit.getMonth()\r\n                    : DateUtils.currentMonth;\r\n            const years: string[] = this.props.years || DEFAULT_YEARS;\r\n            const currentYear: number =\r\n                this.props.datePicker && this.props.datePicker.appliedLowerLimit\r\n                    ? this.props.datePicker.appliedLowerLimit.getFullYear()\r\n                    : DateUtils.currentYear;\r\n            this.props.onCancel(currentMonth, years.indexOf(currentYear.toString()), this.props.isOpened);\r\n        }\r\n    }\r\n\r\n    private handleClear() {\r\n        if (this.props.onClear) {\r\n            this.props.onClear();\r\n        }\r\n    }\r\n\r\n    private formatDate(date: Date): string {\r\n        return this.props.datesSelectionBoxes.length && this.props.datesSelectionBoxes[0].withTime\r\n            ? DateUtils.getDateWithTimeString(date)\r\n            : DateUtils.getSimpleDate(date);\r\n    }\r\n\r\n    private hasExceededRangeLimit(): boolean {\r\n        if (this.props.datePicker && this.props.datePicker.rangeLimit) {\r\n            const {weeks, days, hours} = this.props.datePicker.rangeLimit;\r\n            const limitInMinutes: number =\r\n                (weeks ? weeks * 10080 : 0) + (days ? days * 1440 : 0) + (hours ? hours * 60 : 0);\r\n            const diffInMinutes: number = moment(this.props.datePicker.inputUpperLimit).diff(\r\n                moment(this.props.datePicker.inputLowerLimit),\r\n                'minutes'\r\n            );\r\n            return diffInMinutes > limitInMinutes;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getDatePickerBox(): JSX.Element {\r\n        if (this.props.isOpened || this.props.renderDatePickerWhenClosed) {\r\n            const hasExceededRangeLimit = this.hasExceededRangeLimit();\r\n            const datePickerBoxProps: IDatePickerBoxProps = {\r\n                setToNowTooltip: this.props.setToNowTooltip,\r\n                datesSelectionBoxes: this.props.datesSelectionBoxes,\r\n                months: this.props.months,\r\n                startingMonth: this.props.startingMonth,\r\n                years: this.props.years,\r\n                startingYear: this.props.startingYear,\r\n                days: this.props.days,\r\n                startingDay: this.props.startingDay,\r\n                selectionRules: this.props.selectionRules,\r\n                lowerLimitPlaceholder: this.props.lowerLimitPlaceholder,\r\n                upperLimitPlaceholder: this.props.upperLimitPlaceholder,\r\n                isLinkedToDateRange: this.props.isLinkedToDateRange,\r\n                isClearable: this.props.isClearable,\r\n                initiallyUnselected: this.props.initiallyUnselected,\r\n                clearLabel: this.props.clearLabel,\r\n                simple: this.props.simple,\r\n                initialDateRange: this.props.initialDateRange,\r\n                onClear: () => this.handleClear(),\r\n                footer: (\r\n                    <ModalFooter classes={['mod-small']}>\r\n                        <Button\r\n                            enabled={!hasExceededRangeLimit}\r\n                            name={this.props.applyLabel}\r\n                            small={true}\r\n                            primary={true}\r\n                            tooltip={hasExceededRangeLimit ? this.props.datePicker.rangeLimit.message : ''}\r\n                            tooltipPlacement={'left'}\r\n                            onClick={() => this.handleApply()}\r\n                        />\r\n                        <Button\r\n                            enabled={true}\r\n                            name={this.props.cancelLabel}\r\n                            small={true}\r\n                            primary={true}\r\n                            onClick={() => this.handleCancel()}\r\n                        />\r\n                    </ModalFooter>\r\n                ),\r\n            };\r\n\r\n            return this.props.withReduxState ? (\r\n                <DatePickerBox withReduxState id={this.props.id} {...datePickerBoxProps} />\r\n            ) : (\r\n                <DatePickerBox {...datePickerBoxProps} />\r\n            );\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}