{"version":3,"sources":["webpack:///./src/components/navigation/examples/NavigationExamples.tsx?4c42","webpack:///./src/components/navigation/perPage/NavigationPerPage.tsx?fc2e","webpack:///./src/components/navigation/pagination/NavigationPagination.tsx?54ce","webpack:///./src/components/loading/LoadingConnected.tsx?2c73","webpack:///./src/components/navigation/Navigation.tsx?cb6a","webpack:///./src/components/navigation/pagination/NavigationPaginationSelect.tsx?d73c","webpack:///./src/components/navigation/pagination/NavigationPaginationConnected.tsx?e5e9","webpack:///./src/components/navigation/perPage/NavigationPerPageConnected.tsx?c59a","webpack:///./src/components/navigation/perPage/NavigationPerPageSelect.tsx?96a7"],"names":["render","navigationProps","totalPages","totalEntries","currentPerPage","onPageClick","newPage","alert","onPerPageClick","newPerPage","className","isLoading","previousLabel","nextLabel","numberOfPagesToShow","currentPage","perPageLabel","perPageNumbers","PER_PAGE_NUMBERS","handleClick","this","props","componentWillMount","initialPosition","Math","ceil","length","onRender","componentWillUnmount","onDestroy","topNumber","perPageSelects","num","index","selectId","id","isSelected","newPerPageNb","perPageNb","key","selected","label","defaultProps","handlePageClick","pageNb","componentDidUpdate","componentDidMount","showXPages","abs","start","end","lastPage","previousClasses","nextClasses","pageSelects","hidePages","max","floor","min","p","push","onClick","svgName","svgClass","LoadingConnected","dispatch","ownProps","mergeProps","paginationProps","pagination","withReduxState","loadingIds","paginationClass","perPageProps","perPage","perPageClass","navigationClasses","loading","linkClasses","selectable","disabled","NavigationPaginationConnected","state","item","paginationComposite","NavigationPerPageConnected","perPageNumber","defaultInitialPosition","perPageComposite","oldPerPageNb","selectClasses","spanClasses"],"mappings":"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","file":"assets/1000.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {INavigationProps, Navigation} from '../Navigation';\r\n\r\nexport class NavigationExamples extends React.Component<any, any> {\r\n    render() {\r\n        const navigationProps: INavigationProps = {\r\n            totalPages: 10,\r\n            totalEntries: 50,\r\n            currentPerPage: 10,\r\n            onPageClick: (newPage) => alert('New page selected: ' + (newPage + 1)),\r\n            onPerPageClick: (newPerPage) => alert('New per page option selected: ' + newPerPage),\r\n        };\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Navigation</label>\r\n                    <Navigation {...navigationProps} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Navigation with loading</label>\r\n                    <Navigation {...navigationProps} isLoading={true} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Navigation with custom values</label>\r\n                    <Navigation\r\n                        {...navigationProps}\r\n                        previousLabel=\"Précédente\"\r\n                        nextLabel=\"Prochaine\"\r\n                        numberOfPagesToShow={3}\r\n                        currentPage={1}\r\n                        perPageLabel=\"Items par page\"\r\n                        perPageNumbers={[2, 10, 25, 50]}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {NavigationPerPageSelect} from './NavigationPerPageSelect';\r\n\r\nexport interface INavigationPerPageOwnProps extends React.ClassAttributes<NavigationPerPage> {\r\n    id?: string;\r\n    totalEntries: number;\r\n    label?: string;\r\n    perPageNumbers?: number[];\r\n    loadingIds?: string[];\r\n    initialPosition?: number;\r\n}\r\n\r\nexport interface INavigationPerPageStateProps {\r\n    currentPerPage?: number;\r\n    currentPage?: number;\r\n}\r\n\r\nexport interface INavigationPerPageDispatchProps {\r\n    onRender?: (perPageNb: number) => void;\r\n    onDestroy?: () => void;\r\n    onPerPageClick?: (newPerPage: number, currentPerPage?: number, currentPage?: number) => void;\r\n}\r\n\r\nexport interface INavigationPerPageProps\r\n    extends INavigationPerPageOwnProps,\r\n        INavigationPerPageStateProps,\r\n        INavigationPerPageDispatchProps {}\r\n\r\nexport const PER_PAGE_NUMBERS: number[] = [10, 20, 30];\r\nexport const PER_PAGE_LABEL: string = 'Results per page';\r\n\r\nexport class NavigationPerPage extends React.Component<INavigationPerPageProps> {\r\n    static defaultProps: Partial<INavigationPerPageProps> = {\r\n        perPageNumbers: PER_PAGE_NUMBERS,\r\n        label: PER_PAGE_LABEL,\r\n    };\r\n    private initialPosition: number;\r\n\r\n    private handleClick(newPerPage: number) {\r\n        if (this.props.onPerPageClick && this.props.currentPerPage !== newPerPage) {\r\n            this.props.onPerPageClick(newPerPage, this.props.currentPerPage, this.props.currentPage);\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.initialPosition = !_.isUndefined(this.props.initialPosition)\r\n            ? this.props.initialPosition\r\n            : Math.ceil(this.props.perPageNumbers.length / 2) - 1;\r\n        this.props.onRender?.(this.props.perPageNumbers[this.initialPosition]);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        const currentPerPage: number = this.props.currentPerPage || this.props.perPageNumbers[this.initialPosition];\r\n        const topNumber: number = this.props.totalEntries;\r\n\r\n        const perPageSelects: JSX.Element[] = _.map(\r\n            this.props.perPageNumbers,\r\n            (num: number, index: number): JSX.Element => {\r\n                const shouldShowPerPageSelect: boolean = topNumber > (this.props.perPageNumbers[index - 1] || 0);\r\n\r\n                if (shouldShowPerPageSelect) {\r\n                    const selectId: string = `perpage-${this.props.id || ''}-${num}`;\r\n                    const isSelected: boolean = currentPerPage === num;\r\n                    return (\r\n                        <NavigationPerPageSelect\r\n                            onPerPageClick={(newPerPageNb: number) => this.handleClick(newPerPageNb)}\r\n                            perPageNb={num}\r\n                            key={selectId}\r\n                            selected={isSelected}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        );\r\n\r\n        return (\r\n            <div className=\"items-per-page prepended-flat-select\">\r\n                <div className=\"flat-select-prepend\">{this.props.label}:</div>\r\n                <div className=\"flat-select clearfix\">{perPageSelects}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {NavigationPaginationSelect} from './NavigationPaginationSelect';\r\n\r\nexport interface INavigationPaginationOwnProps extends React.ClassAttributes<NavigationPagination> {\r\n    id?: string;\r\n    totalPages: number;\r\n    numberOfPagesToShow?: number;\r\n    previousLabel?: string;\r\n    nextLabel?: string;\r\n    loadingIds?: string[];\r\n    hidePages?: boolean;\r\n}\r\n\r\nexport interface INavigationPaginationStateProps {\r\n    currentPage?: number;\r\n}\r\n\r\nexport interface INavigationPaginationDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onPageClick?: (pageNb: number) => void;\r\n}\r\n\r\nexport interface INavigationPaginationProps\r\n    extends INavigationPaginationOwnProps,\r\n        INavigationPaginationStateProps,\r\n        INavigationPaginationDispatchProps {}\r\n\r\nexport const NUMBER_OF_PAGES_SHOWING: number = 7;\r\nexport const PREVIOUS_LABEL: string = 'Previous';\r\nexport const NEXT_LABEL: string = 'Next';\r\n\r\nexport class NavigationPagination extends React.Component<INavigationPaginationProps, any> {\r\n    private handlePageClick = (pageNb: number) => {\r\n        if (pageNb >= 0 && this.props.currentPage !== pageNb) {\r\n            this.props.onPageClick?.(pageNb);\r\n        }\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.currentPage > this.props.totalPages - 1) {\r\n            this.handlePageClick(this.props.totalPages - 1);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        const currentPage: number = this.props.currentPage || 0;\r\n        const showXPages: number = Math.abs((this.props.numberOfPagesToShow || NUMBER_OF_PAGES_SHOWING) - 1);\r\n        const previousLabel: string = this.props.previousLabel || PREVIOUS_LABEL;\r\n        const nextLabel: string = this.props.nextLabel || NEXT_LABEL;\r\n        let start: number = 0;\r\n        let end: number = showXPages;\r\n        const lastPage: number = this.props.totalPages - 1;\r\n        const previousClasses: string =\r\n            'flat-select-option mod-link ' + (currentPage === 0 ? 'disabled' : 'selectable');\r\n        const nextClasses: string =\r\n            'flat-select-option mod-link ' + (currentPage === lastPage ? 'disabled' : 'selectable');\r\n        const pageSelects: JSX.Element[] = [];\r\n\r\n        if (!this.props.hidePages) {\r\n            if (currentPage + showXPages / 2 > lastPage) {\r\n                end = lastPage;\r\n                start = Math.max(lastPage - showXPages, 0);\r\n            } else {\r\n                start = Math.max(Math.floor(currentPage - showXPages / 2), 0);\r\n                end = Math.min(start + showXPages, lastPage);\r\n            }\r\n\r\n            _.each(_.range(start, end + 1), (p: number): void => {\r\n                pageSelects.push(\r\n                    <NavigationPaginationSelect\r\n                        key={'page-' + p}\r\n                        onPageClick={this.handlePageClick}\r\n                        pageNb={p}\r\n                        selected={p === currentPage}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"pagination\">\r\n                <div className=\"flat-select\">\r\n                    <a\r\n                        className={previousClasses}\r\n                        data-page={currentPage - 1}\r\n                        onClick={() => this.handlePageClick(currentPage - 1)}\r\n                    >\r\n                        <Svg\r\n                            svgName=\"arrow-left-rounded\"\r\n                            className=\"pagination-icon\"\r\n                            svgClass=\"icon icon-small mod-lg\"\r\n                        />\r\n                        {previousLabel}\r\n                    </a>\r\n                    {pageSelects}\r\n                    <a\r\n                        className={nextClasses}\r\n                        data-page={currentPage + 1}\r\n                        onClick={() => this.handlePageClick(currentPage + 1)}\r\n                    >\r\n                        {nextLabel}\r\n                        <Svg\r\n                            svgName=\"arrow-right-rounded\"\r\n                            className=\"pagination-icon\"\r\n                            svgClass=\"icon icon-small mod-lg\"\r\n                        />\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {ILoadingDispatchProps, ILoadingOwnProps, ILoadingProps, Loading} from './Loading';\r\nimport {addLoading, removeLoading} from './LoadingActions';\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: ILoadingOwnProps\r\n): ILoadingDispatchProps => ({\r\n    onRender: () => dispatch(addLoading(ownProps.id)),\r\n    onDestroy: () => dispatch(removeLoading(ownProps.id)),\r\n});\r\n\r\nexport const LoadingConnected: React.ComponentClass<ILoadingProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Loading);\r\n","import * as React from 'react';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Loading} from '../loading/Loading';\r\nimport {LoadingConnected} from '../loading/LoadingConnected';\r\nimport {INavigationPaginationProps, NavigationPagination} from './pagination/NavigationPagination';\r\nimport {NavigationPaginationConnected} from './pagination/NavigationPaginationConnected';\r\nimport {INavigationPerPageProps, NavigationPerPage, PER_PAGE_NUMBERS} from './perPage/NavigationPerPage';\r\nimport {NavigationPerPageConnected} from './perPage/NavigationPerPageConnected';\r\n\r\nexport interface INavigationOwnProps extends React.ClassAttributes<Navigation> {\r\n    id?: string;\r\n    totalPages: number;\r\n    totalEntries: number;\r\n    loadingIds?: string[];\r\n}\r\n\r\nexport interface INavigationChildrenProps {\r\n    numberOfPagesToShow?: number;\r\n    previousLabel?: string;\r\n    nextLabel?: string;\r\n    onPageClick?: (pageNb: number) => void;\r\n    perPageLabel?: string;\r\n    perPageNumbers?: number[];\r\n    onPerPageClick?: (newPerPage: number, currentPerPage?: number, currentPage?: number) => void;\r\n    hidePages?: boolean;\r\n    currentPerPage?: number;\r\n    currentPage?: number;\r\n    initialPosition?: number;\r\n}\r\n\r\nexport interface INavigationStateProps extends IReduxStatePossibleProps {\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport interface INavigationProps extends INavigationOwnProps, INavigationChildrenProps, INavigationStateProps {}\r\n\r\nexport class Navigation extends React.Component<INavigationProps, any> {\r\n    static defaultProps: Partial<INavigationProps> = {\r\n        perPageNumbers: PER_PAGE_NUMBERS,\r\n    };\r\n\r\n    render() {\r\n        const paginationProps: INavigationPaginationProps = {\r\n            totalPages: this.props.totalPages,\r\n            numberOfPagesToShow: this.props.numberOfPagesToShow,\r\n            previousLabel: this.props.previousLabel,\r\n            nextLabel: this.props.nextLabel,\r\n            hidePages: this.props.hidePages || !this.props.totalPages || this.props.totalPages === 1,\r\n        };\r\n\r\n        const pagination: JSX.Element = this.props.withReduxState ? (\r\n            <NavigationPaginationConnected\r\n                id={`pagination-${this.props.id}`}\r\n                loadingIds={this.props.loadingIds}\r\n                {...paginationProps}\r\n            />\r\n        ) : (\r\n            <NavigationPagination\r\n                currentPage={this.props.currentPage}\r\n                onPageClick={this.props.onPageClick}\r\n                {...paginationProps}\r\n            />\r\n        );\r\n        const paginationClass: string = this.props.totalPages > 1 ? '' : 'hidden';\r\n\r\n        const perPageProps: INavigationPerPageProps = {\r\n            label: this.props.perPageLabel,\r\n            perPageNumbers: this.props.perPageNumbers,\r\n            totalEntries: this.props.totalEntries,\r\n            initialPosition: this.props.initialPosition,\r\n        };\r\n        if (this.props.currentPerPage) {\r\n            perPageProps.currentPerPage = this.props.currentPerPage;\r\n        }\r\n        const perPage: JSX.Element = this.props.withReduxState ? (\r\n            <NavigationPerPageConnected id={this.props.id} loadingIds={this.props.loadingIds} {...perPageProps} />\r\n        ) : (\r\n            <NavigationPerPage onPerPageClick={this.props.onPerPageClick} {...perPageProps} />\r\n        );\r\n        const perPageClass =\r\n            this.props.perPageNumbers.length && this.props.totalEntries > this.props.perPageNumbers[0] ? '' : 'hidden';\r\n\r\n        const navigationClasses: string = `pagination-container${this.props.isLoading ? ' loading-view' : ''}`;\r\n        const loading: JSX.Element = this.props.withReduxState ? (\r\n            <LoadingConnected id={`loading-${this.props.id}`} />\r\n        ) : (\r\n            <Loading />\r\n        );\r\n\r\n        return (\r\n            <div className={navigationClasses}>\r\n                <div className={perPageClass}>{perPage}</div>\r\n                <div className=\"flex-auto\">{loading}</div>\r\n                <div className={paginationClass}>{pagination}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface INavigationPaginationSelectProps extends React.ClassAttributes<NavigationPaginationSelect> {\r\n    disabled?: boolean;\r\n    selected: boolean;\r\n    pageNb: number;\r\n    onPageClick: (pageNb: number) => void;\r\n}\r\n\r\nexport class NavigationPaginationSelect extends React.Component<INavigationPaginationSelectProps, any> {\r\n    render() {\r\n        const linkClasses: string = classNames('flat-select-option', {\r\n            selectable: !this.props.selected,\r\n            disabled: this.props.disabled,\r\n        });\r\n\r\n        return (\r\n            <a\r\n                className={linkClasses}\r\n                data-page={this.props.pageNb}\r\n                onClick={() => this.props.onPageClick(this.props.pageNb)}\r\n            >\r\n                {this.props.pageNb + 1}\r\n            </a>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../../utils/ReduxUtils';\r\nimport {\r\n    INavigationPaginationDispatchProps,\r\n    INavigationPaginationOwnProps,\r\n    INavigationPaginationProps,\r\n    INavigationPaginationStateProps,\r\n    NavigationPagination,\r\n} from './NavigationPagination';\r\nimport {addPagination, changePage, removePagination} from './NavigationPaginationActions';\r\nimport {IPaginationState} from './NavigationPaginationReducers';\r\n\r\nconst mapStateToProps = (\r\n    state: IReactVaporState,\r\n    ownProps: INavigationPaginationOwnProps\r\n): INavigationPaginationStateProps => {\r\n    const item: IPaginationState = _.findWhere(state.paginationComposite, {id: ownProps.id});\r\n\r\n    return {\r\n        currentPage: item ? item.pageNb : 0,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: INavigationPaginationOwnProps\r\n): INavigationPaginationDispatchProps => ({\r\n    onRender: () => dispatch(addPagination(ownProps.id)),\r\n    onDestroy: () => dispatch(removePagination(ownProps.id)),\r\n    onPageClick: (pageNb: number) => dispatch(changePage(ownProps.id, pageNb)),\r\n});\r\n\r\nexport const NavigationPaginationConnected: React.ComponentClass<INavigationPaginationProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(NavigationPagination);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../../utils/ReduxUtils';\r\nimport {changePage} from '../pagination/NavigationPaginationActions';\r\nimport {IPaginationState} from '../pagination/NavigationPaginationReducers';\r\nimport {\r\n    INavigationPerPageDispatchProps,\r\n    INavigationPerPageOwnProps,\r\n    INavigationPerPageProps,\r\n    INavigationPerPageStateProps,\r\n    NavigationPerPage,\r\n    PER_PAGE_NUMBERS,\r\n} from './NavigationPerPage';\r\nimport {addPerPage, changePerPage, removePerPage} from './NavigationPerPageActions';\r\nimport {IPerPageState} from './NavigationPerPageReducers';\r\n\r\nconst mapStateToProps = (\r\n    state: IReactVaporState,\r\n    ownProps: INavigationPerPageOwnProps\r\n): INavigationPerPageStateProps => {\r\n    const perPageNumber: number[] = ownProps.perPageNumbers || PER_PAGE_NUMBERS;\r\n    const defaultInitialPosition: number = Math.ceil(perPageNumber.length / 2) - 1;\r\n    const item: IPerPageState = _.findWhere(state.perPageComposite, {id: ownProps.id});\r\n    const pagination: IPaginationState = _.findWhere(state.paginationComposite, {id: `pagination-${ownProps.id}`});\r\n    const initialPosition: number = !_.isUndefined(ownProps.initialPosition)\r\n        ? ownProps.initialPosition\r\n        : defaultInitialPosition;\r\n\r\n    return {\r\n        currentPerPage: item ? item.perPage : perPageNumber[initialPosition],\r\n        currentPage: pagination ? pagination.pageNb : 0,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: IDispatch,\r\n    ownProps: INavigationPerPageOwnProps\r\n): INavigationPerPageDispatchProps => ({\r\n    onRender: (perPageNb: number) => dispatch(addPerPage(ownProps.id, perPageNb)),\r\n    onDestroy: () => dispatch(removePerPage(ownProps.id)),\r\n    onPerPageClick: (perPageNb: number, oldPerPageNb: number, currentPage: number) => {\r\n        dispatch(changePerPage(ownProps.id, perPageNb));\r\n        dispatch(changePage(`pagination-${ownProps.id}`, Math.floor((currentPage * oldPerPageNb) / perPageNb)));\r\n    },\r\n});\r\n\r\nexport const NavigationPerPageConnected: React.ComponentClass<INavigationPerPageProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(NavigationPerPage);\r\n","import * as React from 'react';\r\n\r\nexport interface INavigationPerPageSelectOwnProps extends React.ClassAttributes<NavigationPerPageSelect> {\r\n    perPageNb: number;\r\n    selected: boolean;\r\n    onPerPageClick: (perPageNb: number) => void;\r\n}\r\n\r\nexport interface INavigationPerPageSelectProps extends INavigationPerPageSelectOwnProps {}\r\n\r\nexport class NavigationPerPageSelect extends React.Component<INavigationPerPageSelectProps, any> {\r\n    render() {\r\n        const selectClasses: string = 'flat-select-option' + (this.props.selected ? '' : ' selectable');\r\n        const spanClasses: string = 'enabled' + (this.props.selected ? ' selected-value state-selected' : '');\r\n\r\n        return (\r\n            <a className={selectClasses} onClick={() => this.props.onPerPageClick(this.props.perPageNb)}>\r\n                <span className={spanClasses}>{this.props.perPageNb}</span>\r\n            </a>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}