{"version":3,"sources":["webpack:///./src/components/actions/examples/ActionBarExamples.tsx?992c","webpack:///./src/components/actions/PrimaryAction.tsx?99b6","webpack:///./src/components/actions/LinkAction.tsx?6c14","webpack:///./src/components/actions/Action.tsx?aa30","webpack:///./src/components/actions/TriggerActionConnected.tsx?81e8","webpack:///./src/components/actions/PrimaryActionConnected.tsx?6039","webpack:///./src/components/actions/ActionBar.tsx?d37a","webpack:///./src/components/inlinePrompt/InlinePrompt.tsx?d979","webpack:///./src/components/actions/filters/ItemFilter.tsx?17bf","webpack:///./src/components/actions/SecondaryActions.tsx?a067","webpack:///./src/components/actions/ActionsDropdown.tsx?b330","webpack:///./src/components/dropdown/DropdownConnected.tsx?3b40","webpack:///./src/components/dropdown/Dropdown.tsx?7709","webpack:///./src/components/actions/ActionDropdownItem.tsx?d416","webpack:///./src/components/actions/ActionConstants.tsx?f96d"],"names":["render","actions","name","link","target","icon","primary","enabled","trigger","alert","hideDisabled","tooltip","tooltipPlacement","className","removeDefaultContainerClasses","extraContainerClasses","withSmallActions","action","this","props","withReduxState","parentId","actionClasses","simple","opts","children","href","undefined","rel","title","id","actionIcon","svgName","svgClass","inside","placement","Right","defaultProps","onTriggerAction","confirmData","requiresConfirmation","onTriggerConfirm","confirmLabel","onConfirm","description","cancel","buttonLabels","choices","confirm","confirmType","onCloseDropdown","disabled","onClick","TriggerActionConnected","dispatch","ownProps","userChoice","isOpened","TriggerAction","PrimaryActionConnected","mergeProps","Actions","primaryActions","filter","map","index","primaryAction","key","secondaryActions","secondaryActionsView","moreLabel","prompt","Prompt","length","options","Filter","itemFilter","label","itemFilterLabel","item","itemTooltipProps","onClear","clearItemFilter","crop","itemFilterCropLength","componentDidMount","onRender","componentWillUnmount","onDestroy","containerClasses","defaultClasses","isLoading","prefixContentElement","prefixContent","style","width","ActionBar","ActionBarConnected","state","actionBar","actionBars","prompts","indexOf","itemFilters","onClearItemFilter","InlinePromptConnected","onCancel","choice","type","opened","itemFilterText","itemFilterLength","Math","abs","substring","SecondaryActions","lastFilteredAction","filteredActions","separator","actionItems","actionsItems","ActionsDropdown","toggleContent","dropdownItems","DropdownConnected","dropdowns","onDocumentClick","handleClick","handleDocumentClick","e","dropdown","contains","componentWillMount","document","addEventListener","removeEventListener","dropdownClasses","open","ref","ActionDropdownItem","ACTION_SEPARATOR"],"mappings":"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","file":"assets/988.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {IActionOptions} from '../Action';\r\nimport {ActionBar} from '../ActionBar';\r\nimport {ACTION_SEPARATOR} from '../ActionConstants';\r\n\r\nexport class ActionBarExamples extends React.Component<any, any> {\r\n    render() {\r\n        const actions: IActionOptions[] = [\r\n            {\r\n                name: 'Link to Coveo',\r\n                link: 'http://coveo.com',\r\n                target: '_blank',\r\n                icon: 'exit',\r\n                primary: true,\r\n                enabled: true,\r\n            },\r\n            {\r\n                name: 'action1',\r\n                trigger: () => alert('Action 1 was triggered'),\r\n                enabled: true,\r\n            },\r\n            ACTION_SEPARATOR,\r\n            {\r\n                name: 'action2',\r\n                trigger: () => alert('Action 2 was triggered'),\r\n                enabled: true,\r\n            },\r\n            {\r\n                name: 'Link to Coveo (disabled)',\r\n                link: 'http://coveo.com',\r\n                target: '_blank',\r\n                icon: 'exit',\r\n                primary: true,\r\n                enabled: false,\r\n                hideDisabled: false,\r\n                tooltip: \"You cannot access Coveo's website at the moment.\",\r\n                tooltipPlacement: 'bottom',\r\n            },\r\n            {\r\n                name: 'visibly disabled',\r\n                trigger: () => alert('I will never be triggered'),\r\n                target: '_blank',\r\n                icon: 'open',\r\n                primary: true,\r\n                enabled: false,\r\n                hideDisabled: false,\r\n                tooltip: 'You cannot trigger me.',\r\n                tooltipPlacement: 'bottom',\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Action bar without actions</label>\r\n                    <ActionBar />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Action bar with actions</label>\r\n                    <ActionBar actions={actions} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Action bar with default classes turned off and extra classes\r\n                    </label>\r\n                    <ActionBar\r\n                        actions={actions}\r\n                        removeDefaultContainerClasses\r\n                        extraContainerClasses={['coveo-table-actions-container', 'p2']}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Action bar with small actions</label>\r\n                    <ActionBar actions={actions} withSmallActions />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {IBasicActionProps} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerAction, TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IPrimaryActionOwnProps extends React.ClassAttributes<PrimaryAction>, IBasicActionProps {\r\n    parentId?: string;\r\n}\r\n\r\nexport interface IPrimaryActionStateProps extends IReduxStatePossibleProps {}\r\n\r\nexport interface IPrimaryActionProps extends IPrimaryActionOwnProps, IPrimaryActionStateProps {}\r\n\r\nexport class PrimaryAction extends React.Component<IPrimaryActionProps, any> {\r\n    render() {\r\n        const action: JSX.Element = this.props.action.link ? (\r\n            <LinkAction action={this.props.action} />\r\n        ) : this.props.withReduxState ? (\r\n            <TriggerActionConnected action={this.props.action} parentId={this.props.parentId} />\r\n        ) : (\r\n            <TriggerAction action={this.props.action} />\r\n        );\r\n\r\n        return <div>{action}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Action, IBasicActionProps} from './Action';\r\n\r\nexport interface ILinkActionProps extends React.ClassAttributes<LinkAction>, IBasicActionProps {}\r\n\r\nexport class LinkAction extends React.Component<ILinkActionProps> {\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && !this.props.action.hideDisabled,\r\n            'inline-flex flex-center': !this.props.simple,\r\n        });\r\n        const opts: React.AllHTMLAttributes<HTMLAnchorElement> = {\r\n            children: <Action action={this.props.action} simple={this.props.simple} />,\r\n        };\r\n        const href = this.props.action.enabled ? this.props.action.link : undefined;\r\n        if (this.props.action.target) {\r\n            opts.target = this.props.action.enabled ? this.props.action.target : undefined;\r\n            opts.rel = 'noopener noreferrer';\r\n        }\r\n\r\n        return <a className={actionClasses} href={href} title={this.props.action.name} {...opts} />;\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IConfirmButtonLabel {\r\n    cancel: string;\r\n    confirm: string;\r\n}\r\n\r\nexport interface IConfirmData {\r\n    confirmType: string;\r\n    confirmLabel?: string;\r\n    buttonLabels?: IConfirmButtonLabel;\r\n}\r\n\r\nexport interface IBaseActionOptions {\r\n    enabled: boolean;\r\n    name?: string;\r\n    link?: string;\r\n    target?: string;\r\n    primary?: boolean;\r\n    tooltip?: string;\r\n    tooltipPlacement?: string;\r\n    hideDisabled?: boolean;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport interface IActionOptions extends IBaseActionOptions {\r\n    icon?: string;\r\n    iconClass?: string;\r\n    id?: string;\r\n    trigger?: () => void;\r\n    unrepeatable?: boolean;\r\n    callOnDoubleClick?: boolean;\r\n    requiresConfirmation?: IConfirmData;\r\n    separator?: boolean;\r\n    grouped?: boolean;\r\n    subActions?: IActionOptions[];\r\n    hidden?: boolean;\r\n}\r\n\r\nexport interface IBasicActionProps {\r\n    action: IActionOptions;\r\n    simple?: boolean;\r\n}\r\n\r\nexport interface IActionProps extends React.ClassAttributes<Action>, IBasicActionProps {}\r\n\r\nexport class Action extends React.Component<IActionProps, any> {\r\n    static defaultProps: Partial<IActionOptions> = {\r\n        hideDisabled: true,\r\n    };\r\n\r\n    render() {\r\n        const {icon, id, name, tooltipPlacement, tooltip} = this.props.action;\r\n        const actionIcon: JSX.Element = icon ? (\r\n            <Svg svgName={icon} className=\"action-icon\" svgClass=\"icon fill-medium-blue\" />\r\n        ) : (\r\n            <Svg svgName=\"more\" className=\"action-icon action-icon-more\" svgClass=\"icon icon-medium fill-medium-blue\" />\r\n        );\r\n        const inside: string | JSX.Element = this.props.simple ? (\r\n            name\r\n        ) : (\r\n            <span className=\"inline-flex flex-center\">\r\n                {actionIcon}\r\n                <span className=\"action-label\" data-trigger={id || name}>\r\n                    {name}\r\n                </span>\r\n            </span>\r\n        );\r\n        const placement: string = tooltipPlacement || TooltipPlacement.Right;\r\n        const wholeAction: JSX.Element = tooltip ? (\r\n            <Tooltip title={tooltip} placement={placement}>\r\n                {inside}\r\n            </Tooltip>\r\n        ) : (\r\n            <span>{inside}</span>\r\n        );\r\n\r\n        return wholeAction;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {closeDropdown} from '../dropdown/DropdownActions';\r\nimport {IUserChoice} from '../inlinePrompt/InlinePrompt';\r\nimport {addPrompt, removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {Action, IBasicActionProps, IConfirmData} from './Action';\r\n\r\nexport interface ITriggerActionOwnProps extends React.ClassAttributes<TriggerAction>, IBasicActionProps {\r\n    confirmLabel?: string;\r\n    parentId?: string;\r\n}\r\n\r\nexport interface ITriggerActionProps extends ITriggerActionOwnProps, Partial<ReturnType<typeof mapDispatchToProps>> {}\r\n\r\nexport const CONFIRM_LABEL: string = 'Are you sure?';\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: ITriggerActionOwnProps\r\n) => ({\r\n    onTriggerConfirm: (onClick: () => void, userChoice: IUserChoice, className: string) => {\r\n        dispatch(addPrompt(ownProps.parentId, {onClick, userChoice, isOpened: false, className}));\r\n    },\r\n    onConfirm: () => dispatch(removePrompt(ownProps.parentId)),\r\n    onCloseDropdown: () => dispatch(closeDropdown(ownProps.parentId)),\r\n});\r\n\r\nexport class TriggerAction extends React.Component<ITriggerActionProps, any> {\r\n    private onTriggerAction() {\r\n        const confirmData: IConfirmData = this.props.action.requiresConfirmation;\r\n        if (confirmData && this.props.onTriggerConfirm) {\r\n            const confirmLabel: string =\r\n                this.props.confirmLabel || this.props.action.requiresConfirmation.confirmLabel || CONFIRM_LABEL;\r\n            const icon: string = this.props.action.icon;\r\n            this.props.onTriggerConfirm(\r\n                () => {\r\n                    if (this.props.action.trigger) {\r\n                        this.props.action.trigger();\r\n                    }\r\n                    if (this.props.onConfirm) {\r\n                        this.props.onConfirm();\r\n                    }\r\n                },\r\n                {\r\n                    icon: icon,\r\n                    description: confirmLabel,\r\n                    cancel: confirmData.buttonLabels.cancel,\r\n                    choices: {\r\n                        confirm: confirmData.buttonLabels.confirm,\r\n                    },\r\n                },\r\n                confirmData.confirmType\r\n            );\r\n        } else {\r\n            if (this.props.action.trigger) {\r\n                this.props.action.trigger();\r\n                this.props.onCloseDropdown && this.props.onCloseDropdown();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && (this.props.simple || !this.props.action.hideDisabled),\r\n            disabled: !this.props.action.enabled && !this.props.simple,\r\n        });\r\n\r\n        return (\r\n            <span\r\n                onClick={() => this.props.action.enabled && this.onTriggerAction()}\r\n                className={actionClasses}\r\n                title={this.props.action.name}\r\n            >\r\n                <Action action={this.props.action} simple={this.props.simple} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport const TriggerActionConnected = connect(undefined, mapDispatchToProps)(TriggerAction);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IPrimaryActionProps, IPrimaryActionStateProps, PrimaryAction} from './PrimaryAction';\r\n\r\nconst mapStateToProps = (): IPrimaryActionStateProps => ({\r\n    withReduxState: true,\r\n});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport const PrimaryActionConnected: React.ComponentClass<IPrimaryActionProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(PrimaryAction);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Content, IContentProps} from '../content/Content';\r\nimport {InlinePromptConnected} from '../inlinePrompt/InlinePrompt';\r\nimport {removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {IPromptState} from '../inlinePrompt/InlinePromptReducers';\r\nimport {ITooltipProps} from '../tooltip/Tooltip';\r\nimport {IActionOptions} from './Action';\r\nimport {addActionBar, removeActionBar} from './ActionBarActions';\r\nimport {IActionBarState} from './ActionBarReducers';\r\nimport {ItemFilter} from './filters/ItemFilter';\r\nimport {addItemFilter, filterItems, removeItemFilter} from './filters/ItemFilterActions';\r\nimport {IItemFilterState} from './filters/ItemFilterReducers';\r\nimport {PrimaryAction} from './PrimaryAction';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\nimport {SecondaryActions} from './SecondaryActions';\r\n\r\nexport interface IActionBarProps {\r\n    id?: string;\r\n    itemFilterLabel?: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClearItemFilter?: () => void;\r\n    extraContainerClasses?: string[];\r\n    removeDefaultContainerClasses?: boolean;\r\n    withSmallActions?: boolean;\r\n    prefixContent?: IContentProps;\r\n    width?: number;\r\n    moreLabel?: string;\r\n    itemFilterCropLength?: number;\r\n}\r\n\r\nexport class ActionBar extends React.PureComponent<\r\n    IActionBarProps & Partial<ReturnType<typeof mapStateToProps>> & Partial<ReturnType<typeof mapDispatchToProps>>\r\n> {\r\n    static defaultProps: Partial<IActionBarProps> = {\r\n        extraContainerClasses: [],\r\n        withSmallActions: false,\r\n    };\r\n\r\n    static defaultClasses = [\r\n        'coveo-table-actions-container',\r\n        'mod-cancel-header-padding',\r\n        'mod-border-bottom',\r\n        'mod-align-header',\r\n    ];\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        const containerClasses = classNames(this.defaultClasses, this.props.extraContainerClasses, {\r\n            'mod-deactivate-pointer': !!this.props.isLoading,\r\n            'small-actions-container': this.props.withSmallActions,\r\n        });\r\n\r\n        const prefixContentElement = this.props.prefixContent ? <Content {...this.props.prefixContent} /> : null;\r\n\r\n        return (\r\n            <div className={containerClasses} style={this.props.width ? {width: this.props.width} : null}>\r\n                {prefixContentElement}\r\n                <this.Filter />\r\n                <this.Actions />\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private get defaultClasses(): string {\r\n        return classNames(this.props.removeDefaultContainerClasses ? '' : ActionBar.defaultClasses);\r\n    }\r\n\r\n    private Actions: React.FunctionComponent = () => {\r\n        const primaryActions =\r\n            this.props.actions\r\n                ?.filter(({primary}) => !!primary)\r\n                .map((action: IActionOptions, index: number) => {\r\n                    const primaryAction = this.props.withReduxState ? (\r\n                        <PrimaryActionConnected action={action} parentId={this.props.id} />\r\n                    ) : (\r\n                        <PrimaryAction action={action} />\r\n                    );\r\n                    return (\r\n                        <div className=\"action primary-action\" key={`primary-${index}`}>\r\n                            {primaryAction}\r\n                        </div>\r\n                    );\r\n                }) ?? [];\r\n\r\n        const secondaryActions: IActionOptions[] = this.props.actions?.filter(({primary}) => !primary) ?? [];\r\n\r\n        let secondaryActionsView: JSX.Element = null;\r\n        if (!_.isEmpty(secondaryActions)) {\r\n            secondaryActionsView = (\r\n                <SecondaryActions id={this.props.id} moreLabel={this.props.moreLabel} actions={secondaryActions} />\r\n            );\r\n        }\r\n\r\n        const actions = this.props.prompt ? (\r\n            <this.Prompt />\r\n        ) : (\r\n            <>\r\n                {primaryActions}\r\n                {secondaryActionsView}\r\n            </>\r\n        );\r\n\r\n        return primaryActions.length || secondaryActionsView || this.props.prompt ? (\r\n            <div className=\"coveo-table-actions\">{actions}</div>\r\n        ) : null;\r\n    };\r\n\r\n    private Prompt: React.FunctionComponent = () =>\r\n        this.props.prompt?.options ? (\r\n            <div className=\"prompt\">\r\n                <InlinePromptConnected {...this.props.prompt} />\r\n            </div>\r\n        ) : null;\r\n\r\n    private Filter: React.FunctionComponent = () =>\r\n        this.props.itemFilter ? (\r\n            <ItemFilter\r\n                label={this.props.itemFilterLabel}\r\n                item={this.props.itemFilter}\r\n                itemTooltipProps={this.props.itemTooltipProps}\r\n                onClear={this.props.clearItemFilter}\r\n                crop={this.props.itemFilterCropLength}\r\n            />\r\n        ) : null;\r\n}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IActionBarProps) => {\r\n    const actionBar: IActionBarState = _.findWhere(state.actionBars, {id: ownProps.id});\r\n    const prompt: IPromptState = _.find(state.prompts, ({id}) => id.indexOf(ownProps.id) >= 0);\r\n    const itemFilter: IItemFilterState = _.findWhere(state.itemFilters, {id: ownProps.id});\r\n\r\n    return {\r\n        withReduxState: true,\r\n        actions: actionBar?.actions.filter(({enabled, hideDisabled}) => enabled || hideDisabled === false) ?? [],\r\n        isLoading: actionBar?.isLoading ?? false,\r\n        prompt,\r\n        itemFilter: itemFilter?.item ?? '',\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IActionBarProps) => ({\r\n    onRender: () => {\r\n        dispatch(addActionBar(ownProps.id));\r\n        if (ownProps.itemFilterLabel) {\r\n            dispatch(addItemFilter(ownProps.id));\r\n        }\r\n    },\r\n    onDestroy: () => {\r\n        dispatch(removeActionBar(ownProps.id));\r\n        dispatch(removeItemFilter(ownProps.id));\r\n        dispatch(removePrompt(ownProps.id));\r\n    },\r\n    clearItemFilter: () => {\r\n        ownProps.onClearItemFilter?.();\r\n        dispatch(filterItems(ownProps.id, ''));\r\n    },\r\n});\r\n\r\nexport const ActionBarConnected = connect(mapStateToProps, mapDispatchToProps)(ActionBar);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {removePrompt} from './InlinePromptActions';\r\n\r\nexport interface IUserChoice {\r\n    description?: string;\r\n    cancel?: string;\r\n    choices?: Record<string, string>;\r\n    icon?: string;\r\n}\r\n\r\nexport interface IInlinePromptOptions {\r\n    onClick: () => void;\r\n    userChoice: IUserChoice;\r\n    isOpened?: boolean;\r\n    className?: string;\r\n}\r\n\r\nexport interface IInlinePromptProps {\r\n    id?: string;\r\n    options: IInlinePromptOptions;\r\n}\r\n\r\nexport const InlinePrompt: React.FunctionComponent<IInlinePromptProps &\r\n    Partial<ReturnType<typeof mapDispatchToProps>>> = ({options, onCancel}) => {\r\n    const icon: JSX.Element = options.userChoice.icon ? (\r\n        <Svg svgName={options.userChoice.icon} className=\"prompt-icon mr1\" svgClass=\"icon mod-2x fill-medium-blue\" />\r\n    ) : null;\r\n\r\n    const choices: JSX.Element[] = _.map(options.userChoice.choices, (choice: string) => (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn action mod-danger prompt-action enabled\"\r\n            onClick={options.onClick}\r\n            key={choice}\r\n        >\r\n            {choice}\r\n        </button>\r\n    ));\r\n\r\n    const description: JSX.Element = options.userChoice.description ? (\r\n        <span className=\"description\">{options.userChoice.description}</span>\r\n    ) : null;\r\n\r\n    const cancel: JSX.Element = options.userChoice.cancel ? (\r\n        <button type=\"button\" className=\"btn cancel prompt-action enabled\" onClick={onCancel}>\r\n            {options.userChoice.cancel}\r\n        </button>\r\n    ) : null;\r\n\r\n    const className = classNames(`prompt-${options.className ?? 'info'}`, {opened: options.isOpened});\r\n\r\n    return (\r\n        <span className={className}>\r\n            <span className=\"label-confirmation\">\r\n                {icon}\r\n                {description}\r\n            </span>\r\n            {choices}\r\n            {cancel}\r\n        </span>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IInlinePromptProps) => ({\r\n    onCancel: () => dispatch(removePrompt(ownProps.id)),\r\n});\r\n\r\nexport const InlinePromptConnected = connect(null, mapDispatchToProps)(InlinePrompt);\r\n","import * as React from 'react';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ITooltipProps, Tooltip} from '../../tooltip/Tooltip';\r\n\r\nexport interface IItemFilterProps extends React.ClassAttributes<ItemFilter> {\r\n    label: string;\r\n    item: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClear: () => void;\r\n    crop?: number;\r\n}\r\n\r\nexport const ELLIPSIS: string = '...';\r\n\r\nexport class ItemFilter extends React.Component<IItemFilterProps, any> {\r\n    render() {\r\n        let itemFilterText: string = this.props.item;\r\n        if (this.props.crop) {\r\n            const itemFilterLength: number = itemFilterText.length;\r\n\r\n            if (itemFilterLength > Math.abs(this.props.crop)) {\r\n                itemFilterText =\r\n                    this.props.crop > 0\r\n                        ? itemFilterText.substring(0, this.props.crop) + ELLIPSIS\r\n                        : ELLIPSIS + itemFilterText.substring(itemFilterLength + this.props.crop, itemFilterLength);\r\n            }\r\n        }\r\n\r\n        const itemFilter: JSX.Element = this.props.itemTooltipProps ? (\r\n            <Tooltip {...this.props.itemTooltipProps}>\r\n                <span className=\"item-filter-item\">{itemFilterText}</span>\r\n            </Tooltip>\r\n        ) : (\r\n            <span className=\"item-filter-item\">{itemFilterText}</span>\r\n        );\r\n\r\n        return (\r\n            <div className=\"coveo-table-actions item-filter\">\r\n                <span className=\"item-filter-label\">{this.props.label}: </span>\r\n                {itemFilter}\r\n                <button className=\"item-filter-clear\" onClick={() => this.props.onClear()}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-dark-blue\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {isEmpty} from 'underscore';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {ActionsDropdown} from './ActionsDropdown';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\n\r\nexport interface ISecondaryActionsProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport const SecondaryActions: React.FunctionComponent<ISecondaryActionsProps> = ({actions, id, moreLabel}) => {\r\n    let lastFilteredAction: IActionOptions = null;\r\n    const filteredActions = actions\r\n        // filter out disabled actions\r\n        .filter((action: IActionOptions) => action.separator || action.enabled || action.hideDisabled === false)\r\n        // Filter out all separator that are preceded by another separator\r\n        .filter((action: IActionOptions) => {\r\n            if (!action.separator || (action.separator && lastFilteredAction && !lastFilteredAction.separator)) {\r\n                lastFilteredAction = action;\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        // Filter out the last action if it's a separator\r\n        .filter((action: IActionOptions, index: number, actionItems: IActionOptions[]) => {\r\n            return index < actionItems.length - 1 || !action.separator;\r\n        });\r\n\r\n    if (isEmpty(filteredActions)) {\r\n        return null;\r\n    } else {\r\n        const actionsItems: JSX.Element =\r\n            filteredActions?.length === 1 ? (\r\n                <PrimaryActionConnected action={filteredActions[0]} parentId={id} />\r\n            ) : (\r\n                <ActionsDropdown moreLabel={moreLabel} actions={filteredActions} id={`${id}_actionsDropdown`} />\r\n            );\r\n        return <div className=\"dropdown action primary-action\">{actionsItems}</div>;\r\n    }\r\n};\r\n\r\n/**\r\n * @deprecated use SecondaryActions directly\r\n */\r\nexport const SecondaryActionsConnected = SecondaryActions;\r\n","import * as React from 'react';\r\n\r\nimport {DropdownConnected} from '../dropdown/DropdownConnected';\r\nimport {Svg} from '../svg/Svg';\r\nimport {IActionOptions} from './Action';\r\nimport {ActionDropdownItem} from './ActionDropdownItem';\r\n\r\nexport interface IActionsDropdownProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport const MORE_LABEL: string = 'More';\r\n\r\nexport const ActionsDropdown: React.FunctionComponent<IActionsDropdownProps> = ({actions, moreLabel, id}) => {\r\n    const actionItems = actions?.map((action: IActionOptions, index: number) => (\r\n        <ActionDropdownItem key={`action-${action.id ?? index}`} action={action} parentId={id} />\r\n    ));\r\n\r\n    const toggleContent: JSX.Element[] = [\r\n        <Svg\r\n            key=\"action-dropdown-toggle-icon\"\r\n            svgName=\"more\"\r\n            className=\"action-icon\"\r\n            svgClass=\"icon icon-medium fill-medium-blue\"\r\n        />,\r\n        <span key=\"action-dropdown-toggle-label\" className=\"action-label\" data-trigger=\"more\">\r\n            {moreLabel || MORE_LABEL}\r\n        </span>,\r\n    ];\r\n\r\n    return <DropdownConnected toggleContent={toggleContent} dropdownItems={actionItems} id={id} />;\r\n};\r\n\r\n/**\r\n * @deprecated use ActionsDropdown directly instead\r\n */\r\nexport const ActionsDropdownConnected = ActionsDropdown;\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {Dropdown, IDropdownDispatchProps, IDropdownOwnProps, IDropdownProps, IDropdownStateProps} from './Dropdown';\r\nimport {addDropdown, closeDropdown, removeDropdown, toggleDropdown} from './DropdownActions';\r\nimport {IDropdownState} from './DropdownReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IDropdownOwnProps): IDropdownStateProps => {\r\n    const item: IDropdownState = _.findWhere(state.dropdowns, {id: ownProps.id});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IDropdownOwnProps\r\n): IDropdownDispatchProps => ({\r\n    onRender: () => dispatch(addDropdown(ownProps.id)),\r\n    onDestroy: () => dispatch(removeDropdown(ownProps.id)),\r\n    onClick: () => dispatch(toggleDropdown(ownProps.id)),\r\n    onDocumentClick: () => dispatch(closeDropdown(ownProps.id)),\r\n});\r\n\r\nexport const DropdownConnected: React.ComponentClass<IDropdownProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Dropdown);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nexport interface IDropdownOwnProps extends React.ClassAttributes<Dropdown> {\r\n    id?: string;\r\n    toggleContent: JSX.Element[];\r\n    dropdownItems: JSX.Element[];\r\n    className?: string;\r\n}\r\n\r\nexport interface IDropdownStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IDropdownDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onClick?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IDropdownProps extends IDropdownOwnProps, IDropdownStateProps, IDropdownDispatchProps {}\r\n\r\nexport class Dropdown extends React.Component<IDropdownProps, any> {\r\n    private dropdown: HTMLDivElement;\r\n\r\n    private handleClick = () => {\r\n        if (this.props.onClick) {\r\n            this.props.onClick();\r\n        }\r\n    };\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.dropdown);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dropdownClasses = classNames('dropdown', {open: this.props.isOpened}, this.props.className);\r\n\r\n        return (\r\n            <div className={dropdownClasses} ref={(dropdown: HTMLDivElement) => (this.dropdown = dropdown)}>\r\n                <span className=\"dropdown-toggle inline-flex flex-center\" onClick={() => this.handleClick()}>\r\n                    {this.props.toggleContent}\r\n                </span>\r\n                <ul className=\"dropdown-menu normal-height\">{this.props.dropdownItems}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IActionDropdownItemProps {\r\n    action: IActionOptions;\r\n    parentId?: string;\r\n}\r\n\r\nexport const ActionDropdownItem: React.FunctionComponent<IActionDropdownItemProps> = ({parentId, action}) => {\r\n    if (action.separator) {\r\n        return <li className=\"divider\" />;\r\n    }\r\n\r\n    if (action.link) {\r\n        return (\r\n            <li>\r\n                <LinkAction action={action} simple={true} />\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <TriggerActionConnected action={action} simple={true} parentId={parentId} />\r\n        </li>\r\n    );\r\n};\r\n","import {IActionOptions} from './Action';\r\n\r\nexport const ACTION_SEPARATOR: IActionOptions = {\r\n    separator: true,\r\n    enabled: true,\r\n};\r\n"],"sourceRoot":""}