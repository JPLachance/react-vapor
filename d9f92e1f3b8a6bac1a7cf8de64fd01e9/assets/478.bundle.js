(window.webpackJsonp=window.webpackJsonp||[]).push([[478],{1583:function(n,t,e){"use strict";e.r(t),t.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\nimport * as React from 'react';\r\n\r\nimport {ItemBox} from '../../itemBox/ItemBox';\r\nimport {IListBoxProps, ListBox} from '../ListBox';\r\n\r\ndescribe('ListBox', () => {\r\n    let listBoxComponent: ReactWrapper<IListBoxProps, any>;\r\n\r\n    const spyOnOptionClick = jasmine.createSpy('onOptionClick');\r\n\r\n    const defaultProps: IListBoxProps = {\r\n        items: [\r\n            {value: 'test'},\r\n            {value: 'test1', onOptionClick: spyOnOptionClick},\r\n            {value: 'test2'},\r\n            {value: 'test3'},\r\n            {value: 'test4'},\r\n            {value: 'test5'},\r\n            {value: 'test6'},\r\n            {value: 'test7'},\r\n        ],\r\n    };\r\n\r\n    it('should render without errors', () => {\r\n        expect(() => {\r\n            shallow(<ListBox {...defaultProps} />);\r\n        }).not.toThrow();\r\n    });\r\n\r\n    describe('<BoxItem /> with default props', () => {\r\n        beforeEach(() => {\r\n            listBoxComponent = mount(<ListBox {...defaultProps} />, {attachTo: document.getElementById('App')});\r\n        });\r\n\r\n        afterEach(() => {\r\n            if (listBoxComponent && listBoxComponent.exists()) {\r\n                listBoxComponent.detach();\r\n            }\r\n        });\r\n\r\n        it('should render with the box-item class', () => {\r\n            expect(listBoxComponent.find(ItemBox).length).toBe(defaultProps.items.length);\r\n        });\r\n\r\n        it('should not throw on unmount', () => {\r\n            expect(() => listBoxComponent.unmount()).not.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('<BoxItem /> with custom props', () => {\r\n        const renderListBox = (props: Partial<IListBoxProps> = {}) => {\r\n            listBoxComponent = mount(<ListBox {...defaultProps} {...props} />, {\r\n                attachTo: document.getElementById('App'),\r\n            });\r\n        };\r\n\r\n        afterEach(() => {\r\n            if (listBoxComponent && listBoxComponent.exists()) {\r\n                listBoxComponent.detach();\r\n            }\r\n        });\r\n\r\n        it('should call onRender on mount', () => {\r\n            const onRenderSpy = jasmine.createSpy('onRender');\r\n            renderListBox({\r\n                onRender: onRenderSpy,\r\n            });\r\n\r\n            expect(onRenderSpy).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should call onRender on mount', () => {\r\n            const onDestroySpy = jasmine.createSpy('onDestroy');\r\n            renderListBox({\r\n                onDestroy: onDestroySpy,\r\n            });\r\n\r\n            expect(onDestroySpy).not.toHaveBeenCalled();\r\n\r\n            listBoxComponent.unmount();\r\n            expect(onDestroySpy).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should render items with events on onOptionClick on the item', () => {\r\n            renderListBox();\r\n\r\n            (listBoxComponent\r\n                .find(ItemBox)\r\n                .at(1)\r\n                .instance() as any).handleOnOptionClick({target: 'target'});\r\n            expect(spyOnOptionClick).toHaveBeenCalled();\r\n        });\r\n\r\n        it('should render items with events on onOptionClick', () => {\r\n            const onOptionClick: jasmine.Spy = jasmine.createSpy('onOptionClick');\r\n            renderListBox({\r\n                onOptionClick,\r\n            });\r\n\r\n            (listBoxComponent\r\n                .find(ItemBox)\r\n                .first()\r\n                .instance() as any).handleOnOptionClick({target: 'target'});\r\n            expect(onOptionClick).toHaveBeenCalled();\r\n        });\r\n\r\n        it('should not trigger onOptionClick if the clicked item is disabled', () => {\r\n            const onOptionClick: jasmine.Spy = jasmine.createSpy('onOptionClick');\r\n            renderListBox({\r\n                items: [{value: 'test', disabled: true}],\r\n                onOptionClick,\r\n            });\r\n\r\n            (listBoxComponent.find(ItemBox).instance() as any).handleOnOptionClick({target: 'target'});\r\n            expect(onOptionClick).not.toHaveBeenCalled();\r\n        });\r\n\r\n        it('should show the no result <BoxItem/> if the items array is empty', () => {\r\n            renderListBox({\r\n                items: [],\r\n            });\r\n\r\n            expect(listBoxComponent.find(ItemBox).props().value).toBe(ListBox.defaultProps.noResultItem.value);\r\n        });\r\n\r\n        it('should show the no result <BoxItem/> if all items are hidden', () => {\r\n            renderListBox({\r\n                items: [\r\n                    {value: 'test', hidden: true},\r\n                    {value: 'test 1', hidden: true},\r\n                ],\r\n            });\r\n\r\n            expect(listBoxComponent.find(ItemBox).props().value).toBe(ListBox.defaultProps.noResultItem.value);\r\n        });\r\n\r\n        it('should not show the no result <BoxItem/> if one item is not hidden', () => {\r\n            renderListBox({\r\n                items: [\r\n                    {value: 'test', hidden: false},\r\n                    {value: 'test 1', hidden: true},\r\n                ],\r\n            });\r\n\r\n            expect(listBoxComponent.find(ItemBox).props().value).not.toBe(ListBox.defaultProps.noResultItem.value);\r\n        });\r\n\r\n        it('should wrap the items using the result from the \"wrapItems\" prop', () => {\r\n            const wrapItems = (items: React.ReactNode) => <div className=\"wrapping-those-items-real-hard\">{items}</div>;\r\n            const list = shallow(<ListBox {...defaultProps} wrapItems={wrapItems} />);\r\n            expect(\r\n                list\r\n                    .childAt(0)\r\n                    .childAt(0)\r\n                    .hasClass('wrapping-those-items-real-hard')\r\n            ).toBe(true);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=478.bundle.js.map