{"version":3,"sources":["webpack:///./src/hoc/withDirty/withDirtySelectors.ts?5777","webpack:///./src/components/unsavedChangeModal/UnsavedChangeModalProvider.tsx?2c3b","webpack:///./src/components/modal/examples/modalWindowExamples.tsx?bf20","webpack:///./src/components/input/Input.tsx?1d15","webpack:///./src/components/input/Label.tsx?dafb","webpack:///./src/utils/PropsToOmitUtils.ts?e979","webpack:///./src/components/modal/ModalHeader.tsx?b2a3","webpack:///./src/components/modal/ModalBody.tsx?936a","webpack:///./src/components/modal/ModalComposite.tsx?bd1b","webpack:///./src/components/modal/ModalCompositeConnected.tsx?5339","webpack:///./src/components/modal/ModalHeaderConnected.tsx?0096","webpack:///./node_modules/lorem-ipsum/lib/generator.js","webpack:///./node_modules/lorem-ipsum/lib/dictionary.js","webpack:///./src/components/modal/loading/ModalLoading.tsx?542a"],"names":["WithDirtySelectors","getIsDirty","state","props","dirtyComponents","id","defaultModalClasses","UnsavedChangesModalProvider","isDirty","children","modalTitle","className","unsavedChangesDescription","confirmButtonText","isOpen","setIsOpen","confirm","setConfirm","close","promptBefore","callbackOnDiscard","ModalComposite","title","classes","modalHeaderClasses","modalBodyClasses","modalBodyChildren","modalFooterChildren","Button","small","name","onClick","primary","autoFocus","onClose","ModalWindowExamples","Section","ModalCompositeExampleConnected","ModalWithDirtyChangeDiscardPrevention","ModalLoadingExample","description","mapDispatchToProps","dispatch","open","toggleIsDirty","toggle","handleClose","modalId","level","ModalCompositeConnected","modalHeaderChildren","Tooltip","Svg","svgName","svgClass","count","docLink","url","tooltip","shouldCloseOnEsc","shouldCloseOnOverlayClick","onAfterOpen","alert","closeCallback","ownProps","Input","labelTitle","onChange","i","validateShouldNavigate","ModalLoading","openOnMount","validatedInputTypes","inputPropsToOmit","valid","componentWillMount","this","onRender","validOnMount","validateOnMount","validate","defaultValue","disabledOnMount","componentWillUnmount","onDestroy","componentDidUpdate","prevProps","value","innerInput","reset","getInnerValue","setState","handleBlur","onBlur","handleChange","validOnChange","validateOnChange","handleClick","e","handleKeyUp","event","onKeyUp","getLabel","labelProps","key","htmlFor","render","type","innerInputClasses","invalid","inputElements","ref","min","minimum","max","maximum","input","disabled","disabledTooltip","placement","Right","defaultProps","required","validMessage","invalidMessage","attributes","internalComponentPropsToOmit","PropsToOmitUtils","internal","componentDidMount","canClose","lastOpened","docLinkProps","svg","closeComponent","text","documentationLink","modalPropsToOmit","onRequestClose","preventDefault","stopPropagation","getModalBody","getModalFooter","modalFooterClasses","getParent","document","querySelector","MODAL_ROOT","reactModalprops","isOpened","base","afterOpen","beforeClose","overlayClassName","layer","closeTimeoutMS","closeTimeout","contentRef","parentSelector","onAfterClose","getModalHeader","basicProps","withReduxState","MODAL_TIMEOUT","modals","some","modal","openModals","indexOf","mergeProps","ModalHeaderConnected","undefined","simplePluralize","string","length","module","exports","options","arguments","units","sentenceLowerBound","sentenceUpperBound","paragraphLowerBound","paragraphUpperBound","format","words","random","Math","suffix","isNode","isReactNative","product","navigator","isWindows","process","platform","randomInteger","floor","randomWord","randomSentence","lowerBound","upperBound","sentence","bounds","slice","charAt","toUpperCase","randomParagraph","paragraph","toLowerCase","openingTag","closingTag","nextString","pos","fullContent","isPrompt"],"mappings":"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","file":"assets/962.bundle.js","sourcesContent":["import * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\n\r\nconst getIsDirty = (state: IReactVaporState, props: {id: string}): boolean => {\r\n    return _.contains(state.dirtyComponents || [], props.id);\r\n};\r\n\r\nexport const WithDirtySelectors = {\r\n    getIsDirty,\r\n};\r\n","import * as React from 'react';\nimport {Button} from '../button/Button';\nimport {ModalComposite} from '../modal/ModalComposite';\n\nconst defaultModalTitle = 'Unsaved Changes';\nconst defaultModalClasses = ['mod-prompt', 'mod-fade-in-scale'];\nconst defaultModalDescription =\n    'Are you sure you want to leave this page without saving? All unsaved changes will be lost.';\nconst defaultConfirmButtonText = 'Exit without applying changes';\n\nexport interface IUnsavedChangesModalProviderProps {\n    isDirty: boolean;\n    modalTitle?: string;\n    className?: string[];\n    children: (props: {promptBefore: (callbackOnDiscard: () => any) => boolean}) => React.ReactNode;\n    unsavedChangesDescription?: string;\n    confirmButtonText?: string;\n}\n\nexport const UnsavedChangesModalProvider: React.FunctionComponent<IUnsavedChangesModalProviderProps> = ({\n    isDirty,\n    children,\n    modalTitle = defaultModalTitle,\n    className = defaultModalClasses,\n    unsavedChangesDescription = defaultModalDescription,\n    confirmButtonText = defaultConfirmButtonText,\n}) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [confirm, setConfirm] = React.useState(null);\n\n    const promptBefore = (callbackOnDiscard: () => any): boolean => {\n        if (isDirty) {\n            setIsOpen(true);\n            setConfirm(() => () => {\n                callbackOnDiscard();\n                close();\n            });\n            return false;\n        }\n        return true;\n    };\n\n    const close = () => {\n        setIsOpen(false);\n    };\n\n    return (\n        <>\n            {children({promptBefore})}\n            <ModalComposite\n                title={modalTitle}\n                classes={className}\n                modalHeaderClasses={['mod-confirmation']}\n                modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                modalBodyChildren={<div>{unsavedChangesDescription}</div>}\n                modalFooterChildren={\n                    <>\n                        <Button small name={confirmButtonText} onClick={confirm} primary />\n                        <Button small autoFocus name=\"Cancel\" onClick={close} />\n                    </>\n                }\n                isOpen={isOpen}\n                onClose={close}\n            />\n        </>\n    );\n};\n","import * as loremIpsum from 'lorem-ipsum';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport * as _ from 'underscore';\n\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\nimport {WithDirtyActions} from '../../../hoc/withDirty/withDirtyActions';\nimport {WithDirtySelectors} from '../../../hoc/withDirty/withDirtySelectors';\nimport {IReactVaporState} from '../../../ReactVapor';\nimport {IDispatch} from '../../../utils/ReduxUtils';\nimport {Button} from '../../button/Button';\nimport {Input} from '../../input/Input';\nimport {Section} from '../../section/Section';\nimport {Svg} from '../../svg/Svg';\nimport {Tooltip} from '../../tooltip/Tooltip';\nimport {UnsavedChangesModalProvider} from '../../unsavedChangeModal/UnsavedChangeModalProvider';\nimport {ModalLoading} from '../loading/ModalLoading';\nimport {closeModal, openModal} from '../ModalActions';\nimport {ModalCompositeConnected} from '../ModalCompositeConnected';\n\nexport interface ModalConnectedExampleProps {\n    id?: string;\n    open?: (id: string) => void;\n    close?: (id: string) => void;\n    isDirty?: boolean;\n    toggleIsDirty?: (id: string, dirty: boolean) => void;\n}\n\nexport const ModalWindowExamples: ExampleComponent = () => (\n    <Section title=\"Modal Window Examples\">\n        <ModalCompositeExampleConnected />\n        <ModalWithDirtyChangeDiscardPrevention id=\"UnsavedChangeModal\" />\n        <ModalLoadingExample />\n    </Section>\n);\n\nModalWindowExamples.title = 'Modal Window';\nModalWindowExamples.description =\n    'Modal windows appear in front of the main page and disable it while they are visible. They act as a zoom in on an element of the main page that allows additionnal interaction or configuration. They make possible for users to focus on their content whilst avoiding leaving the context from which they have been called.';\n\n// start-print\n\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\n    open: (id: string) => dispatch(openModal(id)),\n    close: (id: string) => dispatch(closeModal(id)),\n    toggleIsDirty: (id: string, isDirty: boolean) => dispatch(WithDirtyActions.toggle(id, isDirty)),\n});\n\nconst ModalExampleDisconnected: React.FunctionComponent<ModalConnectedExampleProps> = ({\n    open,\n    close,\n    toggleIsDirty,\n}) => {\n    const handleClose = (id: string) => {\n        close(id);\n        toggleIsDirty(id, false);\n    };\n\n    const modalId = 'Modal-Connected-#1';\n    return (\n        <Section level={2} title=\"Modals connected to the redux store\">\n            <Section level={3} title=\"A simple modal window connected\">\n                <Button\n                    className=\"btn\"\n                    onClick={() => {\n                        return open(modalId);\n                    }}\n                >\n                    Open Modal\n                </Button>\n\n                <ModalCompositeConnected\n                    id={modalId}\n                    title=\"Modal composite\"\n                    modalHeaderChildren={\n                        <Tooltip title=\"A tooltip for the title\">\n                            <Svg svgName=\"help\" className=\"icon mod-2x ml1\" svgClass=\"fill-orange\" />\n                        </Tooltip>\n                    }\n                    modalBodyChildren={<div className=\"mt2\">{loremIpsum({count: 10})}</div>}\n                    modalFooterChildren={\n                        <Button className=\"btn\" onClick={() => handleClose(modalId)}>\n                            Close\n                        </Button>\n                    }\n                    modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                />\n            </Section>\n\n            <Section level={3} title=\"A modal with additionnal configuration props\">\n                <Button className=\"btn\" onClick={() => open('example-4')}>\n                    Open Modal\n                </Button>\n                <ModalCompositeConnected\n                    id=\"example-4\"\n                    title=\"Modal with addtional ReactModal props\"\n                    classes={['mod-fade-in-scale']}\n                    modalBodyChildren=\"This modal only closes by using the close button or the X.\"\n                    modalFooterChildren={\n                        <Button className=\"btn\" onClick={() => handleClose('example-4')}>\n                            Close\n                        </Button>\n                    }\n                    modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                    docLink={{url: 'https://www.coveo.com', tooltip: {title: 'Go to coveo.com'}}}\n                    shouldCloseOnEsc={false}\n                    shouldCloseOnOverlayClick={false}\n                    onAfterOpen={() => alert('The modal content has mounted and is ready to open.')}\n                    closeCallback={() => alert('The modal has closed.')}\n                />\n            </Section>\n        </Section>\n    );\n};\n\nconst ModalCompositeExampleConnected = connect(null, mapDispatchToProps)(ModalExampleDisconnected);\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: any) => ({\n    isDirty: WithDirtySelectors.getIsDirty(state, {id: ownProps.id}),\n});\n\nconst ModalWithDirtyChangeDiscardPreventionDisconnected: React.FunctionComponent<ModalConnectedExampleProps> = ({\n    id,\n    close,\n    open,\n    toggleIsDirty,\n    isDirty,\n}) => {\n    const handleClose = () => {\n        close(id);\n        toggleIsDirty(id, false);\n    };\n\n    return (\n        <Section level={3} title=\"A modal implemented with the <UnsavedChangesModalProvider/>\">\n            <Button className=\"btn\" onClick={() => open(id)}>\n                Open Modal\n            </Button>\n            <UnsavedChangesModalProvider isDirty={isDirty}>\n                {({promptBefore}) => (\n                    <ModalCompositeConnected\n                        id={id}\n                        title=\"A modal with a dirty change discard prevention\"\n                        classes={['mod-fade-in-scale']}\n                        modalBodyChildren={\n                            <div className=\"mt2\">\n                                <div className=\"mb2\">\n                                    <Input\n                                        id=\"input\"\n                                        labelTitle=\"Try to close me with dirty changes.\"\n                                        onChange={(i) => toggleIsDirty(id, _.isEmpty(i) ? false : true)}\n                                    />\n                                </div>\n                                {loremIpsum({count: 10})}\n                            </div>\n                        }\n                        modalFooterChildren={\n                            <Button className=\"btn\" onClick={() => promptBefore(() => handleClose()) && handleClose()}>\n                                Close\n                            </Button>\n                        }\n                        validateShouldNavigate={() => promptBefore(() => handleClose())}\n                        modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                        docLink={{url: 'https://www.coveo.com', tooltip: {title: 'Go to coveo.com'}}}\n                    />\n                )}\n            </UnsavedChangesModalProvider>\n        </Section>\n    );\n};\n\nconst ModalWithDirtyChangeDiscardPrevention = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ModalWithDirtyChangeDiscardPreventionDisconnected);\n\nconst ModalLoadingExampleDisconnected: React.FunctionComponent<{open: (id: string) => void}> = ({open}) => {\n    const loadingModalExampleId = 'Loading-modal-example';\n    return (\n        <Section level={3} title=\"A loading modal\">\n            <Button className=\"btn\" onClick={() => open(loadingModalExampleId)}>\n                Open Modal\n            </Button>\n            <ModalLoading id={loadingModalExampleId} title={'my loading title'} openOnMount={false} />\n        </Section>\n    );\n};\n\nconst ModalLoadingExample = connect(null, mapDispatchToProps)(ModalLoadingExampleDisconnected);\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\nimport {contains, isUndefined, uniqueId} from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {PropsToOmitUtils} from '../../utils/PropsToOmitUtils';\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IInputState} from './InputReducers';\r\nimport {ILabelProps, Label} from './Label';\r\n\r\nconst validatedInputTypes: string[] = ['number', 'text', 'password'];\r\n\r\ntype IInputNativeTagOwnProps = Omit<\r\n    React.AllHTMLAttributes<HTMLInputElement>,\r\n    'defaultValue' | 'onClick' | 'onChange' | 'onBlur' | 'value'\r\n>;\r\n\r\nexport interface IInputAdditionalOwnProps {\r\n    id?: string;\r\n    classes?: IClassName;\r\n    innerInputClasses?: IClassName;\r\n    validate?: (value: any) => boolean;\r\n    labelTitle?: React.ReactNode;\r\n    labelProps?: ILabelProps;\r\n    validateOnChange?: boolean;\r\n    disabledOnMount?: boolean;\r\n    validateOnMount?: boolean;\r\n    disabledTooltip?: string;\r\n    minimum?: number /* @deprecated use min instead */;\r\n    maximum?: number /* @deprecated use max instead */;\r\n    onBlur?: (value: string) => void;\r\n    defaultValue?: string;\r\n}\r\n\r\nexport interface IInputNativeTagStateProps {\r\n    value?: string;\r\n    checked?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IInputAdditionalStateProps {\r\n    valid?: boolean;\r\n    indeterminate?: boolean;\r\n}\r\n\r\nexport interface IInputStateProps extends IInputNativeTagStateProps, IInputAdditionalStateProps {}\r\n\r\nexport interface IInputDispatchProps {\r\n    onDestroy?: () => void;\r\n    onRender?: (value?: string, valid?: boolean, disabled?: boolean) => void;\r\n    onChange?: (value?: string, valid?: boolean) => void;\r\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nconst inputPropsToOmit = keys<IInputAdditionalOwnProps & IInputAdditionalStateProps & IInputDispatchProps>();\r\n\r\nexport interface IInputOwnProps extends IInputAdditionalOwnProps, IInputNativeTagOwnProps {}\r\n\r\nexport interface IInputProps extends IInputOwnProps, Partial<IInputStateProps>, Partial<IInputDispatchProps> {}\r\n\r\nexport interface IInputComponentState {\r\n    valid: boolean;\r\n}\r\n\r\nexport class Input extends React.Component<IInputProps, IInputComponentState> {\r\n    private innerInput: HTMLInputElement;\r\n\r\n    static defaultProps: Partial<IInputProps> = {\r\n        id: uniqueId('input'),\r\n        type: 'text',\r\n        valid: true,\r\n        labelTitle: '',\r\n        required: true,\r\n    };\r\n\r\n    constructor(props: IInputProps, state: IInputState) {\r\n        super(props, state);\r\n        this.state = {\r\n            valid: this.props.valid,\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            // undefined validOnMount will default to true in the state\r\n            const validOnMount =\r\n                this.props.validateOnMount && this.props.validate && this.props.validate(this.props.defaultValue || '');\r\n\r\n            this.props.onRender(this.props.defaultValue, validOnMount, this.props.disabledOnMount);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IInputProps) {\r\n        if (this.props.valid !== prevProps.valid) {\r\n            this.validate();\r\n        }\r\n\r\n        if (prevProps.value !== this.props.value && this.innerInput) {\r\n            this.innerInput.value = this.props.value;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.innerInput.value = '';\r\n    }\r\n\r\n    getInnerValue(): string {\r\n        return (this.innerInput && this.innerInput.value) || '';\r\n    }\r\n\r\n    validate() {\r\n        this.setState({\r\n            valid: this.props.valid && !(this.props.validate && !this.props.validate(this.getInnerValue())),\r\n        });\r\n    }\r\n\r\n    private handleBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(this.getInnerValue());\r\n        }\r\n    }\r\n\r\n    private handleChange() {\r\n        if (this.props.onChange) {\r\n            const validOnChange =\r\n                this.props.validateOnChange && this.props.validate && this.props.validate(this.getInnerValue());\r\n            this.props.onChange(this.getInnerValue(), validOnChange);\r\n        }\r\n    }\r\n\r\n    private handleClick(e: React.MouseEvent<HTMLElement>) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n\r\n    private handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(event);\r\n        }\r\n    }\r\n\r\n    private getLabel(): React.ReactNode {\r\n        const {labelProps, labelTitle} = this.props;\r\n        if (typeof labelTitle === 'string') {\r\n            return labelTitle || this.props.validate ? (\r\n                <Label key={this.props.id + 'label'} htmlFor={this.props.id} {...labelProps}>\r\n                    {labelTitle}\r\n                </Label>\r\n            ) : null;\r\n        } else {\r\n            return labelTitle;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames(\r\n            'input-wrapper validate',\r\n            {\r\n                'input-field': contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.classes\r\n        );\r\n        const innerInputClasses = classNames(\r\n            {\r\n                invalid: !this.state.valid && contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.innerInputClasses\r\n        );\r\n\r\n        const inputElements = [\r\n            <input\r\n                key={this.props.id}\r\n                id={this.props.id}\r\n                className={innerInputClasses}\r\n                defaultValue={!isUndefined(this.props.value) ? this.props.value : this.props.defaultValue}\r\n                ref={(innerInput: HTMLInputElement) => (this.innerInput = innerInput)}\r\n                onBlur={() => this.handleBlur()}\r\n                onChange={() => this.handleChange()}\r\n                onKeyUp={(event: React.KeyboardEvent<HTMLInputElement>) => this.handleKeyUp(event)}\r\n                min={this.props.minimum}\r\n                max={this.props.maximum}\r\n                {..._.omit(this.props, [...PropsToOmitUtils.input, ...inputPropsToOmit])}\r\n            />,\r\n            this.getLabel(),\r\n            this.props.children,\r\n        ];\r\n\r\n        return this.props.disabled && this.props.disabledTooltip ? (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                <Tooltip title={this.props.disabledTooltip} placement={TooltipPlacement.Right}>\r\n                    {inputElements}\r\n                </Tooltip>\r\n            </div>\r\n        ) : (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                {inputElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ILabelProps {\r\n    type?: string;\r\n    classes?: string[];\r\n    validMessage?: string;\r\n    invalidMessage?: string;\r\n}\r\n\r\nexport class Label extends React.Component<ILabelProps & React.HTMLProps<HTMLLabelElement>, any> {\r\n    render() {\r\n        const classes = classNames(this.props.classes);\r\n        const {validMessage, invalidMessage, children, ...attributes} = this.props;\r\n        return (\r\n            <label\r\n                className={classes}\r\n                data-valid-message={validMessage}\r\n                data-invalid-message={invalidMessage}\r\n                {...attributes}\r\n            >\r\n                {children}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","const internalComponentPropsToOmit: string[] = ['children', 'dangerouslySetInnerHTML'];\r\n\r\n// We omit those props for the input native tag because those props are reserved for the Input component and\r\n// to stay compatible with the old interface\r\nconst inputTagPropsToOmit: string[] = [\r\n    ...internalComponentPropsToOmit,\r\n    'defaultValue',\r\n    'onClick',\r\n    'onChange',\r\n    'onBlur',\r\n    'value',\r\n    'valid',\r\n];\r\n\r\nexport const PropsToOmitUtils = {\r\n    internal: internalComponentPropsToOmit,\r\n    input: inputTagPropsToOmit,\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {ILinkSvgProps} from '../svg/LinkSvg';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Title} from '../title/Title';\r\n\r\nexport interface IModalHeaderOwnProps {\r\n    id?: string;\r\n    title: string;\r\n    classes?: IClassName;\r\n    docLink?: ILinkSvgProps;\r\n}\r\n\r\nexport interface IModalHeaderStateProps {\r\n    lastOpened: boolean;\r\n}\r\n\r\nexport interface IModalHeaderDispatchProps {\r\n    onClose: () => void;\r\n}\r\n\r\nexport interface IModalHeaderProps\r\n    extends IModalHeaderOwnProps,\r\n        Partial<IModalHeaderStateProps>,\r\n        Partial<IModalHeaderDispatchProps> {}\r\n\r\nexport class ModalHeader extends React.Component<IModalHeaderProps, {}> {\r\n    static defaultProps: Partial<IModalHeaderProps> = {\r\n        lastOpened: true,\r\n    };\r\n\r\n    private canClose: boolean;\r\n\r\n    componentDidMount() {\r\n        this.canClose = this.props.lastOpened;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.canClose = false;\r\n        _.defer(() => (this.canClose = this.props.lastOpened));\r\n    }\r\n\r\n    close() {\r\n        if (this.canClose) {\r\n            this.props.onClose?.();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames('modal-header', this.props.classes);\r\n        const docLinkProps: ILinkSvgProps = this.props.docLink\r\n            ? {\r\n                  svg: {\r\n                      svgName: 'help',\r\n                      svgClass: 'fill-orange icon mod-20',\r\n                  },\r\n                  ...this.props.docLink,\r\n              }\r\n            : null;\r\n\r\n        let closeComponent: JSX.Element = null;\r\n        if (this.props.onClose) {\r\n            closeComponent = (\r\n                <span\r\n                    className=\"small-close\"\r\n                    onClick={() => {\r\n                        this.close();\r\n                    }}\r\n                >\r\n                    <Svg svgName=\"close\" className=\"icon mod-lg fill-pure-white\" />\r\n                </span>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <header className={classes}>\r\n                <div className=\"truncate\">\r\n                    <Title text={this.props.title} documentationLink={docLinkProps} classes={['regular']} />\r\n                </div>\r\n                {this.props.children}\r\n                {closeComponent}\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\n\r\nexport interface IModalBodyProps {\r\n    classes?: IClassName;\r\n}\r\n\r\nexport class ModalBody extends React.Component<IModalBodyProps, {}> {\r\n    render() {\r\n        const classes = classNames('modal-body relative', this.props.classes);\r\n\r\n        return <div className={classes}>{this.props.children}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactModal from 'react-modal';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Defaults} from '../../Defaults';\r\nimport {IWithDirtyProps} from '../../hoc/withDirty/withDirty';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {IModalDispatchProps, IModalOwnProps, IModalStateProps} from './Modal';\r\nimport {IModalBackdropOwnProps} from './ModalBackdrop';\r\nimport {ModalBody} from './ModalBody';\r\nimport {IModalFooterProps, ModalFooter} from './ModalFooter';\r\nimport {IModalHeaderDispatchProps, IModalHeaderOwnProps, IModalHeaderProps, ModalHeader} from './ModalHeader';\r\nimport {ModalHeaderConnected} from './ModalHeaderConnected';\r\n\r\nexport interface IModalCompositeOwnProps\r\n    extends IModalOwnProps,\r\n        Partial<IModalHeaderOwnProps>,\r\n        IModalFooterProps,\r\n        IModalBackdropOwnProps {\r\n    modalHeaderChildren?: React.ReactNode;\r\n    modalHeaderClasses?: IClassName;\r\n    modalBodyChildren?: React.ReactNode;\r\n    modalBodyClasses?: IClassName;\r\n    modalFooterChildren?: React.ReactNode;\r\n    modalFooterClasses?: IClassName;\r\n    isPrompt?: boolean;\r\n    validateShouldNavigate?: (isDirty: boolean) => boolean;\r\n}\r\n\r\nexport interface IModalCompositeStateProps extends IReduxStatePossibleProps, IModalStateProps {\r\n    layer: number;\r\n}\r\n\r\nexport interface IModalCompositeDispatchProps extends IModalDispatchProps, IModalHeaderDispatchProps {}\r\n\r\nexport interface IModalCompositeProps\r\n    extends IModalCompositeOwnProps,\r\n        Partial<IModalCompositeStateProps>,\r\n        Partial<IModalCompositeDispatchProps> {}\r\n\r\nconst modalPropsToOmit = keys<IModalCompositeProps>();\r\n\r\nexport class ModalComposite extends React.PureComponent<\r\n    IModalCompositeProps & Partial<ReactModal.Props> & Partial<IWithDirtyProps>\r\n> {\r\n    static defaultProps: Partial<IModalCompositeProps> = {\r\n        id: _.uniqueId('modal'),\r\n        closeTimeout: Defaults.MODAL_TIMEOUT,\r\n    };\r\n\r\n    render() {\r\n        const reactModalprops: Partial<ReactModal.Props> = _.omit(this.props, modalPropsToOmit);\r\n        return (\r\n            <ReactModal\r\n                key={this.props.id}\r\n                isOpen={this.props.isOpened}\r\n                className={{\r\n                    base: classNames('modal-container --react-modal', this.props.classes),\r\n                    afterOpen: 'opened',\r\n                    beforeClose: 'closed',\r\n                }}\r\n                overlayClassName={{\r\n                    base: classNames('modal-backdrop --react-modal', {\r\n                        [`layer-${this.props.layer}`]: this.props.layer > 0,\r\n                    }),\r\n                    afterOpen: 'opened',\r\n                    beforeClose: 'clear',\r\n                }}\r\n                onRequestClose={this.onRequestClose}\r\n                closeTimeoutMS={this.props.closeTimeout}\r\n                contentRef={this.props.contentRef}\r\n                parentSelector={this.getParent}\r\n                onAfterClose={this.props.closeCallback}\r\n                {...reactModalprops}\r\n            >\r\n                <div className=\"modal-content\" id={this.props.id}>\r\n                    {this.getModalHeader()}\r\n                    {this.getModalBody()}\r\n                    {this.getModalFooter()}\r\n                </div>\r\n            </ReactModal>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    private onRequestClose = (e: React.MouseEvent | React.KeyboardEvent) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if (this.props.validateShouldNavigate) {\r\n            if (this.props.validateShouldNavigate(this.props.isDirty)) {\r\n                this.props.onClose?.();\r\n            }\r\n        } else {\r\n            this.props.onClose?.();\r\n        }\r\n    };\r\n\r\n    private getModalHeader() {\r\n        const basicProps: IModalHeaderProps = {\r\n            id: this.props.id,\r\n            title: this.props.title,\r\n            classes: this.props.modalHeaderClasses,\r\n            docLink: this.props.docLink,\r\n        };\r\n\r\n        if (!this.props.title) {\r\n            return null;\r\n        }\r\n\r\n        if (this.props.withReduxState) {\r\n            return (\r\n                <ModalHeaderConnected key=\"modal-header\" {...basicProps}>\r\n                    {this.props.modalHeaderChildren}\r\n                </ModalHeaderConnected>\r\n            );\r\n        }\r\n        return (\r\n            <ModalHeader key=\"modal-header\" {...basicProps} onClose={this.props.onClose}>\r\n                {this.props.modalHeaderChildren}\r\n            </ModalHeader>\r\n        );\r\n    }\r\n\r\n    private getModalBody = () =>\r\n        this.props.modalBodyChildren && (\r\n            <ModalBody key=\"modal-body\" classes={this.props.modalBodyClasses}>\r\n                {this.props.modalBodyChildren}\r\n            </ModalBody>\r\n        );\r\n\r\n    private getModalFooter = () =>\r\n        this.props.modalFooterChildren && (\r\n            <ModalFooter key=\"modal-footer\" classes={this.props.modalFooterClasses}>\r\n                {this.props.modalFooterChildren}\r\n            </ModalFooter>\r\n        );\r\n\r\n    private getParent = (): HTMLElement => document.querySelector(Defaults.MODAL_ROOT);\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactModal from 'react-modal';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {IWithDirtyProps} from '../../hoc/withDirty/withDirty';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {addModal, closeModal, removeModal} from './ModalActions';\r\nimport {\r\n    IModalCompositeDispatchProps,\r\n    IModalCompositeOwnProps,\r\n    IModalCompositeProps,\r\n    IModalCompositeStateProps,\r\n    ModalComposite,\r\n} from './ModalComposite';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IModalCompositeOwnProps): IModalCompositeStateProps => ({\r\n    withReduxState: true,\r\n    isOpened: state.modals && state.modals.some((modal) => modal.id === ownProps.id && modal.isOpened),\r\n    layer: state.openModals ? state.openModals.indexOf(ownProps.id) + 1 : 0,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IModalCompositeOwnProps): IModalCompositeDispatchProps => ({\r\n    onRender: () => dispatch(addModal(ownProps.id, ownProps.openOnMount)),\r\n    onDestroy: () => dispatch(removeModal(ownProps.id)),\r\n    onClose: () => dispatch(closeModal(ownProps.id)),\r\n});\r\n\r\nexport const ModalCompositeConnected: React.ComponentClass<IModalCompositeProps &\r\n    Partial<ReactModal.Props> &\r\n    Partial<IWithDirtyProps>> = connect(mapStateToProps, mapDispatchToProps, ReduxUtils.mergeProps)(ModalComposite);\r\n","import {connect} from 'react-redux';\r\n\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {closeModal} from './ModalActions';\r\nimport {IModalHeaderDispatchProps, IModalHeaderOwnProps, IModalHeaderProps, ModalHeader} from './ModalHeader';\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IModalHeaderOwnProps): IModalHeaderDispatchProps => ({\r\n    onClose: () => dispatch(closeModal(ownProps.id)),\r\n});\r\n\r\nexport const ModalHeaderConnected: React.ComponentClass<IModalHeaderProps> = connect(\r\n    undefined,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(ModalHeader);\r\n","function generator() {\n  var options = (arguments.length) ? arguments[0] : {}\n    , count = options.count || 1\n    , units = options.units || 'sentences'\n    , sentenceLowerBound = options.sentenceLowerBound || 5\n    , sentenceUpperBound = options.sentenceUpperBound || 15\n    , paragraphLowerBound = options.paragraphLowerBound || 3\n    , paragraphUpperBound = options.paragraphUpperBound || 7\n    , format = options.format || 'plain'\n    , words = options.words || require('./dictionary').words\n    , random = options.random || Math.random\n    , suffix = options.suffix;\n\n  if (!suffix) {\n    var isNode = typeof module !== 'undefined' && module.exports;\n    var isReactNative = typeof product !== 'undefined' && product.navigator === 'ReactNative';\n    var isWindows = typeof process !== 'undefined' && 'win32' === process.platform;\n\n    if (!isReactNative && isNode && isWindows) {\n      suffix = '\\r\\n';\n    } else {\n      suffix = '\\n';\n    }\n  }\n\n  units = simplePluralize(units.toLowerCase());\n\n  function randomInteger(min, max) {\n    return Math.floor(random() * (max - min + 1) + min);\n  };\n\n  function randomWord(words) {\n    return words[randomInteger(0, words.length - 1)];\n  };\n\n  function randomSentence(words, lowerBound, upperBound) {\n    var sentence = ''\n      , bounds = {min: 0, max: randomInteger(lowerBound, upperBound)};\n\n    while (bounds.min < bounds.max) {\n      sentence += ' ' + randomWord(words);\n      bounds.min++;\n    }\n\n    if (sentence.length) {\n      sentence = sentence.slice(1);\n      sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n    }\n\n    return sentence;\n  };\n\n  function randomParagraph(words, lowerBound, upperBound, sentenceLowerBound, sentenceUpperBound) {\n    var paragraph = ''\n      , bounds = {min: 0, max: randomInteger(lowerBound, upperBound)};\n\n    while (bounds.min < bounds.max) {\n      paragraph += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n      bounds.min++;\n    }\n\n    if (paragraph.length) {\n      paragraph = paragraph.slice(2);\n      paragraph += '.';\n    }\n\n    return paragraph;\n  }\n\n  var iter = 0\n    , bounds = {min: 0, max: count}\n    , string = ''\n    , prefix = ''\n    , openingTag\n    , closingTag;\n\n  if (format === 'html') {\n    openingTag = '<p>';\n    closingTag = '</p>';\n  }\n\n  while (bounds.min < bounds.max) {\n    switch (units.toLowerCase()) {\n      case 'words':\n        string += ' ' + randomWord(words);\n        break;\n      case 'sentences':\n        string += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n        break;\n      case 'paragraphs':\n        var nextString = randomParagraph(words, paragraphLowerBound, paragraphUpperBound, sentenceLowerBound, sentenceUpperBound);\n\n        if (format === 'html') {\n          nextString = openingTag + nextString + closingTag;\n          if (bounds.min < bounds.max - 1) {\n            nextString += suffix; // Each paragraph on a new line\n          }\n        } else if (bounds.min < bounds.max - 1) {\n          nextString += suffix + suffix; // Double-up the EOL character to make distinct paragraphs, like carriage return\n        }\n\n        string += nextString;\n\n        break;\n    }\n\n    bounds.min++;\n  }\n\n  if (string.length) {\n    var pos = 0;\n\n    if (string.indexOf('. ') === 0) {\n      pos = 2;\n    } else if (string.indexOf('.') === 0 || string.indexOf(' ') === 0) {\n      pos = 1;\n    }\n\n    string = string.slice(pos);\n\n    if (units === 'sentences') {\n      string += '.';\n    }\n  }\n\n  return string;\n};\n\nfunction simplePluralize(string) {\n  if (string.indexOf('s', string.length - 1) === -1) {\n    return string + 's';\n  }\n  return string;\n}\n\nmodule.exports = generator;\n","var dictionary = {\n  words: [\n    'ad',\n    'adipisicing',\n    'aliqua',\n    'aliquip',\n    'amet',\n    'anim',\n    'aute',\n    'cillum',\n    'commodo',\n    'consectetur',\n    'consequat',\n    'culpa',\n    'cupidatat',\n    'deserunt',\n    'do',\n    'dolor',\n    'dolore',\n    'duis',\n    'ea',\n    'eiusmod',\n    'elit',\n    'enim',\n    'esse',\n    'est',\n    'et',\n    'eu',\n    'ex',\n    'excepteur',\n    'exercitation',\n    'fugiat',\n    'id',\n    'in',\n    'incididunt',\n    'ipsum',\n    'irure',\n    'labore',\n    'laboris',\n    'laborum',\n    'Lorem',\n    'magna',\n    'minim',\n    'mollit',\n    'nisi',\n    'non',\n    'nostrud',\n    'nulla',\n    'occaecat',\n    'officia',\n    'pariatur',\n    'proident',\n    'qui',\n    'quis',\n    'reprehenderit',\n    'sint',\n    'sit',\n    'sunt',\n    'tempor',\n    'ullamco',\n    'ut',\n    'velit',\n    'veniam',\n    'voluptate'\n  ]\n};\n\nmodule.exports = dictionary;\n","import * as React from 'react';\nimport {Loading} from '../../loading/Loading';\nimport {ModalCompositeConnected} from '../ModalCompositeConnected';\n\nexport interface ModalLoadingProps {\n    id: string;\n    title?: React.ReactNode;\n    openOnMount?: boolean;\n}\n\nexport const ModalLoading: React.FunctionComponent<ModalLoadingProps> = (props) => (\n    <ModalCompositeConnected\n        id={props.id}\n        classes=\"mod-prompt\"\n        modalBodyChildren={\n            <div className=\"loading-prompt\">\n                {props.title ? <div>{props.title}</div> : null}\n                <Loading fullContent />\n            </div>\n        }\n        openOnMount={props.openOnMount}\n        isPrompt\n    />\n);\n\nModalLoading.defaultProps = {\n    openOnMount: true,\n};\n"],"sourceRoot":""}