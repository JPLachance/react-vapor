(window.webpackJsonp=window.webpackJsonp||[]).push([[251],{1349:function(e,l,a){"use strict";a.r(l),l.default="import * as _ from 'underscore';\r\n\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {CollapsibleActions, CollapsiblePayload} from './CollapsibleActions';\r\n\r\nexport interface CollapsibleState {\r\n    id: string;\r\n    expanded: boolean;\r\n}\r\n\r\n/**\r\n * @deprecated use CollapsibleState instead\r\n */\r\nexport interface ICollapsibleContainerState extends CollapsibleState {}\r\n\r\nexport const collapsibleInitialState: CollapsibleState = {\r\n    id: undefined,\r\n    expanded: undefined,\r\n};\r\n\r\nexport const collapsiblesInitialState: CollapsibleState[] = [];\r\n\r\nexport const collapsiblesReducer = (\r\n    state: CollapsibleState[] = collapsiblesInitialState,\r\n    action: IReduxAction<CollapsiblePayload>\r\n): CollapsibleState[] => {\r\n    switch (action.type) {\r\n        case CollapsibleActions.add:\r\n            return [...state, action.payload as CollapsibleState];\r\n        case CollapsibleActions.remove:\r\n            return _.reject(state, (collapsible: CollapsibleState) => collapsible.id === action.payload.id);\r\n        case CollapsibleActions.setExpanded:\r\n            return state.map((collapsible: CollapsibleState) =>\r\n                collapsible.id === action.payload.id ? (action.payload as CollapsibleState) : collapsible\r\n            );\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n/**\r\n * @deprecated use collapsiblesReducer instead\r\n */\r\nexport const collapsibleContainersReducer = collapsiblesReducer;\r\n"}}]);
//# sourceMappingURL=251.bundle.js.map