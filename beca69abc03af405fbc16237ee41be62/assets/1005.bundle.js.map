{"version":3,"sources":["webpack:///./src/components/table-hoc/examples/TableHOCExamples.tsx?2428","webpack:///./src/components/table-hoc/examples/TableHOCwithBlankSlateExample.tsx?fdbf","webpack:///./src/utils/UUID.ts?611d"],"names":["TableHOCExamples","TableWithActionsAndDataFiltering","generateDataWithFacker","length","i","fakedData","contextualCard","city","address","email","username","dateOfBirth","dob","id","generate","twoHundredRowsOfData","rowActions","primary","icon","name","enabled","trigger","alert","callOnDoubleClick","unrepeatable","requiresConfirmation","confirmLabel","confirmType","buttonLabels","confirm","cancel","renderHeader","tableId","generateTableRow","allData","map","data","key","actions","toLowerCase","toLocaleDateString","predicateSetup","prepend","className","values","displayValue","value","selected","TableWithActionsAndDataFilteringComposed","matchPredicate","predicate","rowData","matchCity","matchEmail","sort","isAsc","a","b","Date","dateCompare","compare","localeCompare","datesSelectionBoxes","matchDates","lowerLimit","upperLimit","years","getPreviousYears","currentYear","toString","initialDateRange","subtract","toDate","perPageNumbers","renderBody","Alldata","tableHeader","showBorderTop","TableHocWithBlankSlateExample","TableWithBlankSlateExample","title","TableWithBlankSlateComposed","matchFilter","filter","indexOf","d","now","replace","c","r","Math","random","floor"],"mappings":"29BA8BaA,EAAqC,WAAM,uBAACC,EAAgC,OAG5EC,EAAyB,SAACC,GACnC,aAAM,QAAQA,IAAS,SAACC,GACpB,eAAKA,EAAI,GACT,IAAMC,EAAY,UAAQC,iBAC1B,MAAO,CACHC,KAAMF,EAAUG,QAAQD,KACxBE,MAAOJ,EAAUI,MACjBC,SAAUL,EAAUK,SACpBC,YAAaN,EAAUO,IACvBC,GAAI,IAAKC,gBAGfC,EAAuBb,EAAuB,KAI9Cc,EAAa,CACf,CACIC,SAAS,EACTC,KAAM,OACNC,KAAM,OACNC,SAAS,EACTC,QAAS,WAAM,OAAAC,MAAM,sBACrBC,mBAAmB,GAEvB,CAACN,SAAS,EAAOC,KAAM,OAAQC,KAAM,OAAQC,SAAS,GACtD,CAACH,SAAS,EAAOC,KAAM,OAAQC,KAAM,OAAQC,SAAS,GACtD,CACIH,SAAS,EACTC,KAAM,SACNC,KAAM,SACNC,SAAS,EACTI,cAAc,EACdC,qBAAsB,CAClBC,aAAc,gBACdC,YAAa,SACbC,aAAc,CACVC,QAAS,UACTC,OAAQ,aAMlBC,EAAe,SAACC,GAAoB,OACtC,6BACI,0BACI,gBAAC,IAAmB,CAACnB,GAAG,OAAOmB,QAASA,GAAO,QAG/C,gBAAC,IAAmB,CAACnB,GAAG,QAAQmB,QAASA,GAAO,SAGhD,gBAAC,IAAmB,CAACnB,GAAG,WAAWmB,QAASA,GAAO,YAGnD,8CAKCC,EAAmB,SAACC,EAA4BF,GACzD,OAAAE,EAAQC,KAAI,SAACC,GAA0B,OACnC,gBAAC,IAAiB,CAACvB,GAAIuB,EAAKvB,GAAImB,QAASA,EAASK,IAAKD,EAAKvB,GAAIyB,QAAStB,GACrE,sBAAIqB,IAAI,QAAQD,EAAK7B,MACrB,sBAAI8B,IAAI,SAASD,EAAK3B,MAAM8B,eAC5B,sBAAIF,IAAI,YAAYD,EAAK1B,SAAS6B,eAClC,sBAAIF,IAAI,iBAAiBD,EAAKzB,YAAY6B,2BAoChDC,EAAiB,CACnB5B,GAAI,iBACJ6B,QAAS,wBAAMC,UAAU,wBAAsB,YAC/CC,OAAQ,CACJ,CAACC,aAAc,MAAOC,MAAO,GAAIC,UAAU,GAC3C,CAACF,aAAc9B,EAAqB,GAAGR,KAAMuC,MAAO/B,EAAqB,GAAGR,MAC5E,CAACsC,aAAc9B,EAAqB,GAAGN,MAAOqC,MAAO/B,EAAqB,GAAGN,SAuB/EuC,EAA2C,UAC7C,YAAmB,EAAD,KACXP,GAAc,CACjBQ,eAnDe,SAACC,EAAmBC,GACvC,IAAMC,EAAYF,IAAcC,EAAQ5C,KAClC8C,EAAaH,IAAcC,EAAQ1C,MACzC,OAAQyC,GAAaE,GAAaC,MAkDlC,cACA,YAAc,CAACC,KAhDN,SAACjB,EAA4BkB,EAAgBC,EAAoBC,GAC1E,GAAIpB,EAAK,CACL,GAAImB,EAAEnB,aAAgBqB,KAAM,CACxB,IAAMC,EAAeH,EAAEnB,GAAgBoB,EAAEpB,GACzC,OAAOkB,EAAQI,GAAe,EAAIA,EAEtC,IAAMC,EAAWJ,EAAEnB,GAAgBE,cAAcsB,cAAeJ,EAAEpB,GAAgBE,eAElF,OAAOgB,EAAQK,GAAW,EAAIA,EAElC,OAAO,KAuCP,IAAmB,gBApEO,WAAM,OAChCE,oBAAqB,IACrBC,WAAY,SAAC3B,EAAuB4B,EAAkBC,GAClD,qBAAcA,IAAgBD,GAAc5B,EAAKzB,aAAeyB,EAAKzB,aAAesD,GACxFC,MAAO,EAAI,IAAUC,iBAAiB,KAAM,KAAUC,YAAYC,aAClEC,iBAAkB,CACd,IACKC,SAAS,GAAI,SACbC,SACL,IAASA,eA4Db,YAAoB,CAACC,eAAgB,CAAC,EAAG,EAAG,MAC5C,cAT6C,CAU/C,KAEIxE,EAAmC,aA/BjB,WAAM,OAC1BmC,KAAMrB,KA8B+B,EA3BkC,SAAC,G,IAACqB,EAAA,EAAAA,KACnEJ,EAAU,mCAEhB,OACI,gBAACgB,EAAwC,CACrCnC,GAAImB,EACJW,UAAU,QACVP,KAAMA,EACNsC,WAAY,SAACC,GAA+B,OAAA1C,EAAiB0C,EAAS3C,IACtE4C,YAAa7C,EAAaC,GAC1B6C,eAAa,Q,kCChKzB,4IAUaC,EAAkD,WAAM,OACjE,gBAAC,IAAO,KACJ,gBAACC,EAA0B,QAGnCD,EAA8BE,MAAQ,sBAWtC,IAkBMD,EAA6B,aAlBX,WAAM,OAC1B3C,KAAM,iCAAuB,MAiBE,EAdqC,WAGpE,OACI,gBAAC,IAAO,KACJ,gBAAC6C,EAA2B,CACxBpE,GALI,sBAMJ8B,UAAU,QACVP,KAAM,iCAAuB,GAC7BsC,WAAY,yBAOtBO,EAA8B,UAChC,YAAoB,CAACD,MAAO,yCAC5B,YAAgB,CACZE,YAAa,SAACC,EAAgB/C,GAC1B,OAA+D,IAA/DA,EAAK1B,SAAS6B,cAAc6C,QAAQD,EAAO5C,kBAEnD,YAAoB,CAACyC,MAAO,wCANI,CAOlC,M,iCCrDF,kCACA,+BAWA,OATW,EAAAlE,SAAP,WAEI,IAAIuE,EAAI3B,KAAK4B,MACb,MAAO,uCAAuCC,QAAQ,SAAS,SAACC,GAC5D,IAAMC,GAAKJ,EAAoB,GAAhBK,KAAKC,UAAiB,GAAK,EAE1C,OADAN,EAAIK,KAAKE,MAAMP,EAAI,KACL,MAANG,EAAYC,EAAS,EAAJA,EAAW,GAAKpB,SAAS,QAG9D,EAXA","file":"assets/1005.bundle.js","sourcesContent":["import {helpers, seed} from 'faker/locale/en';\r\nimport * as moment from 'moment';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\r\nimport {DateUtils} from '../../../utils/DateUtils';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {SELECTION_BOXES_LONG} from '../../datePicker/examples/DatePickerExamplesCommon';\r\nimport {TableHeaderWithSort} from '../TableHeaderWithSort';\r\nimport {TableHOC} from '../TableHOC';\r\nimport {TableRowConnected} from '../TableRowConnected';\r\nimport {tableWithActions} from '../TableWithActions';\r\nimport {tableWithDatePicker} from '../TableWithDatePicker';\r\nimport {tableWithFilter} from '../TableWithFilter';\r\nimport {tableWithPagination} from '../TableWithPagination';\r\nimport {tableWithPredicate} from '../TableWithPredicate';\r\nimport {tableWithSort} from '../TableWithSort';\r\n\r\nexport interface IExampleRowData {\r\n    city: string;\r\n    email: string;\r\n    username: string;\r\n    dateOfBirth: Date;\r\n    id: string;\r\n}\r\n\r\nexport type TableWithActionsType = React.FunctionComponent<ReturnType<typeof mapStateToProps>>;\r\n\r\nexport const TableHOCExamples: ExampleComponent = () => <TableWithActionsAndDataFiltering />;\r\n\r\n// https://github.com/marak/Faker.js/\r\nexport const generateDataWithFacker = (length: number) =>\r\n    _.map(_.range(length), (i: number) => {\r\n        seed(i + 1);\r\n        const fakedData = helpers.contextualCard();\r\n        return {\r\n            city: fakedData.address.city,\r\n            email: fakedData.email,\r\n            username: fakedData.username,\r\n            dateOfBirth: fakedData.dob,\r\n            id: UUID.generate(),\r\n        };\r\n    });\r\nconst twoHundredRowsOfData = generateDataWithFacker(200);\r\n\r\n// start-print\r\n\r\nconst rowActions = [\r\n    {\r\n        primary: true,\r\n        icon: 'edit',\r\n        name: 'edit',\r\n        enabled: true,\r\n        trigger: () => alert('trigger on action'),\r\n        callOnDoubleClick: true,\r\n    },\r\n    {primary: false, icon: 'view', name: 'view', enabled: true},\r\n    {primary: false, icon: 'copy', name: 'copy', enabled: true},\r\n    {\r\n        primary: false,\r\n        icon: 'delete',\r\n        name: 'delete',\r\n        enabled: true,\r\n        unrepeatable: true,\r\n        requiresConfirmation: {\r\n            confirmLabel: 'wanna do it ?',\r\n            confirmType: 'danger',\r\n            buttonLabels: {\r\n                confirm: 'Confirm',\r\n                cancel: 'Cancel',\r\n            },\r\n        },\r\n    },\r\n];\r\n\r\nconst renderHeader = (tableId: string) => (\r\n    <thead>\r\n        <tr>\r\n            <TableHeaderWithSort id=\"city\" tableId={tableId}>\r\n                City\r\n            </TableHeaderWithSort>\r\n            <TableHeaderWithSort id=\"email\" tableId={tableId}>\r\n                Email\r\n            </TableHeaderWithSort>\r\n            <TableHeaderWithSort id=\"username\" tableId={tableId}>\r\n                Username\r\n            </TableHeaderWithSort>\r\n            <th>Date of birth</th>\r\n        </tr>\r\n    </thead>\r\n);\r\n\r\nexport const generateTableRow = (allData: IExampleRowData[], tableId: string) =>\r\n    allData.map((data: IExampleRowData) => (\r\n        <TableRowConnected id={data.id} tableId={tableId} key={data.id} actions={rowActions}>\r\n            <td key=\"city\">{data.city}</td>\r\n            <td key=\"email\">{data.email.toLowerCase()}</td>\r\n            <td key=\"username\">{data.username.toLowerCase()}</td>\r\n            <td key=\"date-of-birth\">{data.dateOfBirth.toLocaleDateString()}</td>\r\n        </TableRowConnected>\r\n    ));\r\n\r\nconst tableDatePickerConfig = () => ({\r\n    datesSelectionBoxes: SELECTION_BOXES_LONG,\r\n    matchDates: (data: IExampleRowData, lowerLimit: Date, upperLimit?: Date) =>\r\n        _.isUndefined(upperLimit) || (lowerLimit <= data.dateOfBirth && data.dateOfBirth <= upperLimit),\r\n    years: [...DateUtils.getPreviousYears(100), DateUtils.currentYear.toString()],\r\n    initialDateRange: [\r\n        moment()\r\n            .subtract(75, 'years')\r\n            .toDate(),\r\n        moment().toDate(),\r\n    ],\r\n});\r\n\r\nconst matchPredicate = (predicate: string, rowData: IExampleRowData) => {\r\n    const matchCity = predicate === rowData.city;\r\n    const matchEmail = predicate === rowData.email;\r\n    return !predicate || matchCity || matchEmail;\r\n};\r\n\r\nconst sort = (key: keyof IExampleRowData, isAsc: boolean, a: IExampleRowData, b: IExampleRowData) => {\r\n    if (key) {\r\n        if (a[key] instanceof Date) {\r\n            const dateCompare = (a[key] as any) - (b[key] as any);\r\n            return isAsc ? dateCompare : -1 * dateCompare;\r\n        }\r\n        const compare = (a[key] as string).toLowerCase().localeCompare((b[key] as string).toLowerCase());\r\n\r\n        return isAsc ? compare : -1 * compare;\r\n    }\r\n    return 0;\r\n};\r\n\r\nconst predicateSetup = {\r\n    id: 'firstPredicate',\r\n    prepend: <span className=\"mr1 text-medium-grey\">prepend:</span>,\r\n    values: [\r\n        {displayValue: 'All', value: '', selected: true},\r\n        {displayValue: twoHundredRowsOfData[2].city, value: twoHundredRowsOfData[2].city},\r\n        {displayValue: twoHundredRowsOfData[1].email, value: twoHundredRowsOfData[1].email},\r\n    ],\r\n};\r\n\r\nconst mapStateToProps = () => ({\r\n    data: twoHundredRowsOfData,\r\n});\r\n\r\nconst TableWithActionsAndDataFilteringDisconnected: TableWithActionsType = ({data}) => {\r\n    const tableId = 'TableWithActionsAndDataFiltering';\r\n\r\n    return (\r\n        <TableWithActionsAndDataFilteringComposed\r\n            id={tableId}\r\n            className=\"table\"\r\n            data={data}\r\n            renderBody={(Alldata: IExampleRowData[]) => generateTableRow(Alldata, tableId)}\r\n            tableHeader={renderHeader(tableId)}\r\n            showBorderTop\r\n        />\r\n    );\r\n};\r\n\r\nconst TableWithActionsAndDataFilteringComposed = _.compose(\r\n    tableWithPredicate({\r\n        ...predicateSetup,\r\n        matchPredicate,\r\n    }),\r\n    tableWithFilter(), // using the default matchfilter\r\n    tableWithSort({sort}),\r\n    tableWithDatePicker(...(tableDatePickerConfig as any)),\r\n    tableWithPagination({perPageNumbers: [3, 5, 10]}),\r\n    tableWithActions()\r\n)(TableHOC) as typeof TableHOC;\r\n\r\nconst TableWithActionsAndDataFiltering = connect(mapStateToProps)(TableWithActionsAndDataFilteringDisconnected);\r\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport * as _ from 'underscore';\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\nimport {Section} from '../../section/Section';\nimport {TableHOC} from '../TableHOC';\nimport {tableWithBlankSlate} from '../TableWithBlankSlate';\nimport {tableWithFilter} from '../TableWithFilter';\nimport {generateDataWithFacker, generateTableRow} from './TableHOCExamples';\n\nexport const TableHocWithBlankSlateExample: ExampleComponent = () => (\n    <Section>\n        <TableWithBlankSlateExample />\n    </Section>\n);\nTableHocWithBlankSlateExample.title = 'TableHOC blankSlate';\n\nexport interface IExampleRowData {\n    city: string;\n    email: string;\n    username: string;\n    dateOfBirth: Date;\n    id: string;\n}\n\n// start-print\nconst mapStateToProps = () => ({\n    data: generateDataWithFacker(0),\n});\n\nconst TableWithBlankSlateExampleDisconnected: React.FunctionComponent = () => {\n    const tableId = 'tableWithBlankSlate';\n\n    return (\n        <Section>\n            <TableWithBlankSlateComposed\n                id={tableId}\n                className=\"table\"\n                data={generateDataWithFacker(0)}\n                renderBody={generateTableRow}\n            />\n        </Section>\n    );\n};\nconst TableWithBlankSlateExample = connect(mapStateToProps)(TableWithBlankSlateExampleDisconnected);\n\nconst TableWithBlankSlateComposed = _.compose(\n    tableWithBlankSlate({title: 'No data caused the table to be empty'}),\n    tableWithFilter({\n        matchFilter: (filter: string, data: IExampleRowData) =>\n            data.username.toLowerCase().indexOf(filter.toLowerCase()) !== -1,\n    }),\n    tableWithBlankSlate({title: 'Filter caused the table to be empty'})\n)(TableHOC);\n","// tslint:disable\r\nexport class UUID {\r\n    // TODO: replace for https://www.npmjs.com/package/uuid\r\n    static generate() {\r\n        // Source: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n        let d = Date.now();\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\r\n            const r = (d + Math.random() * 16) % 16 | 0;\r\n            d = Math.floor(d / 16);\r\n            return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n        });\r\n    }\r\n}\r\n// tslint:enable\r\n"],"sourceRoot":""}