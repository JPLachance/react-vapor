{"version":3,"sources":["webpack:///./src/components/facets/examples/FacetConnectedExamples.tsx?710a","webpack:///./src/components/facets/FacetMoreRows.tsx?56e2","webpack:///./src/components/facets/FacetMoreToggle.tsx?cdb2","webpack:///./src/components/facets/Facet.tsx?bcf1","webpack:///./src/components/facets/FacetMoreRowsConnected.tsx?9ea4","webpack:///./src/components/facets/FacetMoreToggleConnected.tsx?6fef","webpack:///./src/components/facets/FacetRow.tsx?d3d3","webpack:///./src/components/section/index.ts?360e","webpack:///./src/components/facets/FacetConnected.tsx?9712"],"names":["facet","name","formattedName","facet2","facetRows","count","FacetConnectedExamples","dispatch","onRender","exclude","level","title","style","width","className","clearFacet","toggleFacet","enableExclusions","handleDocumentClick","e","props","isOpened","facetSearch","contains","target","onDocumentClick","componentWillMount","this","document","addEventListener","componentWillReceiveProps","nextProps","onOpen","componentWillUnmount","removeEventListener","componentDidUpdate","getElementsByTagName","focus","render","moreSearchClasses","rowsFiltered","filterText","length","facetRow","facetText","toLowerCase","filter","Boolean","resultsClass","filterBoxId","filterBox","withReduxState","id","filterPlaceholder","ref","handleOnChange","onToggleMore","moreClasses","moreLabel","onClick","nativeEvent","stopImmediatePropagation","type","onChange","buildFacet","onToggleFacet","onClearFacet","sortFacetRows","onDestroy","selectedFacetRows","removeSelectedClass","selected","unselected","allRows","item","rows","isSelected","key","isChecked","maxTooltipLabelLength","excludeTooltipMessage","rowsToShow","Math","max","maxRowsToShow","moreRowsToggle","facetClasses","clearFacetLabel","svgName","slice","getMoreRows","needMoreRows","defaultProps","FacetMoreRowsConnected","state","ownProps","facets","filterItem","filters","opened","mergeProps","FacetMoreToggleConnected","getExcludeCheckbox","preventDefault","checked","isExclude","stopEvent","svgClass","getLabel","getCount","maxCalculatedNameLength","label","tooltipLabel","placement","toggleFacetToExclude","getExcludeButton","event","stopPropagation","getSelectedRows","selectedRows","row","selectedRow","FacetConnected"],"mappings":"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","file":"assets/959.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReduxAction} from '../../../utils/ReduxUtils';\r\nimport {Section} from '../../section';\r\nimport {IFacet} from '../Facet';\r\nimport {changeFacet, IFacetActionPayload} from '../FacetActions';\r\nimport {FacetConnected} from '../FacetConnected';\r\n\r\nexport interface ILastUpdateConnectedExamplesProps {\r\n    onRender?: () => void;\r\n}\r\n\r\nconst facet: IFacet = {name: 'facetTitle1', formattedName: 'The first facet'};\r\nconst facet2: IFacet = {name: 'facetTitle2', formattedName: 'The second facet'};\r\n\r\nconst facetRows: IFacet[] = [\r\n    {\r\n        name: 'row1',\r\n        formattedName: 'Row 1',\r\n    },\r\n    {\r\n        name: 'row2',\r\n        formattedName: 'The second row',\r\n    },\r\n    {\r\n        name: 'row3',\r\n        formattedName: 'Third row with a count property',\r\n        count: '23412',\r\n    },\r\n    {\r\n        name: 'row4',\r\n        formattedName: 'Row 4, count of 0',\r\n        count: '0',\r\n    },\r\n];\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IFacetActionPayload>) => void\r\n): ILastUpdateConnectedExamplesProps => {\r\n    return {\r\n        onRender: () => {\r\n            dispatch(\r\n                changeFacet(facet.name, {\r\n                    name: 'row2',\r\n                    formattedName: 'Irrelevent',\r\n                })\r\n            );\r\n            dispatch(\r\n                changeFacet(facet2.name, {\r\n                    name: 'row1',\r\n                    formattedName: 'it does not matter',\r\n                })\r\n            );\r\n            dispatch(\r\n                changeFacet(facet2.name, {\r\n                    name: 'row2',\r\n                    formattedName: 'why is this mandatory ?',\r\n                    exclude: true,\r\n                })\r\n            );\r\n        },\r\n    };\r\n};\r\n\r\nconst FacetConnectedExamplesDisconnected: React.FunctionComponent<ILastUpdateConnectedExamplesProps> = ({onRender}) => {\r\n    React.useEffect(() => {\r\n        onRender();\r\n    }, [onRender]);\r\n\r\n    return (\r\n        <Section level={2} title=\"Facets connected to store\">\r\n            <div style={{width: 400}}>\r\n                <label className=\"form-control-label\">Facet with the second row selectd</label>\r\n                <FacetConnected\r\n                    facet={facet}\r\n                    facetRows={facetRows}\r\n                    clearFacet={() => {\r\n                        return;\r\n                    }}\r\n                    toggleFacet={() => {\r\n                        return;\r\n                    }}\r\n                />\r\n            </div>\r\n            <div style={{width: 400}}>\r\n                <label className=\"form-control-label\">\r\n                    Facet with exclusions, the first row selected and the second row already excluded\r\n                </label>\r\n                <FacetConnected\r\n                    facet={facet2}\r\n                    facetRows={facetRows}\r\n                    clearFacet={() => {\r\n                        return;\r\n                    }}\r\n                    enableExclusions\r\n                    toggleFacet={() => {\r\n                        return;\r\n                    }}\r\n                />\r\n            </div>\r\n        </Section>\r\n    );\r\n};\r\nexport const FacetConnectedExamples = connect(null, mapDispatchToProps)(FacetConnectedExamplesDisconnected);\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as _ from 'underscore';\r\nimport * as s from 'underscore.string';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {FilterBox} from '../filterBox/FilterBox';\r\nimport {FilterBoxConnected} from '../filterBox/FilterBoxConnected';\r\n\r\nexport interface IFacetMoreRowsOwnProps extends React.ClassAttributes<FacetMoreRows> {\r\n    facet: string;\r\n    facetRows: JSX.Element[];\r\n}\r\n\r\nexport interface IFacetMoreRowsStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    filterText?: string;\r\n}\r\n\r\nexport interface IFacetMoreRowsDispatchProps {\r\n    onOpen?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IFacetMoreRowsChildrenProps {\r\n    filterPlaceholder?: string;\r\n}\r\n\r\nexport interface IFacetMoreRowsProps\r\n    extends IFacetMoreRowsOwnProps,\r\n        IFacetMoreRowsDispatchProps,\r\n        IFacetMoreRowsStateProps,\r\n        IFacetMoreRowsChildrenProps {}\r\n\r\nexport class FacetMoreRows extends React.Component<IFacetMoreRowsProps, any> {\r\n    private facetSearch: HTMLDivElement;\r\n\r\n    componentWillMount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFacetMoreRowsProps) {\r\n        if (this.props.onOpen && !this.props.isOpened && nextProps.isOpened) {\r\n            this.props.onOpen();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isOpened) {\r\n            this.facetSearch.getElementsByTagName('input')[0].focus();\r\n        }\r\n    }\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.facetSearch);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const moreSearchClasses: string = 'facet-more-search' + (!this.props.isOpened ? ' hidden' : '');\r\n        const rowsFiltered: JSX.Element[] =\r\n            this.props.filterText && this.props.filterText.length\r\n                ? _.map(this.props.facetRows, (facetRow: JSX.Element) => {\r\n                      const facetText = facetRow.props.facetRow.formattedName;\r\n                      if (s.contains(facetText.toLowerCase(), this.props.filterText.toLowerCase())) {\r\n                          return facetRow;\r\n                      }\r\n                  }).filter(Boolean)\r\n                : this.props.facetRows;\r\n        const resultsClass: string = 'facet-search-results' + (!rowsFiltered.length ? ' hidden' : '');\r\n        const filterBoxId: string = 'filter-' + this.props.facet;\r\n        const filterBox: JSX.Element = this.props.withReduxState ? (\r\n            <FilterBoxConnected id={filterBoxId} filterPlaceholder={this.props.filterPlaceholder} />\r\n        ) : (\r\n            <FilterBox id={filterBoxId} filterPlaceholder={this.props.filterPlaceholder} />\r\n        );\r\n\r\n        return (\r\n            <div className={moreSearchClasses}>\r\n                <div className=\"facet-search\" ref={(facetSearch: HTMLDivElement) => (this.facetSearch = facetSearch)}>\r\n                    {filterBox}\r\n                </div>\r\n                <ul className={resultsClass}>{rowsFiltered}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface IFacetMoreToggleOwnProps extends React.ClassAttributes<FacetMoreToggle> {\r\n    facet: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport interface IFacetMoreToggleStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IFacetMoreToggleDispatchProps {\r\n    onToggleMore?: (facet: string) => void;\r\n}\r\n\r\nexport interface IFacetMoreToggleProps\r\n    extends IFacetMoreToggleOwnProps,\r\n        IFacetMoreToggleStateProps,\r\n        IFacetMoreToggleDispatchProps {}\r\n\r\nexport const FACET_TOGGLE_MORE_LABEL: string = 'More';\r\n\r\nexport class FacetMoreToggle extends React.Component<IFacetMoreToggleProps, any> {\r\n    private handleOnChange = () => {\r\n        if (this.props.onToggleMore) {\r\n            this.props.onToggleMore(this.props.facet);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const isOpened: boolean = this.props.isOpened ? this.props.isOpened : false;\r\n        const moreClasses: string = 'facet-value facet-selectable facet-more' + (isOpened ? ' hidden' : '');\r\n        const moreLabel: string = this.props.moreLabel || FACET_TOGGLE_MORE_LABEL;\r\n\r\n        return (\r\n            <li className={moreClasses} onClick={(e) => e.nativeEvent.stopImmediatePropagation()}>\r\n                <label className=\"coveo-checkbox-label facet-value-label\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"coveo-checkbox facet-checkbox-input\"\r\n                        onChange={() => this.handleOnChange()}\r\n                    />\r\n                    <span className=\"facet-more-button\"></span>\r\n                    <span className=\"label\">{moreLabel}</span>\r\n                </label>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {FacetMoreRows} from './FacetMoreRows';\r\nimport {FacetMoreRowsConnected} from './FacetMoreRowsConnected';\r\nimport {FacetMoreToggle} from './FacetMoreToggle';\r\nimport {FacetMoreToggleConnected} from './FacetMoreToggleConnected';\r\nimport {FacetRow} from './FacetRow';\r\n\r\nexport interface IFacet {\r\n    name: string;\r\n    formattedName: string;\r\n    tooltipLabel?: string;\r\n    count?: string;\r\n    exclude?: boolean;\r\n}\r\n\r\nexport interface IFacetOwnProps extends React.ClassAttributes<Facet> {\r\n    facet: IFacet;\r\n    facetRows: IFacet[];\r\n    toggleFacet: (facet: string, facetRow: IFacet) => void;\r\n    clearFacet: (facet: string) => void;\r\n    clearFacetLabel?: string;\r\n    maxRowsToShow?: number;\r\n    maxTooltipLabelLength?: number;\r\n    excludeTooltipMessage?(facetsRowName: string): string;\r\n}\r\n\r\nexport interface IFacetStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    selectedFacetRows?: IFacet[];\r\n}\r\n\r\nexport interface IFacetDispatchProps {\r\n    onRender?: (facet: string) => void;\r\n    onDestroy?: (facet: string) => void;\r\n    onToggleFacet?: (facet: string, facetRow: IFacet) => void;\r\n    onClearFacet?: (facet: string) => void;\r\n}\r\n\r\nexport interface IFacetChildrenProps {\r\n    moreLabel?: string;\r\n    filterPlaceholder?: string;\r\n    enableExclusions?: boolean;\r\n}\r\n\r\nexport interface IFacetProps extends IFacetOwnProps, IFacetStateProps, IFacetDispatchProps, IFacetChildrenProps {}\r\n\r\nexport const CLEAR_FACET_LABEL: string = 'Clear';\r\n\r\nexport class Facet extends React.Component<IFacetProps, any> {\r\n    static defaultProps: Partial<IFacetProps> = {\r\n        clearFacetLabel: CLEAR_FACET_LABEL,\r\n        selectedFacetRows: [],\r\n        maxRowsToShow: 5,\r\n    };\r\n\r\n    private buildFacet = (facetRow: IFacet) => {\r\n        this.props.toggleFacet(this.props.facet.name, facetRow);\r\n        if (this.props.onToggleFacet) {\r\n            this.props.onToggleFacet(this.props.facet.name, facetRow);\r\n        }\r\n    };\r\n\r\n    private clearFacet = () => {\r\n        this.props.clearFacet(this.props.facet.name);\r\n        if (this.props.onClearFacet) {\r\n            this.props.onClearFacet(this.props.facet.name);\r\n        }\r\n    };\r\n\r\n    private sortFacetRows(facetRows: IFacet[]) {\r\n        return _.sortBy(facetRows, (facetRow: IFacet) => facetRow.formattedName.toLowerCase());\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.facetRows.length && !this.props.selectedFacetRows.length) {\r\n            return null;\r\n        }\r\n        const removeSelectedClass: string =\r\n            'facet-header-eraser' + (this.props.selectedFacetRows.length ? '' : ' hidden');\r\n        const selected: IFacet[] = this.sortFacetRows(this.props.selectedFacetRows);\r\n        const unselected: IFacet[] = this.sortFacetRows(this.props.facetRows);\r\n        const allRows: IFacet[] = _.union(selected, unselected);\r\n        const facetRows: IFacet[] = _.uniq(allRows, false, (item) => item.name);\r\n        const rows: JSX.Element[] = _.map(facetRows, (facetRow: IFacet) => {\r\n            const isSelected: boolean = _.contains(_.pluck(selected, 'name'), facetRow.name);\r\n            return (\r\n                <FacetRow\r\n                    key={facetRow.name}\r\n                    facet={this.props.facet.name}\r\n                    facetRow={facetRow}\r\n                    onToggleFacet={this.buildFacet}\r\n                    isChecked={isSelected}\r\n                    enableExclusions={this.props.enableExclusions}\r\n                    maxTooltipLabelLength={this.props.maxTooltipLabelLength}\r\n                    excludeTooltipMessage={this.props.excludeTooltipMessage}\r\n                />\r\n            );\r\n        });\r\n        let rowsToShow: number = Math.max(this.props.selectedFacetRows.length, this.props.maxRowsToShow);\r\n        // If there is only 1 extra row, show it instead of the moreRowsToggle\r\n        if (rows.length === rowsToShow + 1) {\r\n            rowsToShow += 1;\r\n        }\r\n        const moreRowsToggle: JSX.Element =\r\n            rows.length > rowsToShow ? (\r\n                this.props.withReduxState ? (\r\n                    <FacetMoreToggleConnected facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                ) : (\r\n                    <FacetMoreToggle facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                )\r\n            ) : null;\r\n        const facetClasses: string = this.props.facet.name + ' facet' + (this.props.isOpened ? ' facet-opened' : '');\r\n\r\n        return (\r\n            <div className={facetClasses}>\r\n                <div className=\"facet-header\">\r\n                    <div className={removeSelectedClass} onClick={() => this.clearFacet()}>\r\n                        <Tooltip\r\n                            className=\"remove-selected-tooltip\"\r\n                            title={`${this.props.clearFacetLabel} ${this.props.facet.formattedName}`}\r\n                        >\r\n                            <Svg svgName=\"clear\" className=\"icon fill-medium-grey\" />\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className=\"facet-header-title bold text-medium-blue\">{this.props.facet.formattedName}</div>\r\n                </div>\r\n                <ul className=\"facet-values\">\r\n                    {rows.slice(0, rowsToShow)}\r\n                    {moreRowsToggle}\r\n                </ul>\r\n                {this.getMoreRows(!!moreRowsToggle, rows.slice(rowsToShow))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMoreRows(needMoreRows: boolean, rows: JSX.Element[]): JSX.Element {\r\n        if (needMoreRows) {\r\n            return this.props.withReduxState ? (\r\n                <FacetMoreRowsConnected\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            ) : (\r\n                <FacetMoreRows\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {filterThrough} from '../filterBox/FilterBoxActions';\r\nimport {IFilterState} from '../filterBox/FilterBoxReducers';\r\nimport {closeMoreFacetRows} from './FacetActions';\r\nimport {\r\n    FacetMoreRows,\r\n    IFacetMoreRowsDispatchProps,\r\n    IFacetMoreRowsOwnProps,\r\n    IFacetMoreRowsProps,\r\n    IFacetMoreRowsStateProps,\r\n} from './FacetMoreRows';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetMoreRowsOwnProps): IFacetMoreRowsStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet});\r\n    const filterItem: IFilterState = _.findWhere(state.filters, {id: 'filter-' + ownProps.facet});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n        filterText: filterItem ? filterItem.filterText : '',\r\n        withReduxState: true,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IFacetMoreRowsOwnProps\r\n): IFacetMoreRowsDispatchProps => ({\r\n    onOpen: () => dispatch(filterThrough('filter-' + ownProps.facet, '')),\r\n    onDocumentClick: () => dispatch(closeMoreFacetRows()),\r\n});\r\n\r\nexport const FacetMoreRowsConnected: React.ComponentClass<IFacetMoreRowsProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FacetMoreRows);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {toggleMoreFacetRows} from './FacetActions';\r\nimport {\r\n    FacetMoreToggle,\r\n    IFacetMoreToggleDispatchProps,\r\n    IFacetMoreToggleOwnProps,\r\n    IFacetMoreToggleProps,\r\n    IFacetMoreToggleStateProps,\r\n} from './FacetMoreToggle';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetMoreToggleOwnProps): IFacetMoreToggleStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void\r\n): IFacetMoreToggleDispatchProps => ({\r\n    onToggleMore: (facet: string) => dispatch(toggleMoreFacetRows(facet)),\r\n});\r\n\r\nexport const FacetMoreToggleConnected: React.ComponentClass<IFacetMoreToggleProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FacetMoreToggle);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IFacet} from './Facet';\r\n\r\nexport interface IFacetRowProps extends React.ClassAttributes<FacetRow> {\r\n    facetRow: IFacet;\r\n    facet: string;\r\n    onToggleFacet: (facetRow: IFacet) => void;\r\n    isChecked: boolean;\r\n    maxTooltipLabelLength?: number;\r\n    enableExclusions?: boolean;\r\n    excludeTooltipMessage?(facetsRowName: string): string;\r\n}\r\n\r\nexport class FacetRow extends React.Component<IFacetRowProps, any> {\r\n    static defaultProps: Partial<IFacetRowProps> = {\r\n        maxTooltipLabelLength: 25,\r\n    };\r\n\r\n    get isExclude(): boolean {\r\n        return !!this.props.enableExclusions && !!this.props.facetRow.exclude;\r\n    }\r\n\r\n    render() {\r\n        const className: string = classNames('facet-value', 'facet-selectable', {\r\n            'facet-exclude': this.props.enableExclusions,\r\n        });\r\n        return (\r\n            <li className={className}>\r\n                {this.getExcludeCheckbox()}\r\n                <label\r\n                    className=\"coveo-checkbox-label facet-value-label\"\r\n                    onClick={(e) => {\r\n                        // prevent event bubbling and trigger onToggleFacet only once no matter where you click on the row\r\n                        e.preventDefault();\r\n                        this.toggleFacet();\r\n                    }}\r\n                >\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name={this.props.facetRow.name}\r\n                        className=\"coveo-checkbox facet-checkbox-input\"\r\n                        checked={this.props.isChecked && !this.isExclude}\r\n                        onClick={this.stopEvent}\r\n                        onChange={_.noop}\r\n                    />\r\n                    <button type=\"button\" className={this.props.isChecked && this.isExclude ? 'exclude-box' : ''}>\r\n                        <Svg svgName=\"clear\" className=\"icon hide exclude-icon\" svgClass=\"fill-red\" />\r\n                    </button>\r\n                    {this.getLabel()}\r\n                    {this.getCount()}\r\n                </label>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    private getLabel(): JSX.Element {\r\n        const maxCalculatedNameLength = this.props.facetRow.count\r\n            ? this.props.maxTooltipLabelLength - this.props.facetRow.count.length\r\n            : this.props.maxTooltipLabelLength;\r\n\r\n        const className = classNames({'text-exclude': this.props.isChecked && this.isExclude});\r\n        const label: JSX.Element = <span className={className}>{this.props.facetRow.formattedName}</span>;\r\n\r\n        return this.props.facetRow.formattedName.length > maxCalculatedNameLength ? (\r\n            <Tooltip\r\n                title={this.props.facetRow.tooltipLabel || this.props.facetRow.formattedName}\r\n                placement=\"top\"\r\n                className=\"label\"\r\n            >\r\n                {label}\r\n            </Tooltip>\r\n        ) : (\r\n            <span className=\"label\">{label}</span>\r\n        );\r\n    }\r\n\r\n    private getCount(): JSX.Element {\r\n        if (!_.isUndefined(this.props.facetRow.count)) {\r\n            return (\r\n                <span\r\n                    className={classNames('facet-value-count', {\r\n                        'text-exclude': this.props.isChecked && this.isExclude,\r\n                    })}\r\n                >\r\n                    {this.props.facetRow.count}\r\n                </span>\r\n            );\r\n        }\r\n    }\r\n\r\n    private getExcludeCheckbox(): JSX.Element {\r\n        if (!!this.props.enableExclusions) {\r\n            return (\r\n                <div className=\"flex center-align facet-exclude-button\" onClick={() => this.toggleFacetToExclude()}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"coveo-checkbox\"\r\n                        checked={this.props.isChecked && this.isExclude}\r\n                        onClick={this.stopEvent}\r\n                        onChange={_.noop}\r\n                    />\r\n                    {this.getExcludeButton()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    private getExcludeButton(): JSX.Element {\r\n        return this.props.excludeTooltipMessage ? (\r\n            <Tooltip\r\n                className=\"exclude-button\"\r\n                title={this.props.excludeTooltipMessage(this.props.facetRow.formattedName)}\r\n            >\r\n                <Svg svgName=\"exclude\" className=\"icon\" svgClass=\"fill-medium-grey\" />\r\n            </Tooltip>\r\n        ) : (\r\n            <Svg svgName=\"exclude\" className=\"exclude-button icon\" svgClass=\"fill-medium-grey\" />\r\n        );\r\n    }\r\n\r\n    private stopEvent(event: React.MouseEvent<HTMLInputElement>): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    private toggleFacetToExclude(): void {\r\n        this.props.onToggleFacet({...this.props.facetRow, exclude: !this.isExclude});\r\n    }\r\n\r\n    private toggleFacet(): void {\r\n        this.props.onToggleFacet({...this.props.facetRow, exclude: false});\r\n    }\r\n}\r\n","export * from './Section';\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {Facet, IFacet, IFacetDispatchProps, IFacetOwnProps, IFacetProps, IFacetStateProps} from './Facet';\r\nimport {addFacet, changeFacet, emptyFacet, removeFacet} from './FacetActions';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetOwnProps): IFacetStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet.name});\r\n    const selectedFacetRows: IFacet[] = item ? getSelectedRows(ownProps.facetRows, item.selected) : [];\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n        selectedFacetRows,\r\n        withReduxState: true,\r\n    };\r\n};\r\n\r\nconst getSelectedRows = (rows: IFacet[], selectedRows: IFacet[]): IFacet[] =>\r\n    _.compact(\r\n        _.map(rows, (row: IFacet) => {\r\n            const selectedRow: IFacet = _.findWhere(selectedRows, {name: row.name});\r\n            return selectedRow && {...selectedRow, ...row};\r\n        })\r\n    );\r\n\r\nconst mapDispatchToProps = (dispatch: (action: IReduxAction<IReduxActionsPayload>) => void): IFacetDispatchProps => ({\r\n    onRender: (facet: string) => dispatch(addFacet(facet)),\r\n    onDestroy: (facet: string) => dispatch(removeFacet(facet)),\r\n    onToggleFacet: (facet: string, facetRow: IFacet) => dispatch(changeFacet(facet, facetRow)),\r\n    onClearFacet: (facet: string) => dispatch(emptyFacet(facet)),\r\n});\r\n\r\nexport const FacetConnected: React.ComponentClass<IFacetProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Facet);\r\n"],"sourceRoot":""}