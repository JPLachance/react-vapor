(window.webpackJsonp=window.webpackJsonp||[]).push([[667],{1749:function(r,e,t){"use strict";t.r(e),e.default="import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {WithServerSideProcessingProps} from '../../../hoc/withServerSideProcessing/withServerSideProcessing';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {addStringList, addValueStringList, removeStringList} from '../../../reusableState/customList/StringListActions';\r\nimport {IDispatch, ReduxConnect} from '../../../utils/ReduxUtils';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {Button, IButtonProps} from '../../button/Button';\r\nimport {IFilterBoxOwnProps} from '../../filterBox/FilterBox';\r\nimport {FilterBoxConnected} from '../../filterBox/FilterBoxConnected';\r\nimport {FilterBoxSelectors} from '../../filterBox/FilterBoxSelectors';\r\nimport {MatchFilter} from '../../filterBox/FilterBoxUtils';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ISelectOwnProps, ISelectSpecificProps} from '../SelectConnected';\r\nimport {SelectSelector} from '../SelectSelector';\r\n\r\nexport interface ISelectWithFilterOwnProps {\r\n    defaultCustomValues?: string[];\r\n    matchFilter?: MatchFilter;\r\n    customValues?: boolean;\r\n    addValueText?: (filterText: string) => string;\r\n    duplicateText?: string;\r\n    noResultFilterText?: (filterText: string) => string;\r\n    noItemsText?: string;\r\n    filterButton?: IButtonProps;\r\n    filter?: IFilterBoxOwnProps;\r\n}\r\n\r\nexport interface ISelectWithFilterStateProps {\r\n    filterValue: string;\r\n    selected: string[];\r\n    items: IItemBoxProps[];\r\n}\r\n\r\nexport interface ISelectWithFilterDispatchProps {\r\n    onRenderFilter: (items: string[]) => void;\r\n    onDestroyFilter: () => void;\r\n    onSelectCustomValue: (filterValue: string) => void;\r\n}\r\n\r\nconst SelectWithFilterPropsToOmit = keys<ISelectWithFilterOwnProps>();\r\n\r\nexport interface ISelectWithFilterProps\r\n    extends ISelectWithFilterOwnProps,\r\n        Partial<ISelectWithFilterStateProps>,\r\n        Partial<ISelectWithFilterDispatchProps>,\r\n        WithServerSideProcessingProps,\r\n        ISelectOwnProps {}\r\n\r\nexport const selectWithFilter = (\r\n    Component: React.ComponentType<ISelectWithFilterProps>\r\n): React.ComponentType<ISelectWithFilterProps> => {\r\n    const makeMapStateToProps = (initialState: IReactVaporState, initialOwnProps: ISelectWithFilterProps) =>\r\n        createStructuredSelector({\r\n            filterValue: FilterBoxSelectors.getFilterText,\r\n            items: initialOwnProps.isServer\r\n                ? SelectSelector.getServerFilteredItems\r\n                : SelectSelector.getCustomItemsWithFilter,\r\n            selected: SelectSelector.getListBoxSelected,\r\n        });\r\n\r\n    const mapDispatchToProps = (\r\n        dispatch: IDispatch,\r\n        ownProps: ISelectOwnProps & ISelectSpecificProps\r\n    ): ISelectWithFilterDispatchProps => ({\r\n        onRenderFilter: (items: string[]) => dispatch(addStringList(ownProps.id, items)),\r\n        onDestroyFilter: () => dispatch(removeStringList(ownProps.id)),\r\n        onSelectCustomValue: (filterValue: string) => dispatch(addValueStringList(ownProps.id, filterValue)),\r\n    });\r\n\r\n    @ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\n    class WrappedComponent extends React.Component<ISelectWithFilterProps> {\r\n        static displayName = `withFilter(${Component.displayName})`;\r\n        static defaultProps: Partial<ISelectWithFilterProps> = {\r\n            duplicateText: 'Cannot add a duplicate value',\r\n            noResultFilterText: (filterText: string) => `No results match \"${filterText}\"`,\r\n            noItemsText: 'No items, enter a new value',\r\n            addValueText: (filterText: string) => `Add \"${filterText}\"`,\r\n            filterButton: {\r\n                enabled: true,\r\n                tooltip: 'Add',\r\n                tooltipPlacement: 'top',\r\n            },\r\n            defaultCustomValues: [],\r\n        };\r\n\r\n        private dividerId: string = UUID.generate();\r\n\r\n        componentWillMount() {\r\n            this.props.onRenderFilter(this.props.defaultCustomValues);\r\n        }\r\n\r\n        componentDidUpdate(prevProps: ISelectWithFilterProps) {\r\n            if (prevProps.filterValue !== this.props.filterValue) {\r\n                this.props.onUpdate?.();\r\n            }\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            this.props.onDestroyFilter();\r\n        }\r\n\r\n        private addItemBoxCustomValue(): IItemBoxProps[] {\r\n            const addItemBox: IItemBoxProps = {\r\n                displayValue: this.props.addValueText(this.props.filterValue),\r\n                value: this.props.filterValue,\r\n                onOptionClick: () => this.props.onSelectCustomValue(this.props.filterValue),\r\n            };\r\n            const divider: IItemBoxProps[] = _.some(this.props.items, (item: IItemBoxProps) => !item.hidden)\r\n                ? [{value: this.dividerId, divider: true, disabled: true}]\r\n                : [];\r\n\r\n            return [addItemBox, ...divider];\r\n        }\r\n\r\n        private noResultFilter(): IItemBoxProps {\r\n            return {\r\n                value: this.props.noResultFilterText(this.props.filterValue),\r\n            };\r\n        }\r\n\r\n        private duplicateValue(): IItemBoxProps {\r\n            return {\r\n                value: this.props.duplicateText,\r\n                disabled: true,\r\n            };\r\n        }\r\n\r\n        private noItems(): IItemBoxProps {\r\n            return {\r\n                value: this.props.noItemsText,\r\n                disabled: true,\r\n            };\r\n        }\r\n\r\n        private handleOnClick = () => {\r\n            if (!_.isEmpty(this.props.filterValue)) {\r\n                this.props.onSelectCustomValue(this.props.filterValue);\r\n            }\r\n        };\r\n\r\n        private getAddValueButton(): React.ReactNode {\r\n            return (\r\n                this.props.customValues && (\r\n                    <div className=\"ml1\">\r\n                        <Button classes={['p1']} onClick={this.handleOnClick} {...this.props.filterButton}>\r\n                            <Svg svgName={'add'} className=\"icon mod-lg mod-align-with-text\" />\r\n                        </Button>\r\n                    </div>\r\n                )\r\n            );\r\n        }\r\n\r\n        private isDuplicateValue(): boolean {\r\n            return (\r\n                _.chain(this.props.items)\r\n                    .pluck('value')\r\n                    .concat(this.props.selected)\r\n                    .indexOf(this.props.filterValue)\r\n                    .value() !== -1\r\n            );\r\n        }\r\n\r\n        private allValuesAreSelected(): boolean {\r\n            return !_.chain(this.props.items)\r\n                .pluck('value')\r\n                .contains(this.props.selected)\r\n                .value();\r\n        }\r\n\r\n        render() {\r\n            const filterBoxClassNames: string = classNames({\r\n                'flex flex-center': this.props.customValues,\r\n                mb2: !!this.props.children,\r\n            });\r\n\r\n            let noResultItem: React.ReactNode = this.props.noResultItem || this.noResultFilter();\r\n            let items = this.props.items.map(\r\n                (item: IItemBoxProps): IItemBoxProps => ({...item, highlight: this.props.filterValue})\r\n            );\r\n\r\n            if (this.isDuplicateValue()) {\r\n                noResultItem = this.duplicateValue();\r\n            } else if (!_.isEmpty(this.props.filterValue) && this.props.customValues) {\r\n                items = [...this.addItemBoxCustomValue(), ...items];\r\n            } else if (this.props.customValues && _.every(items, (item) => item.hidden)) {\r\n                noResultItem = this.noItems();\r\n            } else if (items.length && this.allValuesAreSelected()) {\r\n                noResultItem = this.noItems();\r\n            }\r\n\r\n            const newProps = {\r\n                ..._.omit(this.props, [...SelectWithFilterPropsToOmit, 'selected']),\r\n                items,\r\n            };\r\n\r\n            return (\r\n                <Component\r\n                    {...newProps}\r\n                    noResultItem={noResultItem}\r\n                    noDisabled={this.props.customValues}\r\n                    hasFocusableChild\r\n                >\r\n                    <FilterBoxConnected\r\n                        {...this.props.filter}\r\n                        id={this.props.id}\r\n                        onKeyDown={(this.props as any).onKeyDown}\r\n                        onKeyUp={(this.props as any).onKeyUp}\r\n                        className={filterBoxClassNames}\r\n                        isAutoFocus\r\n                    >\r\n                        {this.getAddValueButton()}\r\n                    </FilterBoxConnected>\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return WrappedComponent;\r\n};\r\n"}}]);
//# sourceMappingURL=667.bundle.js.map