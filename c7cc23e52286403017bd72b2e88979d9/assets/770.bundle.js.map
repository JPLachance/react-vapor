{"version":3,"sources":["webpack:///./src/components/table-hoc/TableWithFilter.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/770.bundle.js","sourcesContent":["export default \"import * as React from 'react';\\r\\nimport {keys} from 'ts-transformer-keys';\\r\\nimport * as _ from 'underscore';\\r\\n\\r\\nimport {WithServerSideProcessingProps} from '../../hoc/withServerSideProcessing/withServerSideProcessing';\\r\\nimport {IReactVaporState} from '../../ReactVapor';\\r\\nimport {ConfigSupplier, HocUtils} from '../../utils/HocUtils';\\r\\nimport {ReduxConnect} from '../../utils/ReduxUtils';\\r\\nimport {FilterBoxConnected} from '../filterBox/FilterBoxConnected';\\r\\nimport {FilterBoxSelectors} from '../filterBox/FilterBoxSelectors';\\r\\nimport {ITableHOCOwnProps} from './TableHOC';\\r\\n\\r\\nexport interface ITableWithFilterConfig extends WithServerSideProcessingProps {\\r\\n    matchFilter?: (filterValue: string, datum: any) => boolean;\\r\\n    placeholder?: string;\\r\\n}\\r\\n\\r\\nexport interface ITableWithFilterStateProps {\\r\\n    filter: string;\\r\\n}\\r\\n\\r\\nexport interface ITableWithFilterDispatchProps {\\r\\n    onRender: () => void;\\r\\n}\\r\\n\\r\\nexport interface ITableWithFilterProps\\r\\n    extends Partial<ITableWithFilterStateProps>,\\r\\n        Partial<ITableWithFilterDispatchProps>,\\r\\n        ITableHOCOwnProps,\\r\\n        WithServerSideProcessingProps {}\\r\\n\\r\\nconst TableWithFilterPropsToOmit = keys<ITableWithFilterStateProps>();\\r\\n\\r\\nconst defaultMatchFilter = (filter: string, datum: any) =>\\r\\n    JSON.stringify(_.values(datum).map((v: any) => _.isString(v) && v.toLowerCase())).indexOf(filter.toLowerCase()) !==\\r\\n    -1;\\r\\n\\r\\ntype FilterableTableComponent = React.ComponentClass<ITableWithFilterProps>;\\r\\n\\r\\nexport const tableWithFilter = (supplier: ConfigSupplier<ITableWithFilterConfig> = {}) => (\\r\\n    Component: FilterableTableComponent\\r\\n): FilterableTableComponent => {\\r\\n    const config = HocUtils.supplyConfig(supplier);\\r\\n\\r\\n    const mapStateToProps = (\\r\\n        state: IReactVaporState,\\r\\n        ownProps: ITableWithFilterProps\\r\\n    ): ITableWithFilterStateProps | ITableHOCOwnProps => {\\r\\n        const filterText = FilterBoxSelectors.getFilterText(state, ownProps);\\r\\n        const matchFilter = config.matchFilter || defaultMatchFilter;\\r\\n        const filterData = () =>\\r\\n            filterText ? _.filter(ownProps.data, (datum: any) => matchFilter(filterText, datum)) : ownProps.data;\\r\\n\\r\\n        return {\\r\\n            filter: filterText,\\r\\n            data: ownProps.isServer || config.isServer ? ownProps.data : ownProps.data && filterData(),\\r\\n        };\\r\\n    };\\r\\n\\r\\n    @ReduxConnect(mapStateToProps)\\r\\n    class TableWithFilter extends React.Component<ITableWithFilterProps> {\\r\\n        componentDidUpdate(prevProps: ITableWithFilterProps) {\\r\\n            if (prevProps.filter !== this.props.filter) {\\r\\n                this.props.onUpdate?.();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        render() {\\r\\n            const filterAction = (\\r\\n                <FilterBoxConnected\\r\\n                    key=\\\"FilterBox\\\"\\r\\n                    id={this.props.id}\\r\\n                    className=\\\"coveo-table-actions\\\"\\r\\n                    filterPlaceholder={config.placeholder}\\r\\n                    isAutoFocus\\r\\n                />\\r\\n            );\\r\\n            const newActions = [...(this.props.actions || []), filterAction];\\r\\n            const newProps = _.omit(this.props, [...TableWithFilterPropsToOmit]);\\r\\n            return (\\r\\n                <Component {...newProps} actions={newActions}>\\r\\n                    {this.props.children}\\r\\n                </Component>\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return TableWithFilter;\\r\\n};\\r\\n\""],"sourceRoot":""}