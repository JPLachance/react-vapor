{"version":3,"sources":["webpack:///./src/components/examples/DatePickerExamplesCommon.ts","webpack:////home/travis/build/coveo/react-vapor/node_modules/moment/locale sync en-ca","webpack:///./src/components/examples/TableHOCExamples.tsx"],"names":["SELECTION_BOXES","title","quickOptions","label","value","subtract","toDate","toString","Date","isRange","withTime","hasSetToNowButton","color","blue","defaultQuickOptions","SELECTION_BOXES_LONG","FOUR_SELECTION_BOXES","CALENDAR_SELECTION_RULES","test","date","startOf","isFor","all","getDay","lower","upper","endDate","diff","range","DATE_RANGE_EXAMPLE","add","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","TableHOCExamples","level","TableWithActionsAndDataFiltering","data","twoHundredRowsOfData","generateDataWithFacker","length","i","fakedData","contextualCard","city","address","email","username","dateOfBirth","dob","generate","rowActions","primary","icon","name","enabled","trigger","alert","callOnDoubleClick","unrepeatable","requiresConfirmation","confirmLabel","confirmType","buttonLabels","confirm","cancel","generateTableRow","allData","tableId","key","actions","toLowerCase","toLocaleDateString","tableDatePickerConfig","datesSelectionBoxes","matchDates","lowerLimit","upperLimit","years","getPreviousYears","currentYear","initialDateRange","matchPredicate","predicate","rowData","matchCity","matchEmail","sort","isAsc","a","b","dateCompare","compare","localeCompare","predicateSetup","prepend","className","values","displayValue","selected","undefined","dispatch","resetFilter","TableWithActionsAndDataFilteringComposed","description","buttons","onClick","perPageNumbers","renderBody","Alldata","tableHeader","showBorderTop"],"mappings":"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","file":"assets/116.bundle.js","sourcesContent":["import * as moment from 'moment';\r\nimport {\r\n    CalendarSelectionRuleType,\r\n    DatePickerColors,\r\n    DatePickerDateRange,\r\n    DATES_SEPARATOR,\r\n    ICalendarSelectionRule,\r\n    IDatesSelectionBox,\r\n} from 'react-vapor';\r\n\r\nexport const SELECTION_BOXES: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: [\r\n            {\r\n                label: 'Last 10 seconds',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(10, 'seconds')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last minute',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'minute')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last 5 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(5, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last 30 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(30, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last hour',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'hour')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last day',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'day')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n        ],\r\n        isRange: true,\r\n        withTime: true,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nconst defaultQuickOptions = [\r\n    {\r\n        label: 'Last day',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'day')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n    {\r\n        label: 'Last week',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'week')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n    {\r\n        label: 'Last month',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'month')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n    {\r\n        label: 'Last year',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'year')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOXES_LONG: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: defaultQuickOptions,\r\n        isRange: true,\r\n        withTime: true,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOXES_LONG_WITHOUT_TIME: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: defaultQuickOptions,\r\n        isRange: true,\r\n        withTime: false,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOXES_WITHOUT_TIME_AND_NOW: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: defaultQuickOptions,\r\n        isRange: true,\r\n        withTime: false,\r\n        hasSetToNowButton: false,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const FOUR_SELECTION_BOXES: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: [\r\n            {\r\n                label: 'Last 5 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(5, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last 30 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(30, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last hour',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'hour')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last day',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'day')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n        ],\r\n        isRange: true,\r\n        withTime: true,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const CALENDAR_SELECTION_RULES: ICalendarSelectionRule[] = [\r\n    {\r\n        test: (date: Date) =>\r\n            date >=\r\n            moment()\r\n                .startOf('day')\r\n                .toDate(), // You cannot select a date in the past\r\n        isFor: CalendarSelectionRuleType.all,\r\n    },\r\n    {\r\n        test: (date: Date) => date.getDay() !== 6, // You cannot start your selection on a Saturday\r\n        isFor: CalendarSelectionRuleType.lower,\r\n    },\r\n    {\r\n        test: (date: Date) => date.getDay() !== 0, // You cannot end your selection on a Sunday\r\n        isFor: CalendarSelectionRuleType.upper,\r\n    },\r\n    {\r\n        test: (date: Date, endDate: Date) => moment(endDate).diff(moment(date), 'day') >= 0, // The end of your selection cannot be before the start of your selection\r\n        isFor: CalendarSelectionRuleType.range,\r\n    },\r\n    {\r\n        test: (date: Date, endDate: Date) => moment(endDate).diff(moment(date), 'day') <= 7, // You cannot select more than 7 days at a time\r\n        isFor: CalendarSelectionRuleType.range,\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOX: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Select date',\r\n        quickOptions: [\r\n            {\r\n                label: 'A year ago',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'year')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n            {\r\n                label: 'A month ago',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'month')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n            {\r\n                label: 'A week ago',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'week')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n            {\r\n                label: 'Yesterday',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'day')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n        ],\r\n        isRange: false,\r\n        withTime: false,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const CALENDAR_SELECTION_RULES_SINGLE_DATE: ICalendarSelectionRule[] = [\r\n    {\r\n        test: (date: Date) => date.getFullYear() > 1700 || date.getFullYear() < 4000, // You cannot select a date before year 1700 and over 4000\r\n        isFor: CalendarSelectionRuleType.all,\r\n    },\r\n];\r\n\r\nexport const DATE_RANGE_EXAMPLE: DatePickerDateRange = [\r\n    moment().toDate(),\r\n    moment()\r\n        .add(3, 'day')\r\n        .toDate(),\r\n];\r\n","var map = {\n\t\"./en-ca\": 131,\n\t\"./en-ca.js\": 131\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 136;","import {helpers, seed} from 'faker/locale/en';\r\nimport * as moment from 'moment';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    DateUtils,\r\n    filterThrough,\r\n    IDispatch,\r\n    Section,\r\n    TableHeaderWithSort,\r\n    TableHOC,\r\n    TableRowConnected,\r\n    tableWithActions,\r\n    tableWithBlankSlate,\r\n    tableWithDatePicker,\r\n    tableWithFilter,\r\n    tableWithPagination,\r\n    tableWithPredicate,\r\n    tableWithSort,\r\n    UUID,\r\n} from 'react-vapor';\r\nimport * as _ from 'underscore';\r\n\r\nimport {SELECTION_BOXES_LONG} from './DatePickerExamplesCommon';\r\n\r\nexport interface IExampleRowData {\r\n    city: string;\r\n    email: string;\r\n    username: string;\r\n    dateOfBirth: Date;\r\n    id: string;\r\n}\r\n\r\nexport const TableHOCExamples = () => (\r\n    <Section title=\"Table HOC\">\r\n        <Section level={2} title=\"Table with Data\">\r\n            <TableWithActionsAndDataFiltering id=\"TableWithActionsAndDataFiltering\" data={twoHundredRowsOfData} />\r\n        </Section>\r\n        <Section level={2} title=\"Table without data\">\r\n            <TableWithActionsAndDataFiltering id=\"TableWithActionsAndDataFiltering2\" data={[]} />\r\n        </Section>\r\n    </Section>\r\n);\r\n\r\n// https://github.com/marak/Faker.js/\r\nexport const generateDataWithFacker = (length: number) =>\r\n    _.map(_.range(length), (i: number) => {\r\n        seed(i + 1);\r\n        const fakedData = helpers.contextualCard();\r\n        return {\r\n            city: fakedData.address.city,\r\n            email: fakedData.email,\r\n            username: fakedData.username,\r\n            dateOfBirth: fakedData.dob,\r\n            id: UUID.generate(),\r\n        };\r\n    });\r\nconst twoHundredRowsOfData = generateDataWithFacker(200);\r\n\r\n// start-print\r\n\r\nconst rowActions = [\r\n    {\r\n        primary: true,\r\n        icon: 'edit',\r\n        name: 'edit',\r\n        enabled: true,\r\n        trigger: () => alert('trigger on action'),\r\n        callOnDoubleClick: true,\r\n    },\r\n    {primary: false, icon: 'view', name: 'view', enabled: true},\r\n    {primary: false, icon: 'copy', name: 'copy', enabled: true},\r\n    {\r\n        primary: false,\r\n        icon: 'delete',\r\n        name: 'delete',\r\n        enabled: true,\r\n        unrepeatable: true,\r\n        requiresConfirmation: {\r\n            confirmLabel: 'wanna do it ?',\r\n            confirmType: 'danger',\r\n            buttonLabels: {\r\n                confirm: 'Confirm',\r\n                cancel: 'Cancel',\r\n            },\r\n        },\r\n    },\r\n];\r\n\r\nconst renderHeader = (tableId: string) => (\r\n    <thead>\r\n        <tr>\r\n            <TableHeaderWithSort id=\"city\" tableId={tableId}>\r\n                City\r\n            </TableHeaderWithSort>\r\n            <TableHeaderWithSort id=\"email\" tableId={tableId}>\r\n                Email\r\n            </TableHeaderWithSort>\r\n            <TableHeaderWithSort id=\"username\" tableId={tableId}>\r\n                Username\r\n            </TableHeaderWithSort>\r\n            <th>Date of birth</th>\r\n        </tr>\r\n    </thead>\r\n);\r\n\r\nexport const generateTableRow = (allData: IExampleRowData[], tableId: string) =>\r\n    allData.map((data: IExampleRowData) => (\r\n        <TableRowConnected id={data.id} tableId={tableId} key={data.id} actions={rowActions}>\r\n            <td key=\"city\">{data.city}</td>\r\n            <td key=\"email\">{data.email.toLowerCase()}</td>\r\n            <td key=\"username\">{data.username.toLowerCase()}</td>\r\n            <td key=\"date-of-birth\">{data.dateOfBirth.toLocaleDateString()}</td>\r\n        </TableRowConnected>\r\n    ));\r\n\r\nconst tableDatePickerConfig = () => ({\r\n    datesSelectionBoxes: SELECTION_BOXES_LONG,\r\n    matchDates: (data: IExampleRowData, lowerLimit: Date, upperLimit?: Date) =>\r\n        _.isUndefined(upperLimit) || (lowerLimit <= data.dateOfBirth && data.dateOfBirth <= upperLimit),\r\n    years: [...DateUtils.getPreviousYears(100), DateUtils.currentYear.toString()],\r\n    initialDateRange: [\r\n        moment()\r\n            .subtract(75, 'years')\r\n            .toDate(),\r\n        moment().toDate(),\r\n    ],\r\n});\r\n\r\nconst matchPredicate = (predicate: string, rowData: IExampleRowData) => {\r\n    const matchCity = predicate === rowData.city;\r\n    const matchEmail = predicate === rowData.email;\r\n    return !predicate || matchCity || matchEmail;\r\n};\r\n\r\nconst sort = (key: keyof IExampleRowData, isAsc: boolean, a: IExampleRowData, b: IExampleRowData) => {\r\n    if (key) {\r\n        if (a[key] instanceof Date) {\r\n            const dateCompare = (a[key] as any) - (b[key] as any);\r\n            return isAsc ? dateCompare : -1 * dateCompare;\r\n        }\r\n        const compare = (a[key] as string).toLowerCase().localeCompare((b[key] as string).toLowerCase());\r\n\r\n        return isAsc ? compare : -1 * compare;\r\n    }\r\n    return 0;\r\n};\r\n\r\nconst predicateSetup = {\r\n    id: 'firstPredicate',\r\n    prepend: <span className=\"mr1 text-medium-grey\">prepend:</span>,\r\n    values: [\r\n        {displayValue: 'All', value: '', selected: true},\r\n        {displayValue: twoHundredRowsOfData[2].city, value: twoHundredRowsOfData[2].city},\r\n        {displayValue: twoHundredRowsOfData[1].email, value: twoHundredRowsOfData[1].email},\r\n    ],\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\r\n    resetFilter: (id: string) => dispatch(filterThrough(id, '')),\r\n});\r\n\r\ntype TableWithActionsAndDataFilteringProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst TableWithActionsAndDataFilteringDisconnected: React.FunctionComponent<{\r\n    data: any[];\r\n    id: string;\r\n} & TableWithActionsAndDataFilteringProps> = ({id, data, resetFilter}) => {\r\n    const TableWithActionsAndDataFilteringComposed = _.compose(\r\n        tableWithBlankSlate({\r\n            title: 'No data',\r\n        }),\r\n        tableWithPredicate({\r\n            ...predicateSetup,\r\n            matchPredicate,\r\n        }),\r\n        tableWithFilter(), // using the default matchfilter\r\n        tableWithBlankSlate({\r\n            title: 'No results',\r\n            description: 'Try reviewing the specified filters above or clearing all filters.',\r\n            buttons: [\r\n                {\r\n                    name: 'Clear filter',\r\n                    enabled: true,\r\n                    onClick: () => resetFilter(id),\r\n                },\r\n            ],\r\n        }),\r\n        tableWithSort({sort}),\r\n        tableWithDatePicker(...(tableDatePickerConfig as any)),\r\n        tableWithPagination({perPageNumbers: [3, 5, 10]}),\r\n        tableWithActions()\r\n    )(TableHOC);\r\n\r\n    return (\r\n        <TableWithActionsAndDataFilteringComposed\r\n            id={id}\r\n            className=\"table\"\r\n            data={data}\r\n            renderBody={(Alldata: IExampleRowData[]) => generateTableRow(Alldata, id)}\r\n            tableHeader={renderHeader(id)}\r\n            showBorderTop\r\n        />\r\n    );\r\n};\r\n\r\nconst TableWithActionsAndDataFiltering = connect(\r\n    undefined,\r\n    mapDispatchToProps\r\n)(TableWithActionsAndDataFilteringDisconnected);\r\n"],"sourceRoot":""}