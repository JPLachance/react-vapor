{"version":3,"sources":["webpack:///./src/components/chart/tests/XYChart.spec.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/210.bundle.js","sourcesContent":["export default \"import {shallow} from 'enzyme';\\r\\nimport * as React from 'react';\\r\\n\\r\\nimport {XYChart, XYChartContext} from '../XYChart';\\r\\nimport {XYChartContextMock} from './XYChartContextMock';\\r\\n\\r\\ndescribe('<XYChart />', () => {\\r\\n    it('should not throw', () => {\\r\\n        expect(() => {\\r\\n            shallow(<XYChart height={10} width={50} series={[]} />);\\r\\n            shallow(<XYChart height={10} width={50} series={XYChartContextMock.series} />);\\r\\n            shallow(<XYChart height={10} width={50} series={XYChartContextMock.series} padding={10} />);\\r\\n            shallow(\\r\\n                <XYChart\\r\\n                    height={10}\\r\\n                    width={50}\\r\\n                    series={XYChartContextMock.series.concat({label: 'name', data: []})}\\r\\n                    padding={{top: 10}}\\r\\n                />\\r\\n            );\\r\\n            shallow(\\r\\n                <XYChart\\r\\n                    height={10}\\r\\n                    width={50}\\r\\n                    series={XYChartContextMock.series}\\r\\n                    colorPattern={['red', 'rgba(255,0,0,0.4)', '#abc']}\\r\\n                    xFormat={(value: number) => value.toFixed(2)}\\r\\n                    yFormat={(value: number) => value * 10 + '%'}\\r\\n                    xTicksCount={5}\\r\\n                    yTicksCount={10}\\r\\n                />\\r\\n            );\\r\\n        }).not.toThrow();\\r\\n    });\\r\\n\\r\\n    it('should render a context provider', () => {\\r\\n        const component = shallow(<XYChart height={100} width={100} series={XYChartContextMock.series} />);\\r\\n\\r\\n        const provider = component.find(XYChartContext.Provider);\\r\\n        expect(provider.exists()).toBe(true);\\r\\n    });\\r\\n\\r\\n    it('should render a context provider', () => {\\r\\n        const colorPattern = ['red', 'blue', 'green'];\\r\\n        const component = shallow(\\r\\n            <XYChart height={100} width={100} series={XYChartContextMock.series} colorPattern={colorPattern} />\\r\\n        );\\r\\n\\r\\n        const provider = component.find(XYChartContext.Provider);\\r\\n        const context = provider.prop('value');\\r\\n        expect(context.color(0, colorPattern)).toBe(colorPattern[0]);\\r\\n    });\\r\\n\\r\\n    it('should render a svg with the width and height', () => {\\r\\n        const expectedWidth = 10;\\r\\n        const expectedHeight = 50;\\r\\n        const component = shallow(\\r\\n            <XYChart height={expectedHeight} width={expectedWidth} series={XYChartContextMock.series} padding={0} />\\r\\n        );\\r\\n\\r\\n        const svg = component.find('svg');\\r\\n        expect(svg.exists()).toBe(true);\\r\\n        expect(svg.prop('height')).toBe(expectedHeight);\\r\\n        expect(svg.prop('width')).toBe(expectedWidth);\\r\\n    });\\r\\n\\r\\n    it('should substract the padding from the width and height', () => {\\r\\n        const initialWidth = 10;\\r\\n        const initialHeight = 50;\\r\\n        const padding = 5;\\r\\n        const component = shallow(\\r\\n            <XYChart height={initialHeight} width={initialWidth} series={XYChartContextMock.series} padding={padding} />\\r\\n        );\\r\\n\\r\\n        const svg = component.find('svg');\\r\\n        expect(svg.prop('height')).toBe(initialHeight - 2 * padding);\\r\\n        expect(svg.prop('width')).toBe(initialWidth - 2 * padding);\\r\\n    });\\r\\n\\r\\n    it('should render a g with the top and left padding transform', () => {\\r\\n        const expectedLeftPadding = 10;\\r\\n        const expectedTopPadding = 50;\\r\\n        const component = shallow(\\r\\n            <XYChart\\r\\n                height={100}\\r\\n                width={200}\\r\\n                series={XYChartContextMock.series}\\r\\n                padding={{left: expectedLeftPadding, top: expectedTopPadding}}\\r\\n            />\\r\\n        );\\r\\n\\r\\n        const g = component.find('g');\\r\\n        expect(g.exists()).toBe(true);\\r\\n        expect(g.prop('transform')).toBe(`translate(${expectedLeftPadding},${expectedTopPadding})`);\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}