{"version":3,"sources":["webpack:////home/travis/build/coveo/react-vapor/node_modules/reselect/es/index.js","webpack:///./src/components/examples/InputExamples.tsx"],"names":["defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","length","i","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelector","memoize","_len","arguments","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","apply","undefined","concat","selector","params","push","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","TextInputExamples","title","SimpleInputDisconnected","InputsConnected","InputsWithDirtyManagement","MultilineInputComponents","MultilineBoxExamples","description","level","MultilineInputExample","SplitMultilineInputExamples","autoCompleteItems","displayValue","value","disabled","inputValue","setInputValue","inputClasses","setInputClasses","id","innerInputClasses","placeholder","ref","input","onKeyUp","innerInput","getInnerValue","validMessage","invalidMessage","validate","labelTitle","labelProps","validateOnChange","disabledOnMount","defaultValue","name","enabled","onClick","Store","dispatch","getState","inputs","items","InputWithDirty","MessageWhenInputIsDirty","selectors","selectorCreator","objectKeys","Object","keys","key","_len3","values","_key3","reduce","composition","index","createStructuredSelector","isDirty","state","getValues","data","className","JSON","stringify","label","validation","validationMessage","InitialValues","defaultValues","MultilineBoxWithFunctionnalities","MultilineBoxWithCustomization","containerNode","child","renderBody","parentProps","cData","classes","props","onChange","isLast","addNewBox","defaultProps"],"mappings":"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","file":"assets/148.bundle.js","sourcesContent":["function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    AutocompleteConnected,\r\n    Button,\r\n    IItemBoxProps,\r\n    IMultilineSingleBoxProps,\r\n    Input,\r\n    InputConnected,\r\n    ISplitInput,\r\n    Label,\r\n    MultilineBox,\r\n    multilineBoxContainer,\r\n    multilineBoxWithDnD,\r\n    multilineBoxWithRemoveButton,\r\n    MultiValuesInput,\r\n    MultiValuesInputSelectors,\r\n    Section,\r\n    setDisabledInput,\r\n    SplitMultilineInput,\r\n    ValidationSelectors,\r\n    withDirtyInputHOC,\r\n} from 'react-vapor';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Store} from '../../Store';\r\nimport {ExampleComponent} from '../ComponentsInterface';\r\n\r\nexport const TextInputExamples: ExampleComponent = () => (\r\n    <Section title=\"Inputs Examples\">\r\n        <SimpleInputDisconnected />\r\n        <InputsConnected />\r\n        <InputsWithDirtyManagement />\r\n        <MultilineInputComponents />\r\n        <MultilineBoxExamples />\r\n    </Section>\r\n);\r\nTextInputExamples.description =\r\n    'Text Inputs allow users to enter a single line of letters, numbers, or symbols. They are used to submit short character strings.';\r\n\r\nexport const MultilineInputComponents: React.FunctionComponent = () => (\r\n    <Section level={2} title=\"Multiline Input Examples\">\r\n        <MultilineInputExample />\r\n        <SplitMultilineInputExamples />\r\n    </Section>\r\n);\r\n\r\ninterface IMultilineInputWithMultilineBox {\r\n    [1]: string;\r\n    [2]: string;\r\n    [3]?: string;\r\n}\r\n\r\ntype IMultilineInputWithMultilineBoxData = Array<IMultilineSingleBoxProps<IMultilineInputWithMultilineBox>>;\r\n\r\nconst autoCompleteItems: IItemBoxProps[] = [\r\n    {displayValue: 'Test', value: '0'},\r\n    {displayValue: 'Test One', value: '1'},\r\n    {displayValue: 'Disabled', value: 'disabled', disabled: true},\r\n    {displayValue: 'Three', value: '3'},\r\n    {displayValue: 'Four', value: '4'},\r\n    {displayValue: 'Five', value: '5'},\r\n    {displayValue: 'Six', value: '6'},\r\n    {displayValue: 'Seven', value: '7'},\r\n];\r\n\r\n// start-print\r\n\r\nconst SimpleInputDisconnected: React.FunctionComponent = () => {\r\n    const [inputValue, setInputValue] = React.useState(null);\r\n    const [inputClasses, setInputClasses] = React.useState([]);\r\n\r\n    const onChange = () => {\r\n        const innerInput = inputValue.getInnerValue();\r\n        setInputClasses(innerInput ? ['valid'] : ['invalid']);\r\n    };\r\n\r\n    return (\r\n        <Section level={3} title=\"A simple input with a local state\">\r\n            <Input\r\n                id=\"local-state-input\"\r\n                innerInputClasses={inputClasses}\r\n                placeholder=\"Please, do not leave me empty!\"\r\n                ref={(input: Input) => setInputValue(input)}\r\n                onKeyUp={() => onChange()}\r\n            >\r\n                <Label validMessage=\"Great!\" invalidMessage=\"The input box must not be empty.\">\r\n                    An Input Box Label\r\n                </Label>\r\n            </Input>\r\n        </Section>\r\n    );\r\n};\r\n\r\nconst InputsConnected: React.FunctionComponent = () => {\r\n    const validate = (value: any) => !!value;\r\n\r\n    return (\r\n        <Section>\r\n            <Section level={2} title=\"Inputs connected to store.\">\r\n                <Section level={3} title=\"A simple input connected to the store\">\r\n                    <InputConnected\r\n                        id=\"super-input\"\r\n                        validate={validate}\r\n                        labelTitle=\"I am a connected input, and validated in real time.\"\r\n                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                        innerInputClasses=\"mb2\"\r\n                        validateOnChange\r\n                    />\r\n                </Section>\r\n\r\n                <Section level={3} title=\"A simple input disabled on mount.\">\r\n                    <InputConnected\r\n                        id=\"super-input-2\"\r\n                        labelTitle=\"I am the disabled input label.\"\r\n                        disabledOnMount={true}\r\n                        innerInputClasses=\"mb2\"\r\n                        defaultValue=\"I am disabled on mount.\"\r\n                    />\r\n                </Section>\r\n\r\n                <Section level={3} title=\"A connect input that you can toggle at will.\">\r\n                    <Button\r\n                        name={'Toggle input'}\r\n                        enabled\r\n                        onClick={() => {\r\n                            Store.dispatch(\r\n                                setDisabledInput(\r\n                                    'super-input-3',\r\n                                    !_.findWhere(Store.getState().inputs, {id: 'super-input-3'}).disabled\r\n                                )\r\n                            );\r\n                        }}\r\n                    />\r\n                    <InputConnected\r\n                        id=\"super-input-3\"\r\n                        validate={validate}\r\n                        labelTitle=\"I am the input label\"\r\n                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                        defaultValue=\"Awesome connected feature\"\r\n                        validateOnChange\r\n                    />\r\n                </Section>\r\n                <Section level={3} title=\"An input with autoCompletion\">\r\n                    <AutocompleteConnected id=\"autocomplete-input\" items={autoCompleteItems}>\r\n                        <Label>An autocomplete</Label>\r\n                    </AutocompleteConnected>\r\n                </Section>\r\n            </Section>\r\n        </Section>\r\n    );\r\n};\r\n\r\nconst InputsWithDirtyManagement: React.FunctionComponent = () => (\r\n    <Section level={2} title=\"Inputs with dirty management functionnalities\">\r\n        <InputWithDirty id=\"dirtyinput\" />\r\n        <MessageWhenInputIsDirty />\r\n    </Section>\r\n);\r\n\r\nconst MessageWhenInputIsDirty = connect(\r\n    createStructuredSelector({\r\n        isDirty: ValidationSelectors.isDirty(['dirtyinput']),\r\n    })\r\n)(({isDirty}) => isDirty && <div>I am now dirty!</div>);\r\n\r\nconst InputWithDirty = withDirtyInputHOC(InputConnected);\r\n\r\nconst MultiValuesInputId = 'multivalue-id';\r\nconst mapStateToProps = (state) => ({\r\n    values: MultiValuesInputSelectors.getValues(state, MultiValuesInputId),\r\n});\r\nconst MultilineInputExampleDisconnected: React.FunctionComponent<ReturnType<typeof mapStateToProps>> = ({values}) => {\r\n    return (\r\n        <Section level={3} title=\"Multi-value inputs\">\r\n            <MultiValuesInput id={MultiValuesInputId} data={['hello', 'world']} />\r\n            <p className=\"small transparency-2\">Values in the state: {JSON.stringify(values, null, 2)}</p>\r\n        </Section>\r\n    );\r\n};\r\nconst MultilineInputExample = connect(mapStateToProps)(MultilineInputExampleDisconnected);\r\n\r\nconst inputs: ISplitInput[] = [\r\n    {\r\n        id: '1',\r\n        label: 'First input',\r\n        placeholder: 'enter a value',\r\n        validation: (value: string) => !!value,\r\n        validationMessage: 'This cannot be empty',\r\n    },\r\n    {\r\n        id: '2',\r\n        label: 'Second input',\r\n        placeholder: 'enter another value',\r\n    },\r\n];\r\n\r\nconst InitialValues = [\r\n    {\r\n        '1': 'First Multiline Input: first value',\r\n        '2': 'First Multiline Input: second value',\r\n        '3': 'First Multiline Input: third value',\r\n    },\r\n    {\r\n        '1': 'Second Multiline Input: first value',\r\n        '2': 'Second Multiline Input: second value',\r\n        '3': 'Second Multiline Input: third value',\r\n    },\r\n];\r\n\r\nconst SplitMultilineInputExamples: React.FunctionComponent = () => {\r\n    return (\r\n        <>\r\n            <Section level={3} title=\"A split multiline input with default values\">\r\n                <SplitMultilineInput inputs={inputs} defaultValues={InitialValues} />\r\n            </Section>\r\n            <Section level={3} title=\"A split multiline input with 3 inputs\">\r\n                <SplitMultilineInput\r\n                    inputs={[...inputs, {id: '3', label: 'Third input', placeholder: 'enter yet another value'}]}\r\n                    defaultValues={[...InitialValues, {'1': 'One', '2': 'Two', '3': 'three'}]}\r\n                />\r\n            </Section>\r\n        </>\r\n    );\r\n};\r\n\r\nconst MultilineBoxWithFunctionnalities = _.compose(\r\n    multilineBoxContainer(),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxWithDnD()\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxWithCustomization = _.compose(\r\n    multilineBoxContainer({\r\n        containerNode: (child: React.ReactNode, data: any[], index: number) => (\r\n            <div key={`${data[index].id}Container`} className={'p2 bg-light-grey'}>\r\n                {child}\r\n            </div>\r\n        ),\r\n    })\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxExamples: React.FunctionComponent = () => {\r\n    return (\r\n        <Section level={2} title=\"Examples of Multiline Inputs built with the MultilineBox Component\">\r\n            <Section\r\n                className=\"mb0\"\r\n                level={3}\r\n                title=\"A multiline box of inputs with a default container, default props, a drag and drop and a remove button. It will add a new box on change of the last input\"\r\n            >\r\n                <MultilineBoxWithFunctionnalities<IMultilineInputWithMultilineBox>\r\n                    id=\"FirstMultilineBoxExample\"\r\n                    data={InitialValues}\r\n                    className=\"my2\"\r\n                    renderBody={(data: IMultilineInputWithMultilineBoxData, parentProps: {addNewBox: () => void}) =>\r\n                        _.map(data, (cData) => (\r\n                            <div key={cData.id}>\r\n                                <InputConnected\r\n                                    id={`${cData.id}1`}\r\n                                    classes=\"mt1 inline-block mx1\"\r\n                                    defaultValue={cData.props['1']}\r\n                                    validate={(value: string) => cData.props['1'] === value}\r\n                                    validateOnChange\r\n                                />\r\n                                <InputConnected\r\n                                    id={`${cData.id}2`}\r\n                                    classes=\"mt1 inline-block mx1\"\r\n                                    defaultValue={cData.props['2']}\r\n                                />\r\n                                <InputConnected\r\n                                    classes=\"mt2 mx1\"\r\n                                    id={`${cData.id}3`}\r\n                                    defaultValue={cData.props['3']}\r\n                                    onChange={(value: string) => {\r\n                                        if (value !== '' && cData.isLast) {\r\n                                            parentProps.addNewBox();\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    defaultProps={{\r\n                        '1': 'default',\r\n                        '2': 'props',\r\n                        '3': 'Will add a new box if you change this.',\r\n                    }}\r\n                />\r\n            </Section>\r\n            <Section\r\n                level={3}\r\n                title=\"A multiline box of inputs with a custom container. Will validate only when the value is the expected one\"\r\n            >\r\n                <MultilineBoxWithCustomization<IMultilineInputWithMultilineBox>\r\n                    id=\"secondMultilineBoxExample\"\r\n                    data={InitialValues}\r\n                    renderBody={(data: IMultilineInputWithMultilineBoxData, parentProps: {addNewBox: () => void}) =>\r\n                        _.map(data, (cData: IMultilineSingleBoxProps<IMultilineInputWithMultilineBox>) => (\r\n                            <div key={cData.id}>\r\n                                <InputConnected\r\n                                    id={`${cData.id}1`}\r\n                                    classes=\"mt1 mx1\"\r\n                                    defaultValue={cData.props['1']}\r\n                                    onChange={(value: string) => {\r\n                                        if (value === 'next' && cData.isLast) {\r\n                                            parentProps.addNewBox();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    }}\r\n                                />\r\n                                <InputConnected id={`${cData.id}2`} classes=\"mt1 mx1\" defaultValue={cData.props['2']} />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    defaultProps={{\r\n                        '1': \"Will create another box if you type 'next' here.\",\r\n                        '2': 'But not here.',\r\n                    }}\r\n                />\r\n            </Section>\r\n        </Section>\r\n    );\r\n};\r\n\r\n// stop-print\r\n"],"sourceRoot":""}