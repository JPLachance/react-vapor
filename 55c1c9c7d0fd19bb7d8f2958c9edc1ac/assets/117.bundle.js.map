{"version":3,"sources":["webpack:///./src/components/examples/DatePickerExamplesCommon.ts","webpack:////home/travis/build/coveo/react-vapor/node_modules/moment/locale sync en-ca","webpack:///./src/components/examples/TableHOCExampleUtils.tsx","webpack:///./src/components/examples/TableHOCServerExamples.tsx"],"names":["SELECTION_BOXES","title","quickOptions","label","value","subtract","toDate","toString","Date","isRange","withTime","hasSetToNowButton","color","blue","defaultQuickOptions","SELECTION_BOXES_LONG","FOUR_SELECTION_BOXES","CALENDAR_SELECTION_RULES","test","date","startOf","isFor","all","getDay","lower","upper","endDate","diff","range","DATE_RANGE_EXAMPLE","add","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","TableHOCServerExampleContext","isLoading","undefined","tableActions","username","primary","icon","name","enabled","trigger","alert","callOnDoubleClick","tablePredicates","prepend","className","values","displayValue","selected","tableDatePickerConfig","datesSelectionBoxes","years","getPreviousYears","currentYear","initialDateRange","moment","TableHOCExampleUtils","generateRows","allData","data","i","tableId","TableHOCServerExampleId","key","actions","isMultiselect","disabled","collapsible","content","number","city","email","toLowerCase","dateOfBirth","toLocaleDateString","TableHOCServerExamples","TableHOCServer","state","ServerTableComposed","description","buttons","onClick","props","resetFilter","placeholder","blankSlate","perPageNumbers","fetch","setState","window","setTimeout","done","onUpdate","updateUrl","query","history","push","search","componentDidMount","this","render","Provider","users","renderBody","tableHeader","Consumer","isDefault","onUpdateUrl","loading","numberOfColumns","time","dispatch","TableHOCServerActions","fetchData","getState","compositeState","getCompositeState","from","to","params","_page","pageNb","_limit","perPage","_sort","sortKey","_order","sortAscending","q","filter","predicates","predicate","then","response","status","request","count","getResponseHeader","user","address","length","setCount"],"mappings":"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","file":"assets/117.bundle.js","sourcesContent":["import * as moment from 'moment';\r\nimport {\r\n    CalendarSelectionRuleType,\r\n    DatePickerColors,\r\n    DatePickerDateRange,\r\n    DATES_SEPARATOR,\r\n    ICalendarSelectionRule,\r\n    IDatesSelectionBox,\r\n} from 'react-vapor';\r\n\r\nexport const SELECTION_BOXES: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: [\r\n            {\r\n                label: 'Last 10 seconds',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(10, 'seconds')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last minute',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'minute')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last 5 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(5, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last 30 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(30, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last hour',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'hour')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last day',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'day')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n        ],\r\n        isRange: true,\r\n        withTime: true,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nconst defaultQuickOptions = [\r\n    {\r\n        label: 'Last day',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'day')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n    {\r\n        label: 'Last week',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'week')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n    {\r\n        label: 'Last month',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'month')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n    {\r\n        label: 'Last year',\r\n        value: () =>\r\n            moment()\r\n                .subtract(1, 'year')\r\n                .toDate()\r\n                .toString() +\r\n            DATES_SEPARATOR +\r\n            new Date().toString(),\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOXES_LONG: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: defaultQuickOptions,\r\n        isRange: true,\r\n        withTime: true,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOXES_LONG_WITHOUT_TIME: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: defaultQuickOptions,\r\n        isRange: true,\r\n        withTime: false,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOXES_WITHOUT_TIME_AND_NOW: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: defaultQuickOptions,\r\n        isRange: true,\r\n        withTime: false,\r\n        hasSetToNowButton: false,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const FOUR_SELECTION_BOXES: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Date range',\r\n        quickOptions: [\r\n            {\r\n                label: 'Last 5 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(5, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last 30 minutes',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(30, 'minutes')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last hour',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'hour')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n            {\r\n                label: 'Last day',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'day')\r\n                        .toDate()\r\n                        .toString() +\r\n                    DATES_SEPARATOR +\r\n                    new Date().toString(),\r\n            },\r\n        ],\r\n        isRange: true,\r\n        withTime: true,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const CALENDAR_SELECTION_RULES: ICalendarSelectionRule[] = [\r\n    {\r\n        test: (date: Date) =>\r\n            date >=\r\n            moment()\r\n                .startOf('day')\r\n                .toDate(), // You cannot select a date in the past\r\n        isFor: CalendarSelectionRuleType.all,\r\n    },\r\n    {\r\n        test: (date: Date) => date.getDay() !== 6, // You cannot start your selection on a Saturday\r\n        isFor: CalendarSelectionRuleType.lower,\r\n    },\r\n    {\r\n        test: (date: Date) => date.getDay() !== 0, // You cannot end your selection on a Sunday\r\n        isFor: CalendarSelectionRuleType.upper,\r\n    },\r\n    {\r\n        test: (date: Date, endDate: Date) => moment(endDate).diff(moment(date), 'day') >= 0, // The end of your selection cannot be before the start of your selection\r\n        isFor: CalendarSelectionRuleType.range,\r\n    },\r\n    {\r\n        test: (date: Date, endDate: Date) => moment(endDate).diff(moment(date), 'day') <= 7, // You cannot select more than 7 days at a time\r\n        isFor: CalendarSelectionRuleType.range,\r\n    },\r\n];\r\n\r\nexport const SELECTION_BOX: IDatesSelectionBox[] = [\r\n    {\r\n        title: 'Select date',\r\n        quickOptions: [\r\n            {\r\n                label: 'A year ago',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'year')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n            {\r\n                label: 'A month ago',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'month')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n            {\r\n                label: 'A week ago',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'week')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n            {\r\n                label: 'Yesterday',\r\n                value: () =>\r\n                    moment()\r\n                        .subtract(1, 'day')\r\n                        .toDate()\r\n                        .toString(),\r\n            },\r\n        ],\r\n        isRange: false,\r\n        withTime: false,\r\n        hasSetToNowButton: true,\r\n        color: DatePickerColors.blue,\r\n    },\r\n];\r\n\r\nexport const CALENDAR_SELECTION_RULES_SINGLE_DATE: ICalendarSelectionRule[] = [\r\n    {\r\n        test: (date: Date) => date.getFullYear() > 1700 || date.getFullYear() < 4000, // You cannot select a date before year 1700 and over 4000\r\n        isFor: CalendarSelectionRuleType.all,\r\n    },\r\n];\r\n\r\nexport const DATE_RANGE_EXAMPLE: DatePickerDateRange = [\r\n    moment().toDate(),\r\n    moment()\r\n        .add(3, 'day')\r\n        .toDate(),\r\n];\r\n","var map = {\n\t\"./en-ca\": 133,\n\t\"./en-ca.js\": 133\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 138;","import * as moment from 'moment';\nimport * as React from 'react';\nimport {DateUtils, TableRowConnected, TableRowNumberColumn} from 'react-vapor';\n\nimport {SELECTION_BOXES_LONG} from './DatePickerExamplesCommon';\nimport {IExampleRowData} from './TableHOCExamples';\nimport {TableHOCServerExampleId} from './TableHOCServerExamples';\n\nexport interface ITableHOCServerExampleContext {\n    isLoading: boolean;\n    id: string;\n}\n\nexport const TableHOCServerExampleContext = React.createContext<ITableHOCServerExampleContext>({\n    isLoading: true,\n    id: undefined,\n});\n\nconst generateRows = (allData: IExampleRowData[]) =>\n    allData.map((data: IExampleRowData, i: number) => (\n        <TableRowConnected\n            id={data.username}\n            tableId={TableHOCServerExampleId}\n            key={data.username}\n            actions={tableActions(data.username)}\n            isMultiselect\n            disabled={i % 3 === 0}\n            collapsible={{content: <div className=\"py2\">👋</div>}}\n        >\n            <TableRowNumberColumn number={i + 1} />\n            <td key=\"city\">{data.city}</td>\n            <td key=\"email\">{data.email.toLowerCase()}</td>\n            <td key=\"username\">{data.username.toLowerCase()}</td>\n            <td key=\"date-of-birth\">{data.dateOfBirth.toLocaleDateString()}</td>\n        </TableRowConnected>\n    ));\n\nconst tableActions = (username: string) => [\n    {\n        primary: true,\n        icon: 'edit',\n        name: 'edit',\n        enabled: true,\n        trigger: () => alert(username),\n        callOnDoubleClick: true,\n    },\n];\n\nconst tablePredicates = [\n    {\n        id: 'address.city',\n        prepend: <span className=\"mr1 text-medium-grey\">City:</span>,\n        values: [\n            {displayValue: 'All', value: '', selected: true},\n            {displayValue: 'Lebsackbury', value: 'Lebsackbury'},\n        ],\n    },\n    {\n        id: 'username',\n        prepend: <span className=\"mr1 text-medium-grey\">Username:</span>,\n        values: [\n            {displayValue: 'All', value: '', selected: true},\n            {displayValue: 'bret', value: 'Bret'},\n        ],\n    },\n];\n\nconst tableDatePickerConfig = {\n    datesSelectionBoxes: SELECTION_BOXES_LONG,\n    years: [...DateUtils.getPreviousYears(25), DateUtils.currentYear.toString()],\n    initialDateRange: [\n        moment()\n            .subtract(25, 'years')\n            .toDate(),\n        moment().toDate(),\n    ],\n};\n\nexport const TableHOCExampleUtils = {\n    generateRows,\n    tableActions,\n    tablePredicates,\n    tableDatePickerConfig,\n};\n","import * as $ from 'jquery';\r\nimport * as moment from 'moment';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {\r\n    filterThrough,\r\n    IDispatch,\r\n    IReactVaporState,\r\n    ITableHOCCompositeState,\r\n    IThunkAction,\r\n    LastUpdated,\r\n    Section,\r\n    TableHeaderWithSort,\r\n    TableHOC,\r\n    TableHOCUtils,\r\n    TableRowHeader,\r\n    TableRowNumberHeader,\r\n    tableWithActions,\r\n    tableWithBlankSlate,\r\n    tableWithDatePicker,\r\n    tableWithFilter,\r\n    tableWithNewPagination,\r\n    TableWithPaginationActions,\r\n    tableWithPredicate,\r\n    tableWithSort,\r\n    tableWithUrlState,\r\n    withServerSideProcessing,\r\n} from 'react-vapor';\r\nimport * as _ from 'underscore';\r\n\r\nimport {TableHOCExampleUtils, TableHOCServerExampleContext} from './TableHOCExampleUtils';\r\n\r\ntype TableHOCServerProps = RouteComponentProps & ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport interface IExampleRowData {\r\n    city: string;\r\n    email: string;\r\n    username: string;\r\n    dateOfBirth: Date;\r\n    id: string;\r\n}\r\n\r\nexport interface IExampleServerTableState {\r\n    data: IExampleRowData[];\r\n    isLoading: boolean;\r\n}\r\n\r\ninterface TableHOCServerExamplesState {\r\n    data: {users: [any]; count: number};\r\n    isLoading: boolean;\r\n}\r\n\r\nexport const TableHOCServerExamples = () => <TableHOCServer />;\r\n\r\nTableHOCServerExamples.title = 'TableHOC server';\r\n\r\n// start-print\r\nexport const TableHOCServerExampleId = 'complex-example';\r\n\r\nconst renderHeader = () => (\r\n    <TableHOCServerExampleContext.Consumer>\r\n        {({isLoading}) => (\r\n            <thead>\r\n                <tr>\r\n                    <TableRowNumberHeader isLoading={isLoading} />\r\n                    <TableHeaderWithSort id=\"address.city\" tableId={TableHOCServerExampleId} isLoading={isLoading}>\r\n                        City\r\n                    </TableHeaderWithSort>\r\n                    <TableHeaderWithSort id=\"email\" tableId={TableHOCServerExampleId} isLoading={isLoading}>\r\n                        Email\r\n                    </TableHeaderWithSort>\r\n                    <TableHeaderWithSort\r\n                        id=\"username\"\r\n                        tableId={TableHOCServerExampleId}\r\n                        isLoading={isLoading}\r\n                        isDefault\r\n                    >\r\n                        Username\r\n                    </TableHeaderWithSort>\r\n                    <TableRowHeader isLoading={isLoading}>Date of Birth</TableRowHeader>\r\n                    <TableRowHeader isLoading={isLoading} />\r\n                </tr>\r\n            </thead>\r\n        )}\r\n    </TableHOCServerExampleContext.Consumer>\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\r\n    fetch: () => dispatch(TableHOCServerActions.fetchData()),\r\n    resetFilter: () => dispatch(filterThrough(TableHOCServerExampleId, '')),\r\n});\r\n\r\nclass TableExampleDisconnected extends React.PureComponent<TableHOCServerProps, TableHOCServerExamplesState> {\r\n    state: TableHOCServerExamplesState = {\r\n        data: null,\r\n        isLoading: true,\r\n    };\r\n\r\n    private ServerTableComposed = _.compose(\r\n        withServerSideProcessing,\r\n        tableWithUrlState,\r\n        tableWithBlankSlate({\r\n            title: 'No data fetched from the server',\r\n            description: 'Try reviewing the specified filters above or clearing all filters.',\r\n            buttons: [\r\n                {\r\n                    name: 'Clear filter',\r\n                    enabled: true,\r\n                    onClick: () => this.props.resetFilter(),\r\n                },\r\n            ],\r\n        }),\r\n        tableWithPredicate(TableHOCExampleUtils.tablePredicates[0]),\r\n        tableWithPredicate(TableHOCExampleUtils.tablePredicates[1]),\r\n        tableWithFilter({\r\n            placeholder: 'Filter all',\r\n            blankSlate: {\r\n                title: 'No results found',\r\n            },\r\n        }),\r\n        tableWithSort(),\r\n        tableWithDatePicker({...(TableHOCExampleUtils.tableDatePickerConfig as any)}),\r\n        tableWithNewPagination({perPageNumbers: [3, 5, 10]}),\r\n        tableWithActions()\r\n    )(TableHOC);\r\n\r\n    private fetch = _.debounce(() => {\r\n        this.setState({...this.state, isLoading: true});\r\n        window.setTimeout(\r\n            () =>\r\n                this.props.fetch().done((data: any) => {\r\n                    this.setState({data, isLoading: false});\r\n                }),\r\n            500\r\n        );\r\n    }, 40);\r\n\r\n    private onUpdate = () => {\r\n        this.fetch();\r\n    };\r\n\r\n    private updateUrl = (query: string) => {\r\n        this.props.history.push({search: query});\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetch();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Section title=\"Server table with numbered rows\">\r\n                <span className=\"block my2 text-grey-7\">\r\n                    Please note that the backend service doesn't support dates but we still make a request for every\r\n                    change in the date range.\r\n                </span>\r\n                <TableHOCServerExampleContext.Provider\r\n                    value={{isLoading: this.state.isLoading, id: TableHOCServerExampleId}}\r\n                >\r\n                    <this.ServerTableComposed\r\n                        id={TableHOCServerExampleId}\r\n                        className=\"table table-numbered mod-collapsible-rows\"\r\n                        data={this.state.data?.users ?? []}\r\n                        renderBody={TableHOCExampleUtils.generateRows}\r\n                        tableHeader={renderHeader()}\r\n                        onUpdate={this.onUpdate}\r\n                        onUpdateUrl={this.updateUrl}\r\n                        isLoading={this.state.isLoading}\r\n                        loading={{numberOfColumns: 6}}\r\n                    >\r\n                        <LastUpdated time={new Date()} />\r\n                    </this.ServerTableComposed>\r\n                </TableHOCServerExampleContext.Provider>\r\n            </Section>\r\n        );\r\n    }\r\n}\r\n\r\nconst TableHOCServer = connect(undefined, mapDispatchToProps)(withRouter(TableExampleDisconnected));\r\n\r\nconst fetchData = (): IThunkAction => (dispatch: IDispatch, getState: () => IReactVaporState) => {\r\n    const compositeState: ITableHOCCompositeState = TableHOCUtils.getCompositeState(\r\n        TableHOCServerExampleId,\r\n        getState()\r\n    );\r\n    const [from, to] = _.map(compositeState.dateLimits, (limit) => limit && limit.toISOString());\r\n    const params: any = {\r\n        _page: compositeState.pageNb + 1,\r\n        _limit: compositeState.perPage,\r\n        _sort: compositeState.sortKey,\r\n        _order: compositeState.sortAscending ? 'asc' : 'desc',\r\n        q: compositeState.filter || undefined,\r\n        from,\r\n        to,\r\n    };\r\n    _.each(compositeState.predicates, (predicate: {id: string; value: string}) => {\r\n        params[predicate.id] = predicate.value;\r\n    });\r\n    return $.get('https://jsonplaceholder.typicode.com/users', params).then((response: any[], status, request) => {\r\n        const count = request.getResponseHeader('x-total-count');\r\n        const users = _.map(response, (user: any) => ({\r\n            city: user.address.city,\r\n            username: user.username,\r\n            email: user.email,\r\n            dateOfBirth: moment()\r\n                .subtract(user.address.city.length, 'years')\r\n                .toDate(), // fake a year of birth\r\n        }));\r\n        dispatch(TableWithPaginationActions.setCount(TableHOCServerExampleId, count as any));\r\n        return {\r\n            count,\r\n            users,\r\n        };\r\n    });\r\n};\r\n\r\nconst TableHOCServerActions = {\r\n    fetchData,\r\n};\r\n"],"sourceRoot":""}