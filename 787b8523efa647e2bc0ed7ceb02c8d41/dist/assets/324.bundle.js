(window.webpackJsonp=window.webpackJsonp||[]).push([[324],{1418:function(o,r,n){"use strict";n.r(r),r.default="import {mount, ReactWrapper} from 'enzyme';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {Store} from 'redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {TestUtils} from '../../../utils/tests/TestUtils';\r\nimport {Dropdown, IDropdownProps} from '../Dropdown';\r\nimport {toggleDropdown} from '../DropdownActions';\r\nimport {DropdownConnected} from '../DropdownConnected';\r\n\r\ndescribe('Dropdown', () => {\r\n    describe('<DropdownConnected />', () => {\r\n        let wrapper: ReactWrapper<any, any>;\r\n        let dropdown: ReactWrapper<IDropdownProps, any>;\r\n        let store: Store<IReactVaporState>;\r\n        const basicDropdownProps: IDropdownProps = {\r\n            id: 'dropdown-id',\r\n            toggleContent: [<span key=\"toggle\">Toggle</span>],\r\n            dropdownItems: [<li key=\"option1\">Option 1</li>, <li key=\"options2\">Option 2</li>],\r\n        };\r\n\r\n        beforeEach(() => {\r\n            store = TestUtils.buildStore();\r\n\r\n            wrapper = mount(\r\n                <Provider store={store}>\r\n                    <DropdownConnected {...basicDropdownProps} />\r\n                </Provider>,\r\n                {attachTo: document.getElementById('App')}\r\n            );\r\n            dropdown = wrapper.find(Dropdown);\r\n        });\r\n\r\n        afterEach(() => {\r\n            wrapper.detach();\r\n        });\r\n\r\n        it('should get if dropdown is opened as a prop', () => {\r\n            const isOpenedProp = dropdown.props().isOpened;\r\n\r\n            expect(isOpenedProp).toBeDefined();\r\n            expect(isOpenedProp).toBe(false);\r\n        });\r\n\r\n        it('should get what to do on render as a prop', () => {\r\n            const onRenderProp = dropdown.props().onRender;\r\n\r\n            expect(onRenderProp).toBeDefined();\r\n        });\r\n\r\n        it('should get what to do on destroy as a prop', () => {\r\n            const onDestroyProp = dropdown.props().onDestroy;\r\n\r\n            expect(onDestroyProp).toBeDefined();\r\n        });\r\n\r\n        it('should get what to do on click as a prop', () => {\r\n            const onClickProp = dropdown.props().onClick;\r\n\r\n            expect(onClickProp).toBeDefined();\r\n        });\r\n\r\n        it('should get what to do on document click as a prop', () => {\r\n            const onDocumentClickProp = dropdown.props().onDocumentClick;\r\n\r\n            expect(onDocumentClickProp).toBeDefined();\r\n        });\r\n\r\n        it('should add the dropdown in the store on mount', () => {\r\n            expect(store.getState().dropdowns.length).toBe(1);\r\n        });\r\n\r\n        it('should remove the dropdown from the store when unmounting', () => {\r\n            wrapper.unmount();\r\n            expect(store.getState().dropdowns.length).toBe(0);\r\n        });\r\n\r\n        it('should toggle the open property of the dropdown on click', () => {\r\n            expect(_.findWhere(store.getState().dropdowns, {id: basicDropdownProps.id}).opened).toBe(false);\r\n\r\n            dropdown.find('.dropdown-toggle').simulate('click');\r\n            expect(_.findWhere(store.getState().dropdowns, {id: basicDropdownProps.id}).opened).toBe(true);\r\n        });\r\n\r\n        it('should close the dropdown menu when clicking elsewhere', () => {\r\n            store.dispatch(toggleDropdown(basicDropdownProps.id));\r\n            expect(_.findWhere(store.getState().dropdowns, {id: basicDropdownProps.id}).opened).toBe(true);\r\n\r\n            document.getElementById('App').click();\r\n            expect(_.findWhere(store.getState().dropdowns, {id: basicDropdownProps.id}).opened).toBe(false);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=324.bundle.js.map