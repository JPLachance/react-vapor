{"version":3,"sources":["webpack:///./src/components/modal/tests/ModalHeaderConnected.spec.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/527.bundle.js","sourcesContent":["export default \"import {mount, ReactWrapper} from 'enzyme';\\r\\n// tslint:disable-next-line:no-unused-variable\\r\\nimport * as React from 'react';\\r\\nimport {Provider} from 'react-redux';\\r\\nimport {Store} from 'redux';\\r\\nimport * as _ from 'underscore';\\r\\nimport {IReactVaporState} from '../../../ReactVapor';\\r\\nimport {clearState} from '../../../utils/ReduxUtils';\\r\\nimport {TestUtils} from '../../../utils/tests/TestUtils';\\r\\nimport {addModal, openModal} from '../ModalActions';\\r\\nimport {IModalHeaderProps, ModalHeader} from '../ModalHeader';\\r\\nimport {ModalHeaderConnected} from '../ModalHeaderConnected';\\r\\nimport {IModalState} from '../ModalReducers';\\r\\n\\r\\ndescribe('ModalHeader', () => {\\r\\n    describe('<ModalHeaderConnected />', () => {\\r\\n        let modalHeader: ReactWrapper<IModalHeaderProps, any>;\\r\\n        let id: string;\\r\\n        let title: string;\\r\\n        let wrapper: ReactWrapper<any, any>;\\r\\n        let store: Store<IReactVaporState>;\\r\\n\\r\\n        beforeEach(() => {\\r\\n            id = 'modalHeader';\\r\\n            title = 'Title';\\r\\n\\r\\n            store = TestUtils.buildStore();\\r\\n\\r\\n            wrapper = mount(\\r\\n                <Provider store={store}>\\r\\n                    <ModalHeaderConnected id={id} title={title} lastOpened />\\r\\n                </Provider>,\\r\\n                {attachTo: document.getElementById('App')}\\r\\n            );\\r\\n            modalHeader = wrapper.find(ModalHeader).first();\\r\\n        });\\r\\n\\r\\n        afterEach(() => {\\r\\n            store.dispatch(clearState());\\r\\n            wrapper.detach();\\r\\n        });\\r\\n\\r\\n        it('should get its id as a prop', () => {\\r\\n            const idProp = modalHeader.props().id;\\r\\n\\r\\n            expect(idProp).toBeDefined();\\r\\n            expect(idProp).toBe(id);\\r\\n        });\\r\\n\\r\\n        it('should get its title as a prop', () => {\\r\\n            const titleProp = modalHeader.props().title;\\r\\n\\r\\n            expect(titleProp).toBeDefined();\\r\\n            expect(titleProp).toBe(title);\\r\\n        });\\r\\n\\r\\n        it('should get what to do on close as a prop', () => {\\r\\n            const onCloseProp = modalHeader.props().onClose;\\r\\n\\r\\n            expect(onCloseProp).toBeDefined();\\r\\n        });\\r\\n\\r\\n        it('should close the modalHeader in the store when clicking on modalHeader x', () => {\\r\\n            store.dispatch(addModal(id));\\r\\n            expect(_.findWhere(store.getState().modals, (modal: IModalState) => modal.id === id).isOpened).toBe(false);\\r\\n            store.dispatch(openModal(id));\\r\\n            expect(_.findWhere(store.getState().modals, (modal: IModalState) => modal.id === id).isOpened).toBe(true);\\r\\n\\r\\n            modalHeader.find('.small-close').simulate('click');\\r\\n            expect(_.findWhere(store.getState().modals, (modal: IModalState) => modal.id === id).isOpened).toBe(false);\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}