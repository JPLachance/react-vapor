(window.webpackJsonp=window.webpackJsonp||[]).push([[370],{1464:function(e,t,n){"use strict";n.r(t),t.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {Facet, IFacet, IFacetProps} from '../Facet';\r\nimport {FacetRow} from '../FacetRow';\r\n\r\ndescribe('Facets', () => {\r\n    const facetRows: IFacet[] = [];\r\n    const facet: IFacet = {name: '', formattedName: '', count: '0'};\r\n    const toggleFacet: (facet: string, facetRow: IFacet) => void = jasmine.createSpy('toggleFacet');\r\n    const clearFacet: (facet: string) => void = jasmine.createSpy('clearFacet');\r\n    const maxRowsToShow = 4;\r\n\r\n    describe('<Facet />', () => {\r\n        it('should render without errors', () => {\r\n            expect(() => {\r\n                shallow(\r\n                    <Facet facetRows={facetRows} facet={facet} toggleFacet={toggleFacet} clearFacet={clearFacet} />\r\n                );\r\n            }).not.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('<Facet />', () => {\r\n        let facetComponent: ReactWrapper<IFacetProps, any>;\r\n        let facetBasicAttributes: IFacetProps;\r\n        let facetInstance: Facet;\r\n\r\n        beforeEach(() => {\r\n            facetBasicAttributes = {\r\n                facetRows: facetRows,\r\n                facet: facet,\r\n                toggleFacet: toggleFacet,\r\n                clearFacet: clearFacet,\r\n                maxRowsToShow,\r\n            };\r\n            facetComponent = mount(<Facet {...facetBasicAttributes} />, {attachTo: document.getElementById('App')});\r\n            facetInstance = facetComponent.instance() as Facet;\r\n        });\r\n\r\n        afterEach(() => {\r\n            facetComponent.detach();\r\n        });\r\n\r\n        it('should not render anything when there are no rows to display', () => {\r\n            expect(facetComponent.html()).toBeNull();\r\n        });\r\n\r\n        it('should render some html when there are rows to display', () => {\r\n            facetComponent.setProps({...facetBasicAttributes, facetRows: [{name: 'a', formattedName: 'b'}]});\r\n            expect(facetComponent.html()).not.toBeNull();\r\n        });\r\n\r\n        it('should call prop onRender on mounting if set', () => {\r\n            const renderSpy = jasmine.createSpy('onRender');\r\n            const newFacetAttributes = _.extend({}, facetBasicAttributes, {onRender: renderSpy});\r\n\r\n            expect(() => facetInstance.componentWillMount()).not.toThrow();\r\n\r\n            facetComponent.unmount();\r\n            facetComponent.setProps(newFacetAttributes);\r\n            facetComponent.mount();\r\n            expect(renderSpy.calls.count()).toBe(1);\r\n        });\r\n\r\n        it('should call prop onDestroy on unmounting if set', () => {\r\n            const destroySpy = jasmine.createSpy('onDestroy');\r\n            const newFacetAttributes = _.extend({}, facetBasicAttributes, {onRender: destroySpy});\r\n\r\n            expect(() => facetInstance.componentWillUnmount()).not.toThrow();\r\n\r\n            facetComponent.unmount();\r\n            facetComponent.setProps(newFacetAttributes);\r\n            facetComponent.mount();\r\n            facetComponent.unmount();\r\n            expect(destroySpy.calls.count()).toBe(1);\r\n        });\r\n\r\n        it('should display normal <FacetMoreToggle /> and <FacetMoreRows /> if it has more than maxRowsToShow (number in props + 1 extra)', () => {\r\n            const multipleRows = [\r\n                {\r\n                    name: '1',\r\n                    formattedName: '1',\r\n                },\r\n                {\r\n                    name: '2',\r\n                    formattedName: '2',\r\n                },\r\n                {\r\n                    name: '3',\r\n                    formattedName: '3',\r\n                },\r\n                {\r\n                    name: '4',\r\n                    formattedName: '4',\r\n                },\r\n                {\r\n                    name: '5',\r\n                    formattedName: '5',\r\n                    count: '0',\r\n                },\r\n                {\r\n                    name: '6',\r\n                    formattedName: '6',\r\n                    count: '5243421',\r\n                },\r\n            ];\r\n            const newFacetAttributes = _.extend({}, facetBasicAttributes, {facetRows: multipleRows});\r\n\r\n            expect(facetComponent.find('FacetMoreToggle').length).toBe(0);\r\n            expect(facetComponent.find('FacetMoreRows').length).toBe(0);\r\n            expect(facetComponent.find('FacetMoreToggleConnected').length).toBe(0);\r\n            expect(facetComponent.find('FacetMoreRowsConnected').length).toBe(0);\r\n\r\n            facetComponent.setProps(newFacetAttributes);\r\n            facetComponent.mount();\r\n            expect(facetComponent.find('FacetMoreToggle').length).toBe(1);\r\n            expect(facetComponent.find('FacetMoreRows').length).toBeGreaterThan(0);\r\n            expect(facetComponent.find('FacetMoreToggleConnected').length).toBe(0);\r\n            expect(facetComponent.find('FacetMoreRowsConnected').length).toBe(0);\r\n        });\r\n\r\n        it('should display normal <FacetMoreRows /> if it has more than maxRowsToShow (number in props + 1 extra)', () => {\r\n            const multipleRows = [\r\n                {\r\n                    name: '1',\r\n                    formattedName: '1',\r\n                },\r\n                {\r\n                    name: '2',\r\n                    formattedName: '2',\r\n                },\r\n                {\r\n                    name: '3',\r\n                    formattedName: '3',\r\n                },\r\n                {\r\n                    name: '4',\r\n                    formattedName: '4',\r\n                },\r\n                {\r\n                    name: '5',\r\n                    formattedName: '5',\r\n                    count: '0',\r\n                },\r\n                {\r\n                    name: '6',\r\n                    formattedName: '6',\r\n                    count: '5243421',\r\n                },\r\n            ];\r\n            const newFacetAttributes = _.extend({}, facetBasicAttributes, {facetRows: multipleRows});\r\n\r\n            expect(facetComponent.find('FacetMoreToggle').length).toBe(0);\r\n            expect(facetComponent.find('FacetMoreToggleConnected').length).toBe(0);\r\n\r\n            facetComponent.setProps(newFacetAttributes);\r\n            facetComponent.mount();\r\n            expect(facetComponent.find('FacetMoreToggle').length).toBe(1);\r\n            expect(facetComponent.find('FacetMoreToggleConnected').length).toBe(0);\r\n        });\r\n\r\n        it(\r\n            'should not display <FacetMoreToggle /> and <FacetMoreRows /> if it has ' +\r\n                'more than maxRowsToShow (number in props + 1 extra) and they are all selected',\r\n            () => {\r\n                const multipleRows = [\r\n                    {\r\n                        name: '1',\r\n                        formattedName: '1',\r\n                    },\r\n                    {\r\n                        name: '2',\r\n                        formattedName: '2',\r\n                    },\r\n                    {\r\n                        name: '3',\r\n                        formattedName: '3',\r\n                    },\r\n                    {\r\n                        name: '4',\r\n                        formattedName: '4',\r\n                    },\r\n                    {\r\n                        name: '5',\r\n                        formattedName: '5',\r\n                        count: '0',\r\n                    },\r\n                    {\r\n                        name: '6',\r\n                        formattedName: '6',\r\n                        count: '5243421',\r\n                    },\r\n                ];\r\n                const newFacetAttributes = _.extend({}, facetBasicAttributes, {\r\n                    facetRows: multipleRows,\r\n                    selectedFacetRows: multipleRows,\r\n                });\r\n\r\n                expect(facetComponent.find('FacetMoreRows').length).toBe(0);\r\n                expect(facetComponent.find('FacetMoreToggle').length).toBe(0);\r\n\r\n                facetComponent.setProps(newFacetAttributes);\r\n                facetComponent.mount();\r\n\r\n                expect(facetComponent.find('FacetMoreRows').length).toBe(0);\r\n                expect(facetComponent.find('FacetMoreToggle').length).toBe(0);\r\n            }\r\n        );\r\n\r\n        it('should display the last facet if the component has one more facet than allowed', () => {\r\n            const multipleRows = [\r\n                {name: '1', formattedName: '1'},\r\n                {name: '2', formattedName: '2'},\r\n                {name: '3', formattedName: '3'},\r\n            ];\r\n            const newFacetAttributes = _.extend({}, facetBasicAttributes, {\r\n                facetRows: multipleRows,\r\n                selectedFacetRows: [],\r\n                maxRowsToShow: multipleRows.length - 1,\r\n            });\r\n\r\n            facetComponent.setProps(newFacetAttributes);\r\n            facetComponent.mount();\r\n\r\n            expect(facetComponent.find('FacetMoreRows').length).toBe(0);\r\n            expect(facetComponent.find('FacetMoreToggle').length).toBe(0);\r\n            expect(facetComponent.find('.facet-values').find(FacetRow).length).toBe(multipleRows.length);\r\n        });\r\n\r\n        it('should display the more if the component has two more facet than allowed', () => {\r\n            const multipleRows = [\r\n                {name: '1', formattedName: '1'},\r\n                {name: '2', formattedName: '2'},\r\n                {name: '3', formattedName: '3'},\r\n            ];\r\n            const newFacetAttributes = _.extend({}, facetBasicAttributes, {\r\n                facetRows: multipleRows,\r\n                selectedFacetRows: [],\r\n                maxRowsToShow: multipleRows.length - 2,\r\n            });\r\n\r\n            facetComponent.setProps(newFacetAttributes);\r\n            facetComponent.mount();\r\n\r\n            expect(facetComponent.find('FacetMoreRows').length).toBe(1);\r\n            expect(facetComponent.find('FacetMoreToggle').length).toBe(1);\r\n            expect(facetComponent.find('.facet-values').find(FacetRow).length).toBe(multipleRows.length - 2);\r\n        });\r\n\r\n        it('should have class \"facet-open\" if it has isOpened prop set to true', () => {\r\n            const expectedClass = '.facet-opened';\r\n            const newFacetAttributes = _.extend({}, facetBasicAttributes, {\r\n                isOpened: true,\r\n                facetRows: [{name: 'a', formattedName: 'b'}],\r\n            });\r\n\r\n            expect(facetComponent.find(expectedClass).length).toBe(0);\r\n\r\n            facetComponent.setProps(newFacetAttributes);\r\n            facetComponent.mount();\r\n            expect(facetComponent.find(expectedClass).length).toBe(1);\r\n        });\r\n\r\n        const callBuildCategoryFacet = () => {\r\n            facetInstance['buildFacet'].call(facetInstance, {name: '1', formattedName: '1'});\r\n        };\r\n\r\n        it('should call toggleFacet when calling buildCategoryFacet', () => {\r\n            callBuildCategoryFacet();\r\n            expect(toggleFacet).toHaveBeenCalled();\r\n        });\r\n\r\n        it('should call onToggleFacet when calling buildCategoryFacet and prop is set', () => {\r\n            const onToggleFacetSpy = jasmine.createSpy('onToggleFacet');\r\n            const newFacetAttributes = _.extend({}, facetBasicAttributes, {onToggleFacet: onToggleFacetSpy});\r\n\r\n            callBuildCategoryFacet();\r\n            expect(onToggleFacetSpy).not.toHaveBeenCalled();\r\n\r\n            facetComponent.setProps(newFacetAttributes);\r\n            facetComponent.mount();\r\n            callBuildCategoryFacet();\r\n            expect(onToggleFacetSpy).toHaveBeenCalled();\r\n        });\r\n\r\n        const callClearCategoryFacet = () => {\r\n            facetInstance['clearFacet'].call(facetInstance);\r\n        };\r\n\r\n        it('should call clearFacet when calling clearCategoryFacet', () => {\r\n            callClearCategoryFacet();\r\n            expect(clearFacet).toHaveBeenCalled();\r\n        });\r\n\r\n        it('should call onClearFacet when calling buildCategoryFacet and prop is set', () => {\r\n            const onClearFacetSpy = jasmine.createSpy('onClearFacet');\r\n            const newFacetAttributes = _.extend({}, facetBasicAttributes, {onClearFacet: onClearFacetSpy});\r\n\r\n            callClearCategoryFacet();\r\n            expect(onClearFacetSpy).not.toHaveBeenCalled();\r\n\r\n            facetComponent.setProps(newFacetAttributes);\r\n            facetComponent.mount();\r\n            callClearCategoryFacet();\r\n            expect(onClearFacetSpy).toHaveBeenCalled();\r\n        });\r\n\r\n        it('should sort the rows alphabetically (selected first)', () => {\r\n            const unselected: IFacet[] = [\r\n                {\r\n                    name: 'aaa',\r\n                    formattedName: 'Aaa',\r\n                },\r\n                {\r\n                    name: '222',\r\n                    formattedName: '2',\r\n                },\r\n            ];\r\n            const selected: IFacet[] = [\r\n                {\r\n                    name: 'ttt',\r\n                    formattedName: 'ttt',\r\n                },\r\n                {\r\n                    name: 'sss',\r\n                    formattedName: 'sss',\r\n                    count: '213',\r\n                },\r\n            ];\r\n            const newAttributes = _.extend({}, facetBasicAttributes, {\r\n                facetRows: unselected,\r\n                selectedFacetRows: selected,\r\n            });\r\n\r\n            facetComponent.setProps(newAttributes);\r\n            facetComponent.mount();\r\n\r\n            expect(facetComponent.find(FacetRow).length).toBe(4);\r\n            expect(\r\n                facetComponent\r\n                    .find(FacetRow)\r\n                    .at(0)\r\n                    .props().facetRow\r\n            ).toEqual(jasmine.objectContaining(selected[1]));\r\n            expect(\r\n                facetComponent\r\n                    .find(FacetRow)\r\n                    .at(1)\r\n                    .props().facetRow\r\n            ).toEqual(jasmine.objectContaining(selected[0]));\r\n            expect(\r\n                facetComponent\r\n                    .find(FacetRow)\r\n                    .at(2)\r\n                    .props().facetRow\r\n            ).toEqual(jasmine.objectContaining(unselected[1]));\r\n            expect(\r\n                facetComponent\r\n                    .find(FacetRow)\r\n                    .at(3)\r\n                    .props().facetRow\r\n            ).toEqual(jasmine.objectContaining(unselected[0]));\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=370.bundle.js.map