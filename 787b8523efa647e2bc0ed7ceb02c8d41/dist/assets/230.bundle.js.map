{"version":3,"sources":["webpack:///./src/components/checkbox/tests/GroupableCheckboxReducers.spec.ts"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/230.bundle.js","sourcesContent":["export default \"import * as _ from 'underscore';\\r\\nimport {IReduxAction} from '../../../utils/ReduxUtils';\\r\\nimport {ICheckboxState} from '../CheckboxReducers';\\r\\nimport {\\r\\n    addGroupedCheckbox,\\r\\n    IGroupableCheckboxActionPayload,\\r\\n    removeGroupedCheckbox,\\r\\n    toggleDisabledAllGroupedCheckbox,\\r\\n    toggleDisabledGroupedCheckbox,\\r\\n    toggleGroupedCheckbox,\\r\\n} from '../GroupableCheckboxActions';\\r\\nimport {\\r\\n    groupableCheckboxesInitialState,\\r\\n    groupableCheckboxesReducer,\\r\\n    groupableCheckboxInitialState,\\r\\n    groupableCheckboxReducer,\\r\\n    IGroupableCheckboxesState,\\r\\n} from '../GroupableCheckboxReducers';\\r\\n\\r\\ndescribe('GroupableCheckbox', () => {\\r\\n    describe('GroupableCheckboxReducers', () => {\\r\\n        const genericAction: IReduxAction<IGroupableCheckboxActionPayload> = {\\r\\n            type: 'DO_SOMETHING',\\r\\n            payload: {\\r\\n                id: 'some-checkbox',\\r\\n            },\\r\\n        };\\r\\n\\r\\n        it('should return the default state if the action is not defined and the state is undefined', () => {\\r\\n            const oldState: IGroupableCheckboxesState[] = undefined;\\r\\n            const groupableCheckboxState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                oldState,\\r\\n                genericAction\\r\\n            );\\r\\n\\r\\n            expect(groupableCheckboxState).toBe(groupableCheckboxesInitialState);\\r\\n        });\\r\\n\\r\\n        it('should return the default state if the action is not defined and the state is undefined for one checkbox', () => {\\r\\n            const oldState: IGroupableCheckboxesState = undefined;\\r\\n            const groupableCheckboxState: IGroupableCheckboxesState = groupableCheckboxReducer(oldState, genericAction);\\r\\n\\r\\n            expect(groupableCheckboxState).toBe(groupableCheckboxInitialState);\\r\\n        });\\r\\n\\r\\n        it('should return the old state when the action is not defined', () => {\\r\\n            const oldState: IGroupableCheckboxesState[] = [groupableCheckboxInitialState];\\r\\n            const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                oldState,\\r\\n                genericAction\\r\\n            );\\r\\n\\r\\n            expect(groupableCheckboxsState).toBe(oldState);\\r\\n        });\\r\\n\\r\\n        it('should return the old state when the action is not defined for one checkbox', () => {\\r\\n            const oldState: IGroupableCheckboxesState = groupableCheckboxInitialState;\\r\\n            const groupableCheckboxsState: IGroupableCheckboxesState = groupableCheckboxReducer(\\r\\n                oldState,\\r\\n                genericAction\\r\\n            );\\r\\n\\r\\n            expect(groupableCheckboxsState).toBe(oldState);\\r\\n        });\\r\\n\\r\\n        describe('AddGroup action', () => {\\r\\n            let action: IReduxAction<IGroupableCheckboxActionPayload>;\\r\\n            const parentId: string = 'parentId';\\r\\n\\r\\n            it('should return a new state on add child checkbox', () => {\\r\\n                action = addGroupedCheckbox('id', false, false, parentId);\\r\\n                const oldState: IGroupableCheckboxesState[] = groupableCheckboxesInitialState;\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(oldState);\\r\\n            });\\r\\n\\r\\n            it('should return a new state on add child checkbox', () => {\\r\\n                action = addGroupedCheckbox('id', false, false, parentId);\\r\\n                const oldState: IGroupableCheckboxesState[] = [\\r\\n                    {total: 0, nbChecked: 0, checkboxes: [], parentId: 'test1'},\\r\\n                    {total: 0, nbChecked: 0, checkboxes: [], parentId: 'test2'},\\r\\n                ];\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(oldState);\\r\\n            });\\r\\n\\r\\n            it('should add the child checkbox in the state', () => {\\r\\n                action = addGroupedCheckbox('id', false, false, parentId);\\r\\n                const oldState: IGroupableCheckboxesState[] = groupableCheckboxesInitialState;\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState.length).toBe(1, 'child checkbox was not added in the new state');\\r\\n                if (groupableCheckboxsState.length) {\\r\\n                    expect(groupableCheckboxsState[0].checkboxes.length).toBe(1, 'checkboxes is not defined');\\r\\n                }\\r\\n            });\\r\\n\\r\\n            it('should update the total on add child checkbox', () => {\\r\\n                action = addGroupedCheckbox('id', false, false, parentId);\\r\\n                const oldState: IGroupableCheckboxesState[] = groupableCheckboxesInitialState;\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState.length).toBe(1, 'child checkbox was not added in the new state');\\r\\n                if (groupableCheckboxsState.length) {\\r\\n                    expect(groupableCheckboxsState[0].total).toBe(1, 'total was not updated');\\r\\n                }\\r\\n            });\\r\\n\\r\\n            it('should have nbChecked equal to 0 on add checkbox not checked', () => {\\r\\n                action = addGroupedCheckbox('id', false, false, parentId);\\r\\n                const oldState: IGroupableCheckboxesState[] = groupableCheckboxesInitialState;\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState.length).toBe(1, 'child checkbox was not added in the new state');\\r\\n                if (groupableCheckboxsState.length) {\\r\\n                    expect(groupableCheckboxsState[0].nbChecked).toBe(0, 'nbChecked has been updated');\\r\\n                }\\r\\n            });\\r\\n\\r\\n            it('should update the nbChecked equal to 1 on add child checkbox checked', () => {\\r\\n                action = addGroupedCheckbox('id', true, false, parentId);\\r\\n                const oldState: IGroupableCheckboxesState[] = groupableCheckboxesInitialState;\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState.length).toBe(1, 'child checkbox was not added in the new state');\\r\\n                if (groupableCheckboxsState.length) {\\r\\n                    expect(groupableCheckboxsState[0].nbChecked).toBe(1, 'nbChecked was not updated');\\r\\n                }\\r\\n            });\\r\\n\\r\\n            it('should add the parent in the new state', () => {\\r\\n                action = addGroupedCheckbox(parentId, false, false, undefined, true);\\r\\n                const oldState: IGroupableCheckboxesState[] = groupableCheckboxesInitialState;\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState.length).toBe(1, 'child checkbox was not added in the new state');\\r\\n                if (groupableCheckboxsState.length) {\\r\\n                    expect(groupableCheckboxsState[0].parent).toBeDefined();\\r\\n                    expect(groupableCheckboxsState[0].parentId).toBe('parentId');\\r\\n                }\\r\\n            });\\r\\n\\r\\n            it('should return a new state on add parent checkbox', () => {\\r\\n                action = addGroupedCheckbox(parentId, false, false, undefined, true);\\r\\n                const oldState: IGroupableCheckboxesState[] = groupableCheckboxesInitialState;\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(oldState);\\r\\n            });\\r\\n\\r\\n            it('should add the parent in the new state', () => {\\r\\n                action = addGroupedCheckbox(parentId, false, false, undefined, true);\\r\\n                const oldState: IGroupableCheckboxesState[] = groupableCheckboxesInitialState;\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState.length).toBe(1, 'parent checkbox was not added in the new state');\\r\\n                if (groupableCheckboxsState.length) {\\r\\n                    expect(groupableCheckboxsState[0].parent).toBeDefined();\\r\\n                    expect(groupableCheckboxsState[0].parentId).toBe('parentId');\\r\\n                }\\r\\n            });\\r\\n\\r\\n            describe('with a existing state', () => {\\r\\n                let currentState: IGroupableCheckboxesState[];\\r\\n\\r\\n                beforeEach(() => {\\r\\n                    currentState = [\\r\\n                        {\\r\\n                            total: 1,\\r\\n                            nbChecked: 0,\\r\\n                            parentId,\\r\\n                            checkboxes: [\\r\\n                                {\\r\\n                                    id: 'id1',\\r\\n                                    checked: false,\\r\\n                                    disabled: false,\\r\\n                                },\\r\\n                            ],\\r\\n                        },\\r\\n                    ];\\r\\n                });\\r\\n\\r\\n                it('should return a new state on add parent checkbox in the existing state', () => {\\r\\n                    action = addGroupedCheckbox(parentId, false, false, undefined, true);\\r\\n                    const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                        currentState,\\r\\n                        action\\r\\n                    );\\r\\n                    expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n                });\\r\\n\\r\\n                it('should add the parent in the current state', () => {\\r\\n                    action = addGroupedCheckbox(parentId, false, false, undefined, true);\\r\\n                    const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                        currentState,\\r\\n                        action\\r\\n                    );\\r\\n                    expect(groupableCheckboxsState.length).toBe(\\r\\n                        1,\\r\\n                        'parent checkbox was not added in the current state'\\r\\n                    );\\r\\n                    if (groupableCheckboxsState.length) {\\r\\n                        expect(groupableCheckboxsState[0].parent).toBeDefined();\\r\\n                        expect(groupableCheckboxsState[0].parentId).toBe('parentId');\\r\\n                    }\\r\\n                });\\r\\n\\r\\n                it('should return a new state on add child checkbox in the existing state', () => {\\r\\n                    action = addGroupedCheckbox('id', false, false, parentId);\\r\\n                    const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                        currentState,\\r\\n                        action\\r\\n                    );\\r\\n                    expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n                });\\r\\n\\r\\n                it('should add the child checkbox in the current state', () => {\\r\\n                    action = addGroupedCheckbox('id', false, false, parentId);\\r\\n                    const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                        currentState,\\r\\n                        action\\r\\n                    );\\r\\n                    expect(groupableCheckboxsState.length).toBe(1, 'child checkbox was not added in the current state');\\r\\n                    if (groupableCheckboxsState.length) {\\r\\n                        expect(groupableCheckboxsState[0].checkboxes.length).toBe(2);\\r\\n                    }\\r\\n                });\\r\\n\\r\\n                it('should update the total on add child checkbox with an existing state', () => {\\r\\n                    action = addGroupedCheckbox('id', false, false, parentId);\\r\\n                    const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                        currentState,\\r\\n                        action\\r\\n                    );\\r\\n                    expect(groupableCheckboxsState.length).toBe(1, 'child checkbox was not added in the new state');\\r\\n                    if (groupableCheckboxsState.length) {\\r\\n                        expect(groupableCheckboxsState[0].total).toBe(2, 'total was not updated');\\r\\n                    }\\r\\n                });\\r\\n\\r\\n                it('should have nbChecked equal to 1 on add checkbox checked with an existing state', () => {\\r\\n                    action = addGroupedCheckbox('id', true, false, parentId);\\r\\n                    const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                        currentState,\\r\\n                        action\\r\\n                    );\\r\\n                    expect(groupableCheckboxsState.length).toBe(1, 'child checkbox was not added in the new state');\\r\\n                    if (groupableCheckboxsState.length) {\\r\\n                        expect(groupableCheckboxsState[0].nbChecked).toBe(1, 'nbChecked has been updated');\\r\\n                    }\\r\\n                });\\r\\n            });\\r\\n        });\\r\\n\\r\\n        describe('ToggleGroup action', () => {\\r\\n            let action: IReduxAction<IGroupableCheckboxActionPayload>;\\r\\n            const parentId: string = 'parentId';\\r\\n            const childId: string = 'id1';\\r\\n\\r\\n            let currentState: IGroupableCheckboxesState[];\\r\\n\\r\\n            beforeEach(() => {\\r\\n                currentState = [\\r\\n                    {\\r\\n                        total: 1,\\r\\n                        nbChecked: 0,\\r\\n                        parentId,\\r\\n                        parent: {\\r\\n                            id: parentId,\\r\\n                            checked: false,\\r\\n                            disabled: false,\\r\\n                        },\\r\\n                        checkboxes: [\\r\\n                            {\\r\\n                                id: childId,\\r\\n                                checked: false,\\r\\n                                disabled: false,\\r\\n                            },\\r\\n                        ],\\r\\n                    },\\r\\n                ];\\r\\n            });\\r\\n\\r\\n            it('should return the empty state if not defined', () => {\\r\\n                action = toggleGroupedCheckbox('id', parentId);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer([], action);\\r\\n                expect(groupableCheckboxsState).toEqual([]);\\r\\n            });\\r\\n\\r\\n            it('should return a new state on toggle child checkbox', () => {\\r\\n                action = addGroupedCheckbox('id', false, false, parentId);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n            });\\r\\n\\r\\n            it('should update the child state checked to true', () => {\\r\\n                action = toggleGroupedCheckbox(childId, parentId);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].checkboxes[0].checked).toBe(true);\\r\\n            });\\r\\n\\r\\n            it('should update the nbChecked on toggle child state checked set to true', () => {\\r\\n                action = toggleGroupedCheckbox(childId, parentId);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].nbChecked).toBe(1);\\r\\n            });\\r\\n\\r\\n            it('should return a new state on toggle parent checkbox', () => {\\r\\n                action = toggleGroupedCheckbox(parentId, undefined, true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n            });\\r\\n\\r\\n            it('should update the parent state checked to true', () => {\\r\\n                action = toggleGroupedCheckbox(parentId, undefined, true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].parent.checked).toBe(true);\\r\\n            });\\r\\n\\r\\n            it('should update child checkbox state checked on parent toggle to true', () => {\\r\\n                action = toggleGroupedCheckbox(parentId, undefined, true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].checkboxes[0].checked).toBe(true);\\r\\n            });\\r\\n\\r\\n            it('should update the nbChecked equal to total on parent toggle to true', () => {\\r\\n                action = toggleGroupedCheckbox(parentId, undefined, true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].nbChecked).toBe(1);\\r\\n            });\\r\\n\\r\\n            it('should return the state if the payload id is not the same for one parent', () => {\\r\\n                const oldState: IGroupableCheckboxesState = currentState[0];\\r\\n                action = toggleGroupedCheckbox(childId, undefined, true);\\r\\n                const groupableCheckboxState: IGroupableCheckboxesState = groupableCheckboxReducer(oldState, action);\\r\\n                expect(groupableCheckboxState).toBe(oldState);\\r\\n            });\\r\\n        });\\r\\n\\r\\n        describe('RemoveGroup action', () => {\\r\\n            let action: IReduxAction<IGroupableCheckboxActionPayload>;\\r\\n            const parentId: string = 'parentId';\\r\\n            const childId: string = 'id1';\\r\\n\\r\\n            let currentState: IGroupableCheckboxesState[];\\r\\n\\r\\n            beforeEach(() => {\\r\\n                currentState = [\\r\\n                    {\\r\\n                        total: 2,\\r\\n                        nbChecked: 1,\\r\\n                        parentId,\\r\\n                        parent: {\\r\\n                            id: parentId,\\r\\n                            checked: false,\\r\\n                            disabled: false,\\r\\n                        },\\r\\n                        checkboxes: [\\r\\n                            {\\r\\n                                id: childId,\\r\\n                                checked: false,\\r\\n                                disabled: false,\\r\\n                            },\\r\\n                            {\\r\\n                                id: childId + 1,\\r\\n                                checked: true,\\r\\n                                disabled: false,\\r\\n                            },\\r\\n                        ],\\r\\n                    },\\r\\n                ];\\r\\n            });\\r\\n\\r\\n            it('should return a new state on remove child checkbox', () => {\\r\\n                action = removeGroupedCheckbox(childId, 'notParentId');\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n            });\\r\\n\\r\\n            it('should return a new state on add child checkbox', () => {\\r\\n                action = removeGroupedCheckbox('test2', undefined, false);\\r\\n                const oldState: IGroupableCheckboxesState[] = [\\r\\n                    {total: 0, nbChecked: 0, checkboxes: [], parentId: 'test1'},\\r\\n                    {total: 0, nbChecked: 0, checkboxes: [], parentId: 'test2'},\\r\\n                ];\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    oldState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(oldState);\\r\\n            });\\r\\n\\r\\n            it('should return the state if the parentId is not in the state', () => {\\r\\n                action = removeGroupedCheckbox(childId, 'notParentId');\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).toEqual(currentState);\\r\\n            });\\r\\n\\r\\n            it('should remove the child checkbox from the state', () => {\\r\\n                action = removeGroupedCheckbox(childId, parentId);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].checkboxes.length).toBe(1);\\r\\n            });\\r\\n\\r\\n            it('should update total on remove child checkbox', () => {\\r\\n                action = removeGroupedCheckbox(childId, parentId);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].checkboxes.length).toBe(1);\\r\\n            });\\r\\n\\r\\n            it('should update nbChecked on remove child checkbox checked', () => {\\r\\n                action = removeGroupedCheckbox(childId, parentId);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].checkboxes.length).toBe(1);\\r\\n            });\\r\\n\\r\\n            it('should return a new state on remove parent checkbox', () => {\\r\\n                action = removeGroupedCheckbox(parentId, undefined, true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n            });\\r\\n\\r\\n            it('should remove the groupable state when the parent is removed', () => {\\r\\n                action = removeGroupedCheckbox(parentId, undefined, true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState.length).toBe(0);\\r\\n            });\\r\\n        });\\r\\n\\r\\n        describe('DisabledGroup action', () => {\\r\\n            let action: IReduxAction<IGroupableCheckboxActionPayload>;\\r\\n            const parentId: string = 'parentId';\\r\\n            const childId: string = 'id1';\\r\\n\\r\\n            let currentState: IGroupableCheckboxesState[];\\r\\n\\r\\n            beforeEach(() => {\\r\\n                currentState = [\\r\\n                    {\\r\\n                        total: 2,\\r\\n                        nbChecked: 1,\\r\\n                        parentId,\\r\\n                        parent: {\\r\\n                            id: parentId,\\r\\n                            checked: false,\\r\\n                            disabled: false,\\r\\n                        },\\r\\n                        checkboxes: [\\r\\n                            {\\r\\n                                id: childId,\\r\\n                                checked: false,\\r\\n                                disabled: false,\\r\\n                            },\\r\\n                            {\\r\\n                                id: childId + 1,\\r\\n                                checked: true,\\r\\n                                disabled: false,\\r\\n                            },\\r\\n                        ],\\r\\n                    },\\r\\n                ];\\r\\n            });\\r\\n\\r\\n            it('should return a new state on toggle child checkbox', () => {\\r\\n                action = toggleDisabledGroupedCheckbox(childId, parentId);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n            });\\r\\n\\r\\n            it('should return a new state on toggle parent checkbox', () => {\\r\\n                action = toggleDisabledGroupedCheckbox(parentId, undefined, true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n            });\\r\\n\\r\\n            it('should return the state if the parentId is not in the state', () => {\\r\\n                action = toggleDisabledGroupedCheckbox(childId, 'notParentId');\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).toEqual(currentState);\\r\\n            });\\r\\n\\r\\n            it('should toggle disabled on the child checkbox from the state', () => {\\r\\n                action = toggleDisabledGroupedCheckbox(childId, parentId);\\r\\n                expect(currentState[0].checkboxes[0].disabled).toBe(false);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].checkboxes[0].disabled).toBe(true);\\r\\n            });\\r\\n\\r\\n            it('should toggle disabled on the parent checkbox from the state', () => {\\r\\n                action = toggleDisabledGroupedCheckbox(parentId, undefined, true);\\r\\n                expect(currentState[0].parent.disabled).toBe(false, 'parent checkbox is disabled');\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].parent.disabled).toBe(true, 'parent checkbox is not disabled');\\r\\n            });\\r\\n        });\\r\\n\\r\\n        describe('DisabledAllGroup action', () => {\\r\\n            let action: IReduxAction<IGroupableCheckboxActionPayload>;\\r\\n            const parentId: string = 'parentId';\\r\\n            const childId: string = 'id1';\\r\\n\\r\\n            let currentState: IGroupableCheckboxesState[];\\r\\n            let currentStateAllDisabled: IGroupableCheckboxesState[];\\r\\n\\r\\n            beforeEach(() => {\\r\\n                currentState = [\\r\\n                    {\\r\\n                        total: 2,\\r\\n                        nbChecked: 1,\\r\\n                        parentId,\\r\\n                        parent: {\\r\\n                            id: parentId,\\r\\n                            checked: false,\\r\\n                            disabled: false,\\r\\n                        },\\r\\n                        checkboxes: [\\r\\n                            {\\r\\n                                id: childId,\\r\\n                                checked: false,\\r\\n                                disabled: false,\\r\\n                            },\\r\\n                            {\\r\\n                                id: childId + 1,\\r\\n                                checked: true,\\r\\n                                disabled: false,\\r\\n                            },\\r\\n                        ],\\r\\n                    },\\r\\n                ];\\r\\n\\r\\n                currentStateAllDisabled = [\\r\\n                    {\\r\\n                        total: 2,\\r\\n                        nbChecked: 1,\\r\\n                        parentId,\\r\\n                        parent: {\\r\\n                            id: parentId,\\r\\n                            checked: false,\\r\\n                            disabled: true,\\r\\n                        },\\r\\n                        checkboxes: [\\r\\n                            {\\r\\n                                id: childId,\\r\\n                                checked: false,\\r\\n                                disabled: true,\\r\\n                            },\\r\\n                            {\\r\\n                                id: childId + 1,\\r\\n                                checked: true,\\r\\n                                disabled: true,\\r\\n                            },\\r\\n                        ],\\r\\n                    },\\r\\n                ];\\r\\n            });\\r\\n\\r\\n            it('should return a new state on toggle childs checkboxes', () => {\\r\\n                action = toggleDisabledAllGroupedCheckbox(childId, parentId);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n            });\\r\\n\\r\\n            it('should return a new state on toggle parent checkbox', () => {\\r\\n                action = toggleDisabledAllGroupedCheckbox(parentId, undefined, true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).not.toBe(currentState);\\r\\n            });\\r\\n\\r\\n            it('should return the state if the parentId is not in the state', () => {\\r\\n                action = toggleDisabledAllGroupedCheckbox(childId, 'notParentId');\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState).toEqual(currentState);\\r\\n            });\\r\\n\\r\\n            it('should toggle disabled on all child checkboxes if the parent is not disabled from the state', () => {\\r\\n                action = toggleDisabledAllGroupedCheckbox(childId, parentId);\\r\\n                expect(currentState[0].parent.disabled).toBe(false, 'parent checkbox is disabled');\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].parent.disabled).toBe(true, 'parent checkbox is not disabled');\\r\\n                expect(\\r\\n                    _.every(groupableCheckboxsState[0].checkboxes, (checkbox: ICheckboxState) => checkbox.disabled)\\r\\n                ).toBe(true, 'not every checkboxes are disabled');\\r\\n            });\\r\\n\\r\\n            it('should toggle disabled on all child checkboxes if the parent is disabled from the state', () => {\\r\\n                action = toggleDisabledAllGroupedCheckbox(childId, parentId);\\r\\n                expect(currentStateAllDisabled[0].parent.disabled).toBe(true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentStateAllDisabled,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].parent.disabled).toBe(false);\\r\\n                expect(\\r\\n                    _.every(groupableCheckboxsState[0].checkboxes, (checkbox: ICheckboxState) => checkbox.disabled)\\r\\n                ).toBe(false, 'not every checkboxes are not disabled');\\r\\n            });\\r\\n\\r\\n            it('should disabled on all checkboxes if specified on from the state', () => {\\r\\n                action = toggleDisabledAllGroupedCheckbox(childId, parentId, true);\\r\\n                expect(currentState[0].parent.disabled).toBe(false);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentState,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].parent.disabled).toBe(true);\\r\\n                expect(\\r\\n                    _.every(groupableCheckboxsState[0].checkboxes, (checkbox: ICheckboxState) => checkbox.disabled)\\r\\n                ).toBe(true);\\r\\n            });\\r\\n\\r\\n            it('should not disabled on all checkboxes if specified on from the state', () => {\\r\\n                action = toggleDisabledAllGroupedCheckbox(childId, parentId, false);\\r\\n                expect(currentStateAllDisabled[0].parent.disabled).toBe(true);\\r\\n                const groupableCheckboxsState: IGroupableCheckboxesState[] = groupableCheckboxesReducer(\\r\\n                    currentStateAllDisabled,\\r\\n                    action\\r\\n                );\\r\\n                expect(groupableCheckboxsState[0].parent.disabled).toBe(false);\\r\\n                expect(\\r\\n                    _.every(groupableCheckboxsState[0].checkboxes, (checkbox: ICheckboxState) => checkbox.disabled)\\r\\n                ).toBe(false);\\r\\n            });\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}