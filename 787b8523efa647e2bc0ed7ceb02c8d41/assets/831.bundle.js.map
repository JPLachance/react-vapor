{"version":3,"sources":["webpack:///./src/components/tables/table-children/TableChildBody.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/831.bundle.js","sourcesContent":["export default \"import * as classNames from 'classnames';\\r\\nimport * as React from 'react';\\r\\nimport * as _ from 'underscore';\\r\\n\\r\\nimport {getAdditionalClasses, IAdditionalClass} from '../../../utils/ClassNameUtils';\\r\\nimport {convertUndefinedAndNullToEmptyString} from '../../../utils/FalsyValuesUtils';\\r\\nimport {JSXRenderable} from '../../../utils/JSXUtils';\\r\\nimport {IActionOptions} from '../../actions/Action';\\r\\nimport {IData, ITableHeadingAttribute} from '../Table';\\r\\nimport {TableCollapsibleRowConnected} from '../TableCollapsibleRowConnected';\\r\\nimport {TableCollapsibleRowWrapper} from '../TableCollapsibleRowWrapper';\\r\\nimport {TableChildComponent, TOGGLE_ARROW_CELL_COUNT} from '../TableConstants';\\r\\nimport {TableHeadingRowConnected} from '../TableHeadingRowConnected';\\r\\nimport {getTableChildComponentId} from '../TableUtils';\\r\\n\\r\\nexport interface ITableBodyInheritedFromTableProps {\\r\\n    getActions?: (rowData?: IData) => IActionOptions[];\\r\\n    headingAttributes: ITableHeadingAttribute[];\\r\\n    collapsibleFormatter?: (tableRowData: IData) => JSXRenderable;\\r\\n    additionalRowClasses?: IAdditionalClass[];\\r\\n    withoutHoverOnRow?: boolean;\\r\\n}\\r\\n\\r\\nexport interface ITableChildBodyProps extends ITableBodyInheritedFromTableProps {\\r\\n    tableId: string;\\r\\n    rowData: IData;\\r\\n    isLoading: boolean;\\r\\n    onRowClick?: (actions: IActionOptions[]) => void;\\r\\n    disabled?: boolean;\\r\\n    isMultiSelect: boolean;\\r\\n    withoutHoverOnRow?: boolean;\\r\\n    handleOnRowClick?: (actions: IActionOptions[], rowData: IData) => void;\\r\\n}\\r\\n\\r\\nexport const TableChildBody = (props: ITableChildBodyProps): JSX.Element => {\\r\\n    const headingAndCollapsibleId = `${getTableChildComponentId(props.tableId, TableChildComponent.TABLE_HEADING_ROW)}${\\r\\n        props.rowData.id\\r\\n    }`;\\r\\n    const tableHeadingRowContent = _.map(\\r\\n        props.headingAttributes,\\r\\n        (headingAttribute: ITableHeadingAttribute, xPosition: number) => {\\r\\n            const {attributeName, attributeFormatter} = headingAttribute;\\r\\n            const headingRowContent: React.ReactNode = attributeFormatter\\r\\n                ? attributeFormatter(props.rowData[attributeName], attributeName, props.rowData)\\r\\n                : convertUndefinedAndNullToEmptyString(props.rowData[attributeName]);\\r\\n\\r\\n            return (\\r\\n                <td\\r\\n                    key={`cell-${xPosition}`}\\r\\n                    className={classNames(getAdditionalClasses(headingAttribute.additionalCellClasses, props.rowData))}\\r\\n                    onClick={(event: React.MouseEvent<HTMLTableDataCellElement>) =>\\r\\n                        handleOnClick(event, headingAttribute, props)\\r\\n                    }\\r\\n                >\\r\\n                    <div className=\\\"wrapper\\\">{headingRowContent}</div>\\r\\n                </td>\\r\\n            );\\r\\n        }\\r\\n    );\\r\\n    const collapsibleData = props.collapsibleFormatter && props.collapsibleFormatter(props.rowData);\\r\\n    const collapsibleRow = collapsibleData ? (\\r\\n        <TableCollapsibleRowConnected\\r\\n            id={headingAndCollapsibleId}\\r\\n            key={`collapsible-row-${props.rowData.id}`}\\r\\n            nbColumns={props.headingAttributes.length + TOGGLE_ARROW_CELL_COUNT}\\r\\n        >\\r\\n            {collapsibleData}\\r\\n        </TableCollapsibleRowConnected>\\r\\n    ) : null;\\r\\n\\r\\n    const tableRowWrapperClasses = classNames({\\r\\n        'table-body-loading': !!props.isLoading,\\r\\n    });\\r\\n    const tableRowClasses = classNames(\\r\\n        {\\r\\n            disabled: !!props.rowData.disabled || (!_.isUndefined(props.rowData.enabled) && !props.rowData.enabled),\\r\\n            'no-hover': !!props.withoutHoverOnRow,\\r\\n            'row-disabled': props.disabled,\\r\\n        },\\r\\n        getAdditionalClasses(props.additionalRowClasses, props.rowData)\\r\\n    );\\r\\n\\r\\n    const tableHeadingRowConnectedNode = (\\r\\n        <TableHeadingRowConnected\\r\\n            id={headingAndCollapsibleId}\\r\\n            tableId={props.tableId}\\r\\n            rowId={props.rowData.id}\\r\\n            className={tableRowClasses}\\r\\n            isCollapsible={!!collapsibleData}\\r\\n            onClickCallback={() => {\\r\\n                if (props.onRowClick) {\\r\\n                    props.onRowClick(props.getActions(props.rowData));\\r\\n                }\\r\\n\\r\\n                if (props.handleOnRowClick) {\\r\\n                    props.handleOnRowClick(props.getActions(props.rowData), props.rowData);\\r\\n                }\\r\\n            }}\\r\\n            onDoubleClick={() =>\\r\\n                props\\r\\n                    .getActions(props.rowData)\\r\\n                    .filter((action) => action.callOnDoubleClick)\\r\\n                    .forEach((action) => action.trigger())\\r\\n            }\\r\\n            isMultiSelect={props.isMultiSelect}\\r\\n            selectionDisabled={props.getActions(props.rowData).length < 1}\\r\\n            tableHasCollapsibleRow={!!props.collapsibleFormatter}\\r\\n        >\\r\\n            {tableHeadingRowContent}\\r\\n        </TableHeadingRowConnected>\\r\\n    );\\r\\n\\r\\n    return collapsibleRow || !!props.collapsibleFormatter ? (\\r\\n        <TableCollapsibleRowWrapper className={tableRowWrapperClasses}>\\r\\n            {tableHeadingRowConnectedNode}\\r\\n            {collapsibleRow}\\r\\n        </TableCollapsibleRowWrapper>\\r\\n    ) : (\\r\\n        tableHeadingRowConnectedNode\\r\\n    );\\r\\n};\\r\\n\\r\\nconst handleOnClick = (\\r\\n    event: React.MouseEvent<HTMLTableDataCellElement>,\\r\\n    headingAttributes: ITableHeadingAttribute,\\r\\n    childBodyProps: ITableChildBodyProps\\r\\n) => {\\r\\n    headingAttributes.onClickCell?.(event, childBodyProps);\\r\\n};\\r\\n\""],"sourceRoot":""}