{"version":3,"sources":["webpack:///./src/components/multilineBox/examples/MultilineBoxExampleUtils.tsx?d1c3","webpack:///./src/components/multilineBox/examples/MultilineBoxExamples.tsx?80d8","webpack:///./src/utils/UUID.ts?611d","webpack:///./src/components/input/Input.tsx?1d15","webpack:///./src/components/input/Label.tsx?dafb","webpack:///./src/utils/PropsToOmitUtils.ts?e979","webpack:///./src/components/dragAndDrop/DnDUtils.ts?6815","webpack:///./src/components/input/InputSelectors.ts?f034","webpack:///./src/components/input/InputConnected.tsx?4523","webpack:///./src/components/multilineBox/MultilineBoxSelector.ts?db6f","webpack:///./src/components/dragAndDrop/DnDContainer.tsx?93d8","webpack:///./src/components/multilineBox/MultilineBox.tsx?7891","webpack:///./src/components/multilineBox/hoc/MultilineBoxContainer.tsx?2333","webpack:///./src/components/multilineBox/hoc/MultilineBoxWithDnD.tsx?8641","webpack:///./src/components/multilineBox/hoc/MultilineBoxWithRemoveButton.tsx?99f0"],"names":["props","state","id","UUID","generate","data","name","displayName","render","className","Button","onClick","setState","MultilineBox","this","renderBody","defaultProps","cData","key","InputConnected","classes","defaultValue","validate","value","validateOnChange","onChange","isLast","addNewBox","containerNodeExample","child","index","MultilineBoxWithDefaultContainer","MultilineBoxWithContainer","containerNode","DefaultMultilineBoxWithRemoveButton","getRemoveButton","style","width","height","MultilineBoxWithContainerAndTwoRemoveButton","MultilineBoxWithDragAndDrop","ComplexMultilineBox","ComplexMultilineBox2","DnDContainerProps","draggableContainerProps","ComplexMultilineBox3","icon","Svg","svgName","VaporSVG","dragDrop","svgClass","labelProps","invalidMessage","d","Date","now","replace","c","r","Math","random","floor","toString","validatedInputTypes","inputPropsToOmit","valid","componentWillMount","onRender","validOnMount","validateOnMount","disabledOnMount","componentWillUnmount","onDestroy","componentDidUpdate","prevProps","innerInput","reset","getInnerValue","handleBlur","onBlur","handleChange","validOnChange","handleClick","e","handleKeyUp","event","onKeyUp","getLabel","labelTitle","htmlFor","type","innerInputClasses","invalid","inputElements","ref","min","minimum","max","maximum","input","children","disabled","disabledTooltip","title","placement","Right","required","validMessage","attributes","internalComponentPropsToOmit","PropsToOmitUtils","internal","context","DnDUtils","move","dragIndex","hoverIndex","list","callBack","moving","newOrder","splice","getBoxTarget","parameter","hover","monitor","component","getItem","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","getSelectedBoxSource","isDragging","beginDrag","parentDropTarget","TagControlContext","DecoratedClass","getInput","inputs","InputSelectors","getValue","getIsValid","ownProps","dispatch","mergeProps","initialMultiBoxIDs","undefined","MultilineBoxSelectors","getIds","multilineIds","multiBoxState","DraggableContainerType","getIcon","visibility","isDraggable","cursor","draggableIconProps","connectDragSource","opacity","content","connectDropTarget","connectDragPreview","DnDContainer","connect","dropTarget","dragSource","dragPreview","makeMapStateToProps","getStateProps","multilineBoxIds","mapDispatchToProps","onMount","defaultIDs","onUnmount","removeBox","updateBox","ids","initialData","getInitialDataMappedWithBoxIDs","getInitialBoxesWithAnExtraBox","push","getLastBoxProps","getData","length","getParentProps","parentId","componentDidMount","defaultContainerNode","multilineBoxContainer","supplier","Component","getWrapper","map","supplyConfig","boxProps","parentProps","multilineBoxWithDnD","onReorder","getDnDWrapper","supplierProps","MultilineBoxWithDnD","defaultMultilineBoxRemoveButtonClasses","multilineBoxWithRemoveButton","getRemoveButtonNode","enabled","remove","MultilineBoxWithRemoveButton"],"mappings":"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","file":"assets/958.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {Button} from '../../button/Button';\r\nimport {InputConnected} from '../../input/InputConnected';\r\nimport {IMultilineParentProps, IMultilineSingleBoxProps, MultilineBox} from '../MultilineBox';\r\n\r\nexport type IExampleData = IMultilineSingleBoxProps<IMultilineBoxExamplesProps>;\r\n\r\nexport interface IMultilineBoxExamplesProps {\r\n    name: string;\r\n    displayName: string;\r\n}\r\n\r\nexport class WrapperExample extends React.Component<{}, {id: string; data: IMultilineBoxExamplesProps[]}> {\r\n    constructor(props: any, state: any) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            id: UUID.generate(),\r\n            data: [\r\n                {\r\n                    name: 'Pear',\r\n                    displayName: 'Paris',\r\n                },\r\n            ],\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"my2\">\r\n                    <Button\r\n                        name={'Update initial data sent to the multiline box'}\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                data: [\r\n                                    {\r\n                                        name: 'Banana',\r\n                                        displayName: 'Bahamas',\r\n                                    },\r\n                                    {\r\n                                        name: 'Tomato',\r\n                                        displayName: 'Tacoma',\r\n                                    },\r\n                                ],\r\n                            });\r\n                        }}\r\n                    />\r\n                </div>\r\n                <MultilineBox<IMultilineBoxExamplesProps>\r\n                    id={this.state.id}\r\n                    data={this.state.data}\r\n                    renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                        _.map(data, (cData: IExampleData) => (\r\n                            <div key={cData.id}>\r\n                                <InputConnected\r\n                                    id={`${cData.id}1`}\r\n                                    classes=\"mt0 inline-block mx1\"\r\n                                    defaultValue={cData.props.name}\r\n                                    validate={(value: string) => cData.props.name === value}\r\n                                    validateOnChange\r\n                                    onChange={(value: string) => {\r\n                                        if (value !== '' && cData.isLast) {\r\n                                            defaultProps.addNewBox();\r\n                                        }\r\n                                    }}\r\n                                />\r\n                                <InputConnected\r\n                                    id={`${cData.id}2`}\r\n                                    classes=\"mt0 inline-block mx1\"\r\n                                    defaultValue={cData.props.displayName}\r\n                                />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    defaultProps={{\r\n                        name: '',\r\n                        displayName: '',\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import * as VaporSVG from 'coveo-styleguide';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {IButtonProps} from '../../button/Button';\r\nimport {InputConnected} from '../../input/InputConnected';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {multilineBoxContainer} from '../hoc/MultilineBoxContainer';\r\nimport {multilineBoxWithDnD} from '../hoc/MultilineBoxWithDnD';\r\nimport {\r\n    defaultMultilineBoxRemoveButtonClasses,\r\n    multilineBoxWithRemoveButton,\r\n} from '../hoc/MultilineBoxWithRemoveButton';\r\nimport {IMultilineParentProps, IMultilineSingleBoxProps, MultilineBox} from '../MultilineBox';\r\nimport {IExampleData, IMultilineBoxExamplesProps, WrapperExample} from './MultilineBoxExampleUtils';\r\n\r\nconst containerNodeExample = (\r\n    child: React.ReactNode,\r\n    data: Array<IMultilineSingleBoxProps<IMultilineBoxExamplesProps>>,\r\n    index: number\r\n) => (\r\n    <div key={`${data[index].id}Container`} className={'mod-border p1 flex'}>\r\n        {child}\r\n    </div>\r\n);\r\n\r\nconst containerNodeMaxWidthExample = (\r\n    child: React.ReactNode,\r\n    data: Array<IMultilineSingleBoxProps<IMultilineBoxExamplesProps>>,\r\n    index: number\r\n) => (\r\n    <div key={`${data[index].id}Container`} className={'mod-border p1 flex'} style={{width: '500px', height: '70px'}}>\r\n        {child}\r\n    </div>\r\n);\r\n\r\nconst MultilineBoxWithDefaultContainer = _.compose(multilineBoxContainer())(MultilineBox);\r\n\r\nconst MultilineBoxWithContainer = _.compose(\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst DefaultMultilineBoxWithRemoveButton = _.compose(multilineBoxWithRemoveButton())(MultilineBox);\r\n\r\nconst MultilineBoxWithRemoveButton = _.compose(\r\n    multilineBoxWithRemoveButton({\r\n        containerNode: (\r\n            child: React.ReactNode,\r\n            getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode\r\n        ) => (\r\n            <>\r\n                {child}\r\n                {getRemoveButton({\r\n                    classes: [defaultMultilineBoxRemoveButtonClasses, 'flex-auto full-content-y'],\r\n                })}\r\n            </>\r\n        ),\r\n    }),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeMaxWidthExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxWithContainerAndTwoRemoveButton = _.compose(\r\n    multilineBoxWithRemoveButton({\r\n        containerNode: (\r\n            child: React.ReactNode,\r\n            getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode\r\n        ) => (\r\n            <>\r\n                {child}\r\n                {getRemoveButton({\r\n                    classes: [defaultMultilineBoxRemoveButtonClasses, 'bg-light-grey full-content-y'],\r\n                })}\r\n            </>\r\n        ),\r\n    }),\r\n    multilineBoxContainer({\r\n        containerNode: (\r\n            child: React.ReactNode,\r\n            data: Array<IMultilineSingleBoxProps<IMultilineBoxExamplesProps>>,\r\n            index: number\r\n        ) => (\r\n            <div key={`${data[index].id}Container`} className={'p1 bg-light-grey'}>\r\n                {child}\r\n            </div>\r\n        ),\r\n    }),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxWithDragAndDrop = _.compose(multilineBoxWithDnD())(MultilineBox);\r\n\r\nconst ComplexMultilineBox = _.compose(\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxWithDnD(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst ComplexMultilineBox2 = _.compose(\r\n    multilineBoxWithDnD({\r\n        DnDContainerProps: {\r\n            draggableContainerProps: {\r\n                className: 'inline-flex center-align',\r\n            },\r\n        },\r\n    }),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst ComplexMultilineBox3 = _.compose(\r\n    multilineBoxWithDnD({\r\n        DnDContainerProps: {\r\n            draggableContainerProps: {\r\n                className: 'inline-flex center-align',\r\n            },\r\n            icon: <Svg svgName={VaporSVG.svg.dragDrop.name} svgClass=\"icon fill-medium-grey mod-lg\" />,\r\n        },\r\n    }),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nexport class MultilineBoxExamples extends React.PureComponent {\r\n    render() {\r\n        return (\r\n            <div className=\"my2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with initial data</label>\r\n                    <MultilineBox<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <div key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: '',\r\n                            displayName: '',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Multiline box with initial data and a button to update data\r\n                    </label>\r\n                    <WrapperExample />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with a default container</label>\r\n                    <MultilineBoxWithDefaultContainer<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <div key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: '',\r\n                            displayName: '',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with default values</label>\r\n                    <MultilineBox<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <div key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: 'Patate',\r\n                            displayName: 'Pasdfsa',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with a container</label>\r\n                    <MultilineBoxWithContainer<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: '',\r\n                            displayName: '',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with a default hoc remove button</label>\r\n                    <DefaultMultilineBoxWithRemoveButton<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Multiline box with a hoc remove button wrapped in a container to style the button position right\r\n                    </label>\r\n                    <MultilineBoxWithRemoveButton<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Multiline box with 2 containers to wrap a remove button\r\n                    </label>\r\n                    <MultilineBoxWithContainerAndTwoRemoveButton<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with drag and drop</label>\r\n                    <MultilineBoxWithDragAndDrop<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Complex multiline box hoc</label>\r\n                    <ComplexMultilineBox<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Complex multiline box hoc without icon when dragging</label>\r\n                    <ComplexMultilineBox2<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => {\r\n                                            if (value !== '') {\r\n                                                if (cData.isLast) {\r\n                                                    defaultProps.addNewBox();\r\n                                                }\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        }}\r\n                                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                                        validateOnChange\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Complex multiline box hoc with a custom icon for the drag and drop\r\n                    </label>\r\n                    <ComplexMultilineBox3<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => {\r\n                                            if (value !== '') {\r\n                                                if (cData.isLast) {\r\n                                                    defaultProps.addNewBox();\r\n                                                }\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        }}\r\n                                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                                        validateOnChange\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// tslint:disable\r\nexport class UUID {\r\n    // TODO: replace for https://www.npmjs.com/package/uuid\r\n    static generate() {\r\n        // Source: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n        let d = Date.now();\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\r\n            const r = (d + Math.random() * 16) % 16 | 0;\r\n            d = Math.floor(d / 16);\r\n            return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n        });\r\n    }\r\n}\r\n// tslint:enable\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\nimport {contains, isUndefined, uniqueId} from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {PropsToOmitUtils} from '../../utils/PropsToOmitUtils';\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IInputState} from './InputReducers';\r\nimport {ILabelProps, Label} from './Label';\r\n\r\nconst validatedInputTypes: string[] = ['number', 'text', 'password'];\r\n\r\ntype IInputNativeTagOwnProps = Omit<\r\n    React.AllHTMLAttributes<HTMLInputElement>,\r\n    'defaultValue' | 'onClick' | 'onChange' | 'onBlur' | 'value'\r\n>;\r\n\r\nexport interface IInputAdditionalOwnProps {\r\n    id?: string;\r\n    classes?: IClassName;\r\n    innerInputClasses?: IClassName;\r\n    validate?: (value: any) => boolean;\r\n    labelTitle?: React.ReactNode;\r\n    labelProps?: ILabelProps;\r\n    validateOnChange?: boolean;\r\n    disabledOnMount?: boolean;\r\n    validateOnMount?: boolean;\r\n    disabledTooltip?: string;\r\n    minimum?: number /* @deprecated use min instead */;\r\n    maximum?: number /* @deprecated use max instead */;\r\n    onBlur?: (value: string) => void;\r\n    defaultValue?: string;\r\n}\r\n\r\nexport interface IInputNativeTagStateProps {\r\n    value?: string;\r\n    checked?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IInputAdditionalStateProps {\r\n    valid?: boolean;\r\n    indeterminate?: boolean;\r\n}\r\n\r\nexport interface IInputStateProps extends IInputNativeTagStateProps, IInputAdditionalStateProps {}\r\n\r\nexport interface IInputDispatchProps {\r\n    onDestroy?: () => void;\r\n    onRender?: (value?: string, valid?: boolean, disabled?: boolean) => void;\r\n    onChange?: (value?: string, valid?: boolean) => void;\r\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nconst inputPropsToOmit = keys<IInputAdditionalOwnProps & IInputAdditionalStateProps & IInputDispatchProps>();\r\n\r\nexport interface IInputOwnProps extends IInputAdditionalOwnProps, IInputNativeTagOwnProps {}\r\n\r\nexport interface IInputProps extends IInputOwnProps, Partial<IInputStateProps>, Partial<IInputDispatchProps> {}\r\n\r\nexport interface IInputComponentState {\r\n    valid: boolean;\r\n}\r\n\r\nexport class Input extends React.Component<IInputProps, IInputComponentState> {\r\n    private innerInput: HTMLInputElement;\r\n\r\n    static defaultProps: Partial<IInputProps> = {\r\n        id: uniqueId('input'),\r\n        type: 'text',\r\n        valid: true,\r\n        labelTitle: '',\r\n        required: true,\r\n    };\r\n\r\n    constructor(props: IInputProps, state: IInputState) {\r\n        super(props, state);\r\n        this.state = {\r\n            valid: this.props.valid,\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            // undefined validOnMount will default to true in the state\r\n            const validOnMount =\r\n                this.props.validateOnMount && this.props.validate && this.props.validate(this.props.defaultValue || '');\r\n\r\n            this.props.onRender(this.props.defaultValue, validOnMount, this.props.disabledOnMount);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IInputProps) {\r\n        if (this.props.valid !== prevProps.valid) {\r\n            this.validate();\r\n        }\r\n\r\n        if (prevProps.value !== this.props.value && this.innerInput) {\r\n            this.innerInput.value = this.props.value;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.innerInput.value = '';\r\n    }\r\n\r\n    getInnerValue(): string {\r\n        return (this.innerInput && this.innerInput.value) || '';\r\n    }\r\n\r\n    validate() {\r\n        this.setState({\r\n            valid: this.props.valid && !(this.props.validate && !this.props.validate(this.getInnerValue())),\r\n        });\r\n    }\r\n\r\n    private handleBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(this.getInnerValue());\r\n        }\r\n    }\r\n\r\n    private handleChange() {\r\n        if (this.props.onChange) {\r\n            const validOnChange =\r\n                this.props.validateOnChange && this.props.validate && this.props.validate(this.getInnerValue());\r\n            this.props.onChange(this.getInnerValue(), validOnChange);\r\n        }\r\n    }\r\n\r\n    private handleClick(e: React.MouseEvent<HTMLElement>) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n\r\n    private handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(event);\r\n        }\r\n    }\r\n\r\n    private getLabel(): React.ReactNode {\r\n        const {labelProps, labelTitle} = this.props;\r\n        if (typeof labelTitle === 'string') {\r\n            return labelTitle || this.props.validate ? (\r\n                <Label key={this.props.id + 'label'} htmlFor={this.props.id} {...labelProps}>\r\n                    {labelTitle}\r\n                </Label>\r\n            ) : null;\r\n        } else {\r\n            return labelTitle;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames(\r\n            'input-wrapper validate',\r\n            {\r\n                'input-field': contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.classes\r\n        );\r\n        const innerInputClasses = classNames(\r\n            {\r\n                invalid: !this.state.valid && contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.innerInputClasses\r\n        );\r\n\r\n        const inputElements = [\r\n            <input\r\n                key={this.props.id}\r\n                id={this.props.id}\r\n                className={innerInputClasses}\r\n                defaultValue={!isUndefined(this.props.value) ? this.props.value : this.props.defaultValue}\r\n                ref={(innerInput: HTMLInputElement) => (this.innerInput = innerInput)}\r\n                onBlur={() => this.handleBlur()}\r\n                onChange={() => this.handleChange()}\r\n                onKeyUp={(event: React.KeyboardEvent<HTMLInputElement>) => this.handleKeyUp(event)}\r\n                min={this.props.minimum}\r\n                max={this.props.maximum}\r\n                {..._.omit(this.props, [...PropsToOmitUtils.input, ...inputPropsToOmit])}\r\n            />,\r\n            this.getLabel(),\r\n            this.props.children,\r\n        ];\r\n\r\n        return this.props.disabled && this.props.disabledTooltip ? (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                <Tooltip title={this.props.disabledTooltip} placement={TooltipPlacement.Right}>\r\n                    {inputElements}\r\n                </Tooltip>\r\n            </div>\r\n        ) : (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                {inputElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ILabelProps {\r\n    type?: string;\r\n    classes?: string[];\r\n    validMessage?: string;\r\n    invalidMessage?: string;\r\n}\r\n\r\nexport class Label extends React.Component<ILabelProps & React.HTMLProps<HTMLLabelElement>, any> {\r\n    render() {\r\n        const classes = classNames(this.props.classes);\r\n        const {validMessage, invalidMessage, children, ...attributes} = this.props;\r\n        return (\r\n            <label\r\n                className={classes}\r\n                data-valid-message={validMessage}\r\n                data-invalid-message={invalidMessage}\r\n                {...attributes}\r\n            >\r\n                {children}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","const internalComponentPropsToOmit: string[] = ['children', 'dangerouslySetInnerHTML'];\r\n\r\n// We omit those props for the input native tag because those props are reserved for the Input component and\r\n// to stay compatible with the old interface\r\nconst inputTagPropsToOmit: string[] = [\r\n    ...internalComponentPropsToOmit,\r\n    'defaultValue',\r\n    'onClick',\r\n    'onChange',\r\n    'onBlur',\r\n    'value',\r\n    'valid',\r\n];\r\n\r\nexport const PropsToOmitUtils = {\r\n    internal: internalComponentPropsToOmit,\r\n    input: inputTagPropsToOmit,\r\n};\r\n","import {IDragSource, IDropTarget} from 'react-dnd';\r\nimport {DragDropContext} from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport {findDOMNode} from 'react-dom';\r\nimport * as _ from 'underscore';\r\nimport {DnDContainer, IDraggableContainerOwnProps} from './DnDContainer';\r\n\r\nconst move = (dragIndex: number, hoverIndex: number, list: any[], callBack: (listReorder: any[]) => void) => {\r\n    const moving = list[dragIndex];\r\n    const newOrder = [...list];\r\n\r\n    // Remove the element at position dragIndex\r\n    newOrder.splice(dragIndex, 1);\r\n\r\n    // Insert the moving element at hoverIndex\r\n    newOrder.splice(hoverIndex, 0, moving);\r\n\r\n    callBack(newOrder);\r\n};\r\n\r\nconst getBoxTarget = (parameter: string): IDropTarget => ({\r\n    hover(props: IDraggableContainerOwnProps, monitor: any, component?: DnDContainer): void {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = (findDOMNode(component) as Element).getBoundingClientRect();\r\n\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.move(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n    drop(props: IDraggableContainerOwnProps, monitor: any) {\r\n        monitor.getItem()[parameter] = null;\r\n    },\r\n});\r\n\r\nconst getSelectedBoxSource = (parameter: string): IDragSource => ({\r\n    isDragging(props: IDraggableContainerOwnProps, monitor: any) {\r\n        return props.id === monitor.getItem()[parameter];\r\n    },\r\n    beginDrag(props: IDraggableContainerOwnProps) {\r\n        return {...props};\r\n    },\r\n});\r\n\r\n// This object is usefull when the drag happen outside of the DraggableSelectedOption,\r\n// instead of making the child handle it, the parent catches the event\r\nconst parentDropTarget = {\r\n    drop: _.noop,\r\n};\r\n\r\nlet context: any;\r\nconst TagControlContext = (DecoratedClass: any) => {\r\n    if (!context) {\r\n        context = DragDropContext(HTML5Backend);\r\n    }\r\n    return context(DecoratedClass);\r\n};\r\n\r\nexport const DnDUtils = {\r\n    move,\r\n    getBoxTarget,\r\n    getSelectedBoxSource,\r\n    parentDropTarget,\r\n    TagControlContext,\r\n};\r\n","import {createSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IInputState} from './InputReducers';\r\n\r\nconst getInput = (state: IReactVaporState, props: {id: string}): IInputState =>\r\n    _.findWhere(state.inputs, {id: props.id});\r\n\r\nconst getValue = createSelector(getInput, (input: IInputState): string => input && input.value);\r\n\r\nconst getIsValid = createSelector(getInput, (input: IInputState): boolean => !!input && input.valid);\r\n\r\nexport const InputSelectors = {\r\n    getValue,\r\n    getIsValid,\r\n    getInput,\r\n};\r\n","import {connect} from 'react-redux';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IInputDispatchProps, IInputOwnProps, IInputProps, IInputStateProps, Input} from './Input';\r\nimport {addInput, changeInputValue, removeInput} from './InputActions';\r\nimport {InputSelectors} from './InputSelectors';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IInputOwnProps): IInputStateProps => {\r\n    const input = InputSelectors.getInput(state, {id: ownProps.id});\r\n    return {\r\n        valid: input && input.valid,\r\n        value: input && input.value,\r\n        disabled: input && input.disabled,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IInputOwnProps): IInputDispatchProps => ({\r\n    onRender: (value: string = '', valid = true, disabled = false) =>\r\n        dispatch(addInput(ownProps.id, value, valid, disabled)),\r\n    onDestroy: () => dispatch(removeInput(ownProps.id)),\r\n    onChange: (value: string, valid = true) => dispatch(changeInputValue(ownProps.id, value, valid)),\r\n});\r\n\r\nexport const InputConnected: React.ComponentClass<IInputProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Input);\r\n","import {createSelector} from 'reselect';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IStringListState} from '../../reusableState/customList/StringListReducers';\r\n\r\nconst initialMultiBoxIDs: IStringListState = {id: undefined, list: []};\r\nconst getMultiBoxIDs = (state: Partial<IReactVaporState>, props: {id: string}): IStringListState =>\r\n    (state && state.multilineIds && state.multilineIds[props.id]) || initialMultiBoxIDs;\r\n\r\nconst multiBoxIDsCombiner = (multiBoxState: IStringListState): string[] => (multiBoxState && multiBoxState.list) || [];\r\n\r\nconst getMultiBoxIDsList: (state: Partial<IReactVaporState>, props: {id: string}) => string[] = createSelector(\r\n    getMultiBoxIDs,\r\n    multiBoxIDsCombiner\r\n);\r\n\r\nexport const MultilineBoxSelectors = {\r\n    getIds: getMultiBoxIDsList,\r\n};\r\n","import * as VaporSVG from 'coveo-styleguide';\r\nimport * as React from 'react';\r\nimport {DragSource, DropTarget} from 'react-dnd';\r\nimport {Svg} from '../svg/Svg';\r\nimport {DnDUtils} from './DnDUtils';\r\n\r\nexport interface IDraggableContainerOwnProps {\r\n    id: string;\r\n    index: number;\r\n    move: (dragIndex: number, hoverIndex: number) => void;\r\n    child: any;\r\n    draggableContainerProps?: Partial<React.HTMLProps<HTMLDivElement>>;\r\n    draggableIconProps?: React.HTMLProps<HTMLDivElement>;\r\n    icon: React.ReactNode;\r\n}\r\n\r\nexport interface IDraggableContainerDnDProps {\r\n    isDraggable?: boolean;\r\n    isDragging?: boolean;\r\n    connectDragSource?: any;\r\n    connectDropTarget?: any;\r\n    connectDragPreview?: any;\r\n}\r\n\r\nexport const DraggableContainerType = 'CONTAINER_BOX';\r\n\r\n@DropTarget(DraggableContainerType, DnDUtils.getBoxTarget('id'), (connect: any) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))\r\n@DragSource(DraggableContainerType, DnDUtils.getSelectedBoxSource('id'), (connect: any, monitor: any) => ({\r\n    connectDragSource: connect.dragSource(),\r\n    connectDragPreview: connect.dragPreview(),\r\n    isDragging: monitor.isDragging(),\r\n}))\r\nexport class DnDContainer extends React.Component<IDraggableContainerOwnProps & IDraggableContainerDnDProps> {\r\n    static defaultProps = {\r\n        isDraggable: true,\r\n        draggableContainerProps: {\r\n            className: 'flex flex-center',\r\n        },\r\n        draggableIconProps: {},\r\n        icon: <Svg svgName={VaporSVG.svg.dragDrop.name} svgClass=\"icon\" />,\r\n    };\r\n\r\n    private getIcon() {\r\n        const icon: React.ReactNode = (\r\n            <div\r\n                style={{\r\n                    visibility: this.props.isDraggable ? 'visible' : 'hidden',\r\n                    cursor: this.props.isDraggable ? 'move' : 'default',\r\n                }}\r\n                {...this.props.draggableIconProps}\r\n            >\r\n                {this.props.icon}\r\n            </div>\r\n        );\r\n        return this.props.isDraggable ? this.props.connectDragSource(icon) : icon;\r\n    }\r\n\r\n    render() {\r\n        const opacity = this.props.isDragging ? 0 : 1;\r\n\r\n        const content = (\r\n            <div {...this.props.draggableContainerProps} style={{opacity}}>\r\n                {this.getIcon()}\r\n                {this.props.child && React.cloneElement(this.props.child, this.props.child.props)}\r\n            </div>\r\n        );\r\n\r\n        return this.props.isDraggable ? this.props.connectDropTarget(this.props.connectDragPreview(content)) : content;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {\r\n    addStringList,\r\n    addValueStringList,\r\n    removeStringList,\r\n    removeValueStringList,\r\n    updateValueStringList,\r\n} from '../../reusableState/customList/StringListActions';\r\nimport {deepClone} from '../../utils/CloneUtils';\r\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\r\nimport {UUID} from '../../utils/UUID';\r\nimport {IMultiSelectOwnProps} from '../select/MultiSelectConnected';\r\nimport {MultilineBoxSelectors} from './MultilineBoxSelector';\r\n\r\nexport interface IMultilineSingleBoxProps<T = any> {\r\n    id: string;\r\n    isLast: boolean;\r\n    props: T;\r\n}\r\n\r\nexport interface IMultilineParentProps {\r\n    parentId: string;\r\n    removeBox: (id: string) => void;\r\n    addNewBox: () => void;\r\n}\r\n\r\nexport interface IMultilineBoxOwnProps<T = any> {\r\n    id: string;\r\n    data: T[];\r\n    renderBody?: (data: Array<IMultilineSingleBoxProps<T>>, parentProps: IMultilineParentProps) => React.ReactNode;\r\n    defaultProps?: T;\r\n    renderWrapper?: (\r\n        children: React.ReactNode,\r\n        boxProps: IMultilineSingleBoxProps<T>,\r\n        parentProps: IMultilineParentProps\r\n    ) => React.ReactNode;\r\n}\r\n\r\nexport interface IMultilineBoxStateProps {\r\n    multilineBoxIds: string[];\r\n}\r\n\r\nexport interface IMultilineBoxDispatchProps {\r\n    onMount: (defaultIds: string[]) => void;\r\n    onUnmount: () => void;\r\n    removeBox: (id: string) => void;\r\n    addNewBox: () => void;\r\n    updateBox: (defaultIds: string[]) => void;\r\n}\r\n\r\nexport interface IMultilineBoxProps<T = any>\r\n    extends IMultilineBoxOwnProps<T>,\r\n        Partial<IMultilineBoxStateProps>,\r\n        Partial<IMultilineBoxDispatchProps> {}\r\n\r\nconst makeMapStateToProps = () => {\r\n    const getStateProps = createStructuredSelector({\r\n        multilineBoxIds: MultilineBoxSelectors.getIds,\r\n    });\r\n\r\n    return (state: IReactVaporState, ownProps: IMultiSelectOwnProps): IMultilineBoxStateProps =>\r\n        getStateProps(state, {id: ownProps.id});\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IMultilineBoxOwnProps): IMultilineBoxDispatchProps => ({\r\n    onMount: (defaultIDs: string[]) => dispatch(addStringList(ownProps.id, defaultIDs)),\r\n    onUnmount: () => dispatch(removeStringList(ownProps.id)),\r\n    removeBox: (id: string) => dispatch(removeValueStringList(ownProps.id, id)),\r\n    addNewBox: () => dispatch(addValueStringList(ownProps.id, UUID.generate())),\r\n    updateBox: (ids: string[]) => dispatch(updateValueStringList(ownProps.id, ids)),\r\n});\r\n\r\n@ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\nexport class MultilineBox<T> extends React.PureComponent<IMultilineBoxProps<T>> {\r\n    private initialData: {[id: string]: T};\r\n\r\n    static defaultProps = {\r\n        renderBody: () => <div />,\r\n        defaultProps: {},\r\n    };\r\n\r\n    constructor(props: IMultilineBoxProps<T>, state: any) {\r\n        super(props, state);\r\n\r\n        this.initialData = this.getInitialDataMappedWithBoxIDs();\r\n    }\r\n\r\n    private getInitialDataMappedWithBoxIDs(): {[id: string]: T} {\r\n        const initialData: {[id: string]: T} = {};\r\n        _.each(this.props.data, (data: T) => {\r\n            initialData[UUID.generate()] = data;\r\n        });\r\n        return initialData;\r\n    }\r\n\r\n    private getInitialBoxesWithAnExtraBox(): string[] {\r\n        const ids: string[] = _.keys(this.initialData);\r\n        ids.push(UUID.generate());\r\n        return ids;\r\n    }\r\n\r\n    private getLastBoxProps(): T {\r\n        return deepClone(this.props.defaultProps || {});\r\n    }\r\n\r\n    private getData(): Array<IMultilineSingleBoxProps<T>> {\r\n        return _.map(this.props.multilineBoxIds, (id: string, index: number) => {\r\n            const props: T = this.initialData[id] || this.getLastBoxProps();\r\n            return {\r\n                id,\r\n                isLast: index === this.props.multilineBoxIds.length - 1,\r\n                props,\r\n            };\r\n        });\r\n    }\r\n\r\n    private getParentProps(): IMultilineParentProps {\r\n        return {\r\n            removeBox: (id: string) => this.props.removeBox(id),\r\n            addNewBox: () => this.props.addNewBox(),\r\n            parentId: this.props.id,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IMultilineBoxProps<T>>) {\r\n        if (!_.isEqual(prevProps.data, this.props.data)) {\r\n            this.initialData = this.getInitialDataMappedWithBoxIDs();\r\n            this.props.updateBox(this.getInitialBoxesWithAnExtraBox());\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onMount(this.getInitialBoxesWithAnExtraBox());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onUnmount();\r\n    }\r\n\r\n    render() {\r\n        return this.props.renderBody(this.getData(), this.getParentProps());\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {ConfigSupplier, HocUtils} from '../../../utils/HocUtils';\r\nimport {\r\n    IMultilineBoxDispatchProps,\r\n    IMultilineBoxOwnProps,\r\n    IMultilineParentProps,\r\n    IMultilineSingleBoxProps,\r\n} from '../MultilineBox';\r\n\r\ntype MultilineBoxContainerComponent<T = any> = React.ComponentClass<IMultilineBoxOwnProps<T>>;\r\n\r\nexport interface IMultilineBoxContainerSupplierProps<T = any> {\r\n    containerNode?: (\r\n        child: React.ReactNode,\r\n        data: Array<IMultilineSingleBoxProps<T>>,\r\n        index: number\r\n    ) => React.ReactNode;\r\n}\r\n\r\nexport interface IMultilineBoxContainerProps<T>\r\n    extends IMultilineBoxContainerSupplierProps<T>,\r\n        IMultilineBoxOwnProps<T>,\r\n        Partial<IMultilineBoxDispatchProps> {}\r\n\r\nconst defaultContainerNode = (child: React.ReactNode, data: IMultilineSingleBoxProps[], index: number) => (\r\n    <div key={`${(data.length && data[index].id) || index}Container`}>{child}</div>\r\n);\r\n\r\nexport const multilineBoxContainer = (\r\n    supplier: ConfigSupplier<IMultilineBoxContainerSupplierProps> = {containerNode: defaultContainerNode}\r\n) => (Component: MultilineBoxContainerComponent): MultilineBoxContainerComponent => {\r\n    class MultilineBoxContainer<T> extends React.PureComponent<IMultilineBoxContainerProps<T>> {\r\n        static defaultProps = {\r\n            renderBody: () => <div />,\r\n        };\r\n\r\n        private getWrapper(children: React.ReactNode, data: Array<IMultilineSingleBoxProps<T>>) {\r\n            return React.Children.map(children, (child: React.ReactNode, index: number) =>\r\n                HocUtils.supplyConfig(supplier).containerNode(child, data, index)\r\n            );\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Component\r\n                    {...this.props}\r\n                    renderBody={(boxProps: Array<IMultilineSingleBoxProps<T>>, parentProps: IMultilineParentProps) =>\r\n                        this.getWrapper(this.props.renderBody(boxProps, parentProps), boxProps)\r\n                    }\r\n                >\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return MultilineBoxContainer;\r\n};\r\n","import * as React from 'react';\r\nimport {DropTarget} from 'react-dnd';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {reorderStringList} from '../../../reusableState/customList/StringListActions';\r\nimport {ConfigSupplier, HocUtils} from '../../../utils/HocUtils';\r\nimport {IDispatch, ReduxConnect} from '../../../utils/ReduxUtils';\r\nimport {DnDContainer, DraggableContainerType, IDraggableContainerOwnProps} from '../../dragAndDrop/DnDContainer';\r\nimport {DnDUtils} from '../../dragAndDrop/DnDUtils';\r\nimport {IMultiSelectOwnProps} from '../../select/MultiSelectConnected';\r\nimport {\r\n    IMultilineBoxDispatchProps,\r\n    IMultilineBoxOwnProps,\r\n    IMultilineBoxStateProps,\r\n    IMultilineParentProps,\r\n    IMultilineSingleBoxProps,\r\n} from '../MultilineBox';\r\nimport {MultilineBoxSelectors} from '../MultilineBoxSelector';\r\n\r\ntype MultilineBoxWithDnDComponent<T = any> = React.ComponentClass<IMultilineBoxOwnProps<T>>;\r\n\r\nexport interface IMultilineBoxWithDnDSupplierProps {\r\n    DnDContainerProps?: Partial<IDraggableContainerOwnProps>;\r\n}\r\n\r\nexport interface IMultilineBoxWithDnDDispatchProps {\r\n    onReorder?: (list: string[]) => void;\r\n}\r\n\r\nexport interface IMultilineBoxWithDnDProps<T>\r\n    extends IMultilineBoxWithDnDSupplierProps,\r\n        IMultilineBoxStateProps,\r\n        IDraggableContainerOwnProps,\r\n        IMultilineBoxOwnProps<T>,\r\n        Partial<IMultilineBoxWithDnDDispatchProps>,\r\n        Partial<IMultilineBoxDispatchProps> {}\r\n\r\nexport const multilineBoxWithDnD = (supplier: ConfigSupplier<IMultilineBoxWithDnDSupplierProps> = {}) => (\r\n    Component: MultilineBoxWithDnDComponent\r\n): MultilineBoxWithDnDComponent => {\r\n    const makeMapStateToProps = () => {\r\n        const getStateProps = createStructuredSelector({\r\n            multilineBoxIds: MultilineBoxSelectors.getIds,\r\n        });\r\n\r\n        return (state: IReactVaporState, ownProps: IMultiSelectOwnProps): IMultilineBoxStateProps =>\r\n            getStateProps(state, {id: ownProps.id});\r\n    };\r\n\r\n    const mapDispatchToProps = (\r\n        dispatch: IDispatch,\r\n        ownProps: IMultilineBoxOwnProps\r\n    ): IMultilineBoxWithDnDDispatchProps => ({\r\n        onReorder: (list: string[]) => dispatch(reorderStringList(ownProps.id, list)),\r\n    });\r\n\r\n    @DropTarget(DraggableContainerType, DnDUtils.parentDropTarget, (connect: any) => ({\r\n        connectDropTarget: connect.dropTarget(),\r\n    }))\r\n    @ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\n    class MultilineBoxWithDnD<T> extends React.PureComponent<IMultilineBoxWithDnDProps<T>> {\r\n        static defaultProps = {\r\n            renderBody: () => <div />,\r\n        };\r\n\r\n        private getDnDWrapper(children: React.ReactNode, data: Array<IMultilineSingleBoxProps<T>>) {\r\n            const supplierProps: IMultilineBoxWithDnDSupplierProps = {\r\n                ...{\r\n                    DnDContainerProps: {},\r\n                },\r\n                ...HocUtils.supplyConfig(supplier),\r\n            };\r\n            return React.Children.map(children, (child: React.ReactNode, index: number) => {\r\n                const isLast = index === data.length - 1;\r\n                const id: string = (data.length && data[index].id) || index.toString();\r\n                return (\r\n                    <DnDContainer\r\n                        id={id}\r\n                        key={`${id}DnD`}\r\n                        index={index}\r\n                        move={(dragIndex: number, hoverIndex: number) =>\r\n                            DnDUtils.move(dragIndex, hoverIndex, this.props.multilineBoxIds, this.props.onReorder)\r\n                        }\r\n                        child={child}\r\n                        isDraggable={!isLast}\r\n                        {...supplierProps.DnDContainerProps}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Component\r\n                    {...this.props}\r\n                    renderBody={(boxProps: Array<IMultilineSingleBoxProps<T>>, parentProps: IMultilineParentProps) =>\r\n                        this.getDnDWrapper(this.props.renderBody(boxProps, parentProps), boxProps)\r\n                    }\r\n                >\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return DnDUtils.TagControlContext(MultilineBoxWithDnD);\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as VaporSVG from 'coveo-styleguide';\r\nimport * as React from 'react';\r\nimport {removeValueStringList} from '../../../reusableState/customList/StringListActions';\r\nimport {ConfigSupplier, HocUtils} from '../../../utils/HocUtils';\r\nimport {IDispatch, ReduxConnect} from '../../../utils/ReduxUtils';\r\nimport {Button, IButtonProps} from '../../button/Button';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {\r\n    IMultilineBoxDispatchProps,\r\n    IMultilineBoxOwnProps,\r\n    IMultilineParentProps,\r\n    IMultilineSingleBoxProps,\r\n} from '../MultilineBox';\r\n\r\ntype MultilineBoxWithRemoveButtonComponent<T = any> = React.ComponentClass<IMultilineBoxOwnProps<T>>;\r\n\r\nexport interface IMultilineBoxWithRemoveButtonSupplierProps<T = any> {\r\n    containerNode?: (\r\n        child: React.ReactNode,\r\n        getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode,\r\n        data: Array<IMultilineSingleBoxProps<T>>,\r\n        index: number\r\n    ) => React.ReactNode;\r\n}\r\n\r\nexport interface IMultilineBoxWithRemoveButtonProps<T>\r\n    extends IMultilineBoxWithRemoveButtonSupplierProps<T>,\r\n        IMultilineBoxOwnProps<T>,\r\n        Partial<IMultilineBoxDispatchProps> {}\r\n\r\nconst defaultContainerNode = (\r\n    child: React.ReactNode,\r\n    getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode,\r\n    data: IMultilineSingleBoxProps[],\r\n    index: number\r\n) => (\r\n    <React.Fragment key={`${(data.length && data[index].id) || index}RemoveButton`}>\r\n        {child}\r\n        {getRemoveButton()}\r\n    </React.Fragment>\r\n);\r\n\r\nexport const defaultMultilineBoxRemoveButtonClasses: string = 'center-align mod-no-border';\r\n\r\nexport const multilineBoxWithRemoveButton = (\r\n    supplier: ConfigSupplier<IMultilineBoxWithRemoveButtonSupplierProps> = {containerNode: defaultContainerNode}\r\n) => (Component: MultilineBoxWithRemoveButtonComponent): MultilineBoxWithRemoveButtonComponent => {\r\n    const mapDispatchToProps = (\r\n        dispatch: IDispatch,\r\n        ownProps: IMultilineBoxOwnProps\r\n    ): Partial<IMultilineBoxDispatchProps> => ({\r\n        removeBox: (id: string) => dispatch(removeValueStringList(ownProps.id, id)),\r\n    });\r\n\r\n    @ReduxConnect(null, mapDispatchToProps)\r\n    class MultilineBoxWithRemoveButton<T> extends React.PureComponent<IMultilineBoxWithRemoveButtonProps<T>> {\r\n        static defaultProps = {\r\n            renderBody: () => <div />,\r\n        };\r\n\r\n        private getRemoveButtonNode(\r\n            data: Partial<IMultilineSingleBoxProps<T>> = {},\r\n            props: Partial<IButtonProps> = {}\r\n        ) {\r\n            return (\r\n                <Button\r\n                    classes={[\r\n                        classNames(defaultMultilineBoxRemoveButtonClasses, {\r\n                            'cursor-pointer': !data.isLast,\r\n                        }),\r\n                    ]}\r\n                    style={{\r\n                        visibility: !data.isLast ? 'visible' : 'hidden',\r\n                    }}\r\n                    onClick={() => !data.isLast && this.props.removeBox(data.id)}\r\n                    enabled={!data.isLast}\r\n                    {...props}\r\n                >\r\n                    <Svg\r\n                        svgName={VaporSVG.svg.remove.name}\r\n                        className=\"icon fill-medium-blue mod-18\"\r\n                        style={{\r\n                            visibility: !data.isLast ? 'visible' : 'hidden',\r\n                        }}\r\n                    />\r\n                </Button>\r\n            );\r\n        }\r\n\r\n        private getWrapper(children: React.ReactNode, data: Array<IMultilineSingleBoxProps<T>>) {\r\n            return React.Children.map(children, (child: React.ReactNode, index: number) =>\r\n                HocUtils.supplyConfig(supplier).containerNode(\r\n                    child,\r\n                    (props?: Partial<IButtonProps>) => this.getRemoveButtonNode(data[index], props),\r\n                    data,\r\n                    index\r\n                )\r\n            );\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Component\r\n                    {...this.props}\r\n                    renderBody={(boxProps: Array<IMultilineSingleBoxProps<T>>, parentProps: IMultilineParentProps) =>\r\n                        this.getWrapper(this.props.renderBody(boxProps, parentProps), boxProps)\r\n                    }\r\n                >\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return MultilineBoxWithRemoveButton;\r\n};\r\n"],"sourceRoot":""}