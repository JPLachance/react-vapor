{"version":3,"sources":["webpack:///./src/components/refresh/examples/RefreshExamples.tsx?3639","webpack:///./src/components/input/InputDescription.tsx?8553","webpack:///./src/components/input/LabeledInput.tsx?95a1","webpack:///./src/components/refresh/RefreshCallback.tsx?1738","webpack:///./src/components/refresh/ButtonWithRefreshCallback.tsx?5b8c"],"names":["RefreshExamples","undefined","dispatch","start","id","stop","props","level","title","label","name","className","onClick","callback","alert","delay","button","enabled","buttonContainerProps","InputDescription","children","LabeledInput","message","helpText","headerClassName","optionalInformation","header","information","placement","Top","svgName","svgClass","description","state","count","this","status","inProgress","stopped","started","stopInterval","clearInterval","activeInterval","startInterval","window","setInterval","setState","prevState","REFRESH_CALLBACK_INTERVAL_MS","componentDidMount","componentDidUpdate","prevProps","isStarted","isStopped","componentWillUnmount","render","isInProgress","renderCount","defaultProps","RefreshCallback","ownProps","getRefreshStatus","RefreshCallbackDisconnected","isNotStopped","ButtonWithRefreshCallback","refreshCallbackProps"],"mappings":"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","file":"assets/982.bundle.js","sourcesContent":["import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {IDispatch} from '../../../utils/ReduxUtils';\nimport {Button} from '../../button/Button';\nimport {LabeledInput} from '../../input/LabeledInput';\nimport {Section} from '../../section/Section';\nimport {ButtonWithRefreshCallback} from '../ButtonWithRefreshCallback';\nimport {RefreshCallBackActions} from '../RefeshCallbackActions';\nimport {RefreshCallback} from '../RefreshCallback';\n\n// start-print\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\n    start: (id: string) => dispatch(RefreshCallBackActions.start(id)),\n    stop: (id: string) => dispatch(RefreshCallBackActions.stop(id)),\n});\n\nconst RefreshExamplesDisconnected = (props: ReturnType<typeof mapDispatchToProps>) => (\n    <>\n        <Section level={2} title=\"Component to handle Refresh\">\n            <LabeledInput label=\"Refresh counter\">\n                <Button name=\"Start\" className=\"btn mr2\" onClick={() => props.start('refresh-1')} />\n                <Button name=\"Stop\" className=\"btn\" onClick={() => props.stop('refresh-1')} />\n                <div>\n                    <RefreshCallback id=\"refresh-1\" callback={() => alert('refresh end')} />\n                </div>\n            </LabeledInput>\n        </Section>\n        <Section level={2} title=\"Component with a button to call the refreshCallback\">\n            <LabeledInput label=\"Refresh counter\">\n                <Button name=\"Start\" className=\"btn mr2\" onClick={() => props.start('refresh-2')} />\n                <Button name=\"Stop\" className=\"btn\" onClick={() => props.stop('refresh-2')} />\n                <div>\n                    <ButtonWithRefreshCallback\n                        id=\"refresh-2\"\n                        delay={20}\n                        callback={(start) => {\n                            alert('refresh end');\n                            start();\n                        }}\n                        button={{\n                            name: 'Refresh',\n                            enabled: true,\n                        }}\n                        buttonContainerProps={{\n                            className: 'mb2',\n                        }}\n                    />\n                </div>\n            </LabeledInput>\n        </Section>\n    </>\n);\n\nexport const RefreshExamples = connect(undefined, mapDispatchToProps)(RefreshExamplesDisconnected);\n// stop-print\n","import * as React from 'react';\n\nexport const InputDescription: React.FunctionComponent = ({children}) => (\n    <section className=\"text-dark-medium-grey help-text\">{children}</section>\n);\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\nimport {Svg} from '../svg/Svg';\nimport {Tooltip} from '../tooltip/Tooltip';\nimport {InputDescription} from './InputDescription';\n\nexport interface ILabeledInputProps {\n    label?: React.ReactNode;\n    message?: React.ReactNode;\n    helpText?: React.ReactNode;\n    headerClassName?: string;\n    optionalInformation?: string;\n}\n\nexport const LabeledInput: React.FunctionComponent<ILabeledInputProps> = ({\n    children,\n    label,\n    message,\n    helpText: description,\n    headerClassName,\n    optionalInformation: information,\n}) => {\n    const header =\n        !!label || !!information ? (\n            <header className={classNames('label', 'text-light-blue', headerClassName)}>\n                {!!label ? <span>{label}</span> : null}\n                {!!information ? (\n                    <Tooltip title={information} placement={TooltipPlacement.Top} className=\"ml1\">\n                        <Svg svgName=\"info-14\" svgClass=\"icon fill-medium-grey\" />\n                    </Tooltip>\n                ) : null}\n            </header>\n        ) : null;\n\n    return (\n        <div className=\"labeled-input\">\n            {header}\n            {children}\n            {!!message && <InputDescription>{message}</InputDescription>}\n            {!!description && <InputDescription>{description}</InputDescription>}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {Defaults} from '../../Defaults';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {RefreshCallBackActions} from './RefeshCallbackActions';\nimport {RefreshStatus, RefreshStatusSelectors} from './RefreshCallbackReducer';\n\nexport interface IRefreshCallbackOwnProps {\n    id: string;\n    delay?: number;\n    renderCount?: (count: number) => React.ReactNode;\n    callback: (start: () => void) => void;\n}\n\nexport interface IRefreshCallbackState {\n    count: number;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IRefreshCallbackOwnProps) => ({\n    status: RefreshStatusSelectors.getRefreshStatus(state, {id: ownProps.id}),\n});\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IRefreshCallbackOwnProps) => ({\n    start: () => dispatch(RefreshCallBackActions.start(ownProps.id)),\n    stop: () => dispatch(RefreshCallBackActions.stop(ownProps.id)),\n    inProgress: () => dispatch(RefreshCallBackActions.inProgress(ownProps.id)),\n});\n\nexport type IRefreshCallbackProps = IRefreshCallbackOwnProps &\n    ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>;\n\nclass RefreshCallbackDisconnected extends React.PureComponent<IRefreshCallbackProps, IRefreshCallbackState> {\n    static defaultProps: Partial<IRefreshCallbackProps> = {\n        delay: 10,\n        renderCount: (count: number) => <span>Auto refresh in {count} seconds</span>,\n    };\n\n    private activeInterval: number;\n\n    state = {\n        count: this.props.delay,\n    };\n\n    get isInProgress() {\n        return this.state.count === 0 && this.props.status === RefreshStatus.inProgress;\n    }\n\n    get isStopped() {\n        return this.props.status === RefreshStatus.stopped;\n    }\n\n    get isStarted() {\n        return this.props.status === RefreshStatus.started;\n    }\n\n    private stopInterval() {\n        clearInterval(this.activeInterval);\n    }\n\n    private startInterval() {\n        this.activeInterval = window.setInterval(() => {\n            this.setState((prevState: IRefreshCallbackState) => ({\n                count: prevState.count - 1,\n            }));\n        }, Defaults.REFRESH_CALLBACK_INTERVAL_MS);\n        this.props.inProgress();\n    }\n\n    componentDidMount() {\n        this.startInterval();\n    }\n\n    componentDidUpdate(prevProps: Readonly<IRefreshCallbackProps>, prevState: Readonly<IRefreshCallbackState>) {\n        if (this.isStarted) {\n            this.stopInterval();\n            this.setState({\n                count: this.props.delay,\n            });\n            this.startInterval();\n        } else if (this.isStopped) {\n            this.stopInterval();\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    render() {\n        if (this.isInProgress) {\n            this.stopInterval();\n            this.props.stop();\n            this.props.callback?.(this.props.start);\n        }\n\n        return this.props.renderCount(this.state.count);\n    }\n}\n\nexport const RefreshCallback = connect(mapStateToProps, mapDispatchToProps)(RefreshCallbackDisconnected);\n","import {FunctionComponent} from 'react';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {Button, IButtonProps} from '../button/Button';\nimport {RefreshCallBackActions} from './RefeshCallbackActions';\nimport {IRefreshCallbackOwnProps, RefreshCallback} from './RefreshCallback';\nimport {RefreshStatus, RefreshStatusSelectors} from './RefreshCallbackReducer';\n\nexport interface IButtonWithRefreshCallbackProps extends IRefreshCallbackOwnProps {\n    buttonContainerProps?: React.HtmlHTMLAttributes<HTMLDivElement>;\n    button: IButtonProps;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IButtonWithRefreshCallbackProps) => ({\n    status: RefreshStatusSelectors.getRefreshStatus(state, {id: ownProps.id}),\n});\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IButtonWithRefreshCallbackProps) => ({\n    start: () => dispatch(RefreshCallBackActions.start(ownProps.id)),\n    stop: () => dispatch(RefreshCallBackActions.stop(ownProps.id)),\n});\n\nconst isNotStopped = (status: string) => status !== RefreshStatus.stopped;\n\nconst buttonWithRefreshCallbackDisconnected: FunctionComponent<IButtonWithRefreshCallbackProps &\n    Partial<ReturnType<typeof mapStateToProps>> &\n    Partial<ReturnType<typeof mapDispatchToProps>>> = ({\n    button,\n    buttonContainerProps,\n    status,\n    start,\n    stop,\n    ...refreshCallbackProps\n}) => (\n    <>\n        <div {...(buttonContainerProps || {})}>\n            <Button\n                {...button}\n                onClick={() => {\n                    stop();\n                    refreshCallbackProps.callback?.(start);\n                }}\n                enabled={isNotStopped(status)}\n            />\n        </div>\n        <RefreshCallback {...refreshCallbackProps} />\n    </>\n);\n\nexport const ButtonWithRefreshCallback = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(buttonWithRefreshCallbackDisconnected);\n"],"sourceRoot":""}