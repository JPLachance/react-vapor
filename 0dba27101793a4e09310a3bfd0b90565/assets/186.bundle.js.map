{"version":3,"sources":["webpack:///./src/components/examples/modalWindowExamples.tsx"],"names":["ModalWindowExamples","title","ModalCompositeExampleConnected","ModalWithDirtyChangeDiscardPrevention","id","ModalLoadingExample","description","mapDispatchToProps","dispatch","open","close","toggleIsDirty","isDirty","toggle","handleClose","modalId","level","onClick","classes","modalHeaderClasses","modalBodyChildren","className","count","modalFooterChildren","primary","small","modalBodyClasses","modalHeaderChildren","svgName","svgClass","docLink","url","tooltip","shouldCloseOnEsc","shouldCloseOnOverlayClick","onAfterOpen","alert","closeCallback","state","ownProps","getIsDirty","promptBefore","labelTitle","onChange","i","validateShouldNavigate","openOnMount"],"mappings":"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","file":"assets/186.bundle.js","sourcesContent":["import {loremIpsum} from 'lorem-ipsum';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport {\n    Button,\n    closeModal,\n    IDispatch,\n    Input,\n    IReactVaporState,\n    ModalCompositeConnected,\n    ModalLoading,\n    openModal,\n    Section,\n    Svg,\n    Tooltip,\n    UnsavedChangesModalProvider,\n    WithDirtyActions,\n    WithDirtySelectors,\n} from 'react-vapor';\nimport * as _ from 'underscore';\n\nimport {ExampleComponent} from '../ComponentsInterface';\n\nexport interface ModalConnectedExampleProps {\n    id?: string;\n    open?: (id: string) => void;\n    close?: (id: string) => void;\n    isDirty?: boolean;\n    toggleIsDirty?: (id: string, dirty: boolean) => void;\n}\n\nexport const ModalWindowExamples: ExampleComponent = () => (\n    <Section title=\"Modal Window Examples\">\n        <ModalCompositeExampleConnected />\n        <ModalWithDirtyChangeDiscardPrevention id=\"UnsavedChangeModal\" />\n        <ModalLoadingExample />\n    </Section>\n);\n\nModalWindowExamples.title = 'Modal Window';\nModalWindowExamples.description =\n    'Modal windows appear in front of the main page and disable it while they are visible. They act as a zoom in on an element of the main page that allows additionnal interaction or configuration. They make possible for users to focus on their content whilst avoiding leaving the context from which they have been called.';\n\n// start-print\n\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\n    open: (id: string) => dispatch(openModal(id)),\n    close: (id: string) => dispatch(closeModal(id)),\n    toggleIsDirty: (id: string, isDirty: boolean) => dispatch(WithDirtyActions.toggle(id, isDirty)),\n});\n\nconst ModalExampleDisconnected: React.FunctionComponent<ModalConnectedExampleProps> = ({\n    open,\n    close,\n    toggleIsDirty,\n}) => {\n    const handleClose = (id: string) => {\n        close(id);\n        toggleIsDirty(id, false);\n    };\n    const modalConfirmationId = 'Modal-Confirmation-Connected';\n    const modalWarningId = 'Modal-Warning-Connected';\n    const modalInfoId = 'Modal-Info-Connected';\n    const modalId = 'Modal-Connected-#1';\n    return (\n        <Section level={2} title=\"Modals connected to the redux store\">\n            <Section level={3} title=\"Confirmation, warning and info prompts\">\n                <Button onClick={() => open(modalConfirmationId)}>Prompt confirmation</Button>\n\n                <ModalCompositeConnected\n                    id={modalConfirmationId}\n                    title=\"Prompt confirmation\"\n                    classes={'mod-prompt'}\n                    modalHeaderClasses={['mod-confirmation']}\n                    modalBodyChildren={<div className=\"mt2\">{loremIpsum({count: 3})}</div>}\n                    modalFooterChildren={\n                        <>\n                            <Button primary small onClick={() => handleClose(modalConfirmationId)}>\n                                Confirm\n                            </Button>\n                            <Button small onClick={() => handleClose(modalConfirmationId)}>\n                                Close\n                            </Button>\n                        </>\n                    }\n                    modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                />\n                <Button onClick={() => open(modalWarningId)}>Prompt warning</Button>\n\n                <ModalCompositeConnected\n                    id={modalWarningId}\n                    title=\"Prompt warning\"\n                    classes={'mod-prompt'}\n                    modalHeaderClasses={['mod-warning']}\n                    modalBodyChildren={<div className=\"mt2\">{loremIpsum({count: 3})}</div>}\n                    modalFooterChildren={\n                        <Button small onClick={() => handleClose(modalWarningId)}>\n                            Close\n                        </Button>\n                    }\n                    modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                />\n                <Button onClick={() => open(modalInfoId)}>Prompt info</Button>\n                <ModalCompositeConnected\n                    id={modalInfoId}\n                    title=\"Prompt info\"\n                    classes={'mod-prompt'}\n                    modalHeaderClasses={['mod-info']}\n                    modalBodyChildren={<div className=\"mt2\">{loremIpsum({count: 3})}</div>}\n                    modalFooterChildren={\n                        <Button small onClick={() => handleClose(modalInfoId)}>\n                            Close\n                        </Button>\n                    }\n                    modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                />\n            </Section>\n            <Section level={3} title=\"A simple modal window connected\">\n                <Button onClick={() => open(modalId)}>Open Modal</Button>\n\n                <ModalCompositeConnected\n                    id={modalId}\n                    title=\"Modal composite\"\n                    modalHeaderChildren={\n                        <Tooltip title=\"A tooltip for the title\">\n                            <Svg svgName=\"help\" className=\"icon mod-2x ml1\" svgClass=\"fill-orange\" />\n                        </Tooltip>\n                    }\n                    modalBodyChildren={<div className=\"mt2\">{loremIpsum({count: 10})}</div>}\n                    modalFooterChildren={<Button onClick={() => handleClose(modalId)}>Close</Button>}\n                    modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                />\n            </Section>\n\n            <Section level={3} title=\"A modal with additionnal configuration props\">\n                <Button onClick={() => open('example-4')}>Open Modal</Button>\n                <ModalCompositeConnected\n                    id=\"example-4\"\n                    title=\"Modal with addtional ReactModal props\"\n                    classes={['mod-fade-in-scale']}\n                    modalBodyChildren=\"This modal only closes by using the close button or the X.\"\n                    modalFooterChildren={<Button onClick={() => handleClose('example-4')}>Close</Button>}\n                    modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                    docLink={{url: 'https://www.coveo.com', tooltip: {title: 'Go to coveo.com'}}}\n                    shouldCloseOnEsc={false}\n                    shouldCloseOnOverlayClick={false}\n                    onAfterOpen={() => alert('The modal content has mounted and is ready to open.')}\n                    closeCallback={() => alert('The modal has closed.')}\n                />\n            </Section>\n        </Section>\n    );\n};\n\nconst ModalCompositeExampleConnected = connect(null, mapDispatchToProps)(ModalExampleDisconnected);\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: any) => ({\n    isDirty: WithDirtySelectors.getIsDirty(state, {id: ownProps.id}),\n});\n\nconst ModalWithDirtyChangeDiscardPreventionDisconnected: React.FunctionComponent<ModalConnectedExampleProps> = ({\n    id,\n    close,\n    open,\n    toggleIsDirty,\n    isDirty,\n}) => {\n    const handleClose = () => {\n        close(id);\n        toggleIsDirty(id, false);\n    };\n\n    return (\n        <Section level={3} title=\"A modal implemented with the <UnsavedChangesModalProvider/> and confirmation prompt\">\n            <Button onClick={() => open(id)}>Open Modal</Button>\n            <UnsavedChangesModalProvider isDirty={isDirty}>\n                {({promptBefore}) => (\n                    <ModalCompositeConnected\n                        id={id}\n                        title=\"A modal with a dirty change discard prevention\"\n                        classes={['mod-fade-in-scale']}\n                        modalBodyChildren={\n                            <div className=\"mt2\">\n                                <div className=\"mb2\">\n                                    <Input\n                                        id=\"input\"\n                                        labelTitle=\"Try to close me with dirty changes.\"\n                                        onChange={(i) => toggleIsDirty(id, _.isEmpty(i) ? false : true)}\n                                    />\n                                </div>\n                                {loremIpsum({count: 10})}\n                            </div>\n                        }\n                        modalFooterChildren={\n                            <Button onClick={() => promptBefore(() => handleClose()) && handleClose()}>Close</Button>\n                        }\n                        validateShouldNavigate={() => promptBefore(() => handleClose())}\n                        modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\n                        docLink={{url: 'https://www.coveo.com', tooltip: {title: 'Go to coveo.com'}}}\n                    />\n                )}\n            </UnsavedChangesModalProvider>\n        </Section>\n    );\n};\n\nconst ModalWithDirtyChangeDiscardPrevention = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ModalWithDirtyChangeDiscardPreventionDisconnected);\n\nconst ModalLoadingExampleDisconnected: React.FunctionComponent<{open: (id: string) => void}> = ({open}) => {\n    const loadingModalExampleId = 'Loading-modal-example';\n    return (\n        <Section level={3} title=\"A loading modal\">\n            <Button onClick={() => open(loadingModalExampleId)}>Open Modal</Button>\n            <ModalLoading id={loadingModalExampleId} title={'my loading title'} openOnMount={false} />\n        </Section>\n    );\n};\n\nconst ModalLoadingExample = connect(null, mapDispatchToProps)(ModalLoadingExampleDisconnected);\n"],"sourceRoot":""}