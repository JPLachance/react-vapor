{"version":3,"sources":["webpack:///./src/components/navigation/pagination/tests/NavigationPagination.spec.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/578.bundle.js","sourcesContent":["export default \"import {mount, ReactWrapper, shallow} from 'enzyme';\\r\\nimport * as React from 'react';\\r\\nimport * as _ from 'underscore';\\r\\nimport {PaginationSelect} from '../../../pagination';\\r\\n\\r\\nimport {\\r\\n    INavigationPaginationProps,\\r\\n    NavigationPagination,\\r\\n    NEXT_LABEL,\\r\\n    NUMBER_OF_PAGES_SHOWING,\\r\\n    PREVIOUS_LABEL,\\r\\n} from '../NavigationPagination';\\r\\n\\r\\ndescribe('NavigationPagination', () => {\\r\\n    const NAVIGATION_PAGINATION_BASIC_PROPS: INavigationPaginationProps = {\\r\\n        totalPages: 22,\\r\\n    };\\r\\n\\r\\n    describe('<NavigationPagination />', () => {\\r\\n        it('should render without errors', () => {\\r\\n            expect(() => {\\r\\n                shallow(<NavigationPagination {...NAVIGATION_PAGINATION_BASIC_PROPS} />);\\r\\n            }).not.toThrow();\\r\\n        });\\r\\n    });\\r\\n\\r\\n    describe('<NavigationPagination />', () => {\\r\\n        let navigationPagination: ReactWrapper<INavigationPaginationProps, any>;\\r\\n        let navigationPaginationInstance: NavigationPagination;\\r\\n\\r\\n        beforeEach(() => {\\r\\n            navigationPagination = mount(<NavigationPagination {...NAVIGATION_PAGINATION_BASIC_PROPS} />, {\\r\\n                attachTo: document.getElementById('App'),\\r\\n            });\\r\\n            navigationPaginationInstance = navigationPagination.instance() as NavigationPagination;\\r\\n        });\\r\\n\\r\\n        afterEach(() => {\\r\\n            navigationPagination.detach();\\r\\n        });\\r\\n\\r\\n        it('should call prop onRender on mounting if set', () => {\\r\\n            const renderSpy: jasmine.Spy = jasmine.createSpy('onRender');\\r\\n\\r\\n            expect(() => {\\r\\n                navigationPaginationInstance.componentDidMount();\\r\\n            }).not.toThrow();\\r\\n\\r\\n            navigationPagination = mount(\\r\\n                <NavigationPagination {...NAVIGATION_PAGINATION_BASIC_PROPS} onRender={renderSpy} />,\\r\\n                {attachTo: document.getElementById('App')}\\r\\n            );\\r\\n            expect(renderSpy).toHaveBeenCalledTimes(1);\\r\\n        });\\r\\n\\r\\n        it('should call prop onDestroy on unmounting if set', () => {\\r\\n            const destroySpy: jasmine.Spy = jasmine.createSpy('onDestroy');\\r\\n\\r\\n            expect(() => {\\r\\n                navigationPaginationInstance.componentWillUnmount();\\r\\n            }).not.toThrow();\\r\\n\\r\\n            navigationPagination = mount(\\r\\n                <NavigationPagination {...NAVIGATION_PAGINATION_BASIC_PROPS} onDestroy={destroySpy} />,\\r\\n                {attachTo: document.getElementById('App')}\\r\\n            );\\r\\n            navigationPagination.unmount();\\r\\n            expect(destroySpy).toHaveBeenCalledTimes(1);\\r\\n        });\\r\\n\\r\\n        it(\\r\\n            'should call onPageClick prop if set when clicking on next/previous or page number and page number is greater' +\\r\\n                'than or is 0 and does not equal the current page',\\r\\n            () => {\\r\\n                const clickSpy: jasmine.Spy = jasmine.createSpy('onClick');\\r\\n                const newNavigationPaginationProps: INavigationPaginationProps = _.extend(\\r\\n                    {},\\r\\n                    NAVIGATION_PAGINATION_BASIC_PROPS,\\r\\n                    {onPageClick: clickSpy}\\r\\n                );\\r\\n\\r\\n                expect(() => {\\r\\n                    navigationPaginationInstance['handlePageClick'].call(navigationPaginationInstance, 3);\\r\\n                }).not.toThrow();\\r\\n\\r\\n                navigationPagination.setProps(newNavigationPaginationProps);\\r\\n\\r\\n                navigationPaginationInstance['handlePageClick'].call(navigationPaginationInstance, -2);\\r\\n                expect(clickSpy).not.toHaveBeenCalled();\\r\\n\\r\\n                // Previous button (does not call spy since current page is zero)\\r\\n                navigationPagination\\r\\n                    .find('.mod-link')\\r\\n                    .first()\\r\\n                    .simulate('click');\\r\\n                expect(clickSpy).not.toHaveBeenCalled();\\r\\n\\r\\n                // Number button\\r\\n                navigationPagination\\r\\n                    .find('.selectable')\\r\\n                    .first()\\r\\n                    .simulate('click');\\r\\n                expect(clickSpy).toHaveBeenCalledTimes(1);\\r\\n\\r\\n                // Number button (does not call again since already on this page)\\r\\n                navigationPagination\\r\\n                    .find('.flat-select-option')\\r\\n                    .first()\\r\\n                    .simulate('click');\\r\\n                expect(clickSpy).toHaveBeenCalledTimes(1);\\r\\n\\r\\n                // Next button\\r\\n                navigationPagination\\r\\n                    .find('.mod-link')\\r\\n                    .last()\\r\\n                    .simulate('click');\\r\\n                expect(clickSpy).toHaveBeenCalledTimes(2);\\r\\n            }\\r\\n        );\\r\\n\\r\\n        it('should show the previous label sent as a prop else show the default one', () => {\\r\\n            const expectedLabel: string = 'Previous page';\\r\\n            const newNavigationPaginationProps: INavigationPaginationProps = _.extend(\\r\\n                {},\\r\\n                NAVIGATION_PAGINATION_BASIC_PROPS,\\r\\n                {previousLabel: expectedLabel}\\r\\n            );\\r\\n\\r\\n            expect(navigationPagination.html()).toContain(PREVIOUS_LABEL);\\r\\n\\r\\n            navigationPagination.setProps(newNavigationPaginationProps);\\r\\n            expect(navigationPagination.html()).toContain(expectedLabel);\\r\\n        });\\r\\n\\r\\n        it('should show the next label sent as a prop else show the default one', () => {\\r\\n            const expectedLabel: string = 'Next page';\\r\\n            const newNavigationPaginationProps: INavigationPaginationProps = _.extend(\\r\\n                {},\\r\\n                NAVIGATION_PAGINATION_BASIC_PROPS,\\r\\n                {nextLabel: expectedLabel}\\r\\n            );\\r\\n\\r\\n            expect(navigationPagination.html()).toContain(NEXT_LABEL);\\r\\n\\r\\n            navigationPagination.setProps(newNavigationPaginationProps);\\r\\n            expect(navigationPagination.html()).toContain(expectedLabel);\\r\\n        });\\r\\n\\r\\n        it('should show as many pages as numberOfPagesToShow prop else show the default number', () => {\\r\\n            const expectedNbOfPagesToShow: number = 2;\\r\\n            const newNavigationPaginationProps: INavigationPaginationProps = _.extend(\\r\\n                {},\\r\\n                NAVIGATION_PAGINATION_BASIC_PROPS,\\r\\n                {numberOfPagesToShow: 2}\\r\\n            );\\r\\n\\r\\n            expect(navigationPagination.find(PaginationSelect).length).toBe(NUMBER_OF_PAGES_SHOWING);\\r\\n\\r\\n            navigationPagination.setProps(newNavigationPaginationProps);\\r\\n            expect(navigationPagination.find(PaginationSelect).length).toBe(expectedNbOfPagesToShow);\\r\\n        });\\r\\n\\r\\n        it('should not show any page number if the prop hidePages is set to true', () => {\\r\\n            const newNavigationPaginationProps: INavigationPaginationProps = _.extend(\\r\\n                {},\\r\\n                NAVIGATION_PAGINATION_BASIC_PROPS,\\r\\n                {hidePages: true}\\r\\n            );\\r\\n\\r\\n            expect(navigationPagination.find(PaginationSelect).length).toBeGreaterThan(0);\\r\\n\\r\\n            navigationPagination.setProps(newNavigationPaginationProps);\\r\\n\\r\\n            expect(navigationPagination.find(PaginationSelect).length).toBe(0);\\r\\n\\r\\n            expect(navigationPagination.find('.flat-select-option.mod-link').length).toBe(2); // Next and previous buttons\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}