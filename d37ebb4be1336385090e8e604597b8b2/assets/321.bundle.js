(window.webpackJsonp=window.webpackJsonp||[]).push([[321],{1429:function(n,r,o){"use strict";o.r(r),r.default="import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nexport interface IDropdownOwnProps extends React.ClassAttributes<Dropdown> {\r\n    id?: string;\r\n    toggleContent: JSX.Element[];\r\n    dropdownItems: JSX.Element[];\r\n    className?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IDropdownStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IDropdownDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onClick?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IDropdownProps extends IDropdownOwnProps, IDropdownStateProps, IDropdownDispatchProps {}\r\n\r\nexport class Dropdown extends React.Component<IDropdownProps, any> {\r\n    private dropdown: HTMLDivElement;\r\n\r\n    private handleClick = () => {\r\n        if (!this.props.disabled) {\r\n            this.props.onClick?.();\r\n        }\r\n    };\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.dropdown);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dropdownClasses = classNames(\r\n            'dropdown',\r\n            {\r\n                open: this.props.isOpened,\r\n                'cursor-default': this.props.disabled,\r\n            },\r\n            this.props.className\r\n        );\r\n\r\n        return (\r\n            <div className={dropdownClasses} ref={(dropdown: HTMLDivElement) => (this.dropdown = dropdown)}>\r\n                <span\r\n                    className={classNames('dropdown-toggle inline-flex flex-center', {\r\n                        'disabled transparency-4 cursor-default': this.props.disabled,\r\n                    })}\r\n                    onClick={() => this.handleClick()}\r\n                >\r\n                    {this.props.toggleContent}\r\n                </span>\r\n                <ul className=\"dropdown-menu normal-height\">{this.props.dropdownItems}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"}}]);
//# sourceMappingURL=321.bundle.js.map