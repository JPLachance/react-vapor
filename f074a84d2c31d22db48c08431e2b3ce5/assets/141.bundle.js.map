{"version":3,"sources":["webpack:///./src/components/actions/tests/ActionsDropdown.spec.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/141.bundle.js","sourcesContent":["export default \"import {mount, ReactWrapper, shallow, ShallowWrapper} from 'enzyme';\\r\\nimport * as React from 'react';\\r\\nimport * as _ from 'underscore';\\r\\nimport {Dropdown} from '../../dropdown/Dropdown';\\r\\nimport {IActionOptions} from '../Action';\\r\\nimport {ACTION_SEPARATOR} from '../ActionConstants';\\r\\nimport {IActionDropdownItemProps} from '../ActionDropdownItem';\\r\\nimport {ActionsDropdown, IActionsDropdownProps} from '../ActionsDropdown';\\r\\n\\r\\ndescribe('Actions', () => {\\r\\n    const actionLink: string = 'http://coveo.com';\\r\\n    const actionTrigger: jasmine.Spy = jasmine.createSpy('methodTrigger');\\r\\n\\r\\n    const simpleLinkAction: IActionOptions = {\\r\\n        name: 'action',\\r\\n        link: actionLink,\\r\\n        target: '_blank',\\r\\n        enabled: true,\\r\\n    };\\r\\n    const simpleAction: IActionOptions = {\\r\\n        name: 'action2',\\r\\n        trigger: actionTrigger,\\r\\n        enabled: true,\\r\\n    };\\r\\n    const actions: IActionOptions[] = [simpleLinkAction, ACTION_SEPARATOR, simpleAction];\\r\\n\\r\\n    describe('<ActionsDropdown />', () => {\\r\\n        it('should render without errors', () => {\\r\\n            expect(() => {\\r\\n                shallow(<ActionsDropdown actions={actions} />);\\r\\n            }).not.toThrow();\\r\\n        });\\r\\n    });\\r\\n\\r\\n    describe('<ActionsDropdown />', () => {\\r\\n        let actionsDropdown: ReactWrapper<IActionsDropdownProps, any>;\\r\\n\\r\\n        beforeEach(() => {\\r\\n            actionsDropdown = mount(<ActionsDropdown actions={actions} />, {attachTo: document.getElementById('App')});\\r\\n        });\\r\\n\\r\\n        afterEach(() => {\\r\\n            actionsDropdown.detach();\\r\\n        });\\r\\n\\r\\n        it('should get the actions as a prop', () => {\\r\\n            const actionsProp = actionsDropdown.props().actions;\\r\\n\\r\\n            expect(actionsProp).toBeDefined();\\r\\n            expect(actionsProp.length).toBe(actions.length);\\r\\n            expect(actionsProp[0]).toEqual(jasmine.objectContaining(actions[0]));\\r\\n        });\\r\\n\\r\\n        it('should display the more label', () => {\\r\\n            expect(actionsDropdown.find('.action-label').length).toBe(1);\\r\\n            expect(actionsDropdown.find('.action-label').prop('data-trigger')).toBe('more');\\r\\n        });\\r\\n\\r\\n        it('should display separators if any', () => {\\r\\n            const separatorActionsLength = _.where(actions, {separator: true}).length;\\r\\n            expect(actionsDropdown.find('.divider').length).toBe(separatorActionsLength);\\r\\n\\r\\n            const newActions = _.reject(actions, (action) => {\\r\\n                return !!action.separator;\\r\\n            });\\r\\n            actionsDropdown.setProps({actions: newActions});\\r\\n            expect(actionsDropdown.find('.divider').length).toBe(separatorActionsLength - 1);\\r\\n        });\\r\\n\\r\\n        it('should display as many <LinkAction /> components as link actions', () => {\\r\\n            const linkActionsLength = _.where(actions, {link: actionLink}).length;\\r\\n            expect(actionsDropdown.find('LinkAction').length).toBe(linkActionsLength);\\r\\n\\r\\n            const newActions = _.reject(actions, (action) => {\\r\\n                return !!action.link;\\r\\n            });\\r\\n            actionsDropdown.setProps({actions: newActions});\\r\\n            expect(actionsDropdown.find('LinkAction').length).toBe(linkActionsLength - 1);\\r\\n        });\\r\\n\\r\\n        it('should display as many <TriggerAction/> components as trigger actions', () => {\\r\\n            const triggerActionsLength = _.where(actions, {trigger: actionTrigger}).length;\\r\\n            expect(actionsDropdown.find('TriggerAction').length).toBe(triggerActionsLength);\\r\\n\\r\\n            const newActions = _.reject(actions, (action) => {\\r\\n                return !!action.trigger;\\r\\n            });\\r\\n            actionsDropdown.setProps({actions: newActions});\\r\\n            expect(actionsDropdown.find('TriggerAction').length).toBe(triggerActionsLength - 1);\\r\\n        });\\r\\n    });\\r\\n\\r\\n    describe('separators', () => {\\r\\n        const shallowAndGetActions = (actionsList: IActionOptions[]) => {\\r\\n            const wrapper = shallow(<ActionsDropdown actions={actionsList} />);\\r\\n            return shallow(<div>{wrapper.find(Dropdown).prop('dropdownItems')}</div>).children();\\r\\n        };\\r\\n\\r\\n        const isDivider = (content: ShallowWrapper<IActionDropdownItemProps>) =>\\r\\n            content.prop('action').separator === true;\\r\\n\\r\\n        it('should remove a separator if followed by another separator', () => {\\r\\n            const withTwoSeparators: IActionOptions[] = [\\r\\n                simpleLinkAction,\\r\\n                ACTION_SEPARATOR,\\r\\n                ACTION_SEPARATOR,\\r\\n                simpleAction,\\r\\n            ];\\r\\n\\r\\n            const filteredActions = shallowAndGetActions(withTwoSeparators);\\r\\n            expect(filteredActions.length).toBe(3);\\r\\n            expect(filteredActions.findWhere(isDivider).length).toBe(1);\\r\\n        });\\r\\n\\r\\n        it('should remove the separator if it is the last action', () => {\\r\\n            const withSeparatorAtEnd: IActionOptions[] = [simpleLinkAction, simpleAction, ACTION_SEPARATOR];\\r\\n\\r\\n            const filteredActions = shallowAndGetActions(withSeparatorAtEnd);\\r\\n            expect(filteredActions.length).toBe(2);\\r\\n            expect(filteredActions.findWhere(isDivider).length).toBe(0);\\r\\n        });\\r\\n\\r\\n        it('should remove the separator if it is the first action', () => {\\r\\n            const withSeparatorAtStart: IActionOptions[] = [ACTION_SEPARATOR, simpleLinkAction, simpleAction];\\r\\n\\r\\n            const filteredActions = shallowAndGetActions(withSeparatorAtStart);\\r\\n            expect(filteredActions.length).toBe(2);\\r\\n            expect(filteredActions.findWhere(isDivider).length).toBe(0);\\r\\n        });\\r\\n\\r\\n        it('should remove the useless separators', () => {\\r\\n            const withSeparatorAtStart: IActionOptions[] = [\\r\\n                ACTION_SEPARATOR,\\r\\n                ACTION_SEPARATOR,\\r\\n                simpleLinkAction,\\r\\n                ACTION_SEPARATOR,\\r\\n                ACTION_SEPARATOR,\\r\\n                simpleAction,\\r\\n                ACTION_SEPARATOR,\\r\\n                ACTION_SEPARATOR,\\r\\n            ];\\r\\n\\r\\n            const filteredActions = shallowAndGetActions(withSeparatorAtStart);\\r\\n            expect(filteredActions.length).toBe(3); // Action ACTION_SEPARATOR Action\\r\\n            expect(filteredActions.findWhere(isDivider).length).toBe(1);\\r\\n        });\\r\\n\\r\\n        it('should remove the separator if it is between disabled actions', () => {\\r\\n            const withSeparatorAtStart: IActionOptions[] = [\\r\\n                {...simpleLinkAction, enabled: false},\\r\\n                ACTION_SEPARATOR,\\r\\n                {...simpleAction, enabled: false},\\r\\n            ];\\r\\n\\r\\n            const filteredActions = shallowAndGetActions(withSeparatorAtStart);\\r\\n            expect(filteredActions.length).toBe(0);\\r\\n            expect(filteredActions.findWhere(isDivider).length).toBe(0);\\r\\n        });\\r\\n\\r\\n        it('should not remove the separator if it is between disabled actions but they are still shown', () => {\\r\\n            const withSeparatorAtStart: IActionOptions[] = [\\r\\n                {...simpleLinkAction, enabled: false, hideDisabled: false},\\r\\n                ACTION_SEPARATOR,\\r\\n                {...simpleAction, enabled: false, hideDisabled: false},\\r\\n            ];\\r\\n\\r\\n            const filteredActions = shallowAndGetActions(withSeparatorAtStart);\\r\\n            expect(filteredActions.length).toBe(3);\\r\\n            expect(filteredActions.findWhere(isDivider).length).toBe(1);\\r\\n        });\\r\\n\\r\\n        it('should not remove the separator if it is between disabled actions but there are other actions around', () => {\\r\\n            const withSeparatorAtStart: IActionOptions[] = [\\r\\n                simpleLinkAction,\\r\\n                {...simpleLinkAction, enabled: false},\\r\\n                ACTION_SEPARATOR,\\r\\n                {...simpleAction, enabled: false},\\r\\n                simpleAction,\\r\\n            ];\\r\\n\\r\\n            const filteredActions = shallowAndGetActions(withSeparatorAtStart);\\r\\n            expect(filteredActions.length).toBe(3);\\r\\n            expect(filteredActions.findWhere(isDivider).length).toBe(1);\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}