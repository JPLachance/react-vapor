(window.webpackJsonp=window.webpackJsonp||[]).push([[750],{1838:function(e,t,n){"use strict";n.r(t),t.default="import {shallow} from 'enzyme';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport {each} from 'underscore';\r\nimport {SyncFeedback, SyncFeedbackState} from './SyncFeedback';\r\n\r\ndescribe('<SyncFeedback>', () => {\r\n    it('should render without errors', () => {\r\n        expect(() => shallow(<SyncFeedback state={SyncFeedbackState.NONE} />)).not.toThrow();\r\n        expect(() => shallow(<SyncFeedback state={SyncFeedbackState.SYNCING} />)).not.toThrow();\r\n        expect(() => shallow(<SyncFeedback state={SyncFeedbackState.SUCCESS} />)).not.toThrow();\r\n        expect(() => shallow(<SyncFeedback state={SyncFeedbackState.ERROR} />)).not.toThrow();\r\n        expect(() => shallow(<SyncFeedback state={SyncFeedbackState.NONE} feedback=\"none\" />)).not.toThrow();\r\n        expect(() => shallow(<SyncFeedback state={SyncFeedbackState.SYNCING} feedback=\"Syncing\" />)).not.toThrow();\r\n        expect(() => shallow(<SyncFeedback state={SyncFeedbackState.SUCCESS} feedback=\"Success!\" />)).not.toThrow();\r\n        expect(() => shallow(<SyncFeedback state={SyncFeedbackState.ERROR} feedback=\"NOOOOO!!!!\" />)).not.toThrow();\r\n    });\r\n\r\n    it('should be empty if the state is none', () => {\r\n        const shallowed = shallow(<SyncFeedback state={SyncFeedbackState.NONE} />);\r\n        const shallowedWithFeedback = shallow(<SyncFeedback state={SyncFeedbackState.NONE} feedback=\"Not empty\" />);\r\n\r\n        expect(shallowed.text()).toBe('');\r\n        expect(shallowedWithFeedback.text()).toBe('');\r\n    });\r\n\r\n    it('should contain the exact text passed to feedback prop', () => {\r\n        const expectedFeedback = 'this is the expected value';\r\n\r\n        each([SyncFeedbackState.SYNCING, SyncFeedbackState.SUCCESS, SyncFeedbackState.ERROR], (state: string) => {\r\n            const wrapper = shallow(<SyncFeedback state={state} feedback={expectedFeedback} />);\r\n            expect(wrapper.find('.sync-feedback-text').length).toBe(1);\r\n            expect(wrapper.find('.sync-feedback-text').text()).toBe(expectedFeedback);\r\n        });\r\n    });\r\n\r\n    it('should have the mod-error class whent the state is ERROR', () => {\r\n        const expectedClass = 'mod-error';\r\n        const wrapper = shallow(<SyncFeedback state={SyncFeedbackState.ERROR} />);\r\n        expect(wrapper.find('.sync-feedback').length).toBe(1);\r\n        expect(wrapper.find('.sync-feedback').hasClass(expectedClass)).toBe(true);\r\n    });\r\n\r\n    it('should have the mod-success class whent the state is ERROR', () => {\r\n        const expectedClass = 'mod-success';\r\n        const wrapper = shallow(<SyncFeedback state={SyncFeedbackState.SUCCESS} />);\r\n        expect(wrapper.find('.sync-feedback').length).toBe(1);\r\n        expect(wrapper.find('.sync-feedback').hasClass(expectedClass)).toBe(true);\r\n    });\r\n\r\n    it('should not have the mod-error nor mod-success classes whent the state is NONE or SYNCING', () => {\r\n        const successClass = 'mod-success';\r\n        const errorClass = 'mod-error';\r\n\r\n        const noneWrapper = shallow(<SyncFeedback state={SyncFeedbackState.NONE} />);\r\n        expect(noneWrapper.find('.sync-feedback').length).toBe(1);\r\n        expect(noneWrapper.find('.sync-feedback').hasClass(successClass)).toBe(false);\r\n        expect(noneWrapper.find('.sync-feedback').hasClass(errorClass)).toBe(false);\r\n\r\n        const syncingWrapper = shallow(<SyncFeedback state={SyncFeedbackState.SYNCING} />);\r\n        expect(syncingWrapper.find('.sync-feedback').length).toBe(1);\r\n        expect(syncingWrapper.find('.sync-feedback').hasClass(successClass)).toBe(false);\r\n        expect(syncingWrapper.find('.sync-feedback').hasClass(errorClass)).toBe(false);\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=750.bundle.js.map