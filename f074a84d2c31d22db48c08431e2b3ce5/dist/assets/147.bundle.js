(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{1249:function(n,r,t){"use strict";t.r(r),r.default="import {mount, ReactWrapper} from 'enzyme';\r\nimport * as React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {Store} from 'redux';\r\n\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {TestUtils} from '../../../utils/tests/TestUtils';\r\nimport {IActionOptions} from '../Action';\r\nimport {ACTION_SEPARATOR} from '../ActionConstants';\r\nimport {ActionsDropdownConnected} from '../ActionsDropdownConnected';\r\nimport {PrimaryActionConnected} from '../PrimaryActionConnected';\r\nimport {ISecondaryActionsProps, SecondaryActions} from '../SecondaryActions';\r\nimport {SecondaryActionsConnected} from '../SecondaryActionsConnected';\r\n\r\ndescribe('Actions', () => {\r\n    const id: string = 'secondary-actions';\r\n    const actions: IActionOptions[] = [\r\n        {\r\n            name: 'action',\r\n            link: 'http://coveo.com',\r\n            target: '_blank',\r\n            enabled: true,\r\n        },\r\n        ACTION_SEPARATOR,\r\n        {\r\n            name: 'action2',\r\n            trigger: jasmine.createSpy('triggerMethod'),\r\n            enabled: true,\r\n        },\r\n    ];\r\n\r\n    describe('<SecondaryActionsConnected />', () => {\r\n        let wrapper: ReactWrapper<any, any>;\r\n        let secondaryActions: ReactWrapper<ISecondaryActionsProps, any>;\r\n        let store: Store<IReactVaporState>;\r\n\r\n        beforeEach(() => {\r\n            store = TestUtils.buildStore();\r\n\r\n            wrapper = mount(\r\n                <Provider store={store}>\r\n                    <SecondaryActionsConnected actions={actions} id={id} />\r\n                </Provider>,\r\n                {attachTo: document.getElementById('App')}\r\n            );\r\n            secondaryActions = wrapper.find(SecondaryActions).first();\r\n        });\r\n\r\n        afterEach(() => {\r\n            wrapper.detach();\r\n        });\r\n\r\n        it('should get an id as a prop', () => {\r\n            const idProp = secondaryActions.props().id;\r\n\r\n            expect(idProp).toBeDefined();\r\n            expect(idProp).toBe(id);\r\n        });\r\n\r\n        it('should get withReduxState as a prop', () => {\r\n            const withReduxStateProp = secondaryActions.props().withReduxState;\r\n\r\n            expect(withReduxStateProp).toBeDefined();\r\n            expect(withReduxStateProp).toBe(true);\r\n        });\r\n\r\n        it('should display a <ActionsDropdownConnected /> if there is more than one action', () => {\r\n            expect(secondaryActions.find(ActionsDropdownConnected).length).toBe(1);\r\n        });\r\n\r\n        it('should display a <PrimaryActionConnected /> if there is only one action', () => {\r\n            wrapper = mount(\r\n                <Provider store={store}>\r\n                    <SecondaryActionsConnected actions={[actions[0]]} id={id} />\r\n                </Provider>,\r\n                {attachTo: document.getElementById('App')}\r\n            );\r\n            secondaryActions = wrapper.find(SecondaryActions).first();\r\n\r\n            expect(secondaryActions.find(PrimaryActionConnected).length).toBe(1);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=147.bundle.js.map