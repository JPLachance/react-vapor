{"version":3,"sources":["webpack:///./src/components/menu/examples/MenuExamples.tsx?88bc","webpack:///./src/utils/UUID.ts?611d","webpack:///./src/components/badge/Badge.tsx?e936","webpack:///./src/components/menu/MenuConnected.tsx?7255"],"names":["getCustomSvg","svgName","svgClass","render","defaultItems","value","onOptionClick","alert","className","id","generate","items","positionRight","buttonSvg","this","label","customOffset","closeOnSelectItem","d","Date","now","replace","c","r","Math","random","floor","toString","props","extraClasses","defaultProps","mapStateToProps","state","ownProps","menu","menus","isOpen","open","mapDispatchToProps","dispatch","onRender","onDestroy","onToggleMenu","onDocumentClick","handleDocumentClick","e","document","body","contains","target","list","button","componentWillMount","addEventListener","componentWillUnmount","removeEventListener","pickerClasses","dropdownClasses","dropdownClassName","hidden","toggleClassName","type","onMouseUp","ref","getDefaultSvg","onClick","onClickMenu","children","setListPosition","stopPropagation","preventDefault","style","minWidth","clientWidth","right","offsetLeft","left","MenuConnected"],"mappings":"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","file":"assets/994.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {Badge} from '../../badge/Badge';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {ListBox} from '../../listBox/ListBox';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {MenuConnected} from '../MenuConnected';\r\n\r\nexport class MenuExamples extends React.PureComponent {\r\n    private getCustomSvg(): React.ReactNode {\r\n        return <Svg svgName=\"more\" svgClass=\"fill-medium-grey icon mod-lg\" />;\r\n    }\r\n\r\n    render() {\r\n        const triggerAlertFunction = () => {\r\n            alert(`Alert function triggered`);\r\n        };\r\n\r\n        const defaultItems: IItemBoxProps[] = [\r\n            {value: 'Add Digimon'},\r\n            {value: 'Duplicate Meepo'},\r\n            {value: 'Disable Dragon Ball', onOptionClick: () => triggerAlertFunction()},\r\n            {value: 'Delete BitConnect'},\r\n        ];\r\n\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Default Menu</label>\r\n                    <div className=\"form-control\">\r\n                        <MenuConnected id={UUID.generate()}>\r\n                            <ListBox items={defaultItems} />\r\n                        </MenuConnected>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Cannot open more than 1 menu at the same time</label>\r\n                    <div className=\"form-control\">\r\n                        <MenuConnected id={UUID.generate()} className={'mr2'}>\r\n                            <ListBox items={defaultItems} />\r\n                        </MenuConnected>\r\n                        <MenuConnected id={UUID.generate()} className={'mr2'}>\r\n                            <ListBox items={defaultItems} />\r\n                        </MenuConnected>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Menu with list to the right</label>\r\n                    <div className=\"form-control\">\r\n                        <MenuConnected id={UUID.generate()} className={'ml2'} positionRight>\r\n                            <ListBox items={defaultItems} />\r\n                        </MenuConnected>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Menu with a custom Svg component</label>\r\n                    <div className=\"form-control\">\r\n                        <MenuConnected id={UUID.generate()} buttonSvg={this.getCustomSvg()}>\r\n                            <ListBox items={defaultItems} />\r\n                        </MenuConnected>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Menu with a Badge instead of a list</label>\r\n                    <div className=\"form-control\">\r\n                        <MenuConnected id={UUID.generate()}>\r\n                            <Badge label={'Badges'} />\r\n                        </MenuConnected>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Menu with a custom offset of 10px</label>\r\n                    <div className=\"form-control\">\r\n                        <MenuConnected id={UUID.generate()} customOffset={10}>\r\n                            <ListBox items={defaultItems} />\r\n                        </MenuConnected>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Menu not close on items click</label>\r\n                    <div className=\"form-control\">\r\n                        <MenuConnected id={UUID.generate()} closeOnSelectItem={false}>\r\n                            <ListBox items={defaultItems} />\r\n                        </MenuConnected>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// tslint:disable\r\nexport class UUID {\r\n    // TODO: replace for https://www.npmjs.com/package/uuid\r\n    static generate() {\r\n        // Source: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n        let d = Date.now();\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\r\n            const r = (d + Math.random() * 16) % 16 | 0;\r\n            d = Math.floor(d / 16);\r\n            return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n        });\r\n    }\r\n}\r\n// tslint:enable\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport const DEFAULT_BADGE_CLASSNAME = 'badge';\r\n\r\nexport interface IBadgeProps {\r\n    label: string;\r\n    extraClasses?: string[];\r\n}\r\n\r\nexport class Badge extends React.Component<IBadgeProps> {\r\n    static defaultProps: Partial<IBadgeProps> = {\r\n        extraClasses: [],\r\n    };\r\n\r\n    render() {\r\n        const className = classNames(DEFAULT_BADGE_CLASSNAME, this.props.extraClasses);\r\n        return <span className={className}>{this.props.label}</span>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {addMenu, removeMenu, toggleMenu} from './MenuActions';\r\nimport {IMenuState} from './MenuReducers';\r\n\r\nexport interface IMenuOwnProps {\r\n    id: string;\r\n    className?: string;\r\n    toggleClassName?: string;\r\n    dropdownClassName?: string;\r\n    positionRight?: boolean;\r\n    closeOnSelectItem?: boolean;\r\n    buttonSvg?: React.ReactNode;\r\n    customOffset?: number;\r\n}\r\n\r\nexport interface IMenuStateProps {\r\n    isOpen?: boolean;\r\n}\r\n\r\nexport interface IMenuDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onToggleMenu?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IMenuProps extends IMenuOwnProps, IMenuStateProps, IMenuDispatchProps {}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IMenuOwnProps): IMenuStateProps => {\r\n    const menu: IMenuState = state.menus[ownProps.id];\r\n\r\n    return {\r\n        isOpen: menu && menu.open,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IMenuOwnProps): IMenuDispatchProps => ({\r\n    onRender: () => dispatch(addMenu(ownProps.id)),\r\n    onDestroy: () => dispatch(removeMenu(ownProps.id)),\r\n    onToggleMenu: () => dispatch(toggleMenu(ownProps.id)),\r\n    onDocumentClick: () => dispatch(toggleMenu(ownProps.id, false)),\r\n});\r\n\r\n@ReduxConnect(mapStateToProps, mapDispatchToProps)\r\nexport class MenuConnected extends React.Component<IMenuProps, {}> {\r\n    private list: HTMLDivElement;\r\n    private button: HTMLButtonElement;\r\n\r\n    static defaultProps: Partial<IMenuProps> = {\r\n        positionRight: false,\r\n        closeOnSelectItem: true,\r\n        customOffset: 0,\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.props.onRender();\r\n        document.addEventListener('mousedown', this.handleDocumentClick);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy();\r\n        document.removeEventListener('mousedown', this.handleDocumentClick);\r\n    }\r\n\r\n    render() {\r\n        const pickerClasses = classNames('select-dropdown dropdown', this.props.className, {\r\n            open: this.props.isOpen,\r\n        });\r\n        const dropdownClasses = classNames(\r\n            'select-dropdown-container absolute bg-pure-white',\r\n            this.props.dropdownClassName,\r\n            {\r\n                hidden: !this.props.isOpen,\r\n            }\r\n        );\r\n        return (\r\n            <div className={pickerClasses}>\r\n                <button\r\n                    className={classNames('btn menu-toggle', this.props.toggleClassName, {\r\n                        'bg-light-grey': this.props.isOpen,\r\n                    })}\r\n                    type=\"button\"\r\n                    onMouseUp={(e: React.MouseEvent<HTMLElement>) => this.onToggleMenu(e)}\r\n                    ref={(ref: HTMLButtonElement) => (this.button = ref)}\r\n                >\r\n                    {this.props.buttonSvg ? this.props.buttonSvg : this.getDefaultSvg()}\r\n                </button>\r\n                <div\r\n                    className={dropdownClasses}\r\n                    ref={(ref: HTMLDivElement) => (this.list = ref)}\r\n                    onClick={() => this.onClickMenu()}\r\n                >\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onClickMenu() {\r\n        if (this.props.closeOnSelectItem) {\r\n            this.props.onDocumentClick();\r\n        }\r\n    }\r\n\r\n    private getDefaultSvg() {\r\n        return <Svg svgName=\"more-append\" svgClass=\"fill-medium-blue icon mod-lg\" />;\r\n    }\r\n\r\n    private onToggleMenu(e: React.SyntheticEvent<HTMLElement>) {\r\n        this.setListPosition();\r\n\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        this.props.onToggleMenu();\r\n    }\r\n\r\n    private setListPosition() {\r\n        if (this.button) {\r\n            this.list.style.minWidth = `${this.button.clientWidth + 2}px`;\r\n            this.props.positionRight\r\n                ? (this.list.style.right = `${this.button.offsetLeft + this.props.customOffset}px`)\r\n                : (this.list.style.left = `${this.button.offsetLeft + this.props.customOffset}px`);\r\n        }\r\n    }\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpen && document.body.contains(e.target as HTMLElement)) {\r\n            const list: Element | Text = ReactDOM.findDOMNode(this.list);\r\n            const button: Element | Text = ReactDOM.findDOMNode(this.button);\r\n\r\n            if (!list.contains(e.target as Node) && !button.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n}\r\n"],"sourceRoot":""}