{"version":3,"sources":["webpack:///./src/components/facets/examples/FacetConnectedExamples.tsx?710a","webpack:///./src/components/facets/FacetMoreRows.tsx?56e2","webpack:///./src/components/facets/FacetMoreToggle.tsx?cdb2","webpack:///./src/components/facets/Facet.tsx?bcf1","webpack:///./src/components/facets/FacetMoreRowsConnected.tsx?9ea4","webpack:///./src/components/facets/FacetMoreToggleConnected.tsx?6fef","webpack:///./src/components/facets/FacetRow.tsx?d3d3","webpack:///./src/components/facets/FacetConnected.tsx?9712"],"names":["facet","name","formattedName","facet2","facet3","facet4","facet5","mapStateToProps","mapDispatchToProps","dispatch","onRender","exclude","componentDidMount","this","props","render","facetRows","count","moreFacetRows","concat","toggleFacet","clearFacet","className","style","width","enableExclusions","FacetConnectedExamples","handleDocumentClick","e","isOpened","facetSearch","contains","target","onDocumentClick","componentWillMount","document","addEventListener","componentWillReceiveProps","nextProps","onOpen","componentWillUnmount","removeEventListener","componentDidUpdate","getElementsByTagName","focus","moreSearchClasses","rowsFiltered","filterText","length","facetRow","facetText","toLowerCase","filter","Boolean","resultsClass","filterBoxId","filterBox","withReduxState","id","filterPlaceholder","ref","handleOnChange","onToggleMore","moreClasses","moreLabel","onClick","nativeEvent","stopImmediatePropagation","type","onChange","buildFacet","onToggleFacet","onClearFacet","sortFacetRows","onDestroy","selectedFacetRows","removeSelectedClass","selected","unselected","allRows","item","rows","isSelected","key","isChecked","maxTooltipLabelLength","excludeTooltipMessage","rowsToShow","Math","max","maxRowsToShow","moreRowsToggle","facetClasses","title","clearFacetLabel","svgName","slice","getMoreRows","needMoreRows","defaultProps","FacetMoreRowsConnected","state","ownProps","facets","filterItem","filters","opened","mergeProps","FacetMoreToggleConnected","getExcludeCheckbox","preventDefault","checked","isExclude","stopEvent","svgClass","getLabel","getCount","maxCalculatedNameLength","label","tooltipLabel","placement","toggleFacetToExclude","getExcludeButton","event","stopPropagation","getSelectedRows","selectedRows","row","selectedRow","FacetConnected"],"mappings":"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","file":"assets/970.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {IReduxAction, ReduxConnect} from '../../../utils/ReduxUtils';\r\nimport {IFacet} from '../Facet';\r\nimport {changeFacet, IFacetActionPayload} from '../FacetActions';\r\nimport {FacetConnected} from '../FacetConnected';\r\n\r\nexport interface ILastUpdateConnectedExamplesProps {\r\n    selectedFacets?: IFacet[];\r\n    onClearFacet?: (facet: string) => void;\r\n    onRender?: () => void;\r\n}\r\n\r\nconst facet: IFacet = {name: 'facetTitle1', formattedName: 'Facet Title'};\r\nconst facet2: IFacet = {name: 'facetTitle2', formattedName: 'Facet Title'};\r\nconst facet3: IFacet = {name: 'facetTitle3', formattedName: 'Facet Title'};\r\nconst facet4: IFacet = {name: 'facetTitle4', formattedName: 'Facet Title'};\r\nconst facet5: IFacet = {name: 'facetTitle5', formattedName: 'Facet Title'};\r\n\r\nconst mapStateToProps = () => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IFacetActionPayload>) => void\r\n): ILastUpdateConnectedExamplesProps => {\r\n    return {\r\n        onRender: () => {\r\n            dispatch(\r\n                changeFacet(facet2.name, {\r\n                    name: 'row2',\r\n                    formattedName: 'Row 2',\r\n                })\r\n            );\r\n            dispatch(\r\n                changeFacet(facet4.name, {\r\n                    name: 'row2',\r\n                    formattedName: 'Row 2',\r\n                })\r\n            );\r\n            dispatch(\r\n                changeFacet(facet4.name, {\r\n                    name: 'row3',\r\n                    formattedName: 'Row 3',\r\n                    exclude: true,\r\n                })\r\n            );\r\n        },\r\n    };\r\n};\r\n\r\n@ReduxConnect(mapStateToProps, mapDispatchToProps)\r\nexport class FacetConnectedExamples extends React.Component<ILastUpdateConnectedExamplesProps, any> {\r\n    componentDidMount() {\r\n        this.props.onRender();\r\n    }\r\n\r\n    render() {\r\n        const facetRows: IFacet[] = [\r\n            {\r\n                name: 'row1',\r\n                formattedName: 'Row 1',\r\n            },\r\n            {\r\n                name: 'row2',\r\n                formattedName: 'Row 2',\r\n            },\r\n            {\r\n                name: 'row3',\r\n                formattedName: 'Row 3 with a very long name and also a count',\r\n                count: '23412',\r\n            },\r\n        ];\r\n        const moreFacetRows = facetRows.concat(\r\n            {\r\n                name: 'row4',\r\n                formattedName: 'Row 4, count of 0',\r\n                count: '0',\r\n            },\r\n            {\r\n                name: 'row5',\r\n                formattedName: 'Row 5',\r\n            },\r\n            {\r\n                name: 'row6',\r\n                formattedName: 'Row 6',\r\n            },\r\n            {\r\n                name: 'row7',\r\n                formattedName: 'Row 7 with a very long name and also a count',\r\n                count: '7903231',\r\n            }\r\n        );\r\n        const toggleFacet: (facet: string, facetRow: IFacet) => void = () => {\r\n            return;\r\n        };\r\n        const clearFacet: (facet: string) => void = () => {\r\n            return;\r\n        };\r\n        return (\r\n            <div className=\"mt2\" style={{width: 400}}>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Facet with Redux state</label>\r\n                    <FacetConnected\r\n                        facet={facet}\r\n                        facetRows={facetRows}\r\n                        clearFacet={clearFacet}\r\n                        toggleFacet={toggleFacet}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Facet with Redux state and a selected row</label>\r\n                    <FacetConnected\r\n                        facet={facet2}\r\n                        facetRows={facetRows}\r\n                        clearFacet={clearFacet}\r\n                        toggleFacet={toggleFacet}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Facet with many rows</label>\r\n                    <FacetConnected\r\n                        facet={facet3}\r\n                        facetRows={moreFacetRows}\r\n                        clearFacet={clearFacet}\r\n                        toggleFacet={toggleFacet}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Facet with exclude enabled</label>\r\n                    <FacetConnected\r\n                        facet={facet4}\r\n                        facetRows={facetRows}\r\n                        enableExclusions\r\n                        clearFacet={clearFacet}\r\n                        toggleFacet={toggleFacet}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Facet with exclude enabled and many rows</label>\r\n                    <FacetConnected\r\n                        facet={facet5}\r\n                        facetRows={moreFacetRows}\r\n                        enableExclusions\r\n                        clearFacet={clearFacet}\r\n                        toggleFacet={toggleFacet}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as _ from 'underscore';\r\nimport * as s from 'underscore.string';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {FilterBox} from '../filterBox/FilterBox';\r\nimport {FilterBoxConnected} from '../filterBox/FilterBoxConnected';\r\n\r\nexport interface IFacetMoreRowsOwnProps extends React.ClassAttributes<FacetMoreRows> {\r\n    facet: string;\r\n    facetRows: JSX.Element[];\r\n}\r\n\r\nexport interface IFacetMoreRowsStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    filterText?: string;\r\n}\r\n\r\nexport interface IFacetMoreRowsDispatchProps {\r\n    onOpen?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IFacetMoreRowsChildrenProps {\r\n    filterPlaceholder?: string;\r\n}\r\n\r\nexport interface IFacetMoreRowsProps\r\n    extends IFacetMoreRowsOwnProps,\r\n        IFacetMoreRowsDispatchProps,\r\n        IFacetMoreRowsStateProps,\r\n        IFacetMoreRowsChildrenProps {}\r\n\r\nexport class FacetMoreRows extends React.Component<IFacetMoreRowsProps, any> {\r\n    private facetSearch: HTMLDivElement;\r\n\r\n    componentWillMount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFacetMoreRowsProps) {\r\n        if (this.props.onOpen && !this.props.isOpened && nextProps.isOpened) {\r\n            this.props.onOpen();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isOpened) {\r\n            this.facetSearch.getElementsByTagName('input')[0].focus();\r\n        }\r\n    }\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.facetSearch);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const moreSearchClasses: string = 'facet-more-search' + (!this.props.isOpened ? ' hidden' : '');\r\n        const rowsFiltered: JSX.Element[] =\r\n            this.props.filterText && this.props.filterText.length\r\n                ? _.map(this.props.facetRows, (facetRow: JSX.Element) => {\r\n                      const facetText = facetRow.props.facetRow.formattedName;\r\n                      if (s.contains(facetText.toLowerCase(), this.props.filterText.toLowerCase())) {\r\n                          return facetRow;\r\n                      }\r\n                  }).filter(Boolean)\r\n                : this.props.facetRows;\r\n        const resultsClass: string = 'facet-search-results' + (!rowsFiltered.length ? ' hidden' : '');\r\n        const filterBoxId: string = 'filter-' + this.props.facet;\r\n        const filterBox: JSX.Element = this.props.withReduxState ? (\r\n            <FilterBoxConnected id={filterBoxId} filterPlaceholder={this.props.filterPlaceholder} />\r\n        ) : (\r\n            <FilterBox id={filterBoxId} filterPlaceholder={this.props.filterPlaceholder} />\r\n        );\r\n\r\n        return (\r\n            <div className={moreSearchClasses}>\r\n                <div className=\"facet-search\" ref={(facetSearch: HTMLDivElement) => (this.facetSearch = facetSearch)}>\r\n                    {filterBox}\r\n                </div>\r\n                <ul className={resultsClass}>{rowsFiltered}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface IFacetMoreToggleOwnProps extends React.ClassAttributes<FacetMoreToggle> {\r\n    facet: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport interface IFacetMoreToggleStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IFacetMoreToggleDispatchProps {\r\n    onToggleMore?: (facet: string) => void;\r\n}\r\n\r\nexport interface IFacetMoreToggleProps\r\n    extends IFacetMoreToggleOwnProps,\r\n        IFacetMoreToggleStateProps,\r\n        IFacetMoreToggleDispatchProps {}\r\n\r\nexport const FACET_TOGGLE_MORE_LABEL: string = 'More';\r\n\r\nexport class FacetMoreToggle extends React.Component<IFacetMoreToggleProps, any> {\r\n    private handleOnChange = () => {\r\n        if (this.props.onToggleMore) {\r\n            this.props.onToggleMore(this.props.facet);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const isOpened: boolean = this.props.isOpened ? this.props.isOpened : false;\r\n        const moreClasses: string = 'facet-value facet-selectable facet-more' + (isOpened ? ' hidden' : '');\r\n        const moreLabel: string = this.props.moreLabel || FACET_TOGGLE_MORE_LABEL;\r\n\r\n        return (\r\n            <li className={moreClasses} onClick={(e) => e.nativeEvent.stopImmediatePropagation()}>\r\n                <label className=\"coveo-checkbox-label facet-value-label\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"coveo-checkbox facet-checkbox-input\"\r\n                        onChange={() => this.handleOnChange()}\r\n                    />\r\n                    <span className=\"facet-more-button\"></span>\r\n                    <span className=\"label\">{moreLabel}</span>\r\n                </label>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {FacetMoreRows} from './FacetMoreRows';\r\nimport {FacetMoreRowsConnected} from './FacetMoreRowsConnected';\r\nimport {FacetMoreToggle} from './FacetMoreToggle';\r\nimport {FacetMoreToggleConnected} from './FacetMoreToggleConnected';\r\nimport {FacetRow} from './FacetRow';\r\n\r\nexport interface IFacet {\r\n    name: string;\r\n    formattedName: string;\r\n    tooltipLabel?: string;\r\n    count?: string;\r\n    exclude?: boolean;\r\n}\r\n\r\nexport interface IFacetOwnProps extends React.ClassAttributes<Facet> {\r\n    facet: IFacet;\r\n    facetRows: IFacet[];\r\n    toggleFacet: (facet: string, facetRow: IFacet) => void;\r\n    clearFacet: (facet: string) => void;\r\n    clearFacetLabel?: string;\r\n    maxRowsToShow?: number;\r\n    maxTooltipLabelLength?: number;\r\n    excludeTooltipMessage?(facetsRowName: string): string;\r\n}\r\n\r\nexport interface IFacetStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    selectedFacetRows?: IFacet[];\r\n}\r\n\r\nexport interface IFacetDispatchProps {\r\n    onRender?: (facet: string) => void;\r\n    onDestroy?: (facet: string) => void;\r\n    onToggleFacet?: (facet: string, facetRow: IFacet) => void;\r\n    onClearFacet?: (facet: string) => void;\r\n}\r\n\r\nexport interface IFacetChildrenProps {\r\n    moreLabel?: string;\r\n    filterPlaceholder?: string;\r\n    enableExclusions?: boolean;\r\n}\r\n\r\nexport interface IFacetProps extends IFacetOwnProps, IFacetStateProps, IFacetDispatchProps, IFacetChildrenProps {}\r\n\r\nexport const CLEAR_FACET_LABEL: string = 'Clear';\r\n\r\nexport class Facet extends React.Component<IFacetProps, any> {\r\n    static defaultProps: Partial<IFacetProps> = {\r\n        clearFacetLabel: CLEAR_FACET_LABEL,\r\n        selectedFacetRows: [],\r\n        maxRowsToShow: 5,\r\n    };\r\n\r\n    private buildFacet = (facetRow: IFacet) => {\r\n        this.props.toggleFacet(this.props.facet.name, facetRow);\r\n        if (this.props.onToggleFacet) {\r\n            this.props.onToggleFacet(this.props.facet.name, facetRow);\r\n        }\r\n    };\r\n\r\n    private clearFacet = () => {\r\n        this.props.clearFacet(this.props.facet.name);\r\n        if (this.props.onClearFacet) {\r\n            this.props.onClearFacet(this.props.facet.name);\r\n        }\r\n    };\r\n\r\n    private sortFacetRows(facetRows: IFacet[]) {\r\n        return _.sortBy(facetRows, (facetRow: IFacet) => facetRow.formattedName.toLowerCase());\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.facetRows.length && !this.props.selectedFacetRows.length) {\r\n            return null;\r\n        }\r\n        const removeSelectedClass: string =\r\n            'facet-header-eraser' + (this.props.selectedFacetRows.length ? '' : ' hidden');\r\n        const selected: IFacet[] = this.sortFacetRows(this.props.selectedFacetRows);\r\n        const unselected: IFacet[] = this.sortFacetRows(this.props.facetRows);\r\n        const allRows: IFacet[] = _.union(selected, unselected);\r\n        const facetRows: IFacet[] = _.uniq(allRows, false, (item) => item.name);\r\n        const rows: JSX.Element[] = _.map(facetRows, (facetRow: IFacet) => {\r\n            const isSelected: boolean = _.contains(_.pluck(selected, 'name'), facetRow.name);\r\n            return (\r\n                <FacetRow\r\n                    key={facetRow.name}\r\n                    facet={this.props.facet.name}\r\n                    facetRow={facetRow}\r\n                    onToggleFacet={this.buildFacet}\r\n                    isChecked={isSelected}\r\n                    enableExclusions={this.props.enableExclusions}\r\n                    maxTooltipLabelLength={this.props.maxTooltipLabelLength}\r\n                    excludeTooltipMessage={this.props.excludeTooltipMessage}\r\n                />\r\n            );\r\n        });\r\n        let rowsToShow: number = Math.max(this.props.selectedFacetRows.length, this.props.maxRowsToShow);\r\n        // If there is only 1 extra row, show it instead of the moreRowsToggle\r\n        if (rows.length === rowsToShow + 1) {\r\n            rowsToShow += 1;\r\n        }\r\n        const moreRowsToggle: JSX.Element =\r\n            rows.length > rowsToShow ? (\r\n                this.props.withReduxState ? (\r\n                    <FacetMoreToggleConnected facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                ) : (\r\n                    <FacetMoreToggle facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                )\r\n            ) : null;\r\n        const facetClasses: string = this.props.facet.name + ' facet' + (this.props.isOpened ? ' facet-opened' : '');\r\n\r\n        return (\r\n            <div className={facetClasses}>\r\n                <div className=\"facet-header\">\r\n                    <div className={removeSelectedClass} onClick={() => this.clearFacet()}>\r\n                        <Tooltip\r\n                            className=\"remove-selected-tooltip\"\r\n                            title={`${this.props.clearFacetLabel} ${this.props.facet.formattedName}`}\r\n                        >\r\n                            <Svg svgName=\"clear\" className=\"icon fill-medium-grey\" />\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className=\"facet-header-title bold text-medium-blue\">{this.props.facet.formattedName}</div>\r\n                </div>\r\n                <ul className=\"facet-values\">\r\n                    {rows.slice(0, rowsToShow)}\r\n                    {moreRowsToggle}\r\n                </ul>\r\n                {this.getMoreRows(!!moreRowsToggle, rows.slice(rowsToShow))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMoreRows(needMoreRows: boolean, rows: JSX.Element[]): JSX.Element {\r\n        if (needMoreRows) {\r\n            return this.props.withReduxState ? (\r\n                <FacetMoreRowsConnected\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            ) : (\r\n                <FacetMoreRows\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {filterThrough} from '../filterBox/FilterBoxActions';\r\nimport {IFilterState} from '../filterBox/FilterBoxReducers';\r\nimport {closeMoreFacetRows} from './FacetActions';\r\nimport {\r\n    FacetMoreRows,\r\n    IFacetMoreRowsDispatchProps,\r\n    IFacetMoreRowsOwnProps,\r\n    IFacetMoreRowsProps,\r\n    IFacetMoreRowsStateProps,\r\n} from './FacetMoreRows';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetMoreRowsOwnProps): IFacetMoreRowsStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet});\r\n    const filterItem: IFilterState = _.findWhere(state.filters, {id: 'filter-' + ownProps.facet});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n        filterText: filterItem ? filterItem.filterText : '',\r\n        withReduxState: true,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IFacetMoreRowsOwnProps\r\n): IFacetMoreRowsDispatchProps => ({\r\n    onOpen: () => dispatch(filterThrough('filter-' + ownProps.facet, '')),\r\n    onDocumentClick: () => dispatch(closeMoreFacetRows()),\r\n});\r\n\r\nexport const FacetMoreRowsConnected: React.ComponentClass<IFacetMoreRowsProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FacetMoreRows);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {toggleMoreFacetRows} from './FacetActions';\r\nimport {\r\n    FacetMoreToggle,\r\n    IFacetMoreToggleDispatchProps,\r\n    IFacetMoreToggleOwnProps,\r\n    IFacetMoreToggleProps,\r\n    IFacetMoreToggleStateProps,\r\n} from './FacetMoreToggle';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetMoreToggleOwnProps): IFacetMoreToggleStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void\r\n): IFacetMoreToggleDispatchProps => ({\r\n    onToggleMore: (facet: string) => dispatch(toggleMoreFacetRows(facet)),\r\n});\r\n\r\nexport const FacetMoreToggleConnected: React.ComponentClass<IFacetMoreToggleProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FacetMoreToggle);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IFacet} from './Facet';\r\n\r\nexport interface IFacetRowProps extends React.ClassAttributes<FacetRow> {\r\n    facetRow: IFacet;\r\n    facet: string;\r\n    onToggleFacet: (facetRow: IFacet) => void;\r\n    isChecked: boolean;\r\n    maxTooltipLabelLength?: number;\r\n    enableExclusions?: boolean;\r\n    excludeTooltipMessage?(facetsRowName: string): string;\r\n}\r\n\r\nexport class FacetRow extends React.Component<IFacetRowProps, any> {\r\n    static defaultProps: Partial<IFacetRowProps> = {\r\n        maxTooltipLabelLength: 25,\r\n    };\r\n\r\n    get isExclude(): boolean {\r\n        return !!this.props.enableExclusions && !!this.props.facetRow.exclude;\r\n    }\r\n\r\n    render() {\r\n        const className: string = classNames('facet-value', 'facet-selectable', {\r\n            'facet-exclude': this.props.enableExclusions,\r\n        });\r\n        return (\r\n            <li className={className}>\r\n                {this.getExcludeCheckbox()}\r\n                <label\r\n                    className=\"coveo-checkbox-label facet-value-label\"\r\n                    onClick={(e) => {\r\n                        // prevent event bubbling and trigger onToggleFacet only once no matter where you click on the row\r\n                        e.preventDefault();\r\n                        this.toggleFacet();\r\n                    }}\r\n                >\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name={this.props.facetRow.name}\r\n                        className=\"coveo-checkbox facet-checkbox-input\"\r\n                        checked={this.props.isChecked && !this.isExclude}\r\n                        onClick={this.stopEvent}\r\n                        onChange={_.noop}\r\n                    />\r\n                    <button type=\"button\" className={this.props.isChecked && this.isExclude ? 'exclude-box' : ''}>\r\n                        <Svg svgName=\"clear\" className=\"icon hide exclude-icon\" svgClass=\"fill-red\" />\r\n                    </button>\r\n                    {this.getLabel()}\r\n                    {this.getCount()}\r\n                </label>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    private getLabel(): JSX.Element {\r\n        const maxCalculatedNameLength = this.props.facetRow.count\r\n            ? this.props.maxTooltipLabelLength - this.props.facetRow.count.length\r\n            : this.props.maxTooltipLabelLength;\r\n\r\n        const className = classNames({'text-exclude': this.props.isChecked && this.isExclude});\r\n        const label: JSX.Element = <span className={className}>{this.props.facetRow.formattedName}</span>;\r\n\r\n        return this.props.facetRow.formattedName.length > maxCalculatedNameLength ? (\r\n            <Tooltip\r\n                title={this.props.facetRow.tooltipLabel || this.props.facetRow.formattedName}\r\n                placement=\"top\"\r\n                className=\"label\"\r\n            >\r\n                {label}\r\n            </Tooltip>\r\n        ) : (\r\n            <span className=\"label\">{label}</span>\r\n        );\r\n    }\r\n\r\n    private getCount(): JSX.Element {\r\n        if (!_.isUndefined(this.props.facetRow.count)) {\r\n            return (\r\n                <span\r\n                    className={classNames('facet-value-count', {\r\n                        'text-exclude': this.props.isChecked && this.isExclude,\r\n                    })}\r\n                >\r\n                    {this.props.facetRow.count}\r\n                </span>\r\n            );\r\n        }\r\n    }\r\n\r\n    private getExcludeCheckbox(): JSX.Element {\r\n        if (!!this.props.enableExclusions) {\r\n            return (\r\n                <div className=\"flex center-align facet-exclude-button\" onClick={() => this.toggleFacetToExclude()}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"coveo-checkbox\"\r\n                        checked={this.props.isChecked && this.isExclude}\r\n                        onClick={this.stopEvent}\r\n                        onChange={_.noop}\r\n                    />\r\n                    {this.getExcludeButton()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    private getExcludeButton(): JSX.Element {\r\n        return this.props.excludeTooltipMessage ? (\r\n            <Tooltip\r\n                className=\"exclude-button\"\r\n                title={this.props.excludeTooltipMessage(this.props.facetRow.formattedName)}\r\n            >\r\n                <Svg svgName=\"exclude\" className=\"icon\" svgClass=\"fill-medium-grey\" />\r\n            </Tooltip>\r\n        ) : (\r\n            <Svg svgName=\"exclude\" className=\"exclude-button icon\" svgClass=\"fill-medium-grey\" />\r\n        );\r\n    }\r\n\r\n    private stopEvent(event: React.MouseEvent<HTMLInputElement>): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    private toggleFacetToExclude(): void {\r\n        this.props.onToggleFacet({...this.props.facetRow, exclude: !this.isExclude});\r\n    }\r\n\r\n    private toggleFacet(): void {\r\n        this.props.onToggleFacet({...this.props.facetRow, exclude: false});\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {Facet, IFacet, IFacetDispatchProps, IFacetOwnProps, IFacetProps, IFacetStateProps} from './Facet';\r\nimport {addFacet, changeFacet, emptyFacet, removeFacet} from './FacetActions';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetOwnProps): IFacetStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet.name});\r\n    const selectedFacetRows: IFacet[] = item ? getSelectedRows(ownProps.facetRows, item.selected) : [];\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n        selectedFacetRows,\r\n        withReduxState: true,\r\n    };\r\n};\r\n\r\nconst getSelectedRows = (rows: IFacet[], selectedRows: IFacet[]): IFacet[] =>\r\n    _.compact(\r\n        _.map(rows, (row: IFacet) => {\r\n            const selectedRow: IFacet = _.findWhere(selectedRows, {name: row.name});\r\n            return selectedRow && {...selectedRow, ...row};\r\n        })\r\n    );\r\n\r\nconst mapDispatchToProps = (dispatch: (action: IReduxAction<IReduxActionsPayload>) => void): IFacetDispatchProps => ({\r\n    onRender: (facet: string) => dispatch(addFacet(facet)),\r\n    onDestroy: (facet: string) => dispatch(removeFacet(facet)),\r\n    onToggleFacet: (facet: string, facetRow: IFacet) => dispatch(changeFacet(facet, facetRow)),\r\n    onClearFacet: (facet: string) => dispatch(emptyFacet(facet)),\r\n});\r\n\r\nexport const FacetConnected: React.ComponentClass<IFacetProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Facet);\r\n"],"sourceRoot":""}