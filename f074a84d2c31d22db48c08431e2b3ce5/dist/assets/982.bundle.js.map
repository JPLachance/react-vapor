{"version":3,"sources":["webpack:///./src/components/splitlayout/examples/SplitLayoutExamples.tsx?4788","webpack:///./node_modules/lorem-ipsum/lib/generator.js","webpack:///./node_modules/lorem-ipsum/lib/dictionary.js","webpack:///./src/components/splitlayout/SplitLayout.tsx?b9d1","webpack:///./src/components/stepProgressBar/StepProgressBar.tsx?3742"],"names":["exampleTextLeft","count","sentenceUpperBound","exampleTextRight","SplitLayoutExamples","className","leftChildren","rightChildren","map","i","key","numberOfSteps","currentStep","leftContainerClassName","rightContainerClassName","simplePluralize","string","indexOf","length","module","exports","options","arguments","units","sentenceLowerBound","paragraphLowerBound","paragraphUpperBound","format","words","random","Math","suffix","isNode","isReactNative","product","navigator","isWindows","process","platform","randomInteger","min","max","floor","randomWord","randomSentence","lowerBound","upperBound","sentence","bounds","slice","charAt","toUpperCase","randomParagraph","paragraph","toLowerCase","openingTag","closingTag","nextString","pos","SplitLayout","props","StepProgressBar","stepProgressBarSteps","stepNumber"],"mappings":"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","file":"assets/982.bundle.js","sourcesContent":["import * as loremIpsum from 'lorem-ipsum';\r\nimport * as React from 'react';\r\nimport {range} from 'underscore';\r\nimport {StepProgressBar} from '../../stepProgressBar/StepProgressBar';\r\nimport {SplitLayout} from '../SplitLayout';\r\n\r\nconst exampleTextLeft = `I am a left child. ${loremIpsum({count: 5, sentenceUpperBound: 15})}`;\r\nconst exampleTextRight = `I am a right child. ${loremIpsum({count: 5, sentenceUpperBound: 15})}`;\r\n\r\nexport const SplitLayoutExamples = () => (\r\n    <div className=\"mt2\">\r\n        <div className=\"form-group\">\r\n            <label className=\"form-control-label\">SplitLayout with one JSX.Element on each side</label>\r\n            <div className=\"form-control\">\r\n                <SplitLayout\r\n                    leftChildren={<div className=\"p1\">{exampleTextLeft}</div>}\r\n                    rightChildren={<div className=\"p1\">{exampleTextRight}</div>}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label className=\"form-control-label\">SplitLayout with multiple JSX.Elements on each side</label>\r\n            <div className=\"form-control\">\r\n                <SplitLayout\r\n                    leftChildren={range(2).map((i) => (\r\n                        <div key={i} className=\"p1\">\r\n                            {exampleTextLeft}\r\n                        </div>\r\n                    ))}\r\n                    rightChildren={[\r\n                        <div key=\"div\" className=\"p1\">\r\n                            Something is loading:\r\n                        </div>,\r\n                        <StepProgressBar key=\"progress\" className=\"p1\" numberOfSteps={10} currentStep={5} />,\r\n                    ]}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label className=\"form-control-label\">SplitLayout with classes on container</label>\r\n            <div className=\"form-control\">\r\n                <SplitLayout\r\n                    leftChildren={<div className=\"p1\">{exampleTextLeft}</div>}\r\n                    rightChildren={<div className=\"p1\">{exampleTextRight}</div>}\r\n                    className=\"text-medium-blue bold\"\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label className=\"form-control-label\">SplitLayout with classes on left and right children container</label>\r\n            <div className=\"form-control\">\r\n                <div className=\"form-control\">\r\n                    <SplitLayout\r\n                        leftChildren={range(2).map((i) => (\r\n                            <div key={i} className=\"p1\">\r\n                                {exampleTextLeft}\r\n                            </div>\r\n                        ))}\r\n                        rightChildren={range(2).map((i) => (\r\n                            <div key={i} className=\"p1\">\r\n                                {exampleTextRight}\r\n                            </div>\r\n                        ))}\r\n                        leftContainerClassName=\"text-medium-blue bold\"\r\n                        rightContainerClassName=\"text-orange italic\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n","function generator() {\n  var options = (arguments.length) ? arguments[0] : {}\n    , count = options.count || 1\n    , units = options.units || 'sentences'\n    , sentenceLowerBound = options.sentenceLowerBound || 5\n    , sentenceUpperBound = options.sentenceUpperBound || 15\n    , paragraphLowerBound = options.paragraphLowerBound || 3\n    , paragraphUpperBound = options.paragraphUpperBound || 7\n    , format = options.format || 'plain'\n    , words = options.words || require('./dictionary').words\n    , random = options.random || Math.random\n    , suffix = options.suffix;\n\n  if (!suffix) {\n    var isNode = typeof module !== 'undefined' && module.exports;\n    var isReactNative = typeof product !== 'undefined' && product.navigator === 'ReactNative';\n    var isWindows = typeof process !== 'undefined' && 'win32' === process.platform;\n\n    if (!isReactNative && isNode && isWindows) {\n      suffix = '\\r\\n';\n    } else {\n      suffix = '\\n';\n    }\n  }\n\n  units = simplePluralize(units.toLowerCase());\n\n  function randomInteger(min, max) {\n    return Math.floor(random() * (max - min + 1) + min);\n  };\n\n  function randomWord(words) {\n    return words[randomInteger(0, words.length - 1)];\n  };\n\n  function randomSentence(words, lowerBound, upperBound) {\n    var sentence = ''\n      , bounds = {min: 0, max: randomInteger(lowerBound, upperBound)};\n\n    while (bounds.min < bounds.max) {\n      sentence += ' ' + randomWord(words);\n      bounds.min++;\n    }\n\n    if (sentence.length) {\n      sentence = sentence.slice(1);\n      sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n    }\n\n    return sentence;\n  };\n\n  function randomParagraph(words, lowerBound, upperBound, sentenceLowerBound, sentenceUpperBound) {\n    var paragraph = ''\n      , bounds = {min: 0, max: randomInteger(lowerBound, upperBound)};\n\n    while (bounds.min < bounds.max) {\n      paragraph += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n      bounds.min++;\n    }\n\n    if (paragraph.length) {\n      paragraph = paragraph.slice(2);\n      paragraph += '.';\n    }\n\n    return paragraph;\n  }\n\n  var iter = 0\n    , bounds = {min: 0, max: count}\n    , string = ''\n    , prefix = ''\n    , openingTag\n    , closingTag;\n\n  if (format === 'html') {\n    openingTag = '<p>';\n    closingTag = '</p>';\n  }\n\n  while (bounds.min < bounds.max) {\n    switch (units.toLowerCase()) {\n      case 'words':\n        string += ' ' + randomWord(words);\n        break;\n      case 'sentences':\n        string += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n        break;\n      case 'paragraphs':\n        var nextString = randomParagraph(words, paragraphLowerBound, paragraphUpperBound, sentenceLowerBound, sentenceUpperBound);\n\n        if (format === 'html') {\n          nextString = openingTag + nextString + closingTag;\n          if (bounds.min < bounds.max - 1) {\n            nextString += suffix; // Each paragraph on a new line\n          }\n        } else if (bounds.min < bounds.max - 1) {\n          nextString += suffix + suffix; // Double-up the EOL character to make distinct paragraphs, like carriage return\n        }\n\n        string += nextString;\n\n        break;\n    }\n\n    bounds.min++;\n  }\n\n  if (string.length) {\n    var pos = 0;\n\n    if (string.indexOf('. ') === 0) {\n      pos = 2;\n    } else if (string.indexOf('.') === 0 || string.indexOf(' ') === 0) {\n      pos = 1;\n    }\n\n    string = string.slice(pos);\n\n    if (units === 'sentences') {\n      string += '.';\n    }\n  }\n\n  return string;\n};\n\nfunction simplePluralize(string) {\n  if (string.indexOf('s', string.length - 1) === -1) {\n    return string + 's';\n  }\n  return string;\n}\n\nmodule.exports = generator;\n","var dictionary = {\n  words: [\n    'ad',\n    'adipisicing',\n    'aliqua',\n    'aliquip',\n    'amet',\n    'anim',\n    'aute',\n    'cillum',\n    'commodo',\n    'consectetur',\n    'consequat',\n    'culpa',\n    'cupidatat',\n    'deserunt',\n    'do',\n    'dolor',\n    'dolore',\n    'duis',\n    'ea',\n    'eiusmod',\n    'elit',\n    'enim',\n    'esse',\n    'est',\n    'et',\n    'eu',\n    'ex',\n    'excepteur',\n    'exercitation',\n    'fugiat',\n    'id',\n    'in',\n    'incididunt',\n    'ipsum',\n    'irure',\n    'labore',\n    'laboris',\n    'laborum',\n    'Lorem',\n    'magna',\n    'minim',\n    'mollit',\n    'nisi',\n    'non',\n    'nostrud',\n    'nulla',\n    'occaecat',\n    'officia',\n    'pariatur',\n    'proident',\n    'qui',\n    'quis',\n    'reprehenderit',\n    'sint',\n    'sit',\n    'sunt',\n    'tempor',\n    'ullamco',\n    'ut',\n    'velit',\n    'veniam',\n    'voluptate'\n  ]\n};\n\nmodule.exports = dictionary;\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ISplitLayoutProps {\r\n    leftChildren?: React.ReactNode;\r\n    rightChildren?: React.ReactNode;\r\n    className?: string | string[];\r\n    leftContainerClassName?: string | string[];\r\n    rightContainerClassName?: string | string[];\r\n}\r\n\r\nexport const SplitLayout = (props: ISplitLayoutProps): JSX.Element => (\r\n    <div className={classNames('split-layout', props.className)}>\r\n        <div className={classNames('column', props.leftContainerClassName)}>{props.leftChildren}</div>\r\n        <div className={classNames('column', props.rightContainerClassName)}>{props.rightChildren}</div>\r\n    </div>\r\n);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {range, uniqueId} from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\n\r\nexport interface IStepProgressBarProps {\r\n    /**\r\n     * A positive integer above zero\r\n     */\r\n    numberOfSteps: number;\r\n    /**\r\n     * The 0-based index of the step currently in completion by the user\r\n     */\r\n    currentStep: number;\r\n    className?: IClassName;\r\n}\r\n\r\nexport const StepProgressBar = (props: IStepProgressBarProps) => {\r\n    const {numberOfSteps, currentStep} = props;\r\n    const stepProgressBarSteps = range(numberOfSteps).map((stepNumber: number) => (\r\n        <div\r\n            key={`step-progress-bar-${uniqueId()}`}\r\n            className={classNames('step-progress-bar', {\r\n                'step-progress-bar-done': stepNumber < currentStep,\r\n                'step-progress-bar-doing': stepNumber === currentStep,\r\n                'step-progress-bar-to-do': stepNumber > currentStep,\r\n            })}\r\n        ></div>\r\n    ));\r\n\r\n    return <div className={classNames('step-progress-bar-container', props.className)}>{stepProgressBarSteps}</div>;\r\n};\r\n"],"sourceRoot":""}