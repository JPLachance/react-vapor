{"version":3,"sources":["webpack:///./src/components/input/examples/InputExamples.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/442.bundle.js","sourcesContent":["export default \"import * as React from 'react';\\r\\nimport * as _ from 'underscore';\\r\\nimport {AutocompleteConnected, IItemBoxProps} from '../..';\\r\\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\\r\\nimport {ExamplesStore} from '../../../../docs/Store';\\r\\nimport {IWithDirtyProps, withDirty} from '../../../hoc/withDirty/withDirty';\\r\\nimport {withEditing} from '../../../hoc/withEditing/withEditing';\\r\\nimport {Button} from '../../button/Button';\\r\\nimport {IMultilineInputValue, MultilineInput} from '../../multilineInput/MultilineInput';\\r\\nimport {ISplitInput, ISplitValue, SplitMultilineInput} from '../../multilineInput/SplitMultilineInput';\\r\\nimport {Section} from '../../section/Section';\\r\\nimport {Input} from '../Input';\\r\\nimport {setDisabledInput} from '../InputActions';\\r\\nimport {InputConnected} from '../InputConnected';\\r\\nimport {Label} from '../Label';\\r\\n\\r\\nexport const InputExamples: ExampleComponent = () => (\\r\\n    <Section title=\\\"Inputs Examples\\\">\\r\\n        <SimpleInputDisconnected />\\r\\n        <InputsConnected />\\r\\n        <MultilineInputComponents />\\r\\n        <InputsWithDirtyManagement />\\r\\n    </Section>\\r\\n);\\r\\nInputExamples.description =\\r\\n    'Text Inputs allow users to enter a single line of letters, numbers, or symbols. They are used to submit short character strings.';\\r\\n\\r\\nexport const MultilineInputComponents: React.FunctionComponent = () => (\\r\\n    <Section level={2} title=\\\"Multiline Input example\\\">\\r\\n        <MultilineInputExample />\\r\\n        <SplitMultilineInputExamples />\\r\\n    </Section>\\r\\n);\\r\\n\\r\\nconst autoCompleteItems: IItemBoxProps[] = [\\r\\n    {displayValue: 'Test', value: '0'},\\r\\n    {displayValue: 'Test One', value: '1'},\\r\\n    {displayValue: 'Disabled', value: 'disabled', disabled: true},\\r\\n    {displayValue: 'Three', value: '3'},\\r\\n    {displayValue: 'Four', value: '4'},\\r\\n    {displayValue: 'Five', value: '5'},\\r\\n    {displayValue: 'Six', value: '6'},\\r\\n    {displayValue: 'Seven', value: '7'},\\r\\n];\\r\\n\\r\\n// start-print\\r\\n\\r\\nconst SimpleInputDisconnected: React.FunctionComponent = () => {\\r\\n    const [inputValue, setInputValue] = React.useState(null);\\r\\n    const [inputClasses, setInputClasses] = React.useState([]);\\r\\n\\r\\n    const onChange = () => {\\r\\n        const innerInput = inputValue.getInnerValue();\\r\\n        setInputClasses(innerInput ? ['valid'] : ['invalid']);\\r\\n    };\\r\\n\\r\\n    return (\\r\\n        <Section level={3} title=\\\"A simple input with a local state\\\">\\r\\n            <Input\\r\\n                id=\\\"local-state-input\\\"\\r\\n                innerInputClasses={inputClasses}\\r\\n                placeholder=\\\"Please, do not leave me empty!\\\"\\r\\n                ref={(input: Input) => setInputValue(input)}\\r\\n                onKeyUp={() => onChange()}\\r\\n            >\\r\\n                <Label validMessage=\\\"Great!\\\" invalidMessage=\\\"The input box must not be empty.\\\">\\r\\n                    An Input Box Label\\r\\n                </Label>\\r\\n            </Input>\\r\\n        </Section>\\r\\n    );\\r\\n};\\r\\n\\r\\nconst InputsConnected: React.FunctionComponent = () => {\\r\\n    const validate = (value: any) => !!value;\\r\\n\\r\\n    return (\\r\\n        <Section>\\r\\n            <Section level={2} title=\\\"Inputs connected to store.\\\">\\r\\n                <Section level={3} title=\\\"A simple input connected to the store\\\">\\r\\n                    <InputConnected\\r\\n                        id=\\\"super-input\\\"\\r\\n                        validate={validate}\\r\\n                        labelTitle=\\\"I am a connected input, and validated in real time.\\\"\\r\\n                        labelProps={{invalidMessage: 'Do not leave me empty'}}\\r\\n                        innerInputClasses=\\\"mb2\\\"\\r\\n                        validateOnChange\\r\\n                    />\\r\\n                </Section>\\r\\n\\r\\n                <Section level={3} title=\\\"A simple input disabled on mount.\\\">\\r\\n                    <InputConnected\\r\\n                        id=\\\"super-input-2\\\"\\r\\n                        labelTitle=\\\"I am the disabled input label.\\\"\\r\\n                        disabledOnMount={true}\\r\\n                        innerInputClasses=\\\"mb2\\\"\\r\\n                        defaultValue=\\\"I am disabled on mount.\\\"\\r\\n                    />\\r\\n                </Section>\\r\\n\\r\\n                <Section level={3} title=\\\"A connect input that you can toggle at will.\\\">\\r\\n                    <Button\\r\\n                        name={'Toggle input'}\\r\\n                        enabled\\r\\n                        onClick={() => {\\r\\n                            ExamplesStore.dispatch(\\r\\n                                setDisabledInput(\\r\\n                                    'super-input-3',\\r\\n                                    !_.findWhere(ExamplesStore.getState().inputs, {id: 'super-input-3'}).disabled\\r\\n                                )\\r\\n                            );\\r\\n                        }}\\r\\n                    />\\r\\n                    <InputConnected\\r\\n                        id=\\\"super-input-3\\\"\\r\\n                        validate={validate}\\r\\n                        labelTitle=\\\"I am the input label\\\"\\r\\n                        labelProps={{invalidMessage: 'Do not leave me empty'}}\\r\\n                        defaultValue=\\\"Awesome connected feature\\\"\\r\\n                        validateOnChange\\r\\n                    />\\r\\n                </Section>\\r\\n                <Section level={3} title=\\\"An input with autoCompletion\\\">\\r\\n                    <AutocompleteConnected id=\\\"autocomplete-input\\\" items={autoCompleteItems}>\\r\\n                        <Label>An autocomplete</Label>\\r\\n                    </AutocompleteConnected>\\r\\n                </Section>\\r\\n            </Section>\\r\\n        </Section>\\r\\n    );\\r\\n};\\r\\n\\r\\nconst MultilineInputExample: React.FunctionComponent = () => {\\r\\n    const [inputValues, setInputValues] = React.useState([]);\\r\\n\\r\\n    return (\\r\\n        <Section level={3} title=\\\"A multiline input with local state\\\">\\r\\n            <MultilineInput\\r\\n                id=\\\"multiline-input\\\"\\r\\n                title=\\\"A Multiline Input label\\\"\\r\\n                placeholder=\\\"Enter a value\\\"\\r\\n                values={inputValues}\\r\\n                onChange={(inputValuesWithNewValue: IMultilineInputValue[]) =>\\r\\n                    setInputValues(inputValuesWithNewValue.map((value) => value))\\r\\n                }\\r\\n            />\\r\\n        </Section>\\r\\n    );\\r\\n};\\r\\n\\r\\nconst SplitMultilineInputExamples: React.FunctionComponent = () => {\\r\\n    const inputs: ISplitInput[] = [\\r\\n        {\\r\\n            id: '1',\\r\\n            label: 'First input',\\r\\n            placeholder: 'enter a value',\\r\\n            validation: (value: string) => !!value,\\r\\n            validationMessage: 'This cannot be empty',\\r\\n        },\\r\\n        {\\r\\n            id: '2',\\r\\n            label: 'Second input',\\r\\n            placeholder: 'enter another value',\\r\\n        },\\r\\n    ];\\r\\n\\r\\n    const InitialValues: ISplitValue[] = [\\r\\n        {\\r\\n            '1': 'first value',\\r\\n            '2': 'other first value',\\r\\n            '3': 'other other first value',\\r\\n        },\\r\\n        {\\r\\n            '1': 'second value',\\r\\n            '2': 'other second value',\\r\\n            '3': 'other other second value',\\r\\n        },\\r\\n    ];\\r\\n\\r\\n    return (\\r\\n        <>\\r\\n            <Section level={3} title=\\\"A split multiline input with default values\\\">\\r\\n                <SplitMultilineInput inputs={inputs} defaultValues={InitialValues} />\\r\\n            </Section>\\r\\n            <Section level={3} title=\\\"A split multiline input with 3 inputs\\\">\\r\\n                <SplitMultilineInput\\r\\n                    inputs={[...inputs, {id: '3', label: 'Third input', placeholder: 'enter yet another value'}]}\\r\\n                    defaultValues={[...InitialValues, {'1': 'One', '2': 'Two', '3': 'three'}]}\\r\\n                />\\r\\n            </Section>\\r\\n        </>\\r\\n    );\\r\\n};\\r\\n\\r\\nconst InputsWithDirtyManagement: React.FunctionComponent = () => (\\r\\n    <Section level={2} title=\\\"Inputs with dirty management functionnalities\\\">\\r\\n        <InputWithSimpleDirtyManagement />\\r\\n        <InputWithEditingDirtyManagement />\\r\\n    </Section>\\r\\n);\\r\\n\\r\\nconst InputBeforeSimpleDirtyManagement: React.FunctionComponent<IWithDirtyProps> & {id: string} = (props) => (\\r\\n    <Section level={3} title=\\\"An input with a simple dirty handling\\\">\\r\\n        <Input\\r\\n            id=\\\"super-input-4\\\"\\r\\n            labelTitle=\\\"Dirty handling\\\"\\r\\n            onChange={(value) => props.toggleIsDirty(_.isEmpty(value) ? false : true)}\\r\\n        />\\r\\n    </Section>\\r\\n);\\r\\n\\r\\nInputBeforeSimpleDirtyManagement.id = 'inputWithDirty';\\r\\nexport const InputWithSimpleDirtyManagement = withDirty({\\r\\n    id: InputBeforeSimpleDirtyManagement.id,\\r\\n    showDirty: (isDirty: boolean) => isDirty && <div className=\\\"mt2\\\">This Component is now dirty</div>,\\r\\n})(InputBeforeSimpleDirtyManagement);\\r\\n\\r\\nconst InputBeforeEditingDirtyManagement: React.FunctionComponent<IWithDirtyProps> & {\\r\\n    id: string;\\r\\n    footerChildren: React.ReactNode;\\r\\n} = (props) => (\\r\\n    <Section level={3} title=\\\"An input with an editing dirty handling\\\">\\r\\n        <Input\\r\\n            id=\\\"super-input-5\\\"\\r\\n            labelTitle=\\\"Dirty handling with edition\\\"\\r\\n            onChange={(value) => props.toggleIsDirty(_.isEmpty(value) ? false : true)}\\r\\n        />\\r\\n    </Section>\\r\\n);\\r\\n\\r\\nInputBeforeEditingDirtyManagement.id = 'inputWithEditingDirty';\\r\\nInputBeforeEditingDirtyManagement.footerChildren = (\\r\\n    <Button primary name=\\\"Save\\\" onClick={() => alert('You Saved the input')} />\\r\\n);\\r\\n\\r\\nexport const InputWithEditingDirtyManagement = withEditing({\\r\\n    id: InputBeforeEditingDirtyManagement.id,\\r\\n    footerChildren: InputBeforeEditingDirtyManagement.footerChildren,\\r\\n    footerClassName: 'sticky-footer-mod-header',\\r\\n})(InputBeforeEditingDirtyManagement);\\r\\n\\r\\n// stop-print\\r\\n\""],"sourceRoot":""}