(window.webpackJsonp=window.webpackJsonp||[]).push([[202],{1295:function(n,e,r){"use strict";r.r(e),e.default="import {mount} from 'enzyme';\r\nimport * as React from 'react';\r\n\r\nimport {ChartContainer} from '../ChartContainer';\r\n\r\ndescribe('<ChartContainer />', () => {\r\n    it('should not throw', () => {\r\n        expect(() => {\r\n            const renderChart = (): any => null;\r\n            const component = mount(<ChartContainer renderChart={renderChart} />);\r\n            component.setProps({renderChart});\r\n            component.unmount();\r\n        }).not.toThrow();\r\n    });\r\n\r\n    it('should re-render on window resize', () => {\r\n        spyOn(Element.prototype, 'getBoundingClientRect').and.returnValue({width: 10, height: 50});\r\n        spyOn(Element.prototype, 'querySelectorAll').and.returnValue([{style: {}}]);\r\n        spyOn(window, 'requestAnimationFrame').and.callFake((cb: () => void) => cb());\r\n\r\n        const renderSpy = jasmine.createSpy('render').and.returnValue(null);\r\n\r\n        const component = mount(<ChartContainer renderChart={renderSpy} />);\r\n        // Need the component to update to get the ref.current\r\n        component.setProps({renderChart: renderSpy});\r\n\r\n        renderSpy.calls.reset();\r\n\r\n        const resizeEvent = document.createEvent('Event');\r\n        resizeEvent.initEvent('resize', true, true);\r\n        window.dispatchEvent(resizeEvent);\r\n\r\n        expect(renderSpy).toHaveBeenCalledTimes(1);\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=202.bundle.js.map