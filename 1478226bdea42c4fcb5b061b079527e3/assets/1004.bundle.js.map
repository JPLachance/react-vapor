{"version":3,"sources":["webpack:///./src/components/color-picker/ColorPickerExamples.tsx?cb9e","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/components/input/Input.tsx?1d15","webpack:///./src/components/input/Label.tsx?dafb","webpack:///./src/utils/PropsToOmitUtils.ts?e979","webpack:///./src/components/input/InputSelectors.ts?f034","webpack:///./src/components/input/InputConnected.tsx?4523","webpack:///./src/components/color-picker/ColorPicker.tsx?3167"],"names":["logColorPicked","colorPicked","console","log","ColorPickerExamples","className","href","id","defaultColor","onChangeComplete","styles","default","controls","display","name","onClick","alert","getValue","getState","ButtonPropsToOmit","this","props","enabled","getTemplate","buttonClass","buttonElement","buttonAttrs","disabled","link","target","rel","children","tooltip","title","placement","tooltipPlacement","getClasses","primary","small","classes","render","defaultProps","validatedInputTypes","inputPropsToOmit","state","valid","componentWillMount","onRender","validOnMount","validateOnMount","validate","defaultValue","disabledOnMount","componentWillUnmount","onDestroy","componentDidUpdate","prevProps","value","innerInput","reset","getInnerValue","setState","handleBlur","onBlur","handleChange","onChange","validOnChange","validateOnChange","handleClick","e","handleKeyUp","event","onKeyUp","getLabel","labelProps","labelTitle","key","htmlFor","type","innerInputClasses","invalid","inputElements","ref","min","minimum","max","maximum","input","disabledTooltip","Right","required","validMessage","invalidMessage","attributes","internalComponentPropsToOmit","PropsToOmitUtils","internal","getInput","inputs","InputSelectors","getIsValid","InputConnected","ownProps","dispatch","mergeProps","color","style","colorForInput","ColorPicker","hex","ColorPickerDisconnected"],"mappings":"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","file":"assets/1004.bundle.js","sourcesContent":["import * as React from 'react';\nimport {ColorResult} from 'react-color';\nimport {debounce} from 'underscore';\nimport {ExamplesStore} from '../../../docs/Store';\nimport {Button} from '../button/Button';\nimport {InputSelectors} from '../input/InputSelectors';\nimport {ColorPicker} from './ColorPicker';\n\nconst logColorPicked = debounce((colorPicked: ColorResult) => {\n    // tslint:disable-next-line\n    console.log(colorPicked);\n}, 500);\n\nexport const ColorPickerExamples = () => (\n    <div className=\"mt2\">\n        <h2 className=\"mb2\">\n            Built using <a href=\"https://github.com/casesandberg/react-color/\">React Color</a>\n        </h2>\n        <div className=\"form-group\">\n            <label className=\"form-control-label\">Basic ColorPicker</label>\n            <div className=\"flex\">\n                <ColorPicker id=\"color-picker-example-1\" defaultColor=\"#F37231\" onChangeComplete={logColorPicked} />\n            </div>\n        </div>\n        <div className=\"form-group\">\n            <label className=\"form-control-label\">ColorPicker with different picker styling, hiding controls</label>\n            <div className=\"flex\">\n                <ColorPicker id=\"color-picker-example-2\" styles={{default: {controls: {display: 'none'}}}} />\n            </div>\n        </div>\n\n        <div className=\"form-group\">\n            <label className=\"form-control-label\">ColorPickerConnected with color as hex available from state</label>\n            <div className=\"flex\">\n                <ColorPicker id=\"color-picker-example-3\" defaultColor=\"#47FF21\" />\n                <Button\n                    className=\"btn mod-primary ml2\"\n                    name=\"Click me to get color from state\"\n                    onClick={() =>\n                        alert(\n                            InputSelectors.getValue(ExamplesStore.getState(), {\n                                id: 'color-picker-example-3',\n                            })\n                        )\n                    }\n                />\n            </div>\n        </div>\n    </div>\n);\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\nimport {contains, isUndefined, uniqueId} from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {PropsToOmitUtils} from '../../utils/PropsToOmitUtils';\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IInputState} from './InputReducers';\r\nimport {ILabelProps, Label} from './Label';\r\n\r\nconst validatedInputTypes: string[] = ['number', 'text', 'password'];\r\n\r\ntype IInputNativeTagOwnProps = Omit<\r\n    React.AllHTMLAttributes<HTMLInputElement>,\r\n    'defaultValue' | 'onClick' | 'onChange' | 'onBlur' | 'value'\r\n>;\r\n\r\nexport interface IInputAdditionalOwnProps {\r\n    id?: string;\r\n    classes?: IClassName;\r\n    innerInputClasses?: IClassName;\r\n    validate?: (value: any) => boolean;\r\n    labelTitle?: React.ReactNode;\r\n    labelProps?: ILabelProps;\r\n    validateOnChange?: boolean;\r\n    disabledOnMount?: boolean;\r\n    validateOnMount?: boolean;\r\n    disabledTooltip?: string;\r\n    minimum?: number /* @deprecated use min instead */;\r\n    maximum?: number /* @deprecated use max instead */;\r\n    onBlur?: (value: string) => void;\r\n    defaultValue?: string;\r\n}\r\n\r\nexport interface IInputNativeTagStateProps {\r\n    value?: string;\r\n    checked?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IInputAdditionalStateProps {\r\n    valid?: boolean;\r\n    indeterminate?: boolean;\r\n}\r\n\r\nexport interface IInputStateProps extends IInputNativeTagStateProps, IInputAdditionalStateProps {}\r\n\r\nexport interface IInputDispatchProps {\r\n    onDestroy?: () => void;\r\n    onRender?: (value?: string, valid?: boolean, disabled?: boolean) => void;\r\n    onChange?: (value?: string, valid?: boolean) => void;\r\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nconst inputPropsToOmit = keys<IInputAdditionalOwnProps & IInputAdditionalStateProps & IInputDispatchProps>();\r\n\r\nexport interface IInputOwnProps extends IInputAdditionalOwnProps, IInputNativeTagOwnProps {}\r\n\r\nexport interface IInputProps extends IInputOwnProps, Partial<IInputStateProps>, Partial<IInputDispatchProps> {}\r\n\r\nexport interface IInputComponentState {\r\n    valid: boolean;\r\n}\r\n\r\nexport class Input extends React.Component<IInputProps, IInputComponentState> {\r\n    private innerInput: HTMLInputElement;\r\n\r\n    static defaultProps: Partial<IInputProps> = {\r\n        id: uniqueId('input'),\r\n        type: 'text',\r\n        valid: true,\r\n        labelTitle: '',\r\n        required: true,\r\n    };\r\n\r\n    constructor(props: IInputProps, state: IInputState) {\r\n        super(props, state);\r\n        this.state = {\r\n            valid: this.props.valid,\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            // undefined validOnMount will default to true in the state\r\n            const validOnMount =\r\n                this.props.validateOnMount && this.props.validate && this.props.validate(this.props.defaultValue || '');\r\n\r\n            this.props.onRender(this.props.defaultValue, validOnMount, this.props.disabledOnMount);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IInputProps) {\r\n        if (this.props.valid !== prevProps.valid) {\r\n            this.validate();\r\n        }\r\n\r\n        if (prevProps.value !== this.props.value && this.innerInput) {\r\n            this.innerInput.value = this.props.value;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.innerInput.value = '';\r\n    }\r\n\r\n    getInnerValue(): string {\r\n        return (this.innerInput && this.innerInput.value) || '';\r\n    }\r\n\r\n    validate() {\r\n        this.setState({\r\n            valid: this.props.valid && !(this.props.validate && !this.props.validate(this.getInnerValue())),\r\n        });\r\n    }\r\n\r\n    private handleBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(this.getInnerValue());\r\n        }\r\n    }\r\n\r\n    private handleChange() {\r\n        if (this.props.onChange) {\r\n            const validOnChange =\r\n                this.props.validateOnChange && this.props.validate && this.props.validate(this.getInnerValue());\r\n            this.props.onChange(this.getInnerValue(), validOnChange);\r\n        }\r\n    }\r\n\r\n    private handleClick(e: React.MouseEvent<HTMLElement>) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n\r\n    private handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(event);\r\n        }\r\n    }\r\n\r\n    private getLabel(): React.ReactNode {\r\n        const {labelProps, labelTitle} = this.props;\r\n        if (typeof labelTitle === 'string') {\r\n            return labelTitle || this.props.validate ? (\r\n                <Label key={this.props.id + 'label'} htmlFor={this.props.id} {...labelProps}>\r\n                    {labelTitle}\r\n                </Label>\r\n            ) : null;\r\n        } else {\r\n            return labelTitle;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames(\r\n            'input-wrapper validate',\r\n            {\r\n                'input-field': contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.classes\r\n        );\r\n        const innerInputClasses = classNames(\r\n            {\r\n                invalid: !this.state.valid && contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.innerInputClasses\r\n        );\r\n\r\n        const inputElements = [\r\n            <input\r\n                key={this.props.id}\r\n                id={this.props.id}\r\n                className={innerInputClasses}\r\n                defaultValue={!isUndefined(this.props.value) ? this.props.value : this.props.defaultValue}\r\n                ref={(innerInput: HTMLInputElement) => (this.innerInput = innerInput)}\r\n                onBlur={() => this.handleBlur()}\r\n                onChange={() => this.handleChange()}\r\n                onKeyUp={(event: React.KeyboardEvent<HTMLInputElement>) => this.handleKeyUp(event)}\r\n                min={this.props.minimum}\r\n                max={this.props.maximum}\r\n                {..._.omit(this.props, [...PropsToOmitUtils.input, ...inputPropsToOmit])}\r\n            />,\r\n            this.getLabel(),\r\n            this.props.children,\r\n        ];\r\n\r\n        return this.props.disabled && this.props.disabledTooltip ? (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                <Tooltip title={this.props.disabledTooltip} placement={TooltipPlacement.Right}>\r\n                    {inputElements}\r\n                </Tooltip>\r\n            </div>\r\n        ) : (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                {inputElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ILabelProps {\r\n    type?: string;\r\n    classes?: string[];\r\n    validMessage?: string;\r\n    invalidMessage?: string;\r\n}\r\n\r\nexport class Label extends React.Component<ILabelProps & React.HTMLProps<HTMLLabelElement>, any> {\r\n    render() {\r\n        const classes = classNames(this.props.classes);\r\n        const {validMessage, invalidMessage, children, ...attributes} = this.props;\r\n        return (\r\n            <label\r\n                className={classes}\r\n                data-valid-message={validMessage}\r\n                data-invalid-message={invalidMessage}\r\n                {...attributes}\r\n            >\r\n                {children}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","const internalComponentPropsToOmit: string[] = ['children', 'dangerouslySetInnerHTML'];\r\n\r\n// We omit those props for the input native tag because those props are reserved for the Input component and\r\n// to stay compatible with the old interface\r\nconst inputTagPropsToOmit: string[] = [\r\n    ...internalComponentPropsToOmit,\r\n    'defaultValue',\r\n    'onClick',\r\n    'onChange',\r\n    'onBlur',\r\n    'value',\r\n    'valid',\r\n];\r\n\r\nexport const PropsToOmitUtils = {\r\n    internal: internalComponentPropsToOmit,\r\n    input: inputTagPropsToOmit,\r\n};\r\n","import {createSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IInputState} from './InputReducers';\r\n\r\nconst getInput = (state: IReactVaporState, props: {id: string}): IInputState =>\r\n    _.findWhere(state.inputs, {id: props.id});\r\n\r\nconst getValue = createSelector(getInput, (input: IInputState): string => input && input.value);\r\n\r\nconst getIsValid = createSelector(getInput, (input: IInputState): boolean => !!input && input.valid);\r\n\r\nexport const InputSelectors = {\r\n    getValue,\r\n    getIsValid,\r\n    getInput,\r\n};\r\n","import {connect} from 'react-redux';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IInputDispatchProps, IInputOwnProps, IInputProps, IInputStateProps, Input} from './Input';\r\nimport {addInput, changeInputValue, removeInput} from './InputActions';\r\nimport {InputSelectors} from './InputSelectors';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IInputOwnProps): IInputStateProps => {\r\n    const input = InputSelectors.getInput(state, {id: ownProps.id});\r\n    return {\r\n        valid: input && input.valid,\r\n        value: input && input.value,\r\n        disabled: input && input.disabled,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IInputOwnProps): IInputDispatchProps => ({\r\n    onRender: (value: string = '', valid = true, disabled = false) =>\r\n        dispatch(addInput(ownProps.id, value, valid, disabled)),\r\n    onDestroy: () => dispatch(removeInput(ownProps.id)),\r\n    onChange: (value: string, valid = true) => dispatch(changeInputValue(ownProps.id, value, valid)),\r\n});\r\n\r\nexport const InputConnected: React.ComponentClass<IInputProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Input);\r\n","import * as React from 'react';\nimport {ChromePicker, ChromePickerProps, ColorResult} from 'react-color';\nimport {connect} from 'react-redux';\nimport {isString, noop, uniqueId} from 'underscore';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {changeInputValue} from '../input/InputActions';\nimport {InputConnected} from '../input/InputConnected';\nimport {InputSelectors} from '../input/InputSelectors';\n\nexport interface IColorPickerProps extends ChromePickerProps {\n    id: string;\n    defaultColor?: string;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IColorPickerProps) => {\n    const color = InputSelectors.getValue(state, {id: ownProps.id}) || ownProps.defaultColor;\n    return {\n        color,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IColorPickerProps) => ({\n    onChangeComplete: (colorPicked: ColorResult) => {\n        ownProps.onChangeComplete && ownProps.onChangeComplete(colorPicked);\n        dispatch(changeInputValue(ownProps.id, colorPicked.hex, true));\n    },\n});\n\nclass ColorPickerDisconnected extends React.Component<IColorPickerProps & ReturnType<typeof mapDispatchToProps>> {\n    static defaultProps: Partial<IColorPickerProps & ReturnType<typeof mapDispatchToProps>> = {\n        id: uniqueId('colorpicker'),\n        onChangeComplete: noop as any,\n    };\n\n    get colorForInput() {\n        if (this.props.color && isString(this.props.color)) {\n            return this.props.color;\n        }\n\n        if (this.props.defaultColor) {\n            return this.props.defaultColor;\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <ChromePicker {...this.props} />\n                <InputConnected\n                    id={this.props.id}\n                    style={{display: 'none'}}\n                    defaultValue={this.colorForInput}\n                    value={this.colorForInput}\n                />\n            </>\n        );\n    }\n}\n\nexport const ColorPicker = connect(mapStateToProps, mapDispatchToProps)(ColorPickerDisconnected);\n"],"sourceRoot":""}