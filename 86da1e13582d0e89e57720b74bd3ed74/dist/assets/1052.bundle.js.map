{"version":3,"sources":["webpack:///./src/components/slider/SliderHandle.tsx?8e67","webpack:///./src/components/slider/SliderUtils.ts?0243","webpack:///./src/components/slider/MiddleSlider.tsx?a0e9","webpack:///./src/components/slider/examples/SliderExamples.tsx?bd35","webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/slider/Slider.tsx?b700"],"names":["handleProps","handleCustomProps","prefixCls","overlay","customTooltip","rangeOutput","visible","hasTooltip","dragging","placement","value","valuesPositionOnRange","MiddleSlider","dispatch","ownProps","setOutputValue","SliderActions","setValue","id","enabled","initialValue","marks","min","max","step","onChange","crossingPoint","Math","round","getCrossingPoint","highRange","setHighRange","lowRange","setLowRange","rangeOutputValue","getComputedRangeValue","Error","propsValidator","initialRangeValue","convertInitialValuetoRangeValue","setHandlePosition","every","singleValue","getValuesPositionOnRange","setValueInTheLowRange","setValueInTheHighRange","jumpValueFromHighToLowRange","jumpValueFromLowToHighRange","correctLowRangeValue","correctHighRangeValue","key","handle","customProps","handleIndex","handleIsAtCrossingPoint","index","className","disabled","SliderExample","Section","title","SimpleSliderExample","level","MiddleSliderExample","MiddleSliderAsymetric","Slider","slider","0","50","100","defaultValue","tipFormatter","33","17","25","75","currentValue","children","description","mods","titleProps","H","classes","HtmlTag","tipProps","overlayClassName","defaultProps"],"mappings":"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","file":"assets/1052.bundle.js","sourcesContent":["import {Handle} from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport * as React from 'react';\nimport * as _ from 'underscore';\n\nexport interface CustomHandleProps {\n    customTooltip: React.ReactNode;\n    hasTooltip: boolean;\n    rangeOutput: number;\n}\n\nexport interface HandleProps {\n    dragging: boolean;\n    vertical: boolean;\n    offset: number;\n    reverse: boolean;\n    value: number;\n}\n\nconst SliderHandle: React.FunctionComponent<{handleProps: HandleProps; handleCustomProps: CustomHandleProps}> = ({\n    handleProps,\n    handleCustomProps,\n}) => (\n    <Tooltip\n        prefixCls=\"rc-slider-tooltip\"\n        overlay={handleCustomProps.customTooltip ?? handleCustomProps.rangeOutput}\n        visible={handleCustomProps.hasTooltip ? handleProps.dragging : false}\n        placement=\"top\"\n    >\n        <Handle value={handleProps.value} {..._.omit(handleProps, ['dragging', 'index'])} />\n    </Tooltip>\n);\n\nexport default SliderHandle;\n","export const valuesPositionOnRange = {\n    lower: 'LOWER_THAN_CROSSING_POINT',\n    higher: 'HIGHER_THAN_CROSSING_POINT',\n    both: 'NO_VALUE_AT_CROSSING_POINT',\n};\n\nexport const getValuesPositionOnRange = (value: number[], crossingPoint: number): string => {\n    if (value.every((singleValue) => singleValue < crossingPoint)) {\n        return valuesPositionOnRange.lower;\n    } else if (value.every((singleValue) => singleValue > crossingPoint)) {\n        return valuesPositionOnRange.higher;\n    } else if (value.every((singleValue) => singleValue !== crossingPoint)) {\n        return valuesPositionOnRange.both;\n    }\n    return null;\n};\n\nexport const getCrossingPoint = (min: number, max: number): number => Math.round(((0 - min) / (max - min)) * 100);\n\nexport const convertInitialValuetoRangeValue = (min: number, max: number, initialValue: number): number =>\n    Math.round(((initialValue - min) / (max - min)) * 100);\n\nexport const handleIsAtCrossingPoint = (\n    lowRange: number,\n    highRange: number,\n    handleIndex: number,\n    crossingPoint: number\n) =>\n    (handleIndex === 1 && lowRange < crossingPoint && highRange === crossingPoint) ||\n    (handleIndex === 0 && highRange > crossingPoint && lowRange === crossingPoint);\n\nexport const getComputedRangeValue = (\n    lowRange: number,\n    highRange: number,\n    min: number,\n    max: number,\n    crossingPoint: number\n): number => {\n    if (lowRange < crossingPoint) {\n        return Math.round(((crossingPoint - lowRange) * min) / crossingPoint);\n    } else if (highRange > crossingPoint) {\n        return Math.round(((highRange - crossingPoint) * max) / (100 - crossingPoint));\n    }\n    return 0;\n};\n\nexport const propsValidator = (min: number, max: number, initialValue: number) => {\n    if (min > 0) {\n        throw new Error(\n            `${min} is not a valid minimum MiddleSlider range value. Minimum MiddleSlider range value should be under 0`\n        );\n    } else if (max < 0) {\n        throw new Error(\n            `${max} is not a valid maximum MiddleSlider range value. Maximum MiddleSlider range value should be over 0`\n        );\n    }\n    if (initialValue < min || initialValue > max) {\n        throw new Error(\n            `MiddleSlider initial value is not within defined range. initialValue:${initialValue} should be set between ${min} and ${max}`\n        );\n    }\n};\n","import 'rc-slider/assets/index.css';\n\nimport {Range, SliderProps} from 'rc-slider';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\n\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {SliderActions} from './SliderActions';\nimport SliderHandle from './SliderHandle';\nimport {\n    convertInitialValuetoRangeValue,\n    getComputedRangeValue,\n    getCrossingPoint,\n    getValuesPositionOnRange,\n    handleIsAtCrossingPoint,\n    propsValidator,\n    valuesPositionOnRange,\n} from './SliderUtils';\n\nexport interface MiddleSliderOwnProps extends SliderProps {\n    id: string;\n    enabled?: boolean;\n    hasTooltip?: boolean;\n    initialValue?: number;\n    marks?: {[key: number]: string};\n    min?: number;\n    max: number;\n    step?: number;\n    tabIndex?: number[];\n    onChange?: (rangeOutputValue: number) => any;\n    customTooltip?: (value: any) => JSX.Element;\n}\n\nexport const mapDispatchToProps = (dispatch: IDispatch, ownProps: MiddleSliderOwnProps) => ({\n    setOutputValue: (value: number) => dispatch(SliderActions.setValue(ownProps.id, value)),\n});\n\nconst MiddleSliderDisconnected: React.FunctionComponent<MiddleSliderOwnProps &\n    ReturnType<typeof mapDispatchToProps>> = ({\n    id,\n    enabled = true,\n    customTooltip,\n    hasTooltip,\n    initialValue,\n    marks,\n    min = 0,\n    max,\n    setOutputValue,\n    step,\n    onChange,\n}) => {\n    const crossingPoint = getCrossingPoint(min, max);\n    const [highRange, setHighRange] = React.useState(crossingPoint);\n    const [lowRange, setLowRange] = React.useState(crossingPoint);\n\n    const rangeOutputValue = getComputedRangeValue(lowRange, highRange, min, max, crossingPoint);\n\n    React.useEffect(() => {\n        onChange?.(rangeOutputValue);\n    }, [onChange, rangeOutputValue]);\n\n    React.useEffect(() => {\n        propsValidator(min, max, initialValue);\n        if (initialValue) {\n            const initialRangeValue: number = convertInitialValuetoRangeValue(min, max, initialValue);\n            setHandlePosition([initialRangeValue, initialRangeValue]);\n        }\n    }, [min, max, initialValue]);\n\n    React.useEffect(() => {\n        setOutputValue(rangeOutputValue);\n    }, [setOutputValue, rangeOutputValue]);\n\n    const setHandlePosition = (value: number[]) => {\n        const valuesPosition = getValuesPositionOnRange(value, crossingPoint);\n        switch (valuesPosition) {\n            case valuesPositionOnRange.lower:\n                setValueInTheLowRange(value);\n                break;\n            case valuesPositionOnRange.higher:\n                setValueInTheHighRange(value);\n                break;\n            case valuesPositionOnRange.both:\n                lowRange === crossingPoint ? jumpValueFromHighToLowRange(value) : jumpValueFromLowToHighRange(value);\n                break;\n            default:\n                setLowRange(value[0]);\n                setHighRange(value[1]);\n        }\n    };\n\n    const jumpValueFromHighToLowRange = (value: number[]) => {\n        setHighRange(crossingPoint);\n        setLowRange(value[0]);\n    };\n\n    const jumpValueFromLowToHighRange = (value: number[]) => {\n        setLowRange(crossingPoint);\n        setHighRange(value[1]);\n    };\n\n    const setValueInTheLowRange = (value: number[]) => {\n        const correctLowRangeValue = value[1] < crossingPoint ? value[1] : value[0];\n        setLowRange(correctLowRangeValue);\n    };\n\n    const setValueInTheHighRange = (value: number[]) => {\n        const correctHighRangeValue = value[0] > crossingPoint ? value[0] : value[1];\n        setHighRange(correctHighRangeValue);\n    };\n\n    const renderHandle = (handleProps: any) => {\n        const customProps = {\n            hasTooltip: hasTooltip,\n            customTooltip: customTooltip,\n            rangeOutput: rangeOutputValue,\n        };\n        if (!handleIsAtCrossingPoint(lowRange, highRange, handleProps.index, crossingPoint)) {\n            return <SliderHandle key={handleProps.index} handleProps={handleProps} handleCustomProps={customProps} />;\n        }\n        return null;\n    };\n\n    return (\n        <Range\n            key={id}\n            value={[lowRange, highRange]}\n            onChange={setHandlePosition}\n            handle={renderHandle}\n            className=\"vapor-slider input-wrapper input-field\"\n            marks={marks}\n            step={step}\n            disabled={!enabled}\n        />\n    );\n};\n\nexport const MiddleSlider = connect(null, mapDispatchToProps)(MiddleSliderDisconnected);\n","import * as React from 'react';\r\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\r\nimport {Section} from '../../section/Section';\r\nimport {MiddleSlider} from '../MiddleSlider';\r\nimport {Slider} from '../Slider';\r\n\r\nexport const SliderExample: ExampleComponent = () => (\r\n    <Section title=\"Slider Examples\">\r\n        <SimpleSliderExample />\r\n        <Section level={2} title=\"Middle Slider\">\r\n            <MiddleSliderExample />\r\n            <MiddleSliderAsymetric />\r\n        </Section>\r\n    </Section>\r\n);\r\n\r\nconst SimpleSliderExample: React.FunctionComponent = () => (\r\n    <Section level={2} title=\"Simple Slider\">\r\n        <Section level={3} title=\"A simple slider with marks, step, a formated tooltip and an initial value\">\r\n            <Slider\r\n                hasTooltip\r\n                slider={{\r\n                    step: 25,\r\n                    marks: {\r\n                        0: 'Lower',\r\n                        50: 'Middle',\r\n                        100: 'Higher',\r\n                    },\r\n                    defaultValue: 50,\r\n                    tipFormatter: (value: number) => `${value}$`,\r\n                }}\r\n            />\r\n        </Section>\r\n    </Section>\r\n);\r\n\r\nconst MiddleSliderExample: React.FunctionComponent = () => {\r\n    return (\r\n        <Section level={3} key=\"two\" title=\"MiddleSlider with asymetric range and initial value\">\r\n            <MiddleSlider\r\n                key=\"patate\"\r\n                min={-2000}\r\n                max={10000}\r\n                id=\"asymetricRangeId\"\r\n                initialValue={2000}\r\n                marks={{0: '-2000', 33: '2000', 17: '0', 100: '10,000'}}\r\n                hasTooltip\r\n            />\r\n        </Section>\r\n    );\r\n};\r\n\r\nconst MiddleSliderAsymetric: React.FunctionComponent = () => {\r\n    const [value, setValue] = React.useState(null);\r\n\r\n    return (\r\n        <Section key=\"one\" level={3} title={`MiddleSlider with marks and steps. Its current value is ${value}`}>\r\n            <MiddleSlider\r\n                key=\"pwel\"\r\n                min={-10000}\r\n                max={10000}\r\n                id=\"rangeSliderId\"\r\n                marks={{\r\n                    0: '-100%',\r\n                    25: '-50%',\r\n                    50: '0',\r\n                    75: '50%',\r\n                    100: '100%',\r\n                }}\r\n                step={25}\r\n                onChange={(currentValue) => {\r\n                    setValue(currentValue);\r\n                }}\r\n                hasTooltip\r\n                customTooltip={() => <span>this custom tooltip shows the slider current value of {value}</span>}\r\n            />\r\n        </Section>\r\n    );\r\n};\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport RCSlider, {createSliderWithTooltip, SliderProps, WithTooltipProps} from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport * as React from 'react';\r\n\r\nexport interface ISliderProps {\r\n    slider?: WithTooltipProps & SliderProps;\r\n    classes?: string[];\r\n    hasTooltip?: boolean;\r\n}\r\n\r\nconst Slider: React.SFC<ISliderProps> = ({hasTooltip, slider, classes}) => {\r\n    const HtmlTag = hasTooltip ? createSliderWithTooltip(RCSlider) : RCSlider;\r\n    if (hasTooltip) {\r\n        (slider as any).tipProps = {\r\n            overlayClassName: 'vapor-slider-overlay',\r\n            ...slider.tipProps,\r\n        };\r\n    }\r\n\r\n    return <HtmlTag className={classNames('vapor-slider input-wrapper input-field', classes)} {...slider} />;\r\n};\r\n\r\nSlider.defaultProps = {\r\n    slider: {},\r\n    hasTooltip: false,\r\n};\r\n\r\nexport {Slider};\r\n"],"sourceRoot":""}