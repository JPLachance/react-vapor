(window.webpackJsonp=window.webpackJsonp||[]).push([[871],{1973:function(e,l,o){"use strict";o.r(l),l.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport {ITableCollapsibleRowToggleProps, TableCollapsibleRowToggle} from '../TableCollapsibleRowToggle';\r\n\r\ndescribe('Tables', () => {\r\n    describe('<TableCollapsibleRowToggle />', () => {\r\n        it('should render without errors', () => {\r\n            expect(() => {\r\n                shallow(<TableCollapsibleRowToggle isExpanded={false} />);\r\n            }).not.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('<TableCollapsibleRowToggle />', () => {\r\n        let isExpanded: boolean;\r\n        let tableCollapsibleRowToggle: ReactWrapper<ITableCollapsibleRowToggleProps, any>;\r\n\r\n        beforeEach(() => {\r\n            document.getElementById('App').innerHTML = '<table><tbody><tr id=\"AppTableBodyRow\"></tr></tbody></table>';\r\n            isExpanded = false;\r\n\r\n            tableCollapsibleRowToggle = mount(<TableCollapsibleRowToggle isExpanded={isExpanded} />, {\r\n                attachTo: document.getElementById('AppTableBodyRow'),\r\n            });\r\n        });\r\n\r\n        afterEach(() => {\r\n            tableCollapsibleRowToggle.detach();\r\n        });\r\n\r\n        it('should get if it is expanded as a prop', () => {\r\n            const isExpandedProp = tableCollapsibleRowToggle.props().isExpanded;\r\n\r\n            expect(isExpandedProp).toBeDefined();\r\n            expect(isExpandedProp).toBe(isExpanded);\r\n        });\r\n\r\n        it('should have a svg with state-collapsed if collapsed', () => {\r\n            expect(tableCollapsibleRowToggle.find('.state-collapsed').length).toBeGreaterThanOrEqual(1);\r\n            expect(tableCollapsibleRowToggle.find('.state-expanded').length).toBe(0);\r\n        });\r\n\r\n        it('should have a svg with state-expanded if expanded', () => {\r\n            tableCollapsibleRowToggle.setProps({isExpanded: true});\r\n            expect(tableCollapsibleRowToggle.find('.state-expanded').length).toBeGreaterThanOrEqual(1);\r\n            expect(tableCollapsibleRowToggle.find('.state-collapsed').length).toBe(0);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=871.bundle.js.map