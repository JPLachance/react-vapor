(window.webpackJsonp=window.webpackJsonp||[]).push([[930],{2028:function(n,t,r){"use strict";r.r(t),t.default="import * as React from 'react';\nimport {connect} from 'react-redux';\nimport * as _ from 'underscore';\nimport {IDispatch} from '../../../utils/ReduxUtils';\nimport {IInputOwnProps} from '../../input/Input';\nimport {ValidationActions} from '../ValidationActions';\nimport {ValidationTypes} from '../ValidationTypes';\nimport {InferableComponentEnhancer} from './connectHOC';\n\nexport interface IWithNonEmptyValueInputValidationProps {\n    validationMessage?: string;\n    resetErrorOnUnmount?: boolean;\n}\n\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\n    setError: (id: string, error: string) => dispatch(ValidationActions.setError(id, error, ValidationTypes.nonEmpty)),\n    clearError: (id: string) => dispatch(ValidationActions.clearError(id)),\n});\n\nexport const withNonEmptyValueInputValidationHOC = <T extends IInputOwnProps>(\n    Component: React.ComponentClass<T> | React.FunctionComponent<T>\n) => {\n    type NewOwnProps = T & IWithNonEmptyValueInputValidationProps;\n    type DispatchProps = ReturnType<typeof mapDispatchToProps>;\n    const WrappedInput: React.FunctionComponent<NewOwnProps & DispatchProps> = ({\n        setError,\n        clearError,\n        validationMessage = 'Input is empty and should not be empty',\n        resetErrorOnUnmount,\n        validate,\n        ...props\n    }) => {\n        React.useEffect(() => {\n            clearError(props.id);\n            return () => {\n                resetErrorOnUnmount && clearError(props.id);\n            };\n        }, []);\n\n        return (\n            <Component\n                {...(props as T)}\n                validate={(value: string) => {\n                    const isEmpty = _.isEmpty(value);\n                    setError(props.id, isEmpty ? validationMessage : '');\n                    return !isEmpty || (validate ? validate(value) : true);\n                }}\n            />\n        );\n    };\n\n    const enhance = connect(null, mapDispatchToProps) as InferableComponentEnhancer<DispatchProps>;\n    return enhance(WrappedInput);\n};\n"}}]);
//# sourceMappingURL=930.bundle.js.map