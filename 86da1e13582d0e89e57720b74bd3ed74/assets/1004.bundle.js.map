{"version":3,"sources":["webpack:///./src/components/multilineBox/examples/MultilineBoxExampleUtils.tsx?d1c3","webpack:///./src/components/multilineBox/examples/MultilineBoxExamples.tsx?80d8","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/utils/HocUtils.ts?58b1","webpack:///./src/utils/UUID.ts?611d","webpack:///./src/components/input/Input.tsx?1d15","webpack:///./src/utils/PropsToOmitUtils.ts?e979","webpack:///./src/components/input/Label.tsx?dafb","webpack:///./src/components/dragAndDrop/DnDUtils.ts?6815","webpack:///./src/components/input/InputSelectors.ts?f034","webpack:///./src/components/input/InputConnected.tsx?4523","webpack:///./src/components/multilineBox/MultilineBoxSelector.ts?db6f","webpack:///./src/components/dragAndDrop/DnDContainer.tsx?93d8","webpack:///./src/components/multilineBox/MultilineBox.tsx?7891","webpack:///./src/components/multilineBox/hoc/MultilineBoxContainer.tsx?2333","webpack:///./src/components/multilineBox/hoc/MultilineBoxWithDnD.tsx?8641","webpack:///./src/components/multilineBox/hoc/MultilineBoxWithRemoveButton.tsx?99f0"],"names":["props","state","id","UUID","generate","data","name","displayName","render","className","Button","onClick","setState","MultilineBox","this","renderBody","defaultProps","cData","key","InputConnected","classes","defaultValue","validate","value","validateOnChange","onChange","isLast","addNewBox","containerNodeExample","child","index","MultilineBoxWithDefaultContainer","MultilineBoxWithContainer","containerNode","DefaultMultilineBoxWithRemoveButton","getRemoveButton","style","width","height","MultilineBoxWithContainerAndTwoRemoveButton","MultilineBoxWithDragAndDrop","ComplexMultilineBox","ComplexMultilineBox2","DnDContainerProps","draggableContainerProps","ComplexMultilineBox3","icon","Svg","svgName","VaporSVG","dragDrop","svgClass","labelProps","invalidMessage","ButtonPropsToOmit","enabled","getTemplate","buttonClass","buttonElement","buttonAttrs","disabled","link","target","rel","href","children","tooltip","title","placement","tooltipPlacement","getClasses","primary","small","HocUtils","supplyConfig","supplier","d","Date","now","replace","c","r","Math","random","floor","toString","validatedInputTypes","inputPropsToOmit","valid","componentWillMount","onRender","validOnMount","validateOnMount","disabledOnMount","componentWillUnmount","onDestroy","componentDidUpdate","prevProps","innerInput","reset","getInnerValue","handleBlur","onBlur","handleChange","validOnChange","handleClick","e","handleKeyUp","event","onKeyUp","getLabel","labelTitle","htmlFor","type","innerInputClasses","invalid","inputElements","ref","min","minimum","max","maximum","input","disabledTooltip","Right","required","internalComponentPropsToOmit","PropsToOmitUtils","internal","validMessage","attributes","context","DnDUtils","move","dragIndex","hoverIndex","list","callBack","moving","newOrder","splice","getBoxTarget","parameter","hover","monitor","component","getItem","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","getSelectedBoxSource","isDragging","beginDrag","parentDropTarget","TagControlContext","DecoratedClass","getInput","inputs","InputSelectors","getValue","getIsValid","ownProps","dispatch","changeDirtyState","mergeProps","initialMultiBoxIDs","undefined","MultilineBoxSelectors","getIds","multilineIds","multiBoxState","DraggableContainerType","getIcon","visibility","isDraggable","cursor","draggableIconProps","connectDragSource","opacity","content","connectDropTarget","connectDragPreview","DnDContainer","connect","dropTarget","dragSource","dragPreview","makeMapStateToProps","getStateProps","multilineBoxIds","mapDispatchToProps","onMount","defaultIDs","onUnmount","removeBox","updateBox","ids","initialData","getInitialDataMappedWithBoxIDs","getInitialBoxesWithAnExtraBox","push","getLastBoxProps","getData","length","getParentProps","parentId","componentDidMount","defaultContainerNode","multilineBoxContainer","Component","getWrapper","map","boxProps","parentProps","multilineBoxWithDnD","onReorder","getDnDWrapper","supplierProps","MultilineBoxWithDnD","defaultMultilineBoxRemoveButtonClasses","multilineBoxWithRemoveButton","getRemoveButtonNode","remove","MultilineBoxWithRemoveButton"],"mappings":"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","file":"assets/1004.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {Button} from '../../button/Button';\r\nimport {InputConnected} from '../../input/InputConnected';\r\nimport {IMultilineParentProps, IMultilineSingleBoxProps, MultilineBox} from '../MultilineBox';\r\n\r\nexport type IExampleData = IMultilineSingleBoxProps<IMultilineBoxExamplesProps>;\r\n\r\nexport interface IMultilineBoxExamplesProps {\r\n    name: string;\r\n    displayName: string;\r\n}\r\n\r\nexport class WrapperExample extends React.Component<{}, {id: string; data: IMultilineBoxExamplesProps[]}> {\r\n    constructor(props: any, state: any) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            id: UUID.generate(),\r\n            data: [\r\n                {\r\n                    name: 'Pear',\r\n                    displayName: 'Paris',\r\n                },\r\n            ],\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"my2\">\r\n                    <Button\r\n                        name={'Update initial data sent to the multiline box'}\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                data: [\r\n                                    {\r\n                                        name: 'Banana',\r\n                                        displayName: 'Bahamas',\r\n                                    },\r\n                                    {\r\n                                        name: 'Tomato',\r\n                                        displayName: 'Tacoma',\r\n                                    },\r\n                                ],\r\n                            });\r\n                        }}\r\n                    />\r\n                </div>\r\n                <MultilineBox<IMultilineBoxExamplesProps>\r\n                    id={this.state.id}\r\n                    data={this.state.data}\r\n                    renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                        _.map(data, (cData: IExampleData) => (\r\n                            <div key={cData.id}>\r\n                                <InputConnected\r\n                                    id={`${cData.id}1`}\r\n                                    classes=\"mt0 inline-block mx1\"\r\n                                    defaultValue={cData.props.name}\r\n                                    validate={(value: string) => cData.props.name === value}\r\n                                    validateOnChange\r\n                                    onChange={(value: string) => {\r\n                                        if (value !== '' && cData.isLast) {\r\n                                            defaultProps.addNewBox();\r\n                                        }\r\n                                    }}\r\n                                />\r\n                                <InputConnected\r\n                                    id={`${cData.id}2`}\r\n                                    classes=\"mt0 inline-block mx1\"\r\n                                    defaultValue={cData.props.displayName}\r\n                                />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    defaultProps={{\r\n                        name: '',\r\n                        displayName: '',\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import * as VaporSVG from 'coveo-styleguide';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {IButtonProps} from '../../button/Button';\r\nimport {InputConnected} from '../../input/InputConnected';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {multilineBoxContainer} from '../hoc/MultilineBoxContainer';\r\nimport {multilineBoxWithDnD} from '../hoc/MultilineBoxWithDnD';\r\nimport {\r\n    defaultMultilineBoxRemoveButtonClasses,\r\n    multilineBoxWithRemoveButton,\r\n} from '../hoc/MultilineBoxWithRemoveButton';\r\nimport {IMultilineParentProps, IMultilineSingleBoxProps, MultilineBox} from '../MultilineBox';\r\nimport {IExampleData, IMultilineBoxExamplesProps, WrapperExample} from './MultilineBoxExampleUtils';\r\n\r\nconst containerNodeExample = (\r\n    child: React.ReactNode,\r\n    data: Array<IMultilineSingleBoxProps<IMultilineBoxExamplesProps>>,\r\n    index: number\r\n) => (\r\n    <div key={`${data[index].id}Container`} className={'mod-border p1 flex'}>\r\n        {child}\r\n    </div>\r\n);\r\n\r\nconst containerNodeMaxWidthExample = (\r\n    child: React.ReactNode,\r\n    data: Array<IMultilineSingleBoxProps<IMultilineBoxExamplesProps>>,\r\n    index: number\r\n) => (\r\n    <div key={`${data[index].id}Container`} className={'mod-border p1 flex'} style={{width: '500px', height: '70px'}}>\r\n        {child}\r\n    </div>\r\n);\r\n\r\nconst MultilineBoxWithDefaultContainer = _.compose(multilineBoxContainer())(MultilineBox);\r\n\r\nconst MultilineBoxWithContainer = _.compose(\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst DefaultMultilineBoxWithRemoveButton = _.compose(multilineBoxWithRemoveButton())(MultilineBox);\r\n\r\nconst MultilineBoxWithRemoveButton = _.compose(\r\n    multilineBoxWithRemoveButton({\r\n        containerNode: (\r\n            child: React.ReactNode,\r\n            getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode\r\n        ) => (\r\n            <>\r\n                {child}\r\n                {getRemoveButton({\r\n                    classes: [defaultMultilineBoxRemoveButtonClasses, 'flex-auto full-content-y'],\r\n                })}\r\n            </>\r\n        ),\r\n    }),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeMaxWidthExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxWithContainerAndTwoRemoveButton = _.compose(\r\n    multilineBoxWithRemoveButton({\r\n        containerNode: (\r\n            child: React.ReactNode,\r\n            getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode\r\n        ) => (\r\n            <>\r\n                {child}\r\n                {getRemoveButton({\r\n                    classes: [defaultMultilineBoxRemoveButtonClasses, 'bg-light-grey full-content-y'],\r\n                })}\r\n            </>\r\n        ),\r\n    }),\r\n    multilineBoxContainer({\r\n        containerNode: (\r\n            child: React.ReactNode,\r\n            data: Array<IMultilineSingleBoxProps<IMultilineBoxExamplesProps>>,\r\n            index: number\r\n        ) => (\r\n            <div key={`${data[index].id}Container`} className={'p1 bg-light-grey'}>\r\n                {child}\r\n            </div>\r\n        ),\r\n    }),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxWithDragAndDrop = _.compose(multilineBoxWithDnD())(MultilineBox);\r\n\r\nconst ComplexMultilineBox = _.compose(\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxWithDnD(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst ComplexMultilineBox2 = _.compose(\r\n    multilineBoxWithDnD({\r\n        DnDContainerProps: {\r\n            draggableContainerProps: {\r\n                className: 'inline-flex center-align',\r\n            },\r\n        },\r\n    }),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst ComplexMultilineBox3 = _.compose(\r\n    multilineBoxWithDnD({\r\n        DnDContainerProps: {\r\n            draggableContainerProps: {\r\n                className: 'inline-flex center-align',\r\n            },\r\n            icon: <Svg svgName={VaporSVG.svg.dragDrop.name} svgClass=\"icon fill-medium-grey mod-lg\" />,\r\n        },\r\n    }),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nexport class MultilineBoxExamples extends React.PureComponent {\r\n    render() {\r\n        return (\r\n            <div className=\"my2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with initial data</label>\r\n                    <MultilineBox<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <div key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: '',\r\n                            displayName: '',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Multiline box with initial data and a button to update data\r\n                    </label>\r\n                    <WrapperExample />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with a default container</label>\r\n                    <MultilineBoxWithDefaultContainer<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <div key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: '',\r\n                            displayName: '',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with default values</label>\r\n                    <MultilineBox<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <div key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: 'Patate',\r\n                            displayName: 'Pasdfsa',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with a container</label>\r\n                    <MultilineBoxWithContainer<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: '',\r\n                            displayName: '',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with a default hoc remove button</label>\r\n                    <DefaultMultilineBoxWithRemoveButton<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Multiline box with a hoc remove button wrapped in a container to style the button position right\r\n                    </label>\r\n                    <MultilineBoxWithRemoveButton<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Multiline box with 2 containers to wrap a remove button\r\n                    </label>\r\n                    <MultilineBoxWithContainerAndTwoRemoveButton<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with drag and drop</label>\r\n                    <MultilineBoxWithDragAndDrop<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Complex multiline box hoc</label>\r\n                    <ComplexMultilineBox<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Complex multiline box hoc without icon when dragging</label>\r\n                    <ComplexMultilineBox2<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => {\r\n                                            if (value !== '') {\r\n                                                if (cData.isLast) {\r\n                                                    defaultProps.addNewBox();\r\n                                                }\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        }}\r\n                                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                                        validateOnChange\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Complex multiline box hoc with a custom icon for the drag and drop\r\n                    </label>\r\n                    <ComplexMultilineBox3<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => {\r\n                                            if (value !== '') {\r\n                                                if (cData.isLast) {\r\n                                                    defaultProps.addNewBox();\r\n                                                }\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        }}\r\n                                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                                        validateOnChange\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as _ from 'underscore';\r\n\r\nexport type ConfigSupplier<C = {}> = C | ((...args: any[]) => C);\r\n\r\nexport const HocUtils = {\r\n    supplyConfig: <C>(supplier: ConfigSupplier<C>): C => (_.isFunction(supplier) ? supplier() : supplier),\r\n};\r\n","// tslint:disable\r\nexport class UUID {\r\n    // TODO: replace for https://www.npmjs.com/package/uuid\r\n    static generate() {\r\n        // Source: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n        let d = Date.now();\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\r\n            const r = (d + Math.random() * 16) % 16 | 0;\r\n            d = Math.floor(d / 16);\r\n            return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n        });\r\n    }\r\n}\r\n// tslint:enable\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\nimport {contains, isUndefined, uniqueId} from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {PropsToOmitUtils} from '../../utils/PropsToOmitUtils';\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IInputState} from './InputReducers';\r\nimport {ILabelProps, Label} from './Label';\r\n\r\nconst validatedInputTypes: string[] = ['number', 'text', 'password'];\r\n\r\ntype IInputNativeTagOwnProps = Omit<\r\n    React.AllHTMLAttributes<HTMLInputElement>,\r\n    'defaultValue' | 'onClick' | 'onChange' | 'onBlur' | 'value'\r\n>;\r\n\r\nexport interface IInputAdditionalOwnProps {\r\n    id?: string;\r\n    classes?: IClassName;\r\n    innerInputClasses?: IClassName;\r\n    validate?: (value: any) => boolean;\r\n    labelTitle?: React.ReactNode;\r\n    labelProps?: ILabelProps;\r\n    validateOnChange?: boolean;\r\n    disabledOnMount?: boolean;\r\n    validateOnMount?: boolean;\r\n    disabledTooltip?: string;\r\n    minimum?: number /* @deprecated use min instead */;\r\n    maximum?: number /* @deprecated use max instead */;\r\n    onBlur?: (value: string) => void;\r\n    defaultValue?: string;\r\n}\r\n\r\nexport interface IInputNativeTagStateProps {\r\n    value?: string;\r\n    checked?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IInputAdditionalStateProps {\r\n    valid?: boolean;\r\n    indeterminate?: boolean;\r\n}\r\n\r\nexport interface IInputStateProps extends IInputNativeTagStateProps, IInputAdditionalStateProps {}\r\n\r\nexport interface IInputDispatchProps {\r\n    onDestroy?: () => void;\r\n    onRender?: (value?: string, valid?: boolean, disabled?: boolean) => void;\r\n    onChange?: (value?: string, valid?: boolean) => void;\r\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n    changeDirtyState?: (value?: string, valid?: boolean) => void;\r\n}\r\n\r\nconst inputPropsToOmit = keys<IInputAdditionalOwnProps & IInputAdditionalStateProps & IInputDispatchProps>();\r\n\r\nexport interface IInputOwnProps extends IInputAdditionalOwnProps, IInputNativeTagOwnProps {}\r\n\r\nexport interface IInputProps extends IInputOwnProps, Partial<IInputStateProps>, Partial<IInputDispatchProps> {}\r\n\r\nexport interface IInputComponentState {\r\n    valid: boolean;\r\n}\r\n\r\nexport class Input extends React.Component<IInputProps, IInputComponentState> {\r\n    private innerInput: HTMLInputElement;\r\n\r\n    static defaultProps: Partial<IInputProps> = {\r\n        id: uniqueId('input'),\r\n        type: 'text',\r\n        valid: true,\r\n        labelTitle: '',\r\n        required: true,\r\n    };\r\n\r\n    constructor(props: IInputProps, state: IInputState) {\r\n        super(props, state);\r\n        this.state = {\r\n            valid: this.props.valid,\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            // undefined validOnMount will default to true in the state\r\n            const validOnMount =\r\n                this.props.validateOnMount && this.props.validate && this.props.validate(this.props.defaultValue || '');\r\n\r\n            this.props.onRender(this.props.defaultValue, validOnMount, this.props.disabledOnMount);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IInputProps) {\r\n        if (this.props.valid !== prevProps.valid) {\r\n            this.validate();\r\n        }\r\n\r\n        if (prevProps.value !== this.props.value && this.innerInput) {\r\n            this.innerInput.value = this.props.value;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.innerInput.value = '';\r\n    }\r\n\r\n    getInnerValue(): string {\r\n        return (this.innerInput && this.innerInput.value) || '';\r\n    }\r\n\r\n    validate() {\r\n        this.setState({\r\n            valid: this.props.valid && !(this.props.validate && !this.props.validate(this.getInnerValue())),\r\n        });\r\n    }\r\n\r\n    private handleBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(this.getInnerValue());\r\n        }\r\n    }\r\n\r\n    private handleChange() {\r\n        if (this.props.onChange) {\r\n            const validOnChange =\r\n                this.props.validateOnChange && this.props.validate && this.props.validate(this.getInnerValue());\r\n            this.props.onChange(this.getInnerValue(), validOnChange);\r\n        }\r\n    }\r\n\r\n    private handleClick(e: React.MouseEvent<HTMLElement>) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n\r\n    private handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(event);\r\n        }\r\n    }\r\n\r\n    private getLabel(): React.ReactNode {\r\n        const {labelProps, labelTitle} = this.props;\r\n        if (typeof labelTitle === 'string') {\r\n            return labelTitle || this.props.validate ? (\r\n                <Label key={this.props.id + 'label'} htmlFor={this.props.id} {...labelProps}>\r\n                    {labelTitle}\r\n                </Label>\r\n            ) : null;\r\n        } else {\r\n            return labelTitle;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames(\r\n            'input-wrapper validate',\r\n            {\r\n                'input-field': contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.classes\r\n        );\r\n        const innerInputClasses = classNames(\r\n            {\r\n                invalid: !this.state.valid && contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.innerInputClasses\r\n        );\r\n\r\n        const inputElements = [\r\n            <input\r\n                key={this.props.id}\r\n                id={this.props.id}\r\n                className={innerInputClasses}\r\n                defaultValue={!isUndefined(this.props.value) ? this.props.value : this.props.defaultValue}\r\n                ref={(innerInput: HTMLInputElement) => (this.innerInput = innerInput)}\r\n                onBlur={() => this.handleBlur()}\r\n                onChange={() => this.handleChange()}\r\n                onKeyUp={(event: React.KeyboardEvent<HTMLInputElement>) => this.handleKeyUp(event)}\r\n                min={this.props.minimum}\r\n                max={this.props.maximum}\r\n                {..._.omit(this.props, [...PropsToOmitUtils.input, ...inputPropsToOmit])}\r\n            />,\r\n            this.getLabel(),\r\n            this.props.children,\r\n        ];\r\n\r\n        return this.props.disabled && this.props.disabledTooltip ? (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                <Tooltip title={this.props.disabledTooltip} placement={TooltipPlacement.Right}>\r\n                    {inputElements}\r\n                </Tooltip>\r\n            </div>\r\n        ) : (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                {inputElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const internalComponentPropsToOmit: string[] = ['children', 'dangerouslySetInnerHTML'];\r\n\r\n// We omit those props for the input native tag because those props are reserved for the Input component and\r\n// to stay compatible with the old interface\r\nconst inputTagPropsToOmit: string[] = [\r\n    ...internalComponentPropsToOmit,\r\n    'defaultValue',\r\n    'onClick',\r\n    'onChange',\r\n    'onBlur',\r\n    'value',\r\n    'valid',\r\n];\r\n\r\nexport const PropsToOmitUtils = {\r\n    internal: internalComponentPropsToOmit,\r\n    input: inputTagPropsToOmit,\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ILabelProps {\r\n    type?: string;\r\n    classes?: string[];\r\n    validMessage?: string;\r\n    invalidMessage?: string;\r\n}\r\n\r\nexport class Label extends React.Component<ILabelProps & React.HTMLProps<HTMLLabelElement>, any> {\r\n    render() {\r\n        const classes = classNames(this.props.classes);\r\n        const {validMessage, invalidMessage, children, ...attributes} = this.props;\r\n        return (\r\n            <label\r\n                className={classes}\r\n                data-valid-message={validMessage}\r\n                data-invalid-message={invalidMessage}\r\n                {...attributes}\r\n            >\r\n                {children}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","import {IDragSource, IDropTarget} from 'react-dnd';\r\nimport {DragDropContext} from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport {findDOMNode} from 'react-dom';\r\nimport * as _ from 'underscore';\r\nimport {DnDContainer, IDraggableContainerOwnProps} from './DnDContainer';\r\n\r\nconst move = (dragIndex: number, hoverIndex: number, list: any[], callBack: (listReorder: any[]) => void) => {\r\n    const moving = list[dragIndex];\r\n    const newOrder = [...list];\r\n\r\n    // Remove the element at position dragIndex\r\n    newOrder.splice(dragIndex, 1);\r\n\r\n    // Insert the moving element at hoverIndex\r\n    newOrder.splice(hoverIndex, 0, moving);\r\n\r\n    callBack(newOrder);\r\n};\r\n\r\nconst getBoxTarget = (parameter: string): IDropTarget => ({\r\n    hover(props: IDraggableContainerOwnProps, monitor: any, component?: DnDContainer): void {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = (findDOMNode(component) as Element).getBoundingClientRect();\r\n\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.move(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n    drop(props: IDraggableContainerOwnProps, monitor: any) {\r\n        monitor.getItem()[parameter] = null;\r\n    },\r\n});\r\n\r\nconst getSelectedBoxSource = (parameter: string): IDragSource => ({\r\n    isDragging(props: IDraggableContainerOwnProps, monitor: any) {\r\n        return props.id === monitor.getItem()[parameter];\r\n    },\r\n    beginDrag(props: IDraggableContainerOwnProps) {\r\n        return {...props};\r\n    },\r\n});\r\n\r\n// This object is usefull when the drag happen outside of the DraggableSelectedOption,\r\n// instead of making the child handle it, the parent catches the event\r\nconst parentDropTarget = {\r\n    drop: _.noop,\r\n};\r\n\r\nlet context: any;\r\nconst TagControlContext = (DecoratedClass: any) => {\r\n    if (!context) {\r\n        context = DragDropContext(HTML5Backend);\r\n    }\r\n    return context(DecoratedClass);\r\n};\r\n\r\nexport const DnDUtils = {\r\n    move,\r\n    getBoxTarget,\r\n    getSelectedBoxSource,\r\n    parentDropTarget,\r\n    TagControlContext,\r\n};\r\n","import {createSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IInputState} from './InputReducers';\r\n\r\nconst getInput = (state: IReactVaporState, props: {id: string}): IInputState =>\r\n    _.findWhere(state.inputs, {id: props.id});\r\n\r\nconst getValue = createSelector(getInput, (input: IInputState): string => input && input.value);\r\n\r\nconst getIsValid = createSelector(getInput, (input: IInputState): boolean => !!input && input.valid);\r\n\r\nexport const InputSelectors = {\r\n    getValue,\r\n    getIsValid,\r\n    getInput,\r\n};\r\n","import {connect} from 'react-redux';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IInputDispatchProps, IInputProps, IInputStateProps, Input} from './Input';\r\nimport {addInput, changeInputValue, removeInput} from './InputActions';\r\nimport {InputSelectors} from './InputSelectors';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IInputProps): IInputStateProps => {\r\n    const input = InputSelectors.getInput(state, {id: ownProps.id});\r\n    return {\r\n        valid: input && input.valid,\r\n        value: input && input.value,\r\n        disabled: input && input.disabled,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IInputProps): IInputDispatchProps => ({\r\n    onRender: (value: string = '', valid = true, disabled = false) =>\r\n        dispatch(addInput(ownProps.id, value, valid, disabled)),\r\n    onDestroy: () => dispatch(removeInput(ownProps.id)),\r\n    onChange: (value: string, valid = true) => {\r\n        dispatch(changeInputValue(ownProps.id, value, valid));\r\n        ownProps.changeDirtyState?.(value);\r\n    },\r\n});\r\n\r\nexport const InputConnected: React.ComponentClass<IInputProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Input);\r\n","import {createSelector} from 'reselect';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IStringListState} from '../../reusableState/customList/StringListReducers';\r\n\r\nconst initialMultiBoxIDs: IStringListState = {id: undefined, list: []};\r\nconst getMultiBoxIDs = (state: Partial<IReactVaporState>, props: {id: string}): IStringListState =>\r\n    (state && state.multilineIds && state.multilineIds[props.id]) || initialMultiBoxIDs;\r\n\r\nconst multiBoxIDsCombiner = (multiBoxState: IStringListState): string[] => (multiBoxState && multiBoxState.list) || [];\r\n\r\nconst getMultiBoxIDsList: (state: Partial<IReactVaporState>, props: {id: string}) => string[] = createSelector(\r\n    getMultiBoxIDs,\r\n    multiBoxIDsCombiner\r\n);\r\n\r\nexport const MultilineBoxSelectors = {\r\n    getIds: getMultiBoxIDsList,\r\n};\r\n","import * as VaporSVG from 'coveo-styleguide';\r\nimport * as React from 'react';\r\nimport {DragSource, DropTarget} from 'react-dnd';\r\nimport {Svg} from '../svg/Svg';\r\nimport {DnDUtils} from './DnDUtils';\r\n\r\nexport interface IDraggableContainerOwnProps {\r\n    id: string;\r\n    index: number;\r\n    move: (dragIndex: number, hoverIndex: number) => void;\r\n    child: any;\r\n    draggableContainerProps?: Partial<React.HTMLProps<HTMLDivElement>>;\r\n    draggableIconProps?: React.HTMLProps<HTMLDivElement>;\r\n    icon: React.ReactNode;\r\n}\r\n\r\nexport interface IDraggableContainerDnDProps {\r\n    isDraggable?: boolean;\r\n    isDragging?: boolean;\r\n    connectDragSource?: any;\r\n    connectDropTarget?: any;\r\n    connectDragPreview?: any;\r\n}\r\n\r\nexport const DraggableContainerType = 'CONTAINER_BOX';\r\n\r\n@DropTarget(DraggableContainerType, DnDUtils.getBoxTarget('id'), (connect: any) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))\r\n@DragSource(DraggableContainerType, DnDUtils.getSelectedBoxSource('id'), (connect: any, monitor: any) => ({\r\n    connectDragSource: connect.dragSource(),\r\n    connectDragPreview: connect.dragPreview(),\r\n    isDragging: monitor.isDragging(),\r\n}))\r\nexport class DnDContainer extends React.Component<IDraggableContainerOwnProps & IDraggableContainerDnDProps> {\r\n    static defaultProps = {\r\n        isDraggable: true,\r\n        draggableContainerProps: {\r\n            className: 'flex flex-center',\r\n        },\r\n        draggableIconProps: {},\r\n        icon: <Svg svgName={VaporSVG.svg.dragDrop.name} svgClass=\"icon\" />,\r\n    };\r\n\r\n    private getIcon() {\r\n        const icon: React.ReactNode = (\r\n            <div\r\n                style={{\r\n                    visibility: this.props.isDraggable ? 'visible' : 'hidden',\r\n                    cursor: this.props.isDraggable ? 'move' : 'default',\r\n                }}\r\n                {...this.props.draggableIconProps}\r\n            >\r\n                {this.props.icon}\r\n            </div>\r\n        );\r\n        return this.props.isDraggable ? this.props.connectDragSource(icon) : icon;\r\n    }\r\n\r\n    render() {\r\n        const opacity = this.props.isDragging ? 0 : 1;\r\n\r\n        const content = (\r\n            <div {...this.props.draggableContainerProps} style={{opacity}}>\r\n                {this.getIcon()}\r\n                {this.props.child && React.cloneElement(this.props.child, this.props.child.props)}\r\n            </div>\r\n        );\r\n\r\n        return this.props.isDraggable ? this.props.connectDropTarget(this.props.connectDragPreview(content)) : content;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {\r\n    addStringList,\r\n    addValueStringList,\r\n    removeStringList,\r\n    removeValueStringList,\r\n    updateValueStringList,\r\n} from '../../reusableState/customList/StringListActions';\r\nimport {deepClone} from '../../utils/CloneUtils';\r\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\r\nimport {UUID} from '../../utils/UUID';\r\nimport {IMultiSelectOwnProps} from '../select/MultiSelectConnected';\r\nimport {MultilineBoxSelectors} from './MultilineBoxSelector';\r\n\r\nexport interface IMultilineSingleBoxProps<T = any> {\r\n    id: string;\r\n    isLast: boolean;\r\n    props: T;\r\n}\r\n\r\nexport interface IMultilineParentProps {\r\n    parentId: string;\r\n    removeBox: (id: string) => void;\r\n    addNewBox: () => void;\r\n}\r\n\r\nexport interface IMultilineBoxOwnProps<T = any> {\r\n    id: string;\r\n    data: T[];\r\n    renderBody?: (data: Array<IMultilineSingleBoxProps<T>>, parentProps: IMultilineParentProps) => React.ReactNode;\r\n    defaultProps?: T;\r\n    renderWrapper?: (\r\n        children: React.ReactNode,\r\n        boxProps: IMultilineSingleBoxProps<T>,\r\n        parentProps: IMultilineParentProps\r\n    ) => React.ReactNode;\r\n}\r\n\r\nexport interface IMultilineBoxStateProps {\r\n    multilineBoxIds: string[];\r\n}\r\n\r\nexport interface IMultilineBoxDispatchProps {\r\n    onMount: (defaultIds: string[]) => void;\r\n    onUnmount: () => void;\r\n    removeBox: (id: string) => void;\r\n    addNewBox: () => void;\r\n    updateBox: (defaultIds: string[]) => void;\r\n}\r\n\r\nexport interface IMultilineBoxProps<T = any>\r\n    extends IMultilineBoxOwnProps<T>,\r\n        Partial<IMultilineBoxStateProps>,\r\n        Partial<IMultilineBoxDispatchProps> {}\r\n\r\nconst makeMapStateToProps = () => {\r\n    const getStateProps = createStructuredSelector({\r\n        multilineBoxIds: MultilineBoxSelectors.getIds,\r\n    });\r\n\r\n    return (state: IReactVaporState, ownProps: IMultiSelectOwnProps): IMultilineBoxStateProps =>\r\n        getStateProps(state, {id: ownProps.id});\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IMultilineBoxOwnProps): IMultilineBoxDispatchProps => ({\r\n    onMount: (defaultIDs: string[]) => dispatch(addStringList(ownProps.id, defaultIDs)),\r\n    onUnmount: () => dispatch(removeStringList(ownProps.id)),\r\n    removeBox: (id: string) => dispatch(removeValueStringList(ownProps.id, id)),\r\n    addNewBox: () => dispatch(addValueStringList(ownProps.id, UUID.generate())),\r\n    updateBox: (ids: string[]) => dispatch(updateValueStringList(ownProps.id, ids)),\r\n});\r\n\r\n@ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\nexport class MultilineBox<T> extends React.PureComponent<IMultilineBoxProps<T>> {\r\n    private initialData: {[id: string]: T};\r\n\r\n    static defaultProps = {\r\n        renderBody: () => <div />,\r\n        defaultProps: {},\r\n    };\r\n\r\n    constructor(props: IMultilineBoxProps<T>, state: any) {\r\n        super(props, state);\r\n\r\n        this.initialData = this.getInitialDataMappedWithBoxIDs();\r\n    }\r\n\r\n    private getInitialDataMappedWithBoxIDs(): {[id: string]: T} {\r\n        const initialData: {[id: string]: T} = {};\r\n        _.each(this.props.data, (data: T) => {\r\n            initialData[UUID.generate()] = data;\r\n        });\r\n        return initialData;\r\n    }\r\n\r\n    private getInitialBoxesWithAnExtraBox(): string[] {\r\n        const ids: string[] = _.keys(this.initialData);\r\n        ids.push(UUID.generate());\r\n        return ids;\r\n    }\r\n\r\n    private getLastBoxProps(): T {\r\n        return deepClone(this.props.defaultProps || {});\r\n    }\r\n\r\n    private getData(): Array<IMultilineSingleBoxProps<T>> {\r\n        return _.map(this.props.multilineBoxIds, (id: string, index: number) => {\r\n            const props: T = this.initialData[id] || this.getLastBoxProps();\r\n            return {\r\n                id,\r\n                isLast: index === this.props.multilineBoxIds.length - 1,\r\n                props,\r\n            };\r\n        });\r\n    }\r\n\r\n    private getParentProps(): IMultilineParentProps {\r\n        return {\r\n            removeBox: (id: string) => this.props.removeBox(id),\r\n            addNewBox: () => this.props.addNewBox(),\r\n            parentId: this.props.id,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IMultilineBoxProps<T>>) {\r\n        if (!_.isEqual(prevProps.data, this.props.data)) {\r\n            this.initialData = this.getInitialDataMappedWithBoxIDs();\r\n            this.props.updateBox(this.getInitialBoxesWithAnExtraBox());\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onMount(this.getInitialBoxesWithAnExtraBox());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onUnmount();\r\n    }\r\n\r\n    render() {\r\n        return this.props.renderBody(this.getData(), this.getParentProps());\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {ConfigSupplier, HocUtils} from '../../../utils/HocUtils';\r\nimport {\r\n    IMultilineBoxDispatchProps,\r\n    IMultilineBoxOwnProps,\r\n    IMultilineParentProps,\r\n    IMultilineSingleBoxProps,\r\n} from '../MultilineBox';\r\n\r\ntype MultilineBoxContainerComponent<T = any> = React.ComponentClass<IMultilineBoxOwnProps<T>>;\r\n\r\nexport interface IMultilineBoxContainerSupplierProps<T = any> {\r\n    containerNode?: (\r\n        child: React.ReactNode,\r\n        data: Array<IMultilineSingleBoxProps<T>>,\r\n        index: number\r\n    ) => React.ReactNode;\r\n}\r\n\r\nexport interface IMultilineBoxContainerProps<T>\r\n    extends IMultilineBoxContainerSupplierProps<T>,\r\n        IMultilineBoxOwnProps<T>,\r\n        Partial<IMultilineBoxDispatchProps> {}\r\n\r\nconst defaultContainerNode = (child: React.ReactNode, data: IMultilineSingleBoxProps[], index: number) => (\r\n    <div key={`${(data.length && data[index].id) || index}Container`}>{child}</div>\r\n);\r\n\r\nexport const multilineBoxContainer = (\r\n    supplier: ConfigSupplier<IMultilineBoxContainerSupplierProps> = {containerNode: defaultContainerNode}\r\n) => (Component: MultilineBoxContainerComponent): MultilineBoxContainerComponent => {\r\n    class MultilineBoxContainer<T> extends React.PureComponent<IMultilineBoxContainerProps<T>> {\r\n        static defaultProps = {\r\n            renderBody: () => <div />,\r\n        };\r\n\r\n        private getWrapper(children: React.ReactNode, data: Array<IMultilineSingleBoxProps<T>>) {\r\n            return React.Children.map(children, (child: React.ReactNode, index: number) =>\r\n                HocUtils.supplyConfig(supplier).containerNode(child, data, index)\r\n            );\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Component\r\n                    {...this.props}\r\n                    renderBody={(boxProps: Array<IMultilineSingleBoxProps<T>>, parentProps: IMultilineParentProps) =>\r\n                        this.getWrapper(this.props.renderBody(boxProps, parentProps), boxProps)\r\n                    }\r\n                >\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return MultilineBoxContainer;\r\n};\r\n","import * as React from 'react';\r\nimport {DropTarget} from 'react-dnd';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {reorderStringList} from '../../../reusableState/customList/StringListActions';\r\nimport {ConfigSupplier, HocUtils} from '../../../utils/HocUtils';\r\nimport {IDispatch, ReduxConnect} from '../../../utils/ReduxUtils';\r\nimport {DnDContainer, DraggableContainerType, IDraggableContainerOwnProps} from '../../dragAndDrop/DnDContainer';\r\nimport {DnDUtils} from '../../dragAndDrop/DnDUtils';\r\nimport {IMultiSelectOwnProps} from '../../select/MultiSelectConnected';\r\nimport {\r\n    IMultilineBoxDispatchProps,\r\n    IMultilineBoxOwnProps,\r\n    IMultilineBoxStateProps,\r\n    IMultilineParentProps,\r\n    IMultilineSingleBoxProps,\r\n} from '../MultilineBox';\r\nimport {MultilineBoxSelectors} from '../MultilineBoxSelector';\r\n\r\ntype MultilineBoxWithDnDComponent<T = any> = React.ComponentClass<IMultilineBoxOwnProps<T>>;\r\n\r\nexport interface IMultilineBoxWithDnDSupplierProps {\r\n    DnDContainerProps?: Partial<IDraggableContainerOwnProps>;\r\n}\r\n\r\nexport interface IMultilineBoxWithDnDDispatchProps {\r\n    onReorder?: (list: string[]) => void;\r\n}\r\n\r\nexport interface IMultilineBoxWithDnDProps<T>\r\n    extends IMultilineBoxWithDnDSupplierProps,\r\n        IMultilineBoxStateProps,\r\n        IDraggableContainerOwnProps,\r\n        IMultilineBoxOwnProps<T>,\r\n        Partial<IMultilineBoxWithDnDDispatchProps>,\r\n        Partial<IMultilineBoxDispatchProps> {}\r\n\r\nexport const multilineBoxWithDnD = (supplier: ConfigSupplier<IMultilineBoxWithDnDSupplierProps> = {}) => (\r\n    Component: MultilineBoxWithDnDComponent\r\n): MultilineBoxWithDnDComponent => {\r\n    const makeMapStateToProps = () => {\r\n        const getStateProps = createStructuredSelector({\r\n            multilineBoxIds: MultilineBoxSelectors.getIds,\r\n        });\r\n\r\n        return (state: IReactVaporState, ownProps: IMultiSelectOwnProps): IMultilineBoxStateProps =>\r\n            getStateProps(state, {id: ownProps.id});\r\n    };\r\n\r\n    const mapDispatchToProps = (\r\n        dispatch: IDispatch,\r\n        ownProps: IMultilineBoxOwnProps\r\n    ): IMultilineBoxWithDnDDispatchProps => ({\r\n        onReorder: (list: string[]) => dispatch(reorderStringList(ownProps.id, list)),\r\n    });\r\n\r\n    @DropTarget(DraggableContainerType, DnDUtils.parentDropTarget, (connect: any) => ({\r\n        connectDropTarget: connect.dropTarget(),\r\n    }))\r\n    @ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\n    class MultilineBoxWithDnD<T> extends React.PureComponent<IMultilineBoxWithDnDProps<T>> {\r\n        static defaultProps = {\r\n            renderBody: () => <div />,\r\n        };\r\n\r\n        private getDnDWrapper(children: React.ReactNode, data: Array<IMultilineSingleBoxProps<T>>) {\r\n            const supplierProps: IMultilineBoxWithDnDSupplierProps = {\r\n                ...{\r\n                    DnDContainerProps: {},\r\n                },\r\n                ...HocUtils.supplyConfig(supplier),\r\n            };\r\n            return React.Children.map(children, (child: React.ReactNode, index: number) => {\r\n                const isLast = index === data.length - 1;\r\n                const id: string = (data.length && data[index].id) || index.toString();\r\n                return (\r\n                    <DnDContainer\r\n                        id={id}\r\n                        key={`${id}DnD`}\r\n                        index={index}\r\n                        move={(dragIndex: number, hoverIndex: number) =>\r\n                            DnDUtils.move(dragIndex, hoverIndex, this.props.multilineBoxIds, this.props.onReorder)\r\n                        }\r\n                        child={child}\r\n                        isDraggable={!isLast}\r\n                        {...supplierProps.DnDContainerProps}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Component\r\n                    {...this.props}\r\n                    renderBody={(boxProps: Array<IMultilineSingleBoxProps<T>>, parentProps: IMultilineParentProps) =>\r\n                        this.getDnDWrapper(this.props.renderBody(boxProps, parentProps), boxProps)\r\n                    }\r\n                >\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return DnDUtils.TagControlContext(MultilineBoxWithDnD);\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as VaporSVG from 'coveo-styleguide';\r\nimport * as React from 'react';\r\nimport {removeValueStringList} from '../../../reusableState/customList/StringListActions';\r\nimport {ConfigSupplier, HocUtils} from '../../../utils/HocUtils';\r\nimport {IDispatch, ReduxConnect} from '../../../utils/ReduxUtils';\r\nimport {Button, IButtonProps} from '../../button/Button';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {\r\n    IMultilineBoxDispatchProps,\r\n    IMultilineBoxOwnProps,\r\n    IMultilineParentProps,\r\n    IMultilineSingleBoxProps,\r\n} from '../MultilineBox';\r\n\r\ntype MultilineBoxWithRemoveButtonComponent<T = any> = React.ComponentClass<IMultilineBoxOwnProps<T>>;\r\n\r\nexport interface IMultilineBoxWithRemoveButtonSupplierProps<T = any> {\r\n    containerNode?: (\r\n        child: React.ReactNode,\r\n        getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode,\r\n        data: Array<IMultilineSingleBoxProps<T>>,\r\n        index: number\r\n    ) => React.ReactNode;\r\n}\r\n\r\nexport interface IMultilineBoxWithRemoveButtonProps<T>\r\n    extends IMultilineBoxWithRemoveButtonSupplierProps<T>,\r\n        IMultilineBoxOwnProps<T>,\r\n        Partial<IMultilineBoxDispatchProps> {}\r\n\r\nconst defaultContainerNode = (\r\n    child: React.ReactNode,\r\n    getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode,\r\n    data: IMultilineSingleBoxProps[],\r\n    index: number\r\n) => (\r\n    <React.Fragment key={`${(data.length && data[index].id) || index}RemoveButton`}>\r\n        {child}\r\n        {getRemoveButton()}\r\n    </React.Fragment>\r\n);\r\n\r\nexport const defaultMultilineBoxRemoveButtonClasses: string = 'center-align mod-no-border';\r\n\r\nexport const multilineBoxWithRemoveButton = (\r\n    supplier: ConfigSupplier<IMultilineBoxWithRemoveButtonSupplierProps> = {containerNode: defaultContainerNode}\r\n) => (Component: MultilineBoxWithRemoveButtonComponent): MultilineBoxWithRemoveButtonComponent => {\r\n    const mapDispatchToProps = (\r\n        dispatch: IDispatch,\r\n        ownProps: IMultilineBoxOwnProps\r\n    ): Partial<IMultilineBoxDispatchProps> => ({\r\n        removeBox: (id: string) => dispatch(removeValueStringList(ownProps.id, id)),\r\n    });\r\n\r\n    @ReduxConnect(null, mapDispatchToProps)\r\n    class MultilineBoxWithRemoveButton<T> extends React.PureComponent<IMultilineBoxWithRemoveButtonProps<T>> {\r\n        static defaultProps = {\r\n            renderBody: () => <div />,\r\n        };\r\n\r\n        private getRemoveButtonNode(\r\n            data: Partial<IMultilineSingleBoxProps<T>> = {},\r\n            props: Partial<IButtonProps> = {}\r\n        ) {\r\n            return (\r\n                <Button\r\n                    classes={[\r\n                        classNames(defaultMultilineBoxRemoveButtonClasses, {\r\n                            'cursor-pointer': !data.isLast,\r\n                        }),\r\n                    ]}\r\n                    style={{\r\n                        visibility: !data.isLast ? 'visible' : 'hidden',\r\n                    }}\r\n                    onClick={() => !data.isLast && this.props.removeBox(data.id)}\r\n                    enabled={!data.isLast}\r\n                    {...props}\r\n                >\r\n                    <Svg\r\n                        svgName={VaporSVG.svg.remove.name}\r\n                        className=\"icon fill-medium-blue mod-18\"\r\n                        style={{\r\n                            visibility: !data.isLast ? 'visible' : 'hidden',\r\n                        }}\r\n                    />\r\n                </Button>\r\n            );\r\n        }\r\n\r\n        private getWrapper(children: React.ReactNode, data: Array<IMultilineSingleBoxProps<T>>) {\r\n            return React.Children.map(children, (child: React.ReactNode, index: number) =>\r\n                HocUtils.supplyConfig(supplier).containerNode(\r\n                    child,\r\n                    (props?: Partial<IButtonProps>) => this.getRemoveButtonNode(data[index], props),\r\n                    data,\r\n                    index\r\n                )\r\n            );\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Component\r\n                    {...this.props}\r\n                    renderBody={(boxProps: Array<IMultilineSingleBoxProps<T>>, parentProps: IMultilineParentProps) =>\r\n                        this.getWrapper(this.props.renderBody(boxProps, parentProps), boxProps)\r\n                    }\r\n                >\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return MultilineBoxWithRemoveButton;\r\n};\r\n"],"sourceRoot":""}