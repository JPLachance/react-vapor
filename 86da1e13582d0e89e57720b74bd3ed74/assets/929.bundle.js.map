{"version":3,"sources":["webpack:///./src/components/validation/hoc/WithDirtySaveButtonHOC.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/929.bundle.js","sourcesContent":["export default \"import * as React from 'react';\\nimport {connect} from 'react-redux';\\nimport {IReactVaporState} from '../../../ReactVapor';\\nimport {IButtonProps} from '../../button/Button';\\nimport {ValidationSelectors} from '../ValidationSelectors';\\nimport {InferableComponentEnhancer} from './connectHOC';\\n\\nexport interface IWithDirtySaveButtonHOCProps {\\n    validationIds: string[];\\n    skipDirty?: boolean;\\n    errorMessage?: (errors: string[]) => string | undefined;\\n    warningMessage?: (warnings: string[]) => string | undefined;\\n    dirtyMessage?: (dirty: boolean[]) => string | undefined;\\n}\\n\\nconst mapStateToProps = (state: IReactVaporState, ownProps: IWithDirtySaveButtonHOCProps) => ({\\n    dirty: ValidationSelectors.getAnyDirty(ownProps.validationIds)(state),\\n    errors: ValidationSelectors.getAnyError(ownProps.validationIds)(state),\\n    warnings: ValidationSelectors.getAnyWarning(ownProps.validationIds)(state),\\n});\\n\\nexport const withDirtySaveButtonHOC = <T extends IButtonProps>(Component: React.ComponentType<T>) => {\\n    type StateProps = ReturnType<typeof mapStateToProps>;\\n    const WrappedButton = ({\\n        dirty,\\n        errors,\\n        warnings,\\n        validationIds,\\n        skipDirty,\\n        errorMessage = (e) => `Cannot save because of the following errors: ${e.join('\\\\n')}`,\\n        warningMessage = (w) => `Can save but with warnings: ${w.join('\\\\n')}`,\\n        dirtyMessage = (d) => d.length === 0 && `Cannot save when there are no changes`,\\n        enabled,\\n        tooltip,\\n        ...props\\n    }: T & IWithDirtySaveButtonHOCProps & StateProps) => {\\n        const hasErrors = errors.length > 0;\\n        const hasWarnings = warnings.length > 0;\\n        const isDirty = dirty.length > 0;\\n        const generatedTooltip = hasErrors\\n            ? errorMessage(errors.map((error) => error.value))\\n            : hasWarnings\\n            ? warningMessage(warnings.map((warning) => warning.value))\\n            : !skipDirty && dirtyMessage(dirty.map((d) => d.value));\\n\\n        return (\\n            <Component\\n                {...((props as unknown) as T)}\\n                enabled={(skipDirty ? true : isDirty) && !hasErrors && enabled}\\n                tooltip={generatedTooltip || tooltip}\\n            />\\n        );\\n    };\\n    const enhance = connect(mapStateToProps) as InferableComponentEnhancer<StateProps>;\\n    return enhance(WrappedButton);\\n};\\n\""],"sourceRoot":""}