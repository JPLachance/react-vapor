{"version":3,"sources":["webpack:///./src/components/modal/ModalComposite.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/502.bundle.js","sourcesContent":["export default \"import * as classNames from 'classnames';\\r\\nimport * as React from 'react';\\r\\nimport * as ReactModal from 'react-modal';\\r\\nimport {keys} from 'ts-transformer-keys';\\r\\nimport * as _ from 'underscore';\\r\\n\\r\\nimport {Defaults} from '../../Defaults';\\r\\nimport {IWithDirtyProps} from '../../hoc/withDirty/withDirty';\\r\\nimport {IClassName} from '../../utils/ClassNameUtils';\\r\\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\\r\\nimport {IModalDispatchProps, IModalOwnProps, IModalStateProps} from './Modal';\\r\\nimport {IModalBackdropOwnProps} from './ModalBackdrop';\\r\\nimport {ModalBody} from './ModalBody';\\r\\nimport {IModalFooterProps, ModalFooter} from './ModalFooter';\\r\\nimport {IModalHeaderDispatchProps, IModalHeaderOwnProps, IModalHeaderProps, ModalHeader} from './ModalHeader';\\r\\nimport {ModalHeaderConnected} from './ModalHeaderConnected';\\r\\n\\r\\nexport interface IModalCompositeOwnProps\\r\\n    extends IModalOwnProps,\\r\\n        Partial<IModalHeaderOwnProps>,\\r\\n        IModalFooterProps,\\r\\n        IModalBackdropOwnProps {\\r\\n    modalHeaderChildren?: React.ReactNode;\\r\\n    modalHeaderClasses?: IClassName;\\r\\n    modalBodyChildren?: React.ReactNode;\\r\\n    modalBodyClasses?: IClassName;\\r\\n    modalFooterChildren?: React.ReactNode;\\r\\n    modalFooterClasses?: IClassName;\\r\\n    isPrompt?: boolean;\\r\\n    validateShouldNavigate?: (isDirty: boolean) => boolean;\\r\\n}\\r\\n\\r\\nexport interface IModalCompositeStateProps extends IReduxStatePossibleProps, IModalStateProps {\\r\\n    layer: number;\\r\\n}\\r\\n\\r\\nexport interface IModalCompositeDispatchProps extends IModalDispatchProps, IModalHeaderDispatchProps {}\\r\\n\\r\\nexport interface IModalCompositeProps\\r\\n    extends IModalCompositeOwnProps,\\r\\n        Partial<IModalCompositeStateProps>,\\r\\n        Partial<IModalCompositeDispatchProps> {}\\r\\n\\r\\nconst modalPropsToOmit = keys<IModalCompositeProps>();\\r\\n\\r\\nexport class ModalComposite extends React.PureComponent<\\r\\n    IModalCompositeProps & Partial<ReactModal.Props> & Partial<IWithDirtyProps>\\r\\n> {\\r\\n    static defaultProps: Partial<IModalCompositeProps> = {\\r\\n        id: _.uniqueId('modal'),\\r\\n        closeTimeout: Defaults.MODAL_TIMEOUT,\\r\\n    };\\r\\n\\r\\n    render() {\\r\\n        const reactModalprops: Partial<ReactModal.Props> = _.omit(this.props, modalPropsToOmit);\\r\\n        return (\\r\\n            <ReactModal\\r\\n                key={this.props.id}\\r\\n                isOpen={this.props.isOpened}\\r\\n                className={{\\r\\n                    base: classNames('modal-container --react-modal', this.props.classes),\\r\\n                    afterOpen: 'opened',\\r\\n                    beforeClose: 'closed',\\r\\n                }}\\r\\n                overlayClassName={{\\r\\n                    base: classNames('modal-backdrop --react-modal', {\\r\\n                        [`layer-${this.props.layer}`]: this.props.layer > 0,\\r\\n                    }),\\r\\n                    afterOpen: 'opened',\\r\\n                    beforeClose: 'clear',\\r\\n                }}\\r\\n                onRequestClose={this.onRequestClose}\\r\\n                closeTimeoutMS={this.props.closeTimeout}\\r\\n                contentRef={this.props.contentRef}\\r\\n                parentSelector={this.getParent}\\r\\n                onAfterClose={this.props.closeCallback}\\r\\n                {...reactModalprops}\\r\\n            >\\r\\n                <div className=\\\"modal-content\\\" id={this.props.id}>\\r\\n                    {this.getModalHeader()}\\r\\n                    {this.getModalBody()}\\r\\n                    {this.getModalFooter()}\\r\\n                </div>\\r\\n            </ReactModal>\\r\\n        );\\r\\n    }\\r\\n\\r\\n    componentDidMount() {\\r\\n        this.props.onRender?.();\\r\\n    }\\r\\n\\r\\n    componentWillUnmount() {\\r\\n        this.props.onDestroy?.();\\r\\n    }\\r\\n\\r\\n    private onRequestClose = (e: React.MouseEvent | React.KeyboardEvent) => {\\r\\n        e.preventDefault();\\r\\n        e.stopPropagation();\\r\\n\\r\\n        if (this.props.validateShouldNavigate) {\\r\\n            if (this.props.validateShouldNavigate(this.props.isDirty)) {\\r\\n                this.props.onClose?.();\\r\\n            }\\r\\n        } else {\\r\\n            this.props.onClose?.();\\r\\n        }\\r\\n    };\\r\\n\\r\\n    private getModalHeader() {\\r\\n        const basicProps: IModalHeaderProps = {\\r\\n            id: this.props.id,\\r\\n            title: this.props.title,\\r\\n            classes: this.props.modalHeaderClasses,\\r\\n            docLink: this.props.docLink,\\r\\n        };\\r\\n\\r\\n        if (!this.props.title) {\\r\\n            return null;\\r\\n        }\\r\\n\\r\\n        if (this.props.withReduxState) {\\r\\n            return (\\r\\n                <ModalHeaderConnected key=\\\"modal-header\\\" {...basicProps}>\\r\\n                    {this.props.modalHeaderChildren}\\r\\n                </ModalHeaderConnected>\\r\\n            );\\r\\n        }\\r\\n        return (\\r\\n            <ModalHeader key=\\\"modal-header\\\" {...basicProps} onClose={this.props.onClose}>\\r\\n                {this.props.modalHeaderChildren}\\r\\n            </ModalHeader>\\r\\n        );\\r\\n    }\\r\\n\\r\\n    private getModalBody = () =>\\r\\n        this.props.modalBodyChildren && (\\r\\n            <ModalBody key=\\\"modal-body\\\" classes={this.props.modalBodyClasses}>\\r\\n                {this.props.modalBodyChildren}\\r\\n            </ModalBody>\\r\\n        );\\r\\n\\r\\n    private getModalFooter = () =>\\r\\n        this.props.modalFooterChildren && (\\r\\n            <ModalFooter key=\\\"modal-footer\\\" classes={this.props.modalFooterClasses}>\\r\\n                {this.props.modalFooterChildren}\\r\\n            </ModalFooter>\\r\\n        );\\r\\n\\r\\n    private getParent = (): HTMLElement => document.querySelector(Defaults.MODAL_ROOT);\\r\\n}\\r\\n\""],"sourceRoot":""}