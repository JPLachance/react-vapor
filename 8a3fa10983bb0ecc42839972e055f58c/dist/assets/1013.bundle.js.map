{"version":3,"sources":["webpack:///./src/components/facets/examples/FacetConnectedExamples.tsx?710a","webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/filterBox/FilterBox.tsx?d7c0","webpack:///./src/components/filterBox/FilterBoxConnected.tsx?7041","webpack:///./src/components/section/index.ts?360e","webpack:///./src/components/facets/FacetMoreRows.tsx?56e2","webpack:///./src/components/facets/FacetMoreToggle.tsx?cdb2","webpack:///./src/components/facets/Facet.tsx?bcf1","webpack:///./src/components/facets/FacetMoreRowsConnected.tsx?9ea4","webpack:///./src/components/facets/FacetMoreToggleConnected.tsx?6fef","webpack:///./src/components/facets/FacetRow.tsx?d3d3","webpack:///./src/components/facets/FacetConnected.tsx?9712"],"names":["facet","name","formattedName","facet2","facetRows","count","FacetConnectedExamples","dispatch","onRender","exclude","level","title","style","width","className","clearFacet","toggleFacet","enableExclusions","Section","children","description","mods","titleProps","H","props","handleChange","nextInputValue","filterInput","value","nextElementSibling","setAttribute","length","onFilterCallback","id","onFilter","clearValue","focus","handleOnBlur","this","onBlur","handleOnKeyDown","e","onKeyDown","handleOnKeyUp","onKeyUp","placeCursorAtEndOfInputValue","input","target","temp","componentWillMount","componentWillUnmount","onDestroy","componentWillReceiveProps","nextProps","filterText","render","inputMaxWidth","maxWidth","filterPlaceholder","filterBoxContainerClasses","containerClasses","filterInputClasses","truncate","svgClearClasses","hidden","withTitleOnInput","undefined","ref","type","placeholder","onChange","currentTarget","onFocus","autoFocus","isAutoFocus","svgName","svgClass","onClick","defaultProps","debouncedFilterThrough","FilterBoxConnected","state","ownProps","getFilterText","mergeProps","handleDocumentClick","isOpened","facetSearch","contains","onDocumentClick","document","addEventListener","onOpen","removeEventListener","componentDidUpdate","getElementsByTagName","moreSearchClasses","rowsFiltered","facetRow","facetText","toLowerCase","filter","Boolean","resultsClass","filterBoxId","filterBox","withReduxState","handleOnChange","onToggleMore","moreClasses","moreLabel","nativeEvent","stopImmediatePropagation","buildFacet","onToggleFacet","onClearFacet","sortFacetRows","selectedFacetRows","removeSelectedClass","selected","unselected","allRows","item","rows","isSelected","key","isChecked","maxTooltipLabelLength","excludeTooltipMessage","rowsToShow","Math","max","maxRowsToShow","moreRowsToggle","facetClasses","clearFacetLabel","slice","getMoreRows","needMoreRows","FacetMoreRowsConnected","facets","filterItem","filters","opened","FacetMoreToggleConnected","getExcludeCheckbox","preventDefault","checked","isExclude","stopEvent","getLabel","getCount","maxCalculatedNameLength","label","tooltipLabel","placement","toggleFacetToExclude","getExcludeButton","event","stopPropagation","getSelectedRows","selectedRows","row","selectedRow","FacetConnected"],"mappings":"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","file":"assets/1013.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReduxAction} from '../../../utils/ReduxUtils';\r\nimport {Section} from '../../section';\r\nimport {IFacet} from '../Facet';\r\nimport {changeFacet, IFacetActionPayload} from '../FacetActions';\r\nimport {FacetConnected} from '../FacetConnected';\r\n\r\nexport interface ILastUpdateConnectedExamplesProps {\r\n    onRender?: () => void;\r\n}\r\n\r\nconst facet: IFacet = {name: 'facetTitle1', formattedName: 'The first facet'};\r\nconst facet2: IFacet = {name: 'facetTitle2', formattedName: 'The second facet'};\r\n\r\nconst facetRows: IFacet[] = [\r\n    {\r\n        name: 'row1',\r\n        formattedName: 'Row 1',\r\n    },\r\n    {\r\n        name: 'row2',\r\n        formattedName: 'The second row',\r\n    },\r\n    {\r\n        name: 'row3',\r\n        formattedName: 'Third row with a count property',\r\n        count: '23412',\r\n    },\r\n    {\r\n        name: 'row4',\r\n        formattedName: 'Row 4, count of 0',\r\n        count: '0',\r\n    },\r\n];\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IFacetActionPayload>) => void\r\n): ILastUpdateConnectedExamplesProps => {\r\n    return {\r\n        onRender: () => {\r\n            dispatch(\r\n                changeFacet(facet.name, {\r\n                    name: 'row2',\r\n                    formattedName: 'Irrelevent',\r\n                })\r\n            );\r\n            dispatch(\r\n                changeFacet(facet2.name, {\r\n                    name: 'row1',\r\n                    formattedName: 'it does not matter',\r\n                })\r\n            );\r\n            dispatch(\r\n                changeFacet(facet2.name, {\r\n                    name: 'row2',\r\n                    formattedName: 'why is this mandatory ?',\r\n                    exclude: true,\r\n                })\r\n            );\r\n        },\r\n    };\r\n};\r\n\r\nconst FacetConnectedExamplesDisconnected: React.FunctionComponent<ILastUpdateConnectedExamplesProps> = ({onRender}) => {\r\n    React.useEffect(() => {\r\n        onRender();\r\n    }, [onRender]);\r\n\r\n    return (\r\n        <Section level={2} title=\"Facets connected to store\">\r\n            <div style={{width: 400}}>\r\n                <label className=\"form-control-label\">Facet with the second row selectd</label>\r\n                <FacetConnected\r\n                    facet={facet}\r\n                    facetRows={facetRows}\r\n                    clearFacet={() => {\r\n                        return;\r\n                    }}\r\n                    toggleFacet={() => {\r\n                        return;\r\n                    }}\r\n                />\r\n            </div>\r\n            <div style={{width: 400}}>\r\n                <label className=\"form-control-label\">\r\n                    Facet with exclusions, the first row selected and the second row already excluded\r\n                </label>\r\n                <FacetConnected\r\n                    facet={facet2}\r\n                    facetRows={facetRows}\r\n                    clearFacet={() => {\r\n                        return;\r\n                    }}\r\n                    enableExclusions\r\n                    toggleFacet={() => {\r\n                        return;\r\n                    }}\r\n                />\r\n            </div>\r\n        </Section>\r\n    );\r\n};\r\nexport const FacetConnectedExamples = connect(null, mapDispatchToProps)(FacetConnectedExamplesDisconnected);\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Svg} from '../svg/Svg';\r\n\r\nexport interface IFilterBoxOwnProps extends React.ClassAttributes<FilterBox> {\r\n    id?: string;\r\n    containerClasses?: string[];\r\n    filterPlaceholder?: string;\r\n    onBlur?: () => void;\r\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    onKeyUp?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    isAutoFocus?: boolean;\r\n    maxWidth?: number;\r\n    withTitleOnInput?: boolean;\r\n    truncate?: boolean;\r\n    onFilterCallback?: (id: string, filterText: string) => void;\r\n    className?: string;\r\n}\r\n\r\nexport interface IFilterBoxStateProps {\r\n    filterText?: string;\r\n}\r\n\r\nexport interface IFilterBoxDispatchProps {\r\n    onRender?: (id: string) => void;\r\n    onDestroy?: (id: string) => void;\r\n    onFilter?: (id: string, filterText: string) => void;\r\n}\r\n\r\nexport interface IFilterBoxProps extends IFilterBoxOwnProps, IFilterBoxStateProps, IFilterBoxDispatchProps {}\r\n\r\nexport const FILTER_PLACEHOLDER: string = 'Filter';\r\n\r\nexport class FilterBox extends React.Component<IFilterBoxProps, any> {\r\n    filterInput: HTMLInputElement;\r\n\r\n    constructor(props: IFilterBoxProps) {\r\n        super(props);\r\n    }\r\n\r\n    static defaultProps: Partial<IFilterBoxProps> = {\r\n        isAutoFocus: false,\r\n    };\r\n\r\n    private handleChange = (nextInputValue: string) => {\r\n        this.filterInput.value = nextInputValue;\r\n        this.filterInput.nextElementSibling.setAttribute('class', this.filterInput.value.length ? '' : 'hidden');\r\n\r\n        if (this.props.onFilterCallback) {\r\n            this.props.onFilterCallback(this.props.id, this.filterInput.value);\r\n        }\r\n\r\n        if (this.props.onFilter) {\r\n            this.props.onFilter(this.props.id, this.filterInput.value);\r\n        }\r\n    };\r\n\r\n    private handleOnBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur();\r\n        }\r\n    }\r\n\r\n    private handleOnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyDown) {\r\n            this.props.onKeyDown(e);\r\n        }\r\n    }\r\n\r\n    private handleOnKeyUp(e: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(e);\r\n        }\r\n    }\r\n\r\n    private clearValue = () => {\r\n        this.filterInput.focus();\r\n        this.handleChange('');\r\n    };\r\n\r\n    placeCursorAtEndOfInputValue(e: React.FocusEvent<any>) {\r\n        const input = e.target as HTMLInputElement;\r\n        const temp = input.value;\r\n        input.value = '';\r\n        input.value = temp;\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender(this.props.id);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy(this.props.id);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFilterBoxProps) {\r\n        if (this.props.filterText !== nextProps.filterText && this.filterInput.value !== nextProps.filterText) {\r\n            this.handleChange(nextProps.filterText);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const inputMaxWidth = {maxWidth: `${this.props.maxWidth}px`};\r\n        const filterPlaceholder = this.props.filterPlaceholder || FILTER_PLACEHOLDER;\r\n        const filterBoxContainerClasses = classNames('filter-container', this.props.containerClasses);\r\n        const filterInputClasses = classNames('filter-box', {truncate: this.props.truncate});\r\n        const svgClearClasses = classNames({hidden: !(this.filterInput && this.filterInput.value)});\r\n\r\n        return (\r\n            <div className={this.props.className}>\r\n                <div\r\n                    id={this.props.id}\r\n                    className={filterBoxContainerClasses}\r\n                    style={inputMaxWidth}\r\n                    title={this.filterInput && this.props.withTitleOnInput ? this.filterInput.value : undefined}\r\n                >\r\n                    <input\r\n                        ref={(filterInput: HTMLInputElement) => (this.filterInput = filterInput)}\r\n                        type=\"text\"\r\n                        className={filterInputClasses}\r\n                        placeholder={filterPlaceholder}\r\n                        onChange={(e: React.FormEvent<HTMLInputElement>) => this.handleChange(e.currentTarget.value)}\r\n                        onBlur={() => this.handleOnBlur()}\r\n                        onFocus={(e: React.FocusEvent<HTMLInputElement>) => {\r\n                            this.placeCursorAtEndOfInputValue(e);\r\n                        }}\r\n                        onKeyDown={(e) => this.handleOnKeyDown(e)}\r\n                        onKeyUp={(e) => this.handleOnKeyUp(e)}\r\n                        style={inputMaxWidth}\r\n                        autoFocus={this.props.isAutoFocus}\r\n                    />\r\n                    <Svg\r\n                        svgName=\"clear\"\r\n                        className={svgClearClasses}\r\n                        svgClass=\"icon mod-lg fill-medium-grey\"\r\n                        onClick={() => this.clearValue()}\r\n                    />\r\n                    <Svg svgName=\"filter\" className=\"filter-icon\" svgClass=\"icon fill-medium-grey mod-lg\" />\r\n                </div>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    FilterBox,\r\n    IFilterBoxDispatchProps,\r\n    IFilterBoxOwnProps,\r\n    IFilterBoxProps,\r\n    IFilterBoxStateProps,\r\n} from './FilterBox';\r\nimport {addFilter, filterThrough, removeFilter} from './FilterBoxActions';\r\nimport {FilterBoxSelectors} from './FilterBoxSelectors';\r\n\r\nconst FILTER_THROUGH_DEBOUNCE = 400;\r\nexport const debouncedFilterThrough = _.debounce(\r\n    (dispatch: IDispatch, id: string, filterText: string) => dispatch(filterThrough(id, filterText)),\r\n    FILTER_THROUGH_DEBOUNCE\r\n);\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFilterBoxOwnProps): IFilterBoxStateProps => ({\r\n    filterText: FilterBoxSelectors.getFilterText(state, {id: ownProps.id}),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch): IFilterBoxDispatchProps => ({\r\n    onRender: (id: string) => dispatch(addFilter(id)),\r\n    onDestroy: (id: string) => dispatch(removeFilter(id)),\r\n    onFilter: (id: string, filterText: string) => debouncedFilterThrough(dispatch, id, filterText),\r\n});\r\n\r\nexport const FilterBoxConnected: React.ComponentClass<IFilterBoxProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FilterBox);\r\n","export * from './Section';\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as _ from 'underscore';\r\nimport * as s from 'underscore.string';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {FilterBox} from '../filterBox/FilterBox';\r\nimport {FilterBoxConnected} from '../filterBox/FilterBoxConnected';\r\n\r\nexport interface IFacetMoreRowsOwnProps extends React.ClassAttributes<FacetMoreRows> {\r\n    facet: string;\r\n    facetRows: JSX.Element[];\r\n}\r\n\r\nexport interface IFacetMoreRowsStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    filterText?: string;\r\n}\r\n\r\nexport interface IFacetMoreRowsDispatchProps {\r\n    onOpen?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IFacetMoreRowsChildrenProps {\r\n    filterPlaceholder?: string;\r\n}\r\n\r\nexport interface IFacetMoreRowsProps\r\n    extends IFacetMoreRowsOwnProps,\r\n        IFacetMoreRowsDispatchProps,\r\n        IFacetMoreRowsStateProps,\r\n        IFacetMoreRowsChildrenProps {}\r\n\r\nexport class FacetMoreRows extends React.Component<IFacetMoreRowsProps, any> {\r\n    private facetSearch: HTMLDivElement;\r\n\r\n    componentWillMount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFacetMoreRowsProps) {\r\n        if (this.props.onOpen && !this.props.isOpened && nextProps.isOpened) {\r\n            this.props.onOpen();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isOpened) {\r\n            this.facetSearch.getElementsByTagName('input')[0].focus();\r\n        }\r\n    }\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.facetSearch);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const moreSearchClasses: string = 'facet-more-search' + (!this.props.isOpened ? ' hidden' : '');\r\n        const rowsFiltered: JSX.Element[] =\r\n            this.props.filterText && this.props.filterText.length\r\n                ? _.map(this.props.facetRows, (facetRow: JSX.Element) => {\r\n                      const facetText = facetRow.props.facetRow.formattedName;\r\n                      if (s.contains(facetText.toLowerCase(), this.props.filterText.toLowerCase())) {\r\n                          return facetRow;\r\n                      }\r\n                  }).filter(Boolean)\r\n                : this.props.facetRows;\r\n        const resultsClass: string = 'facet-search-results' + (!rowsFiltered.length ? ' hidden' : '');\r\n        const filterBoxId: string = 'filter-' + this.props.facet;\r\n        const filterBox: JSX.Element = this.props.withReduxState ? (\r\n            <FilterBoxConnected id={filterBoxId} filterPlaceholder={this.props.filterPlaceholder} />\r\n        ) : (\r\n            <FilterBox id={filterBoxId} filterPlaceholder={this.props.filterPlaceholder} />\r\n        );\r\n\r\n        return (\r\n            <div className={moreSearchClasses}>\r\n                <div className=\"facet-search\" ref={(facetSearch: HTMLDivElement) => (this.facetSearch = facetSearch)}>\r\n                    {filterBox}\r\n                </div>\r\n                <ul className={resultsClass}>{rowsFiltered}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface IFacetMoreToggleOwnProps extends React.ClassAttributes<FacetMoreToggle> {\r\n    facet: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport interface IFacetMoreToggleStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IFacetMoreToggleDispatchProps {\r\n    onToggleMore?: (facet: string) => void;\r\n}\r\n\r\nexport interface IFacetMoreToggleProps\r\n    extends IFacetMoreToggleOwnProps,\r\n        IFacetMoreToggleStateProps,\r\n        IFacetMoreToggleDispatchProps {}\r\n\r\nexport const FACET_TOGGLE_MORE_LABEL: string = 'More';\r\n\r\nexport class FacetMoreToggle extends React.Component<IFacetMoreToggleProps, any> {\r\n    private handleOnChange = () => {\r\n        if (this.props.onToggleMore) {\r\n            this.props.onToggleMore(this.props.facet);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const isOpened: boolean = this.props.isOpened ? this.props.isOpened : false;\r\n        const moreClasses: string = 'facet-value facet-selectable facet-more' + (isOpened ? ' hidden' : '');\r\n        const moreLabel: string = this.props.moreLabel || FACET_TOGGLE_MORE_LABEL;\r\n\r\n        return (\r\n            <li className={moreClasses} onClick={(e) => e.nativeEvent.stopImmediatePropagation()}>\r\n                <label className=\"coveo-checkbox-label facet-value-label\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"coveo-checkbox facet-checkbox-input\"\r\n                        onChange={() => this.handleOnChange()}\r\n                    />\r\n                    <span className=\"facet-more-button\"></span>\r\n                    <span className=\"label\">{moreLabel}</span>\r\n                </label>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {FacetMoreRows} from './FacetMoreRows';\r\nimport {FacetMoreRowsConnected} from './FacetMoreRowsConnected';\r\nimport {FacetMoreToggle} from './FacetMoreToggle';\r\nimport {FacetMoreToggleConnected} from './FacetMoreToggleConnected';\r\nimport {FacetRow} from './FacetRow';\r\n\r\nexport interface IFacet {\r\n    name: string;\r\n    formattedName: string;\r\n    tooltipLabel?: string;\r\n    count?: string;\r\n    exclude?: boolean;\r\n}\r\n\r\nexport interface IFacetOwnProps extends React.ClassAttributes<Facet> {\r\n    facet: IFacet;\r\n    facetRows: IFacet[];\r\n    toggleFacet: (facet: string, facetRow: IFacet) => void;\r\n    clearFacet: (facet: string) => void;\r\n    clearFacetLabel?: string;\r\n    maxRowsToShow?: number;\r\n    maxTooltipLabelLength?: number;\r\n    excludeTooltipMessage?(facetsRowName: string): string;\r\n}\r\n\r\nexport interface IFacetStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n    selectedFacetRows?: IFacet[];\r\n}\r\n\r\nexport interface IFacetDispatchProps {\r\n    onRender?: (facet: string) => void;\r\n    onDestroy?: (facet: string) => void;\r\n    onToggleFacet?: (facet: string, facetRow: IFacet) => void;\r\n    onClearFacet?: (facet: string) => void;\r\n}\r\n\r\nexport interface IFacetChildrenProps {\r\n    moreLabel?: string;\r\n    filterPlaceholder?: string;\r\n    enableExclusions?: boolean;\r\n}\r\n\r\nexport interface IFacetProps extends IFacetOwnProps, IFacetStateProps, IFacetDispatchProps, IFacetChildrenProps {}\r\n\r\nexport const CLEAR_FACET_LABEL: string = 'Clear';\r\n\r\nexport class Facet extends React.Component<IFacetProps, any> {\r\n    static defaultProps: Partial<IFacetProps> = {\r\n        clearFacetLabel: CLEAR_FACET_LABEL,\r\n        selectedFacetRows: [],\r\n        maxRowsToShow: 5,\r\n    };\r\n\r\n    private buildFacet = (facetRow: IFacet) => {\r\n        this.props.toggleFacet(this.props.facet.name, facetRow);\r\n        if (this.props.onToggleFacet) {\r\n            this.props.onToggleFacet(this.props.facet.name, facetRow);\r\n        }\r\n    };\r\n\r\n    private clearFacet = () => {\r\n        this.props.clearFacet(this.props.facet.name);\r\n        if (this.props.onClearFacet) {\r\n            this.props.onClearFacet(this.props.facet.name);\r\n        }\r\n    };\r\n\r\n    private sortFacetRows(facetRows: IFacet[]) {\r\n        return _.sortBy(facetRows, (facetRow: IFacet) => facetRow.formattedName.toLowerCase());\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy(this.props.facet.name);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.facetRows.length && !this.props.selectedFacetRows.length) {\r\n            return null;\r\n        }\r\n        const removeSelectedClass: string =\r\n            'facet-header-eraser' + (this.props.selectedFacetRows.length ? '' : ' hidden');\r\n        const selected: IFacet[] = this.sortFacetRows(this.props.selectedFacetRows);\r\n        const unselected: IFacet[] = this.sortFacetRows(this.props.facetRows);\r\n        const allRows: IFacet[] = _.union(selected, unselected);\r\n        const facetRows: IFacet[] = _.uniq(allRows, false, (item) => item.name);\r\n        const rows: JSX.Element[] = _.map(facetRows, (facetRow: IFacet) => {\r\n            const isSelected: boolean = _.contains(_.pluck(selected, 'name'), facetRow.name);\r\n            return (\r\n                <FacetRow\r\n                    key={facetRow.name}\r\n                    facet={this.props.facet.name}\r\n                    facetRow={facetRow}\r\n                    onToggleFacet={this.buildFacet}\r\n                    isChecked={isSelected}\r\n                    enableExclusions={this.props.enableExclusions}\r\n                    maxTooltipLabelLength={this.props.maxTooltipLabelLength}\r\n                    excludeTooltipMessage={this.props.excludeTooltipMessage}\r\n                />\r\n            );\r\n        });\r\n        let rowsToShow: number = Math.max(this.props.selectedFacetRows.length, this.props.maxRowsToShow);\r\n        // If there is only 1 extra row, show it instead of the moreRowsToggle\r\n        if (rows.length === rowsToShow + 1) {\r\n            rowsToShow += 1;\r\n        }\r\n        const moreRowsToggle: JSX.Element =\r\n            rows.length > rowsToShow ? (\r\n                this.props.withReduxState ? (\r\n                    <FacetMoreToggleConnected facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                ) : (\r\n                    <FacetMoreToggle facet={this.props.facet.name} moreLabel={this.props.moreLabel} />\r\n                )\r\n            ) : null;\r\n        const facetClasses: string = this.props.facet.name + ' facet' + (this.props.isOpened ? ' facet-opened' : '');\r\n\r\n        return (\r\n            <div className={facetClasses}>\r\n                <div className=\"facet-header\">\r\n                    <div className={removeSelectedClass} onClick={() => this.clearFacet()}>\r\n                        <Tooltip\r\n                            className=\"remove-selected-tooltip\"\r\n                            title={`${this.props.clearFacetLabel} ${this.props.facet.formattedName}`}\r\n                        >\r\n                            <Svg svgName=\"clear\" className=\"icon fill-medium-grey\" />\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className=\"facet-header-title bold text-medium-blue\">{this.props.facet.formattedName}</div>\r\n                </div>\r\n                <ul className=\"facet-values\">\r\n                    {rows.slice(0, rowsToShow)}\r\n                    {moreRowsToggle}\r\n                </ul>\r\n                {this.getMoreRows(!!moreRowsToggle, rows.slice(rowsToShow))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getMoreRows(needMoreRows: boolean, rows: JSX.Element[]): JSX.Element {\r\n        if (needMoreRows) {\r\n            return this.props.withReduxState ? (\r\n                <FacetMoreRowsConnected\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            ) : (\r\n                <FacetMoreRows\r\n                    facet={this.props.facet.name}\r\n                    facetRows={rows}\r\n                    filterPlaceholder={this.props.filterPlaceholder}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {filterThrough} from '../filterBox/FilterBoxActions';\r\nimport {IFilterState} from '../filterBox/FilterBoxReducers';\r\nimport {closeMoreFacetRows} from './FacetActions';\r\nimport {\r\n    FacetMoreRows,\r\n    IFacetMoreRowsDispatchProps,\r\n    IFacetMoreRowsOwnProps,\r\n    IFacetMoreRowsProps,\r\n    IFacetMoreRowsStateProps,\r\n} from './FacetMoreRows';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetMoreRowsOwnProps): IFacetMoreRowsStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet});\r\n    const filterItem: IFilterState = _.findWhere(state.filters, {id: 'filter-' + ownProps.facet});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n        filterText: filterItem ? filterItem.filterText : '',\r\n        withReduxState: true,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IFacetMoreRowsOwnProps\r\n): IFacetMoreRowsDispatchProps => ({\r\n    onOpen: () => dispatch(filterThrough('filter-' + ownProps.facet, '')),\r\n    onDocumentClick: () => dispatch(closeMoreFacetRows()),\r\n});\r\n\r\nexport const FacetMoreRowsConnected: React.ComponentClass<IFacetMoreRowsProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FacetMoreRows);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {toggleMoreFacetRows} from './FacetActions';\r\nimport {\r\n    FacetMoreToggle,\r\n    IFacetMoreToggleDispatchProps,\r\n    IFacetMoreToggleOwnProps,\r\n    IFacetMoreToggleProps,\r\n    IFacetMoreToggleStateProps,\r\n} from './FacetMoreToggle';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetMoreToggleOwnProps): IFacetMoreToggleStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void\r\n): IFacetMoreToggleDispatchProps => ({\r\n    onToggleMore: (facet: string) => dispatch(toggleMoreFacetRows(facet)),\r\n});\r\n\r\nexport const FacetMoreToggleConnected: React.ComponentClass<IFacetMoreToggleProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FacetMoreToggle);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IFacet} from './Facet';\r\n\r\nexport interface IFacetRowProps extends React.ClassAttributes<FacetRow> {\r\n    facetRow: IFacet;\r\n    facet: string;\r\n    onToggleFacet: (facetRow: IFacet) => void;\r\n    isChecked: boolean;\r\n    maxTooltipLabelLength?: number;\r\n    enableExclusions?: boolean;\r\n    excludeTooltipMessage?(facetsRowName: string): string;\r\n}\r\n\r\nexport class FacetRow extends React.Component<IFacetRowProps, any> {\r\n    static defaultProps: Partial<IFacetRowProps> = {\r\n        maxTooltipLabelLength: 25,\r\n    };\r\n\r\n    get isExclude(): boolean {\r\n        return !!this.props.enableExclusions && !!this.props.facetRow.exclude;\r\n    }\r\n\r\n    render() {\r\n        const className: string = classNames('facet-value', 'facet-selectable', {\r\n            'facet-exclude': this.props.enableExclusions,\r\n        });\r\n        return (\r\n            <li className={className}>\r\n                {this.getExcludeCheckbox()}\r\n                <label\r\n                    className=\"coveo-checkbox-label facet-value-label\"\r\n                    onClick={(e) => {\r\n                        // prevent event bubbling and trigger onToggleFacet only once no matter where you click on the row\r\n                        e.preventDefault();\r\n                        this.toggleFacet();\r\n                    }}\r\n                >\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name={this.props.facetRow.name}\r\n                        className=\"coveo-checkbox facet-checkbox-input\"\r\n                        checked={this.props.isChecked && !this.isExclude}\r\n                        onClick={this.stopEvent}\r\n                        onChange={_.noop}\r\n                    />\r\n                    <button type=\"button\" className={this.props.isChecked && this.isExclude ? 'exclude-box' : ''}>\r\n                        <Svg svgName=\"clear\" className=\"icon hide exclude-icon\" svgClass=\"fill-red\" />\r\n                    </button>\r\n                    {this.getLabel()}\r\n                    {this.getCount()}\r\n                </label>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    private getLabel(): JSX.Element {\r\n        const maxCalculatedNameLength = this.props.facetRow.count\r\n            ? this.props.maxTooltipLabelLength - this.props.facetRow.count.length\r\n            : this.props.maxTooltipLabelLength;\r\n\r\n        const className = classNames({'text-exclude': this.props.isChecked && this.isExclude});\r\n        const label: JSX.Element = <span className={className}>{this.props.facetRow.formattedName}</span>;\r\n\r\n        return this.props.facetRow.formattedName.length > maxCalculatedNameLength ? (\r\n            <Tooltip\r\n                title={this.props.facetRow.tooltipLabel || this.props.facetRow.formattedName}\r\n                placement=\"top\"\r\n                className=\"label\"\r\n            >\r\n                {label}\r\n            </Tooltip>\r\n        ) : (\r\n            <span className=\"label\">{label}</span>\r\n        );\r\n    }\r\n\r\n    private getCount(): JSX.Element {\r\n        if (!_.isUndefined(this.props.facetRow.count)) {\r\n            return (\r\n                <span\r\n                    className={classNames('facet-value-count', {\r\n                        'text-exclude': this.props.isChecked && this.isExclude,\r\n                    })}\r\n                >\r\n                    {this.props.facetRow.count}\r\n                </span>\r\n            );\r\n        }\r\n    }\r\n\r\n    private getExcludeCheckbox(): JSX.Element {\r\n        if (!!this.props.enableExclusions) {\r\n            return (\r\n                <div className=\"flex center-align facet-exclude-button\" onClick={() => this.toggleFacetToExclude()}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"coveo-checkbox\"\r\n                        checked={this.props.isChecked && this.isExclude}\r\n                        onClick={this.stopEvent}\r\n                        onChange={_.noop}\r\n                    />\r\n                    {this.getExcludeButton()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    private getExcludeButton(): JSX.Element {\r\n        return this.props.excludeTooltipMessage ? (\r\n            <Tooltip\r\n                className=\"exclude-button\"\r\n                title={this.props.excludeTooltipMessage(this.props.facetRow.formattedName)}\r\n            >\r\n                <Svg svgName=\"exclude\" className=\"icon\" svgClass=\"fill-medium-grey\" />\r\n            </Tooltip>\r\n        ) : (\r\n            <Svg svgName=\"exclude\" className=\"exclude-button icon\" svgClass=\"fill-medium-grey\" />\r\n        );\r\n    }\r\n\r\n    private stopEvent(event: React.MouseEvent<HTMLInputElement>): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    private toggleFacetToExclude(): void {\r\n        this.props.onToggleFacet({...this.props.facetRow, exclude: !this.isExclude});\r\n    }\r\n\r\n    private toggleFacet(): void {\r\n        this.props.onToggleFacet({...this.props.facetRow, exclude: false});\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {Facet, IFacet, IFacetDispatchProps, IFacetOwnProps, IFacetProps, IFacetStateProps} from './Facet';\r\nimport {addFacet, changeFacet, emptyFacet, removeFacet} from './FacetActions';\r\nimport {IFacetState} from './FacetReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFacetOwnProps): IFacetStateProps => {\r\n    const item: IFacetState = _.findWhere(state.facets, {facet: ownProps.facet.name});\r\n    const selectedFacetRows: IFacet[] = item ? getSelectedRows(ownProps.facetRows, item.selected) : [];\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n        selectedFacetRows,\r\n        withReduxState: true,\r\n    };\r\n};\r\n\r\nconst getSelectedRows = (rows: IFacet[], selectedRows: IFacet[]): IFacet[] =>\r\n    _.compact(\r\n        _.map(rows, (row: IFacet) => {\r\n            const selectedRow: IFacet = _.findWhere(selectedRows, {name: row.name});\r\n            return selectedRow && {...selectedRow, ...row};\r\n        })\r\n    );\r\n\r\nconst mapDispatchToProps = (dispatch: (action: IReduxAction<IReduxActionsPayload>) => void): IFacetDispatchProps => ({\r\n    onRender: (facet: string) => dispatch(addFacet(facet)),\r\n    onDestroy: (facet: string) => dispatch(removeFacet(facet)),\r\n    onToggleFacet: (facet: string, facetRow: IFacet) => dispatch(changeFacet(facet, facetRow)),\r\n    onClearFacet: (facet: string) => dispatch(emptyFacet(facet)),\r\n});\r\n\r\nexport const FacetConnected: React.ComponentClass<IFacetProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Facet);\r\n"],"sourceRoot":""}