{"version":3,"sources":["webpack:///./src/components/textarea/TextArea.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/887.bundle.js","sourcesContent":["export default \"import * as React from 'react';\\r\\nimport {connect} from 'react-redux';\\r\\nimport TextareaAutosize, {TextareaAutosizeProps} from 'react-textarea-autosize';\\r\\nimport * as _ from 'underscore';\\r\\n\\r\\nimport {IReactVaporState} from '../../ReactVapor';\\r\\nimport {IDispatch, ReduxUtils} from '../../utils';\\r\\nimport {ILabelProps, Label} from '../input';\\r\\nimport {addTextArea, changeTextAreaValue, removeTextArea} from './TextAreaActions';\\r\\n\\r\\nexport interface ITextAreaOwnProps {\\r\\n    id: string;\\r\\n    className?: string;\\r\\n    additionalAttributes?: React.DetailedHTMLProps<\\r\\n        React.TextareaHTMLAttributes<HTMLTextAreaElement>,\\r\\n        HTMLTextAreaElement\\r\\n    > &\\r\\n        TextareaAutosizeProps;\\r\\n    /**\\r\\n     * Use with TextAreaConnected. Only useful in a Redux context.\\r\\n     */\\r\\n    valueOnMount?: string;\\r\\n    /**\\r\\n     * Use with TextAreaConnected. Only useful in a Redux context.\\r\\n     */\\r\\n    disabledOnMount?: boolean;\\r\\n\\r\\n    isAutosize?: boolean;\\r\\n\\r\\n    onChangeCallback?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\\r\\n    validate?: (value: string) => boolean;\\r\\n    validationMessage?: string;\\r\\n    validationLabelProps?: ILabelProps;\\r\\n}\\r\\n\\r\\nexport interface ITextAreaStateProps {\\r\\n    value?: string;\\r\\n    disabled?: boolean;\\r\\n}\\r\\n\\r\\nexport interface ITextAreaDispatchProps {\\r\\n    onChange?: React.ChangeEventHandler<HTMLTextAreaElement>;\\r\\n    onMount?: () => void;\\r\\n    onUnmount?: () => void;\\r\\n}\\r\\n\\r\\nexport interface ITextAreaProps extends ITextAreaOwnProps, ITextAreaStateProps, ITextAreaDispatchProps {}\\r\\n\\r\\nconst mapStateToProps = (state: IReactVaporState, ownProps: ITextAreaOwnProps): ITextAreaStateProps => {\\r\\n    const {value, disabled} = _.findWhere(state.textAreas, {id: ownProps.id}) || {value: '', disabled: false};\\r\\n    return {value, disabled};\\r\\n};\\r\\n\\r\\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: ITextAreaOwnProps): ITextAreaDispatchProps => ({\\r\\n    onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => dispatch(changeTextAreaValue(ownProps.id, e.target.value)),\\r\\n    onMount: () => dispatch(addTextArea(ownProps.id, ownProps.valueOnMount, ownProps.disabledOnMount)),\\r\\n    onUnmount: () => dispatch(removeTextArea(ownProps.id)),\\r\\n});\\r\\n\\r\\nexport const TextArea: React.FunctionComponent<ITextAreaProps> = (props) => {\\r\\n    const [debouncedValue, setDebouncedValue] = React.useState(props.value);\\r\\n    const [isValid, setIsValid] = React.useState(true);\\r\\n\\r\\n    React.useEffect(() => {\\r\\n        setTimeout(() => {\\r\\n            setDebouncedValue(props.value);\\r\\n        }, 300);\\r\\n    }, [props.value]);\\r\\n\\r\\n    React.useEffect(() => {\\r\\n        setIsValid(props.validate?.(debouncedValue));\\r\\n    }, [debouncedValue]);\\r\\n\\r\\n    React.useEffect(() => {\\r\\n        props.onMount?.();\\r\\n        setIsValid(true);\\r\\n        if (props.onUnmount) {\\r\\n            return props.onUnmount;\\r\\n        }\\r\\n    }, []);\\r\\n\\r\\n    const getValidationLabel = () => {\\r\\n        return (\\r\\n            !isValid && (\\r\\n                <div className={'pt1'}>\\r\\n                    <Label id={'textarea-validation-label'} className={'text-red'} {...props.validationLabelProps}>\\r\\n                        {props.validationMessage}\\r\\n                    </Label>\\r\\n                </div>\\r\\n            )\\r\\n        );\\r\\n    };\\r\\n\\r\\n    const handleOnChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\\r\\n        props.onChange?.(e);\\r\\n        props.onChangeCallback?.(e);\\r\\n    };\\r\\n\\r\\n    const TextareaTagName: any = props.isAutosize ? TextareaAutosize : 'textarea';\\r\\n\\r\\n    return (\\r\\n        <>\\r\\n            <TextareaTagName\\r\\n                {...props.additionalAttributes}\\r\\n                disabled={props.disabled}\\r\\n                className={props.className}\\r\\n                value={props.value}\\r\\n                onChange={handleOnChange}\\r\\n            />\\r\\n            {props.children}\\r\\n            {getValidationLabel()}\\r\\n        </>\\r\\n    );\\r\\n};\\r\\n\\r\\nexport const TextAreaConnected: React.ComponentClass<ITextAreaProps> = connect(\\r\\n    mapStateToProps,\\r\\n    mapDispatchToProps,\\r\\n    ReduxUtils.mergeProps\\r\\n)(TextArea);\\r\\n\""],"sourceRoot":""}