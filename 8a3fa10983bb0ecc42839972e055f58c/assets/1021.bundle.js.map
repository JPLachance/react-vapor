{"version":3,"sources":["webpack:///./src/components/refresh/examples/RefreshExamples.tsx?3639","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/input/InputDescription.tsx?8553","webpack:///./src/components/input/LabeledInput.tsx?95a1","webpack:///./src/components/refresh/RefreshCallback.tsx?1738","webpack:///./src/components/refresh/ButtonWithRefreshCallback.tsx?5b8c"],"names":["RefreshExamples","undefined","dispatch","start","id","stop","props","level","title","label","name","className","onClick","callback","alert","delay","button","enabled","buttonContainerProps","ButtonPropsToOmit","this","getTemplate","buttonClass","buttonElement","buttonAttrs","disabled","link","target","rel","href","children","tooltip","placement","tooltipPlacement","getClasses","primary","small","classes","render","defaultProps","Section","description","mods","titleProps","H","InputDescription","LabeledInput","message","helpText","headerClassName","optionalInformation","header","information","Top","svgName","svgClass","state","count","status","inProgress","stopped","started","stopInterval","clearInterval","activeInterval","startInterval","window","setInterval","setState","prevState","REFRESH_CALLBACK_INTERVAL_MS","componentDidMount","componentDidUpdate","prevProps","isStarted","isStopped","componentWillUnmount","isInProgress","renderCount","RefreshCallback","ownProps","getRefreshStatus","RefreshCallbackDisconnected","isNotStopped","ButtonWithRefreshCallback","refreshCallbackProps"],"mappings":"8FAAA,+HAqDaA,EAAkB,iBAAQC,GA1CZ,SAACC,GAAwB,OAChDC,MAAO,SAACC,GAAe,OAAAF,EAAS,IAAuBC,MAAMC,KAC7DC,KAAM,SAACD,GAAe,OAAAF,EAAS,IAAuBG,KAAKD,QAwChC,EArCK,SAACE,GAAiD,OAClF,gCACI,gBAAC,IAAO,CAACC,MAAO,EAAGC,MAAM,+BACrB,gBAAC,IAAY,CAACC,MAAM,mBAChB,gBAAC,IAAM,CAACC,KAAK,QAAQC,UAAU,UAAUC,QAAS,WAAM,OAAAN,EAAMH,MAAM,gBACpE,gBAAC,IAAM,CAACO,KAAK,OAAOC,UAAU,MAAMC,QAAS,WAAM,OAAAN,EAAMD,KAAK,gBAC9D,2BACI,gBAAC,IAAe,CAACD,GAAG,YAAYS,SAAU,WAAM,OAAAC,MAAM,qBAIlE,gBAAC,IAAO,CAACP,MAAO,EAAGC,MAAM,uDACrB,gBAAC,IAAY,CAACC,MAAM,mBAChB,gBAAC,IAAM,CAACC,KAAK,QAAQC,UAAU,UAAUC,QAAS,WAAM,OAAAN,EAAMH,MAAM,gBACpE,gBAAC,IAAM,CAACO,KAAK,OAAOC,UAAU,MAAMC,QAAS,WAAM,OAAAN,EAAMD,KAAK,gBAC9D,2BACI,gBAAC,IAAyB,CACtBD,GAAG,YACHW,MAAO,GACPF,SAAU,SAACV,GACPW,MAAM,eACNX,KAEJa,OAAQ,CACJN,KAAM,UACNO,SAAS,GAEbC,qBAAsB,CAClBP,UAAW,iB,ymBC/BjCQ,EAAoB,CAAH,oHAEvB,2B,+CAyEA,OAzE4B,OAWhB,YAAAP,QAAR,WACQQ,KAAKd,MAAMM,SAAWQ,KAAKd,MAAMW,SACjCG,KAAKd,MAAMM,WAInB,YAAAS,YAAA,SAAYC,GAAZ,IACQC,EADR,OAGQC,EAAc,EAAH,KACR,OAAOJ,KAAKd,MAAOa,IAAkB,CACxCM,UAAWL,KAAKd,MAAMW,QACtBL,QAAS,WAAM,SAAKA,aAyBxB,OAtBIQ,KAAKd,MAAMoB,MACXF,EAAc,SAASA,EAAa,CAChCG,OAAQP,KAAKd,MAAMqB,OACnBC,IAAK,sBACLC,KAAMT,KAAKd,MAAMoB,OAGrBH,EACI,uBAAGZ,UAAcW,EAAW,kBAAsBE,GAC7CJ,KAAKd,MAAMI,KACXU,KAAKd,MAAMwB,WAIpBP,EACI,4BAAQZ,UAAWW,GAAiBE,GAC/BJ,KAAKd,MAAMI,KACXU,KAAKd,MAAMwB,UAKhB,UAAUV,KAAKd,MAAMyB,SAIzB,EAHA,gBAAC,IAAO,CAACvB,MAAOY,KAAKd,MAAMyB,QAASC,UAAWZ,KAAKd,MAAM2B,iBAAkBtB,UAAU,iBACjFY,IAOL,YAAAW,WAAR,WACI,OAAO,EACH,MACA,CACI,cAAed,KAAKd,MAAM6B,QAC1B,YAAaf,KAAKd,MAAM8B,MACxB,2BAA4BhB,KAAKd,MAAMW,QACvC,oBAAqBG,KAAKd,MAAM6B,UAAYf,KAAKd,MAAMW,SAE3DG,KAAKd,MAAM+B,UAInB,YAAAC,OAAA,WACI,OAAOlB,KAAKC,YAAYD,KAAKc,eAtE1B,EAAAK,aAAsC,CACzCtB,SAAS,EACTP,KAAM,GACNqB,QAAS,GACTI,SAAS,EACTC,OAAO,EACPH,iBAAkB,QAClBN,OAAQ,IAiEhB,EAzEA,CAA4B,c,oSCFfa,EAAkD,SAAC,G,IAC5DV,EAAA,EAAAA,SACAtB,EAAA,EAAAA,MACAiC,EAAA,EAAAA,YACA9B,EAAA,EAAAA,UACA+B,EAAA,EAAAA,KACA,IAAAnC,aAAA,IAAQ,EAAR,IAEMoC,EAA2C,CAC7ChC,UAAW,uBACXmB,SAAUtB,GAERoC,EAAI,KAAIrC,EAAQ,GACtB,OACI,4BAAUI,UAAW,EAAWA,EAAW+B,EAAM,SAASnC,EAAK,qCAC1DC,GAAS,gBAACoC,EAAC,KAAKD,IAChBF,GAAe,qBAAG9B,UAAU,eAAe8B,GAC3CX,K,iCC9Bb,6CAEae,EAA4C,SAAC,G,IAACf,EAAA,EAAAA,SAAc,OACrE,2BAASnB,UAAU,mCAAmCmB,K,iCCH1D,sFAeagB,EAA4D,SAAC,G,IACtEhB,EAAA,EAAAA,SACArB,EAAA,EAAAA,MACAsC,EAAA,EAAAA,QACA,IAAAC,SACAC,EAAA,EAAAA,gBACA,IAAAC,oBAEMC,EACA1C,GAAW2C,EACT,0BAAQzC,UAAW,EAAW,QAAS,kBAAmBsC,IACnDxC,EAAQ,4BAAOA,GAAgB,KAC/B2C,EACC,gBAAC,IAAO,CAAC5C,MAAO4C,EAAapB,UAAW,IAAiBqB,IAAK1C,UAAU,OACpE,gBAAC,IAAG,CAAC2C,QAAQ,UAAUC,SAAS,2BAEpC,MAER,KAER,OACI,uBAAK5C,UAAU,iBACVwC,EACArB,IACEiB,GAAW,gBAAC,IAAgB,KAAEA,KAC9BN,GAAe,gBAAC,IAAgB,KAAEA,M,qaCPjD,yE,OAQI,EAAAe,MAAQ,CACJC,MAAO,EAAKnD,MAAMS,O,EAyD1B,OAlE0C,OAYtC,sBAAI,2BAAY,C,IAAhB,WACI,OAA4B,IAArBK,KAAKoC,MAAMC,OAAerC,KAAKd,MAAMoD,SAAW,IAAcC,Y,gCAGzE,sBAAI,wBAAS,C,IAAb,WACI,OAAOvC,KAAKd,MAAMoD,SAAW,IAAcE,S,gCAG/C,sBAAI,wBAAS,C,IAAb,WACI,OAAOxC,KAAKd,MAAMoD,SAAW,IAAcG,S,gCAGvC,YAAAC,aAAR,WACIC,cAAc3C,KAAK4C,iBAGf,YAAAC,cAAR,sBACI7C,KAAK4C,eAAiBE,OAAOC,aAAY,WACrC,EAAKC,UAAS,SAACC,GAAqC,OAChDZ,MAAOY,EAAUZ,MAAQ,QAE9B,IAASa,8BACZlD,KAAKd,MAAMqD,cAGf,YAAAY,kBAAA,WACInD,KAAK6C,iBAGT,YAAAO,mBAAA,SAAmBC,EAA4CJ,GACvDjD,KAAKsD,WACLtD,KAAK0C,eACL1C,KAAKgD,SAAS,CACVX,MAAOrC,KAAKd,MAAMS,QAEtBK,KAAK6C,iBACE7C,KAAKuD,WACZvD,KAAK0C,gBAIb,YAAAc,qBAAA,WACIxD,KAAK0C,gBAGT,YAAAxB,OAAA,W,QAOI,OANIlB,KAAKyD,eACLzD,KAAK0C,eACL1C,KAAKd,MAAMD,OACQ,QAAnB,KAAAe,KAAKd,OAAMO,gBAAQ,gBAAGO,KAAKd,MAAMH,QAG9BiB,KAAKd,MAAMwE,YAAY1D,KAAKoC,MAAMC,QA/DtC,EAAAlB,aAA+C,CAClDxB,MAAO,GACP+D,YAAa,SAACrB,GAAkB,mC,mBAAuBA,E,cA+D/D,EAlEA,CAA0C,iBAoE7BsB,EAAkB,aAlFP,SAACvB,EAAyBwB,GAAuC,OACrFtB,OAAQ,IAAuBuB,iBAAiBzB,EAAO,CAACpD,GAAI4E,EAAS5E,SAG9C,SAACF,EAAqB8E,GAAuC,OACpF7E,MAAO,WAAM,OAAAD,EAAS,IAAuBC,MAAM6E,EAAS5E,MAC5DC,KAAM,WAAM,OAAAH,EAAS,IAAuBG,KAAK2E,EAAS5E,MAC1DuD,WAAY,WAAM,OAAAzD,EAAS,IAAuByD,WAAWqB,EAAS5E,SA2E3C,CAA6C8E,I,opBC7EtEC,EAAe,SAACzB,GAAmB,OAAAA,IAAW,IAAcE,SA2BrDwB,EAA4B,aApCjB,SAAC5B,EAAyBwB,GAA8C,OAC5FtB,OAAQ,IAAuBuB,iBAAiBzB,EAAO,CAACpD,GAAI4E,EAAS5E,SAG9C,SAACF,EAAqB8E,GAA8C,OAC3F7E,MAAO,WAAM,OAAAD,EAAS,IAAuBC,MAAM6E,EAAS5E,MAC5DC,KAAM,WAAM,OAAAH,EAAS,IAAuBG,KAAK2E,EAAS5E,SA8BrB,EAvBa,SAAC,GACnD,IAAAY,EAAA,EAAAA,OACAE,EAAA,EAAAA,qBACAwC,EAAA,EAAAA,OACAvD,EAAA,EAAAA,MACAE,EAAA,EAAAA,KACA,iEACE,OACF,gCACI,2BAAUa,GAAwB,IAC9B,gBAAC,IAAM,KACCF,EAAM,CACVJ,QAAS,W,QACLP,IAC6B,QAA7B,KAAAgF,GAAqBxE,gBAAQ,gBAAGV,IAEpCc,QAASkE,EAAazB,OAG9B,gBAAC,IAAe,KAAK2B","file":"assets/1021.bundle.js","sourcesContent":["import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {IDispatch} from '../../../utils/ReduxUtils';\nimport {Button} from '../../button/Button';\nimport {LabeledInput} from '../../input/LabeledInput';\nimport {Section} from '../../section/Section';\nimport {ButtonWithRefreshCallback} from '../ButtonWithRefreshCallback';\nimport {RefreshCallBackActions} from '../RefeshCallbackActions';\nimport {RefreshCallback} from '../RefreshCallback';\n\n// start-print\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\n    start: (id: string) => dispatch(RefreshCallBackActions.start(id)),\n    stop: (id: string) => dispatch(RefreshCallBackActions.stop(id)),\n});\n\nconst RefreshExamplesDisconnected = (props: ReturnType<typeof mapDispatchToProps>) => (\n    <>\n        <Section level={2} title=\"Component to handle Refresh\">\n            <LabeledInput label=\"Refresh counter\">\n                <Button name=\"Start\" className=\"btn mr2\" onClick={() => props.start('refresh-1')} />\n                <Button name=\"Stop\" className=\"btn\" onClick={() => props.stop('refresh-1')} />\n                <div>\n                    <RefreshCallback id=\"refresh-1\" callback={() => alert('refresh end')} />\n                </div>\n            </LabeledInput>\n        </Section>\n        <Section level={2} title=\"Component with a button to call the refreshCallback\">\n            <LabeledInput label=\"Refresh counter\">\n                <Button name=\"Start\" className=\"btn mr2\" onClick={() => props.start('refresh-2')} />\n                <Button name=\"Stop\" className=\"btn\" onClick={() => props.stop('refresh-2')} />\n                <div>\n                    <ButtonWithRefreshCallback\n                        id=\"refresh-2\"\n                        delay={20}\n                        callback={(start) => {\n                            alert('refresh end');\n                            start();\n                        }}\n                        button={{\n                            name: 'Refresh',\n                            enabled: true,\n                        }}\n                        buttonContainerProps={{\n                            className: 'mb2',\n                        }}\n                    />\n                </div>\n            </LabeledInput>\n        </Section>\n    </>\n);\n\nexport const RefreshExamples = connect(undefined, mapDispatchToProps)(RefreshExamplesDisconnected);\n// stop-print\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","import * as React from 'react';\n\nexport const InputDescription: React.FunctionComponent = ({children}) => (\n    <section className=\"text-dark-medium-grey help-text\">{children}</section>\n);\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\nimport {Svg} from '../svg/Svg';\nimport {Tooltip} from '../tooltip/Tooltip';\nimport {InputDescription} from './InputDescription';\n\nexport interface ILabeledInputProps {\n    label?: React.ReactNode;\n    message?: React.ReactNode;\n    helpText?: React.ReactNode;\n    headerClassName?: string;\n    optionalInformation?: string;\n}\n\nexport const LabeledInput: React.FunctionComponent<ILabeledInputProps> = ({\n    children,\n    label,\n    message,\n    helpText: description,\n    headerClassName,\n    optionalInformation: information,\n}) => {\n    const header =\n        !!label || !!information ? (\n            <header className={classNames('label', 'text-light-blue', headerClassName)}>\n                {!!label ? <span>{label}</span> : null}\n                {!!information ? (\n                    <Tooltip title={information} placement={TooltipPlacement.Top} className=\"ml1\">\n                        <Svg svgName=\"info-14\" svgClass=\"icon fill-medium-grey\" />\n                    </Tooltip>\n                ) : null}\n            </header>\n        ) : null;\n\n    return (\n        <div className=\"labeled-input\">\n            {header}\n            {children}\n            {!!message && <InputDescription>{message}</InputDescription>}\n            {!!description && <InputDescription>{description}</InputDescription>}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {Defaults} from '../../Defaults';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {RefreshCallBackActions} from './RefeshCallbackActions';\nimport {RefreshStatus, RefreshStatusSelectors} from './RefreshCallbackReducer';\n\nexport interface IRefreshCallbackOwnProps {\n    id: string;\n    delay?: number;\n    renderCount?: (count: number) => React.ReactNode;\n    callback: (start: () => void) => void;\n}\n\nexport interface IRefreshCallbackState {\n    count: number;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IRefreshCallbackOwnProps) => ({\n    status: RefreshStatusSelectors.getRefreshStatus(state, {id: ownProps.id}),\n});\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IRefreshCallbackOwnProps) => ({\n    start: () => dispatch(RefreshCallBackActions.start(ownProps.id)),\n    stop: () => dispatch(RefreshCallBackActions.stop(ownProps.id)),\n    inProgress: () => dispatch(RefreshCallBackActions.inProgress(ownProps.id)),\n});\n\nexport type IRefreshCallbackProps = IRefreshCallbackOwnProps &\n    ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>;\n\nclass RefreshCallbackDisconnected extends React.PureComponent<IRefreshCallbackProps, IRefreshCallbackState> {\n    static defaultProps: Partial<IRefreshCallbackProps> = {\n        delay: 10,\n        renderCount: (count: number) => <span>Auto refresh in {count} seconds</span>,\n    };\n\n    private activeInterval: number;\n\n    state = {\n        count: this.props.delay,\n    };\n\n    get isInProgress() {\n        return this.state.count === 0 && this.props.status === RefreshStatus.inProgress;\n    }\n\n    get isStopped() {\n        return this.props.status === RefreshStatus.stopped;\n    }\n\n    get isStarted() {\n        return this.props.status === RefreshStatus.started;\n    }\n\n    private stopInterval() {\n        clearInterval(this.activeInterval);\n    }\n\n    private startInterval() {\n        this.activeInterval = window.setInterval(() => {\n            this.setState((prevState: IRefreshCallbackState) => ({\n                count: prevState.count - 1,\n            }));\n        }, Defaults.REFRESH_CALLBACK_INTERVAL_MS);\n        this.props.inProgress();\n    }\n\n    componentDidMount() {\n        this.startInterval();\n    }\n\n    componentDidUpdate(prevProps: Readonly<IRefreshCallbackProps>, prevState: Readonly<IRefreshCallbackState>) {\n        if (this.isStarted) {\n            this.stopInterval();\n            this.setState({\n                count: this.props.delay,\n            });\n            this.startInterval();\n        } else if (this.isStopped) {\n            this.stopInterval();\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    render() {\n        if (this.isInProgress) {\n            this.stopInterval();\n            this.props.stop();\n            this.props.callback?.(this.props.start);\n        }\n\n        return this.props.renderCount(this.state.count);\n    }\n}\n\nexport const RefreshCallback = connect(mapStateToProps, mapDispatchToProps)(RefreshCallbackDisconnected);\n","import {FunctionComponent} from 'react';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {Button, IButtonProps} from '../button/Button';\nimport {RefreshCallBackActions} from './RefeshCallbackActions';\nimport {IRefreshCallbackOwnProps, RefreshCallback} from './RefreshCallback';\nimport {RefreshStatus, RefreshStatusSelectors} from './RefreshCallbackReducer';\n\nexport interface IButtonWithRefreshCallbackProps extends IRefreshCallbackOwnProps {\n    buttonContainerProps?: React.HtmlHTMLAttributes<HTMLDivElement>;\n    button: IButtonProps;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IButtonWithRefreshCallbackProps) => ({\n    status: RefreshStatusSelectors.getRefreshStatus(state, {id: ownProps.id}),\n});\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IButtonWithRefreshCallbackProps) => ({\n    start: () => dispatch(RefreshCallBackActions.start(ownProps.id)),\n    stop: () => dispatch(RefreshCallBackActions.stop(ownProps.id)),\n});\n\nconst isNotStopped = (status: string) => status !== RefreshStatus.stopped;\n\nconst buttonWithRefreshCallbackDisconnected: FunctionComponent<IButtonWithRefreshCallbackProps &\n    Partial<ReturnType<typeof mapStateToProps>> &\n    Partial<ReturnType<typeof mapDispatchToProps>>> = ({\n    button,\n    buttonContainerProps,\n    status,\n    start,\n    stop,\n    ...refreshCallbackProps\n}) => (\n    <>\n        <div {...(buttonContainerProps || {})}>\n            <Button\n                {...button}\n                onClick={() => {\n                    stop();\n                    refreshCallbackProps.callback?.(start);\n                }}\n                enabled={isNotStopped(status)}\n            />\n        </div>\n        <RefreshCallback {...refreshCallbackProps} />\n    </>\n);\n\nexport const ButtonWithRefreshCallback = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(buttonWithRefreshCallbackDisconnected);\n"],"sourceRoot":""}