{"version":3,"sources":["webpack:///./src/components/multiStepBar/examples/MultiStepBarExamples.tsx?718a","webpack:///./src/components/multiStepBar/MultiStepBar.tsx?05eb"],"names":["render","stepsWithoutText","state","Done","tooltip","title","placement","footer","Warning","Error","Doing","ToDo","multiStepBarProps","steps","map","step","i","text","className","inProgressAnimation","small","barAnimation","separator","MultiStepState","getStepContent","MultiStepBar","props","containerClasses","stepsContent","classes","key"],"mappings":"mrBAGA,2B,+CA8EA,OA9E0C,OACtC,YAAAA,OAAA,WACI,IAAMC,EAA4B,CAC9B,CACIC,MAAO,IAAeC,KACtBC,QAAS,CACLC,MAAO,qBACPC,UAAW,SACXC,OAAQ,uCAGhB,CACIL,MAAO,IAAeM,QACtBJ,QAAS,CACLC,MAAO,mCACPC,UAAW,SACXC,OAAQ,4BAGhB,CACIL,MAAO,IAAeO,MACtBL,QAAS,CACLC,MAAO,yBACPC,UAAW,SACXC,OAAQ,oCAGhB,CACIL,MAAO,IAAeQ,MACtBN,QAAS,CACLC,MAAO,qCACPC,UAAW,SACXC,OAAQ,2CAGhB,CACIL,MAAO,IAAeS,KACtBP,QAAS,CACLC,MAAO,4BACPC,UAAW,SACXC,OAAQ,6CAKdK,EAAwC,CAC1CC,MAFkBZ,EAAiBa,KAAI,SAACC,EAAMC,GAAM,cAAKD,GAAI,CAAEE,KAAM,QAAQD,QAIjF,OACI,uBAAKE,UAAU,OACX,uBAAKA,UAAU,cACX,yBAAOA,UAAU,sBAAoB,kBACrC,gBAAC,IAAY,KAAKN,KAEtB,uBAAKM,UAAU,cACX,yBAAOA,UAAU,sBAAoB,mDACrC,gBAAC,IAAY,KAAKN,EAAiB,CAAEO,oBAAqB,YAE9D,uBAAKD,UAAU,cACX,yBAAOA,UAAU,sBAAoB,6CACrC,gBAAC,IAAY,KAAKN,EAAiB,CAAEC,MAAOZ,EAAkBmB,OAAO,EAAMC,aAAc,YAE7F,uBAAKH,UAAU,cACX,yBAAOA,UAAU,sBAAoB,yDACrC,gBAAC,IAAY,KACLN,EAAiB,CACrBC,MAAOZ,EACPmB,OAAO,EACPD,oBAAqB,YAG7B,uBAAKD,UAAU,cACX,yBAAOA,UAAU,sBAAoB,iCACrC,gBAAC,IAAY,KAAKN,EAAiB,CAAEU,WAAW,QAKpE,EA9EA,CAA0C,c,yGCE9BC,E,sOAAZ,SAAYA,GACR,eACA,gBACA,cACA,gBACA,oBALJ,CAAYA,MAAc,KAuB1B,IAAMC,EAAiB,SAACT,GACpB,OAAOA,EAAKE,KAAO,uBAAKC,UAAU,uBAAuBH,EAAKE,MAAc,MAGnEQ,EAAe,SAACC,GAClB,IAAAR,EAAA,EAAAA,UAAWE,EAAA,EAAAA,MAAOD,EAAA,EAAAA,oBAAqBE,EAAA,EAAAA,aAAcC,EAAA,EAAAA,UAAWT,EAAA,EAAAA,MACjEc,EAAmB,EAAWT,EAAW,CAC3C,4BAA4B,EAC5B,mDAA4E,UAAxBC,EACpD,iDAA0E,UAAxBA,EAClD,qCAAuD,UAAjBE,EACtC,+BAAgCC,EAChC,YAAaF,IAEXQ,EAAef,EAAMC,IAAIU,GAC/B,OACI,uBAAKN,UAAWS,GACZ,uBAAKT,UAAU,qCACVL,EAAMC,KAAI,SAACC,EAAaC,GACrB,IAAMa,EAAU,EAAW,iBAAkB,kBAAkBd,EAAKb,OACpE,OACI,uBAAK4B,IAAK,2BAA2Bd,EAAKE,UAAWW,GAChDD,EAAaZ,QAK9B,uBAAKE,UAAU,oCACVL,EAAMC,KAAI,SAACC,EAAaC,GACrB,IAAMc,EAAM,kBAAkBd,EACxBa,EAAU,EAAW,kBAC3B,OAAOd,EAAKX,SAAWW,EAAKX,QAAQC,MAChC,gBAAC,IAAO,KAAKU,EAAKX,QAAO,CAAE0B,IAAKA,EAAKZ,UAAWW,IAC3CD,EAAaZ,IAGlB,wBAAMc,IAAKA,EAAKZ,UAAWW,GACtBD,EAAaZ","file":"assets/1057.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {IMultiStepBarProps, IStep, MultiStepBar, MultiStepState} from '../MultiStepBar';\r\n\r\nexport class MultiStepBarExamples extends React.Component<any, any> {\r\n    render() {\r\n        const stepsWithoutText: IStep[] = [\r\n            {\r\n                state: MultiStepState.Done,\r\n                tooltip: {\r\n                    title: 'This step is done!',\r\n                    placement: 'bottom',\r\n                    footer: 'Here is some information about it!',\r\n                },\r\n            },\r\n            {\r\n                state: MultiStepState.Warning,\r\n                tooltip: {\r\n                    title: 'This one finished with a warning',\r\n                    placement: 'bottom',\r\n                    footer: 'Better check your logs!',\r\n                },\r\n            },\r\n            {\r\n                state: MultiStepState.Error,\r\n                tooltip: {\r\n                    title: 'An error occurred here',\r\n                    placement: 'bottom',\r\n                    footer: 'Somehow the execution continued',\r\n                },\r\n            },\r\n            {\r\n                state: MultiStepState.Doing,\r\n                tooltip: {\r\n                    title: 'This step is currently in progress',\r\n                    placement: 'bottom',\r\n                    footer: 'Display some progress information here',\r\n                },\r\n            },\r\n            {\r\n                state: MultiStepState.ToDo,\r\n                tooltip: {\r\n                    title: 'This step is not yet done',\r\n                    placement: 'bottom',\r\n                    footer: 'Currently waiting for the previous step',\r\n                },\r\n            },\r\n        ];\r\n        const stepsWithText = stepsWithoutText.map((step, i) => ({...step, text: `Step ${i}`}));\r\n        const multiStepBarProps: IMultiStepBarProps = {\r\n            steps: stepsWithText,\r\n        };\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multi Step Bar</label>\r\n                    <MultiStepBar {...multiStepBarProps} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multi Step Bar with in-progress shine animation</label>\r\n                    <MultiStepBar {...multiStepBarProps} inProgressAnimation={'shine'} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Small Multi Step Bar with flare animation</label>\r\n                    <MultiStepBar {...multiStepBarProps} steps={stepsWithoutText} small={true} barAnimation={'flare'} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Small Multi Step Bar with in progress slide animation</label>\r\n                    <MultiStepBar\r\n                        {...multiStepBarProps}\r\n                        steps={stepsWithoutText}\r\n                        small={true}\r\n                        inProgressAnimation={'slide'}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multi Step Bar with separator</label>\r\n                    <MultiStepBar {...multiStepBarProps} separator={true} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {ITooltipProps, Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport enum MultiStepState {\r\n    ToDo = 'to-do',\r\n    Doing = 'doing',\r\n    Done = 'done',\r\n    Error = 'error',\r\n    Warning = 'warning',\r\n}\r\n\r\nexport interface IStep {\r\n    state: MultiStepState;\r\n    text?: string;\r\n    tooltip?: ITooltipProps;\r\n}\r\n\r\nexport interface IMultiStepBarProps {\r\n    steps: IStep[];\r\n    className?: IClassName;\r\n    small?: boolean;\r\n    separator?: boolean;\r\n    inProgressAnimation?: '' | 'slide' | 'shine';\r\n    barAnimation?: '' | 'flare';\r\n}\r\n\r\nconst getStepContent = (step: IStep): JSX.Element => {\r\n    return step.text ? <div className=\"multi-step-bar-text\">{step.text}</div> : null;\r\n};\r\n\r\nexport const MultiStepBar = (props: IMultiStepBarProps) => {\r\n    const {className, small, inProgressAnimation, barAnimation, separator, steps} = props;\r\n    const containerClasses = classNames(className, {\r\n        'multi-step-bar-container': true,\r\n        'mod-multi-step-bar-in-progress-sliding-animation': inProgressAnimation === 'slide',\r\n        'mod-multi-step-bar-in-progress-shine-animation': inProgressAnimation === 'shine',\r\n        'mod-multi-step-bar-flare-animation': barAnimation === 'flare',\r\n        'mod-multi-step-bar-separated': separator,\r\n        'mod-small': small,\r\n    });\r\n    const stepsContent = steps.map(getStepContent);\r\n    return (\r\n        <div className={containerClasses}>\r\n            <div className=\"multi-step-bar-backdrop-container\">\r\n                {steps.map((step: IStep, i: number) => {\r\n                    const classes = classNames('multi-step-bar', `multi-step-bar-${step.state}`);\r\n                    return (\r\n                        <div key={`multi-step-bar-backdrop-${i}`} className={classes}>\r\n                            {stepsContent[i]}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            <div className=\"multi-step-bar-content-container\">\r\n                {steps.map((step: IStep, i: number) => {\r\n                    const key = `multi-step-bar-${i}`;\r\n                    const classes = classNames('multi-step-bar');\r\n                    return step.tooltip && step.tooltip.title ? (\r\n                        <Tooltip {...step.tooltip} key={key} className={classes}>\r\n                            {stepsContent[i]}\r\n                        </Tooltip>\r\n                    ) : (\r\n                        <span key={key} className={classes}>\r\n                            {stepsContent[i]}\r\n                        </span>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"sourceRoot":""}