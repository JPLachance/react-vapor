(window.webpackJsonp=window.webpackJsonp||[]).push([[510],{1617:function(e,t,n){"use strict";n.r(t),t.default="import * as _ from 'underscore';\r\nimport {IReduxAction} from '../../../utils/ReduxUtils';\r\nimport {addMenu, IMenuPayload, removeMenu, toggleMenu} from '../MenuActions';\r\nimport {\r\n    IMenusState,\r\n    IMenuState,\r\n    menuCompositeInitialState,\r\n    menuCompositeReducer,\r\n    menuInitialState,\r\n    menuReducer,\r\n} from '../MenuReducers';\r\n\r\ndescribe('Menu', () => {\r\n    describe('Menu Reducers', () => {\r\n        const genericAction: IReduxAction<IMenuPayload> = {\r\n            type: 'DO_SOMETHING',\r\n            payload: {\r\n                id: 'menu-id',\r\n            },\r\n        };\r\n\r\n        it('should return the default state if the action is not defined and the state is undefined', () => {\r\n            const newState: IMenusState = menuCompositeReducer(undefined, genericAction);\r\n\r\n            expect(newState).toBe(menuCompositeInitialState);\r\n        });\r\n\r\n        it('should return the default state if the action is not defined and the state is undefined for one menu', () => {\r\n            const newState: IMenuState = menuReducer(undefined, genericAction);\r\n\r\n            expect(newState).toBe(menuInitialState);\r\n        });\r\n\r\n        it('should return the old state when the action is not defined', () => {\r\n            const oldState: IMenusState = {test: menuInitialState};\r\n            const newState: IMenusState = menuCompositeReducer(oldState, genericAction);\r\n\r\n            expect(newState).toBe(oldState);\r\n        });\r\n\r\n        it('should return the old state when the action is not defined for one menu', () => {\r\n            const oldState: IMenuState = menuInitialState;\r\n            const newState: IMenuState = menuReducer(oldState, genericAction);\r\n\r\n            expect(newState).toBe(oldState);\r\n        });\r\n\r\n        it('should return the old state when the action is not defined for one menu which is in the state', () => {\r\n            const oldState: IMenuState = {...menuInitialState, id: genericAction.payload.id};\r\n            const newState: IMenuState = menuReducer(oldState, genericAction);\r\n\r\n            expect(newState).toBe(oldState);\r\n        });\r\n\r\n        describe('ADD_MENU', () => {\r\n            const id = 'added-menu';\r\n\r\n            it('should return the old state with one more menu', () => {\r\n                const oldState: IMenusState = {[id]: {...menuInitialState, id}};\r\n                const newState: IMenusState = menuCompositeReducer(oldState, addMenu(id));\r\n\r\n                expect(newState[id].id).toBe(id);\r\n            });\r\n\r\n            it('should not modify the old state', () => {\r\n                const oldState: IMenusState = {[id]: {...menuInitialState, id}};\r\n                const oldStateBefore = _.clone(oldState);\r\n                menuCompositeReducer(oldState, addMenu(id));\r\n\r\n                expect(oldState).toEqual(oldStateBefore);\r\n            });\r\n        });\r\n\r\n        describe('REMOVE_MENU', () => {\r\n            const id = 'remove-menu';\r\n            let defaultState: IMenusState;\r\n\r\n            beforeEach(() => {\r\n                defaultState = {[id]: menuInitialState};\r\n            });\r\n\r\n            it('should return the old state with one less menu', () => {\r\n                const oldState: IMenusState = defaultState;\r\n                const newState: IMenusState = menuCompositeReducer(oldState, removeMenu(id));\r\n\r\n                expect(newState[id]).not.toBeDefined();\r\n            });\r\n\r\n            it('should not modify the old state', () => {\r\n                const oldState: IMenusState = {[id]: {...menuInitialState, id}};\r\n                const oldStateBefore = _.clone(oldState);\r\n                menuCompositeReducer(oldState, removeMenu(id));\r\n\r\n                expect(oldState).toEqual(oldStateBefore);\r\n            });\r\n        });\r\n\r\n        describe('TOGGLE_MENU', () => {\r\n            const id = 'open-menu';\r\n            let defaultState: IMenusState;\r\n\r\n            beforeEach(() => {\r\n                defaultState = {[id]: {...menuInitialState, id}};\r\n            });\r\n\r\n            it('should set the open property to true', () => {\r\n                const oldState: IMenusState = defaultState;\r\n                const newState: IMenusState = menuCompositeReducer(oldState, toggleMenu(id, true));\r\n\r\n                expect(newState[id].id).toBe(id);\r\n                expect(newState[id].open).toBe(true);\r\n            });\r\n\r\n            it('should set the open property to false if its true before', () => {\r\n                const oldState = _.clone(defaultState);\r\n                oldState[id].open = true;\r\n                const newState: IMenusState = menuCompositeReducer(oldState, toggleMenu(id));\r\n\r\n                expect(newState[id].id).toBe(id);\r\n                expect(newState[id].open).toBe(false);\r\n            });\r\n\r\n            it('should set the open property to true if its false before', () => {\r\n                const oldState = _.clone(defaultState);\r\n                oldState[id].open = false;\r\n                const newState: IMenusState = menuCompositeReducer(oldState, toggleMenu(id));\r\n\r\n                expect(newState[id].id).toBe(id);\r\n                expect(newState[id].open).toBe(true);\r\n            });\r\n\r\n            it('should not throw if the the open property is already true', () => {\r\n                const state = _.clone(defaultState);\r\n                state[id].open = true;\r\n\r\n                const oldState: IMenusState = state;\r\n                let newState: IMenusState = {};\r\n                expect(() => (newState = menuCompositeReducer(oldState, toggleMenu(id, true)))).not.toThrow();\r\n\r\n                expect(newState[id].id).toBe(id);\r\n                expect(newState[id].open).toBe(true);\r\n            });\r\n\r\n            it('should not modify the old state', () => {\r\n                const oldState: IMenusState = {[id]: {...menuInitialState, id}};\r\n                const oldStateBefore = _.clone(oldState);\r\n                menuCompositeReducer(oldState, toggleMenu(id, true));\r\n\r\n                expect(oldState).toEqual(oldStateBefore);\r\n            });\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=510.bundle.js.map