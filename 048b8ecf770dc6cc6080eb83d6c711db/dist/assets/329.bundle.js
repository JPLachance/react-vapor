(window.webpackJsonp=window.webpackJsonp||[]).push([[329],{1435:function(n,r,t){"use strict";t.r(r),r.default="import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {DropdownSearchInfiniteScrollOptions} from './DropdownSearchInfiniteScrollOptions';\r\n\r\nexport interface IDropdownSearchAutoInfiniteScrollOptions {\r\n    optionsPerPage: number;\r\n    endMessage?: React.ReactNode;\r\n    loader?: React.ReactNode;\r\n}\r\n\r\nexport interface IDropdownSearchAutoInfiniteScrollProps extends IDropdownSearchAutoInfiniteScrollOptions {\r\n    options: JSX.Element[];\r\n    onMouseEnter: () => void;\r\n    ulElementRefFunction: (menu: HTMLElement) => void;\r\n}\r\n\r\ninterface IDropdownSearchAutoInfiniteScrollState {\r\n    activeOptions: JSX.Element[];\r\n}\r\n\r\nexport class DropdownSearchAutoInfiniteScroll extends React.Component<\r\n    IDropdownSearchAutoInfiniteScrollProps,\r\n    IDropdownSearchAutoInfiniteScrollState\r\n> {\r\n    constructor(props: IDropdownSearchAutoInfiniteScrollProps, state: IDropdownSearchAutoInfiniteScrollState) {\r\n        super(props, state);\r\n        this.state = {\r\n            activeOptions: props.options.slice(0, props.optionsPerPage),\r\n        };\r\n    }\r\n\r\n    componentWillUpdate(nextProps: IDropdownSearchAutoInfiniteScrollProps) {\r\n        if (!_.isEqual(this.props.options, nextProps.options)) {\r\n            this.setState({activeOptions: nextProps.options.slice(0, this.props.optionsPerPage)});\r\n        }\r\n    }\r\n\r\n    private get hasMoreOptions() {\r\n        return this.state.activeOptions.length < this.props.options.length;\r\n    }\r\n\r\n    private get showEndMessage() {\r\n        if (this.props.endMessage && this.props.options.length > this.props.optionsPerPage) {\r\n            return this.props.endMessage;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private next() {\r\n        const index = this.state.activeOptions.length;\r\n        const additionalOptions = this.props.options.slice(index, index + this.props.optionsPerPage);\r\n        this.setState({activeOptions: this.state.activeOptions.concat(additionalOptions)});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <DropdownSearchInfiniteScrollOptions\r\n                infiniteScroll={{\r\n                    next: () => this.next(),\r\n                    dataLength: this.state.activeOptions.length,\r\n                    hasMore: this.hasMoreOptions,\r\n                    endMessage: this.showEndMessage,\r\n                    loader: this.props.loader || null,\r\n                }}\r\n                onMouseEnter={this.props.onMouseEnter}\r\n                ulElementRefFunction={this.props.ulElementRefFunction}\r\n                options={this.state.activeOptions}\r\n            />\r\n        );\r\n    }\r\n}\r\n"}}]);
//# sourceMappingURL=329.bundle.js.map