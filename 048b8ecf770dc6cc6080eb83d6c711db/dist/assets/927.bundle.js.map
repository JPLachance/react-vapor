{"version":3,"sources":["webpack:///./src/components/validation/hoc/WithDirtyInputHOC.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/927.bundle.js","sourcesContent":["export default \"import * as React from 'react';\\nimport {connect} from 'react-redux';\\nimport {IDispatch} from '../../../utils/ReduxUtils';\\nimport {IInputOwnProps} from '../../input/Input';\\nimport {ValidationActions} from '../ValidationActions';\\nimport {ValidationTypes} from '../ValidationTypes';\\nimport {InferableComponentEnhancer} from './connectHOC';\\n\\nexport interface IWithDirtyInputOwnProps {\\n    resetDirtyOnUnmount?: boolean;\\n}\\n\\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\\n    setIsDirty: (id: string, isDirty: boolean) =>\\n        dispatch(ValidationActions.setDirty(id, isDirty, ValidationTypes.wrongInitialValue)),\\n    clearIsDirty: (id: string) => dispatch(ValidationActions.clearDirty(id, ValidationTypes.wrongInitialValue)),\\n});\\n\\nexport const withDirtyInputHOC = <T extends IInputOwnProps>(Component: React.ComponentType<T>) => {\\n    type DispatchProps = ReturnType<typeof mapDispatchToProps>;\\n    const WrappedInput: React.FunctionComponent<T & IWithDirtyInputOwnProps & DispatchProps> = ({\\n        setIsDirty,\\n        clearIsDirty,\\n        validate,\\n        resetDirtyOnUnmount,\\n        ...props\\n    }) => {\\n        React.useEffect(() => {\\n            return () => {\\n                resetDirtyOnUnmount && clearIsDirty(props.id);\\n            };\\n        }, []);\\n\\n        return (\\n            <Component\\n                {...(props as T)}\\n                validate={(value: string) => {\\n                    setIsDirty(props.id, value !== props.defaultValue);\\n                    return validate ? validate(value) : true;\\n                }}\\n            />\\n        );\\n    };\\n\\n    const enhance = connect(null, mapDispatchToProps) as InferableComponentEnhancer<DispatchProps>;\\n    return enhance(WrappedInput);\\n};\\n\""],"sourceRoot":""}