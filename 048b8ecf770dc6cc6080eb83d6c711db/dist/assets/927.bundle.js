(window.webpackJsonp=window.webpackJsonp||[]).push([[927],{2023:function(n,t,i){"use strict";i.r(t),t.default="import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {IDispatch} from '../../../utils/ReduxUtils';\nimport {IInputOwnProps} from '../../input/Input';\nimport {ValidationActions} from '../ValidationActions';\nimport {ValidationIds} from '../ValidationIds';\nimport {InferableComponentEnhancer} from './connectHOC';\n\nexport interface IInputWithDirtyOwnProps {\n    resetDirtyOnUnmount?: boolean;\n}\n\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\n    setIsDirty: (id: string, isDirty: boolean) =>\n        dispatch(ValidationActions.setDirty(id, isDirty, ValidationIds.wrongInitialValue)),\n    clearIsDirty: (id: string) => dispatch(ValidationActions.clearDirty(id, ValidationIds.wrongInitialValue)),\n});\n\nexport const inputWithDirtyHOC = <T extends IInputOwnProps, R = any>(\n    Component: React.ComponentClass<T, R> | React.FunctionComponent<T>\n) => {\n    type DispatchProps = ReturnType<typeof mapDispatchToProps>;\n    const WrappedInput: React.FunctionComponent<T & IInputWithDirtyOwnProps & DispatchProps> = ({\n        setIsDirty,\n        clearIsDirty,\n        validate,\n        resetDirtyOnUnmount,\n        ...props\n    }) => {\n        React.useEffect(() => {\n            return () => {\n                resetDirtyOnUnmount && clearIsDirty(props.id);\n            };\n        }, []);\n\n        return (\n            <Component\n                {...(props as T)}\n                validate={(value: string) => {\n                    setIsDirty(props.id, value !== props.defaultValue);\n                    return validate ? validate(value) : true;\n                }}\n            />\n        );\n    };\n\n    const enhance = connect(null, mapDispatchToProps) as InferableComponentEnhancer<DispatchProps>;\n    return enhance(WrappedInput);\n};\n"}}]);
//# sourceMappingURL=927.bundle.js.map