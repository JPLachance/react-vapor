(window.webpackJsonp=window.webpackJsonp||[]).push([[346],{1454:function(e,t,n){"use strict";n.r(t),t.default="import * as _ from 'underscore';\r\nimport {keyCode} from '../../../../utils/InputUtils';\r\nimport {IReduxAction} from '../../../../utils/ReduxUtils';\r\nimport {IDropdownOption} from '../../DropdownSearch';\r\nimport {DropdownSearchActions, IOptionsDropdownSearchPayload} from '../../DropdownSearchActions';\r\nimport {IDropdownSearchState} from '../../DropdownSearchReducers';\r\nimport {multiSelectDropdownSearchReducer} from '../MultiSelectDropdownSearchReducer';\r\n\r\ndescribe('DropdownSearch', () => {\r\n    describe('MultiSelectDropdownSearchReducers', () => {\r\n        const defaultPayload = {id: 'new-dropdown-search'};\r\n        let options: IDropdownOption[] = [];\r\n        let defaultOldState: IDropdownSearchState = {id: 'new-dropdown-search'};\r\n\r\n        beforeEach(() => {\r\n            options = [{value: 'test 1'}, {value: 'test 2'}];\r\n\r\n            defaultOldState = {\r\n                ...defaultOldState,\r\n                options: options,\r\n                isOpened: false,\r\n            };\r\n        });\r\n\r\n        it('should add a new multiselect state on \"ADD_MULTI_SELECT_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState = {id: 'new-dropdown-search'};\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.addMultiSelect,\r\n                payload: {...defaultPayload, dropdownOptions: options},\r\n            };\r\n\r\n            const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(oldState, action);\r\n\r\n            for (const option of options) {\r\n                expect(updatedState.options.indexOf(option)).toBeDefined();\r\n            }\r\n            expect(_.where(updatedState.options, {selected: true})).toEqual([]);\r\n            expect(updatedState.isOpened).toBe(false);\r\n        });\r\n\r\n        it('should add a selected option on \"MULTI_SELECT_OPTION_DROPDOWN_SEARCH\"', () => {\r\n            const addedSelectedOption: IDropdownOption = options[0];\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.multiSelect,\r\n                payload: {...defaultPayload, addedSelectedOption},\r\n            };\r\n\r\n            const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n            expect(_.findWhere(updatedState.options, {...options[0], selected: true})).toBeDefined();\r\n        });\r\n\r\n        it('should remove the selected option from the displayed options on \"MULTI_SELECT_OPTION_DROPDOWN_SEARCH\"', () => {\r\n            const addedSelectedOption: IDropdownOption = options[0];\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.multiSelect,\r\n                payload: {...defaultPayload, addedSelectedOption},\r\n            };\r\n\r\n            const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n            expect(_.findWhere(updatedState.options, {...options[0], selected: true}).hidden).toBe(true);\r\n        });\r\n\r\n        it('should remove all from selectedOptions on \"REMOVE_ALL_SELECTED_OPTIONS_MULTISELECT_DROPDOWN_SEARCH\"', () => {\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.deselectAllOptions,\r\n                payload: defaultPayload,\r\n            };\r\n\r\n            const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n            expect(_.where(updatedState.options, {selected: true})).toEqual([]);\r\n        });\r\n\r\n        it('should display all options in displayed options on \"REMOVE_ALL_SELECTED_OPTIONS_MULTISELECT_DROPDOWN_SEARCH\"', () => {\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.deselectAllOptions,\r\n                payload: defaultPayload,\r\n            };\r\n\r\n            const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n            expect(_.where(updatedState.options, {hidden: false}).length).toBe(options.length);\r\n        });\r\n\r\n        it('should only remove the selected option from the selectedOptions on \"REMOVE_SELECTED_OPTION_DROPDOWN_SEARCH\"', () => {\r\n            const selectedOptionValue: string = options[0].value;\r\n\r\n            const oldstate: IDropdownSearchState = {\r\n                ...defaultOldState,\r\n                options: [\r\n                    {...options[0], selected: true, hidden: true},\r\n                    {...options[1], selected: true, hidden: true},\r\n                ],\r\n            };\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.deselectOption,\r\n                payload: {...defaultPayload, selectedOptionValue},\r\n            };\r\n\r\n            const expectedOptionsState: IDropdownOption[] = [\r\n                {...options[0], selected: false, hidden: false},\r\n                {...options[1], selected: true, hidden: true},\r\n            ];\r\n\r\n            const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(oldstate, action);\r\n\r\n            expect(updatedState.options).toEqual(expectedOptionsState);\r\n        });\r\n\r\n        it('should add the removed option in the hidden options on \"REMOVE_SELECTED_OPTION_DROPDOWN_SEARCH\"', () => {\r\n            const selectedOptionValue: string = options[0].value;\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.deselectOption,\r\n                payload: {...defaultPayload, selectedOptionValue},\r\n            };\r\n\r\n            const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n            expect(\r\n                _.findWhere(\r\n                    _.reject(updatedState.options, (option) => {\r\n                        return option.custom || option.hidden;\r\n                    }),\r\n                    {value: selectedOptionValue}\r\n                )\r\n            ).toBeDefined();\r\n        });\r\n\r\n        it('should add a custom selected option on \"ADD_CUSTOM_SELECTED_OPTION\"', () => {\r\n            const customValue: string = 'custom_value';\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.addCustomSelectedOption,\r\n                payload: {...defaultPayload, selectedOptionValue: customValue},\r\n            };\r\n\r\n            const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n            expect(_.where(updatedState.options, {selected: true, value: customValue}).length).toBe(1);\r\n        });\r\n\r\n        describe('on key down', () => {\r\n            it('should return the new state with active option above the last one if the keyCode is \"Up Arrow\"', () => {\r\n                const oldstate: IDropdownSearchState = {\r\n                    ...defaultOldState,\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: true,\r\n                    options: options,\r\n                    activeOption: options[1],\r\n                };\r\n                const keycode = keyCode.upArrow;\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.onKeyDownMultiselect,\r\n                    payload: {...defaultPayload, keyCode: keycode},\r\n                };\r\n                const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(oldstate, action);\r\n\r\n                expect(updatedState.activeOption.value).toEqual(options[0].value);\r\n            });\r\n\r\n            it('should add a custom option on enter if the selected option is not present', () => {\r\n                const keycode = keyCode.enter;\r\n                const customValue: string = 'custom_value';\r\n                const stateWithFilterTextPresent: IDropdownSearchState = {\r\n                    ...defaultOldState,\r\n                    filterText: customValue,\r\n                    activeOption: undefined,\r\n                };\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.onKeyDownMultiselect,\r\n                    payload: {...defaultPayload, keyCode: keycode},\r\n                };\r\n\r\n                const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(\r\n                    stateWithFilterTextPresent,\r\n                    action\r\n                );\r\n\r\n                expect(_.where(updatedState.options, {selected: true, value: customValue}).length).toBe(1);\r\n            });\r\n\r\n            it('should add the active option on tab in selected options', () => {\r\n                const keycode = keyCode.tab;\r\n                const oldstate: IDropdownSearchState = {...defaultOldState, activeOption: options[0]};\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.onKeyDownMultiselect,\r\n                    payload: {...defaultPayload, keyCode: keycode},\r\n                };\r\n\r\n                const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(oldstate, action);\r\n\r\n                expect(_.findWhere(updatedState.options, {...options[0], selected: true})).toBeDefined();\r\n            });\r\n\r\n            it('should remove last selected option on backspace when the filter text is empty', () => {\r\n                const keycode = keyCode.backspace;\r\n                const filterText: string = '';\r\n                const stateWithFilterTextPresent: IDropdownSearchState = {\r\n                    ...defaultOldState,\r\n                    filterText,\r\n                    options: [\r\n                        {...options[0], selected: true, hidden: true},\r\n                        {...options[1], selected: true, hidden: true},\r\n                    ],\r\n                };\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.onKeyDownMultiselect,\r\n                    payload: {...defaultPayload, keyCode: keycode},\r\n                };\r\n\r\n                const expectedOptions: IDropdownOption[] = [\r\n                    {...options[0], selected: true, hidden: true},\r\n                    {...options[1], selected: false, hidden: false},\r\n                ];\r\n\r\n                const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(\r\n                    stateWithFilterTextPresent,\r\n                    action\r\n                );\r\n\r\n                expect(updatedState.options).toEqual(expectedOptions);\r\n            });\r\n\r\n            it('should not remove last selected option on backspace when the filter text is not empty', () => {\r\n                const keycode = keyCode.backspace;\r\n                const filterText: string = 'not empty filter text';\r\n                const stateWithFilterTextPresent: IDropdownSearchState = {\r\n                    ...defaultOldState,\r\n                    filterText,\r\n                    options: [].concat(options),\r\n                };\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.onKeyDownMultiselect,\r\n                    payload: {...defaultPayload, keyCode: keycode},\r\n                };\r\n\r\n                const expectedSelectedOptions: IDropdownOption[] = [];\r\n\r\n                const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(\r\n                    stateWithFilterTextPresent,\r\n                    action\r\n                );\r\n\r\n                expect(_.where(updatedState.options, {selected: true})).toEqual(expectedSelectedOptions);\r\n            });\r\n\r\n            it('should close the dropdown on escape', () => {\r\n                const keycode = keyCode.escape;\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.onKeyDownMultiselect,\r\n                    payload: {...defaultPayload, keyCode: keycode},\r\n                };\r\n\r\n                const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n                expect(updatedState.isOpened).toBe(false);\r\n            });\r\n\r\n            it('should remove focus on unknown key', () => {\r\n                const keycode = -1;\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.onKeyDownMultiselect,\r\n                    payload: {...defaultPayload, keyCode: keycode},\r\n                };\r\n\r\n                const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n                expect(updatedState.setFocusOnDropdownButton).toBe(false);\r\n            });\r\n\r\n            it('should set no active option on unknown key', () => {\r\n                const keycode = -1;\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.onKeyDownMultiselect,\r\n                    payload: {...defaultPayload, keyCode: keycode},\r\n                };\r\n\r\n                const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n                expect(updatedState.activeOption).toBeUndefined();\r\n            });\r\n        });\r\n\r\n        describe('default action', () => {\r\n            it('should return the same state by default', () => {\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: 'default multiselect action',\r\n                    payload: defaultPayload,\r\n                };\r\n\r\n                const updatedState: IDropdownSearchState = multiSelectDropdownSearchReducer(defaultOldState, action);\r\n\r\n                expect(updatedState).toEqual(defaultOldState);\r\n            });\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=346.bundle.js.map