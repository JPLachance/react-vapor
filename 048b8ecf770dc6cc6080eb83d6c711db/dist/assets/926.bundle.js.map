{"version":3,"sources":["webpack:///./src/components/validation/components/ValidationMessage.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/926.bundle.js","sourcesContent":["export default \"import * as classNames from 'classnames';\\nimport * as React from 'react';\\nimport {connect} from 'react-redux';\\nimport {IReactVaporState} from '../../../ReactVapor';\\nimport {ValidationSelectors} from '../ValidationSelectors';\\n\\nexport interface IValidationMessageProps {\\n    id: string;\\n}\\n\\nconst mapStateToProps = (state: IReactVaporState, ownProps: IValidationMessageProps) => ({\\n    errors: ValidationSelectors.getErrors(ownProps.id)(state),\\n    warnings: ValidationSelectors.getWarnings(ownProps.id)(state),\\n});\\n\\nexport const ValidationMessageClasses = {\\n    error: 'text-red',\\n    warning: 'text-yellow',\\n};\\n\\nexport const ValidationMessageDisconnect: React.FunctionComponent<IValidationMessageProps &\\n    ReturnType<typeof mapStateToProps>> = ({errors, warnings}) => {\\n    const hasErrors = errors.length > 0;\\n    const hasWarnings = warnings.length > 0;\\n    const eitherErrorsOrWarnings = hasErrors ? errors : warnings;\\n    return (\\n        <>\\n            {(hasErrors || hasWarnings) &&\\n                eitherErrorsOrWarnings.map(({validationType, value}) => (\\n                    <span\\n                        key={validationType}\\n                        className={classNames({\\n                            [ValidationMessageClasses.error]: hasErrors,\\n                            [ValidationMessageClasses.warning]: !hasErrors,\\n                        })}\\n                    >\\n                        {value}\\n                    </span>\\n                ))}\\n        </>\\n    );\\n};\\n\\nexport const ValidationMessage = connect(mapStateToProps)(ValidationMessageDisconnect);\\n\""],"sourceRoot":""}