{"version":3,"sources":["webpack:///./src/components/navigation/examples/NavigationConnectedExamples.tsx?92a0","webpack:///./src/components/navigation/perPage/NavigationPerPage.tsx?fc2e","webpack:///./src/components/navigation/pagination/NavigationPagination.tsx?54ce","webpack:///./src/components/navigation/NavigationConnected.tsx?152a","webpack:///./src/components/loading/LoadingConnected.tsx?2c73","webpack:///./src/components/navigation/Navigation.tsx?cb6a","webpack:///./src/components/navigation/pagination/NavigationPaginationSelect.tsx?d73c","webpack:///./src/components/navigation/pagination/NavigationPaginationConnected.tsx?e5e9","webpack:///./src/components/navigation/perPage/NavigationPerPageConnected.tsx?c59a","webpack:///./src/components/navigation/perPage/NavigationPerPageSelect.tsx?96a7"],"names":["navigationConnectedExampleLoadingIds","componentWillMount","subscribe","turnOn","add","getState","lastAction","type","setTimeout","dispatch","render","navigationProps","id","totalPages","totalEntries","loadingIds","className","PER_PAGE_NUMBERS","handleClick","newPerPage","this","props","onPerPageClick","currentPerPage","currentPage","initialPosition","Math","ceil","perPageNumbers","length","onRender","componentWillUnmount","onDestroy","topNumber","perPageSelects","num","index","selectId","isSelected","newPerPageNb","perPageNb","key","selected","label","defaultProps","handlePageClick","pageNb","onPageClick","componentDidUpdate","componentDidMount","showXPages","abs","numberOfPagesToShow","previousLabel","nextLabel","start","end","lastPage","previousClasses","nextClasses","pageSelects","hidePages","max","floor","min","p","push","onClick","svgName","svgClass","NavigationConnected","state","ownProps","item","loadings","isLoading","isOn","withReduxState","undefined","mergeProps","LoadingConnected","paginationProps","pagination","paginationClass","perPageProps","perPageLabel","perPage","perPageClass","navigationClasses","loading","linkClasses","selectable","disabled","NavigationPaginationConnected","paginationComposite","NavigationPerPageConnected","perPageNumber","defaultInitialPosition","perPageComposite","oldPerPageNb","selectClasses","spanClasses"],"mappings":"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","file":"assets/1013.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {ExamplesStore} from '../../../../docs/Store';\r\nimport {LoadingActions, turnOffLoading} from '../../loading/LoadingActions';\r\nimport {INavigationOwnProps} from '../Navigation';\r\nimport {NavigationConnected} from '../NavigationConnected';\r\n\r\nconst navigationConnectedExampleId = 'navigation-connected';\r\nconst navigationConnectedExampleLoadingIds = ['loading-' + navigationConnectedExampleId];\r\n\r\nexport class NavigationConnectedExamples extends React.Component<any, any> {\r\n    // Remove loading after a few seconds\r\n    componentWillMount() {\r\n        ExamplesStore.subscribe(() => {\r\n            if (_.contains([LoadingActions.turnOn, LoadingActions.add], ExamplesStore.getState().lastAction.type)) {\r\n                setTimeout(() => {\r\n                    ExamplesStore.dispatch(turnOffLoading(navigationConnectedExampleLoadingIds));\r\n                }, 2000);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const navigationProps: INavigationOwnProps = {\r\n            id: navigationConnectedExampleId,\r\n            totalPages: 10,\r\n            totalEntries: 50,\r\n            loadingIds: navigationConnectedExampleLoadingIds,\r\n        };\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Navigation with Redux state and loading</label>\r\n                    <NavigationConnected {...navigationProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {NavigationPerPageSelect} from './NavigationPerPageSelect';\r\n\r\nexport interface INavigationPerPageOwnProps extends React.ClassAttributes<NavigationPerPage> {\r\n    id?: string;\r\n    totalEntries: number;\r\n    label?: string;\r\n    perPageNumbers?: number[];\r\n    loadingIds?: string[];\r\n    initialPosition?: number;\r\n}\r\n\r\nexport interface INavigationPerPageStateProps {\r\n    currentPerPage?: number;\r\n    currentPage?: number;\r\n}\r\n\r\nexport interface INavigationPerPageDispatchProps {\r\n    onRender?: (perPageNb: number) => void;\r\n    onDestroy?: () => void;\r\n    onPerPageClick?: (newPerPage: number, currentPerPage?: number, currentPage?: number) => void;\r\n}\r\n\r\nexport interface INavigationPerPageProps\r\n    extends INavigationPerPageOwnProps,\r\n        INavigationPerPageStateProps,\r\n        INavigationPerPageDispatchProps {}\r\n\r\nexport const PER_PAGE_NUMBERS: number[] = [10, 20, 30];\r\nexport const PER_PAGE_LABEL: string = 'Results per page';\r\n\r\nexport class NavigationPerPage extends React.Component<INavigationPerPageProps> {\r\n    static defaultProps: Partial<INavigationPerPageProps> = {\r\n        perPageNumbers: PER_PAGE_NUMBERS,\r\n        label: PER_PAGE_LABEL,\r\n    };\r\n    private initialPosition: number;\r\n\r\n    private handleClick(newPerPage: number) {\r\n        if (this.props.onPerPageClick && this.props.currentPerPage !== newPerPage) {\r\n            this.props.onPerPageClick(newPerPage, this.props.currentPerPage, this.props.currentPage);\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.initialPosition = !_.isUndefined(this.props.initialPosition)\r\n            ? this.props.initialPosition\r\n            : Math.ceil(this.props.perPageNumbers.length / 2) - 1;\r\n        this.props.onRender?.(this.props.perPageNumbers[this.initialPosition]);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        const currentPerPage: number = this.props.currentPerPage || this.props.perPageNumbers[this.initialPosition];\r\n        const topNumber: number = this.props.totalEntries;\r\n\r\n        const perPageSelects: JSX.Element[] = _.map(\r\n            this.props.perPageNumbers,\r\n            (num: number, index: number): JSX.Element => {\r\n                const shouldShowPerPageSelect: boolean = topNumber > (this.props.perPageNumbers[index - 1] || 0);\r\n\r\n                if (shouldShowPerPageSelect) {\r\n                    const selectId: string = `perpage-${this.props.id || ''}-${num}`;\r\n                    const isSelected: boolean = currentPerPage === num;\r\n                    return (\r\n                        <NavigationPerPageSelect\r\n                            onPerPageClick={(newPerPageNb: number) => this.handleClick(newPerPageNb)}\r\n                            perPageNb={num}\r\n                            key={selectId}\r\n                            selected={isSelected}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        );\r\n\r\n        return (\r\n            <div className=\"items-per-page prepended-flat-select\">\r\n                <div className=\"flat-select-prepend\">{this.props.label}:</div>\r\n                <div className=\"flat-select clearfix\">{perPageSelects}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {NavigationPaginationSelect} from './NavigationPaginationSelect';\r\n\r\nexport interface INavigationPaginationOwnProps extends React.ClassAttributes<NavigationPagination> {\r\n    id?: string;\r\n    totalPages: number;\r\n    numberOfPagesToShow?: number;\r\n    previousLabel?: string;\r\n    nextLabel?: string;\r\n    loadingIds?: string[];\r\n    hidePages?: boolean;\r\n}\r\n\r\nexport interface INavigationPaginationStateProps {\r\n    currentPage?: number;\r\n}\r\n\r\nexport interface INavigationPaginationDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onPageClick?: (pageNb: number) => void;\r\n}\r\n\r\nexport interface INavigationPaginationProps\r\n    extends INavigationPaginationOwnProps,\r\n        INavigationPaginationStateProps,\r\n        INavigationPaginationDispatchProps {}\r\n\r\nexport const NUMBER_OF_PAGES_SHOWING: number = 7;\r\nexport const PREVIOUS_LABEL: string = 'Previous';\r\nexport const NEXT_LABEL: string = 'Next';\r\n\r\nexport class NavigationPagination extends React.Component<INavigationPaginationProps, any> {\r\n    private handlePageClick = (pageNb: number) => {\r\n        if (pageNb >= 0 && this.props.currentPage !== pageNb) {\r\n            this.props.onPageClick?.(pageNb);\r\n        }\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.currentPage > this.props.totalPages - 1) {\r\n            this.handlePageClick(this.props.totalPages - 1);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        const currentPage: number = this.props.currentPage || 0;\r\n        const showXPages: number = Math.abs((this.props.numberOfPagesToShow || NUMBER_OF_PAGES_SHOWING) - 1);\r\n        const previousLabel: string = this.props.previousLabel || PREVIOUS_LABEL;\r\n        const nextLabel: string = this.props.nextLabel || NEXT_LABEL;\r\n        let start: number = 0;\r\n        let end: number = showXPages;\r\n        const lastPage: number = this.props.totalPages - 1;\r\n        const previousClasses: string =\r\n            'flat-select-option mod-link ' + (currentPage === 0 ? 'disabled' : 'selectable');\r\n        const nextClasses: string =\r\n            'flat-select-option mod-link ' + (currentPage === lastPage ? 'disabled' : 'selectable');\r\n        const pageSelects: JSX.Element[] = [];\r\n\r\n        if (!this.props.hidePages) {\r\n            if (currentPage + showXPages / 2 > lastPage) {\r\n                end = lastPage;\r\n                start = Math.max(lastPage - showXPages, 0);\r\n            } else {\r\n                start = Math.max(Math.floor(currentPage - showXPages / 2), 0);\r\n                end = Math.min(start + showXPages, lastPage);\r\n            }\r\n\r\n            _.each(_.range(start, end + 1), (p: number): void => {\r\n                pageSelects.push(\r\n                    <NavigationPaginationSelect\r\n                        key={'page-' + p}\r\n                        onPageClick={this.handlePageClick}\r\n                        pageNb={p}\r\n                        selected={p === currentPage}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"pagination\">\r\n                <div className=\"flat-select\">\r\n                    <a\r\n                        className={previousClasses}\r\n                        data-page={currentPage - 1}\r\n                        onClick={() => this.handlePageClick(currentPage - 1)}\r\n                    >\r\n                        <Svg\r\n                            svgName=\"arrow-left-rounded\"\r\n                            className=\"pagination-icon\"\r\n                            svgClass=\"icon icon-small mod-lg\"\r\n                        />\r\n                        {previousLabel}\r\n                    </a>\r\n                    {pageSelects}\r\n                    <a\r\n                        className={nextClasses}\r\n                        data-page={currentPage + 1}\r\n                        onClick={() => this.handlePageClick(currentPage + 1)}\r\n                    >\r\n                        {nextLabel}\r\n                        <Svg\r\n                            svgName=\"arrow-right-rounded\"\r\n                            className=\"pagination-icon\"\r\n                            svgClass=\"icon icon-small mod-lg\"\r\n                        />\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {ILoadingState} from '../loading/LoadingReducers';\r\nimport {INavigationOwnProps, INavigationProps, INavigationStateProps, Navigation} from './Navigation';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: INavigationOwnProps): INavigationStateProps => {\r\n    const item: ILoadingState = _.findWhere(state.loadings, {id: 'loading-' + ownProps.id});\r\n\r\n    return {\r\n        isLoading: (item && item.isOn) || false,\r\n        withReduxState: true,\r\n    };\r\n};\r\n\r\nexport const NavigationConnected: React.ComponentClass<INavigationProps> = connect(\r\n    mapStateToProps,\r\n    undefined,\r\n    ReduxUtils.mergeProps\r\n)(Navigation);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {ILoadingDispatchProps, ILoadingOwnProps, ILoadingProps, Loading} from './Loading';\r\nimport {addLoading, removeLoading} from './LoadingActions';\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: ILoadingOwnProps\r\n): ILoadingDispatchProps => ({\r\n    onRender: () => dispatch(addLoading(ownProps.id)),\r\n    onDestroy: () => dispatch(removeLoading(ownProps.id)),\r\n});\r\n\r\nexport const LoadingConnected: React.ComponentClass<ILoadingProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Loading);\r\n","import * as React from 'react';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Loading} from '../loading/Loading';\r\nimport {LoadingConnected} from '../loading/LoadingConnected';\r\nimport {INavigationPaginationProps, NavigationPagination} from './pagination/NavigationPagination';\r\nimport {NavigationPaginationConnected} from './pagination/NavigationPaginationConnected';\r\nimport {INavigationPerPageProps, NavigationPerPage, PER_PAGE_NUMBERS} from './perPage/NavigationPerPage';\r\nimport {NavigationPerPageConnected} from './perPage/NavigationPerPageConnected';\r\n\r\nexport interface INavigationOwnProps extends React.ClassAttributes<Navigation> {\r\n    id?: string;\r\n    totalPages: number;\r\n    totalEntries: number;\r\n    loadingIds?: string[];\r\n}\r\n\r\nexport interface INavigationChildrenProps {\r\n    numberOfPagesToShow?: number;\r\n    previousLabel?: string;\r\n    nextLabel?: string;\r\n    onPageClick?: (pageNb: number) => void;\r\n    perPageLabel?: string;\r\n    perPageNumbers?: number[];\r\n    onPerPageClick?: (newPerPage: number, currentPerPage?: number, currentPage?: number) => void;\r\n    hidePages?: boolean;\r\n    currentPerPage?: number;\r\n    currentPage?: number;\r\n    initialPosition?: number;\r\n}\r\n\r\nexport interface INavigationStateProps extends IReduxStatePossibleProps {\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport interface INavigationProps extends INavigationOwnProps, INavigationChildrenProps, INavigationStateProps {}\r\n\r\nexport class Navigation extends React.Component<INavigationProps, any> {\r\n    static defaultProps: Partial<INavigationProps> = {\r\n        perPageNumbers: PER_PAGE_NUMBERS,\r\n    };\r\n\r\n    render() {\r\n        const paginationProps: INavigationPaginationProps = {\r\n            totalPages: this.props.totalPages,\r\n            numberOfPagesToShow: this.props.numberOfPagesToShow,\r\n            previousLabel: this.props.previousLabel,\r\n            nextLabel: this.props.nextLabel,\r\n            hidePages: this.props.hidePages || !this.props.totalPages || this.props.totalPages === 1,\r\n        };\r\n\r\n        const pagination: JSX.Element = this.props.withReduxState ? (\r\n            <NavigationPaginationConnected\r\n                id={`pagination-${this.props.id}`}\r\n                loadingIds={this.props.loadingIds}\r\n                {...paginationProps}\r\n            />\r\n        ) : (\r\n            <NavigationPagination\r\n                currentPage={this.props.currentPage}\r\n                onPageClick={this.props.onPageClick}\r\n                {...paginationProps}\r\n            />\r\n        );\r\n        const paginationClass: string = this.props.totalPages > 1 ? '' : 'hidden';\r\n\r\n        const perPageProps: INavigationPerPageProps = {\r\n            label: this.props.perPageLabel,\r\n            perPageNumbers: this.props.perPageNumbers,\r\n            totalEntries: this.props.totalEntries,\r\n            initialPosition: this.props.initialPosition,\r\n        };\r\n        if (this.props.currentPerPage) {\r\n            perPageProps.currentPerPage = this.props.currentPerPage;\r\n        }\r\n        const perPage: JSX.Element = this.props.withReduxState ? (\r\n            <NavigationPerPageConnected id={this.props.id} loadingIds={this.props.loadingIds} {...perPageProps} />\r\n        ) : (\r\n            <NavigationPerPage onPerPageClick={this.props.onPerPageClick} {...perPageProps} />\r\n        );\r\n        const perPageClass =\r\n            this.props.perPageNumbers.length && this.props.totalEntries > this.props.perPageNumbers[0] ? '' : 'hidden';\r\n\r\n        const navigationClasses: string = `pagination-container${this.props.isLoading ? ' loading-view' : ''}`;\r\n        const loading: JSX.Element = this.props.withReduxState ? (\r\n            <LoadingConnected id={`loading-${this.props.id}`} />\r\n        ) : (\r\n            <Loading />\r\n        );\r\n\r\n        return (\r\n            <div className={navigationClasses}>\r\n                <div className={perPageClass}>{perPage}</div>\r\n                <div className=\"flex-auto\">{loading}</div>\r\n                <div className={paginationClass}>{pagination}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface INavigationPaginationSelectProps extends React.ClassAttributes<NavigationPaginationSelect> {\r\n    disabled?: boolean;\r\n    selected: boolean;\r\n    pageNb: number;\r\n    onPageClick: (pageNb: number) => void;\r\n}\r\n\r\nexport class NavigationPaginationSelect extends React.Component<INavigationPaginationSelectProps, any> {\r\n    render() {\r\n        const linkClasses: string = classNames('flat-select-option', {\r\n            selectable: !this.props.selected,\r\n            disabled: this.props.disabled,\r\n        });\r\n\r\n        return (\r\n            <a\r\n                className={linkClasses}\r\n                data-page={this.props.pageNb}\r\n                onClick={() => this.props.onPageClick(this.props.pageNb)}\r\n            >\r\n                {this.props.pageNb + 1}\r\n            </a>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../../utils/ReduxUtils';\r\nimport {\r\n    INavigationPaginationDispatchProps,\r\n    INavigationPaginationOwnProps,\r\n    INavigationPaginationProps,\r\n    INavigationPaginationStateProps,\r\n    NavigationPagination,\r\n} from './NavigationPagination';\r\nimport {addPagination, changePage, removePagination} from './NavigationPaginationActions';\r\nimport {IPaginationState} from './NavigationPaginationReducers';\r\n\r\nconst mapStateToProps = (\r\n    state: IReactVaporState,\r\n    ownProps: INavigationPaginationOwnProps\r\n): INavigationPaginationStateProps => {\r\n    const item: IPaginationState = _.findWhere(state.paginationComposite, {id: ownProps.id});\r\n\r\n    return {\r\n        currentPage: item ? item.pageNb : 0,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: INavigationPaginationOwnProps\r\n): INavigationPaginationDispatchProps => ({\r\n    onRender: () => dispatch(addPagination(ownProps.id)),\r\n    onDestroy: () => dispatch(removePagination(ownProps.id)),\r\n    onPageClick: (pageNb: number) => dispatch(changePage(ownProps.id, pageNb)),\r\n});\r\n\r\nexport const NavigationPaginationConnected: React.ComponentClass<INavigationPaginationProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(NavigationPagination);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../../utils/ReduxUtils';\r\nimport {changePage} from '../pagination/NavigationPaginationActions';\r\nimport {IPaginationState} from '../pagination/NavigationPaginationReducers';\r\nimport {\r\n    INavigationPerPageDispatchProps,\r\n    INavigationPerPageOwnProps,\r\n    INavigationPerPageProps,\r\n    INavigationPerPageStateProps,\r\n    NavigationPerPage,\r\n    PER_PAGE_NUMBERS,\r\n} from './NavigationPerPage';\r\nimport {addPerPage, changePerPage, removePerPage} from './NavigationPerPageActions';\r\nimport {IPerPageState} from './NavigationPerPageReducers';\r\n\r\nconst mapStateToProps = (\r\n    state: IReactVaporState,\r\n    ownProps: INavigationPerPageOwnProps\r\n): INavigationPerPageStateProps => {\r\n    const perPageNumber: number[] = ownProps.perPageNumbers || PER_PAGE_NUMBERS;\r\n    const defaultInitialPosition: number = Math.ceil(perPageNumber.length / 2) - 1;\r\n    const item: IPerPageState = _.findWhere(state.perPageComposite, {id: ownProps.id});\r\n    const pagination: IPaginationState = _.findWhere(state.paginationComposite, {id: `pagination-${ownProps.id}`});\r\n    const initialPosition: number = !_.isUndefined(ownProps.initialPosition)\r\n        ? ownProps.initialPosition\r\n        : defaultInitialPosition;\r\n\r\n    return {\r\n        currentPerPage: item ? item.perPage : perPageNumber[initialPosition],\r\n        currentPage: pagination ? pagination.pageNb : 0,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: IDispatch,\r\n    ownProps: INavigationPerPageOwnProps\r\n): INavigationPerPageDispatchProps => ({\r\n    onRender: (perPageNb: number) => dispatch(addPerPage(ownProps.id, perPageNb)),\r\n    onDestroy: () => dispatch(removePerPage(ownProps.id)),\r\n    onPerPageClick: (perPageNb: number, oldPerPageNb: number, currentPage: number) => {\r\n        dispatch(changePerPage(ownProps.id, perPageNb));\r\n        dispatch(changePage(`pagination-${ownProps.id}`, Math.floor((currentPage * oldPerPageNb) / perPageNb)));\r\n    },\r\n});\r\n\r\nexport const NavigationPerPageConnected: React.ComponentClass<INavigationPerPageProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(NavigationPerPage);\r\n","import * as React from 'react';\r\n\r\nexport interface INavigationPerPageSelectOwnProps extends React.ClassAttributes<NavigationPerPageSelect> {\r\n    perPageNb: number;\r\n    selected: boolean;\r\n    onPerPageClick: (perPageNb: number) => void;\r\n}\r\n\r\nexport interface INavigationPerPageSelectProps extends INavigationPerPageSelectOwnProps {}\r\n\r\nexport class NavigationPerPageSelect extends React.Component<INavigationPerPageSelectProps, any> {\r\n    render() {\r\n        const selectClasses: string = 'flat-select-option' + (this.props.selected ? '' : ' selectable');\r\n        const spanClasses: string = 'enabled' + (this.props.selected ? ' selected-value state-selected' : '');\r\n\r\n        return (\r\n            <a className={selectClasses} onClick={() => this.props.onPerPageClick(this.props.perPageNb)}>\r\n                <span className={spanClasses}>{this.props.perPageNb}</span>\r\n            </a>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}