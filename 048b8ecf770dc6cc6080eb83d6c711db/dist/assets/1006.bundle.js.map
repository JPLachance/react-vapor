{"version":3,"sources":["webpack:///./src/components/radio/examples/RadioExamples.tsx?0355","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/input/Input.tsx?1d15","webpack:///./src/components/input/Label.tsx?dafb","webpack:///./src/utils/PropsToOmitUtils.ts?e979","webpack:///./src/components/input/InputDescription.tsx?8553","webpack:///./src/components/input/LabeledInput.tsx?95a1","webpack:///./src/components/radio/RadioSelect.tsx?93ae","webpack:///./src/components/radio/RadioSelectSelectors.ts?dc90","webpack:///./src/components/radio/Radio.tsx?1970","webpack:///./src/components/radio/RadioSelectConnected.tsx?d1ff"],"names":["RadioExamples","title","RadioSelectExample","RadioSelectDisabledExample","description","level","label","id","disabledTooltip","disabledValuesOnMount","valueOnMount","onChangeCallback","name","value","className","enabled","onClick","dispatch","disabledValues","disabled","onMount","onUnmount","ButtonPropsToOmit","this","props","getTemplate","buttonClass","buttonElement","buttonAttrs","link","target","rel","href","children","tooltip","placement","tooltipPlacement","getClasses","primary","small","classes","render","defaultProps","Section","mods","titleProps","H","validatedInputTypes","inputPropsToOmit","state","valid","componentWillMount","onRender","validOnMount","validateOnMount","validate","defaultValue","disabledOnMount","componentWillUnmount","onDestroy","componentDidUpdate","prevProps","innerInput","reset","getInnerValue","setState","handleBlur","onBlur","handleChange","onChange","validOnChange","validateOnChange","handleClick","e","handleKeyUp","event","onKeyUp","getLabel","labelProps","labelTitle","key","htmlFor","type","innerInputClasses","invalid","inputElements","ref","min","minimum","max","maximum","input","Right","required","validMessage","invalidMessage","attributes","internalComponentPropsToOmit","PropsToOmitUtils","internal","InputDescription","LabeledInput","message","helpText","headerClassName","optionalInformation","header","information","Top","svgName","svgClass","componentDidMount","map","child","checked","isValueDisabled","handleToggle","childValue","get","radioSelects","RadioSelectSelectors","getValue","radioSelect","getDisabledValue","RadioSelectConnected","ownProps","mergeProps"],"mappings":"8FAAA,wIAqBaA,EAAkC,WAAM,OACjD,gBAAC,IAAO,CAACC,MAAM,aACX,gBAACC,EAAkB,MACnB,gBAACC,EAA0B,QAInCH,EAAcI,YAAc,mFAE5B,IAIMF,EAA8C,WAAM,OACtD,gBAAC,IAAO,CAACG,MAAO,EAAGJ,MAAM,iCACrB,gBAAC,IAAY,CAACK,MAAM,iCAChB,gBAAC,IAAoB,CACjBC,GAAG,uBACHC,gBAAgB,iDAChBC,sBAAuB,CAAC,QACxBC,aAAc,QACdC,iBAAkB,WAAM,0CAExB,gBAAC,IAAK,CAACJ,GAAG,UAAUK,KAAK,iBAAiBC,MAAM,QAC5C,gBAAC,IAAK,cAEV,gBAAC,IAAK,CAACN,GAAG,UAAUK,KAAK,iBAAiBC,MAAM,SAC5C,gBAAC,IAAK,cACN,uBAAKC,UAAU,6CAA2C,iDAI9D,gBAAC,IAAK,CAACP,GAAG,UAAUK,KAAK,iBAAiBC,MAAM,SAC5C,gBAAC,IAAK,iBAIlB,gBAAC,IAAO,CAACR,MAAO,GACZ,gBAAC,IAAM,CACHU,SAAO,EACPH,KAAK,sBACLI,QAAS,WACL,WAAcC,SAAS,YAjCZ,uBAiCmD,CAACC,eAAgB,CAAC,cAGxF,gBAAC,IAAM,CACHH,SAAO,EACPH,KAAK,qBACLI,QAAS,WAAM,WAAcC,SAAS,YAvCvB,uBAuC8D,CAACC,eAAgB,YAMxGf,EAAsD,WAAM,OAC9D,gBAAC,IAAO,CAACE,MAAO,GACZ,gBAAC,IAAY,CAACC,MAAM,4CAChB,gBAAC,IAAoB,CACjBO,MAAM,UACNM,UAAQ,EACRC,QAAS,WAAM,qCACfC,UAAW,WAAM,wCAEjB,gBAAC,IAAK,CAACd,GAAG,UAAUK,KAAK,kBAAkBC,MAAM,UAC7C,gBAAC,IAAK,gBAEV,gBAAC,IAAK,CAACN,GAAG,UAAUK,KAAK,kBAAkBC,MAAM,OAC7C,gBAAC,IAAK,kB,ymBC3EpBS,EAAoB,CAAH,oHAEvB,2B,+CAyEA,OAzE4B,OAWhB,YAAAN,QAAR,WACQO,KAAKC,MAAMR,SAAWO,KAAKC,MAAMT,SACjCQ,KAAKC,MAAMR,WAInB,YAAAS,YAAA,SAAYC,GAAZ,IACQC,EADR,OAGQC,EAAc,EAAH,KACR,OAAOL,KAAKC,MAAOF,IAAkB,CACxCH,UAAWI,KAAKC,MAAMT,QACtBC,QAAS,WAAM,SAAKA,aAyBxB,OAtBIO,KAAKC,MAAMK,MACXD,EAAc,SAASA,EAAa,CAChCE,OAAQP,KAAKC,MAAMM,OACnBC,IAAK,sBACLC,KAAMT,KAAKC,MAAMK,OAGrBF,EACI,uBAAGb,UAAcY,EAAW,kBAAsBE,GAC7CL,KAAKC,MAAMZ,KACXW,KAAKC,MAAMS,WAIpBN,EACI,4BAAQb,UAAWY,GAAiBE,GAC/BL,KAAKC,MAAMZ,KACXW,KAAKC,MAAMS,UAKhB,UAAUV,KAAKC,MAAMU,SAIzB,EAHA,gBAAC,IAAO,CAACjC,MAAOsB,KAAKC,MAAMU,QAASC,UAAWZ,KAAKC,MAAMY,iBAAkBtB,UAAU,iBACjFa,IAOL,YAAAU,WAAR,WACI,OAAO,EACH,MACA,CACI,cAAed,KAAKC,MAAMc,QAC1B,YAAaf,KAAKC,MAAMe,MACxB,2BAA4BhB,KAAKC,MAAMT,QACvC,oBAAqBQ,KAAKC,MAAMc,UAAYf,KAAKC,MAAMT,SAE3DQ,KAAKC,MAAMgB,UAInB,YAAAC,OAAA,WACI,OAAOlB,KAAKE,YAAYF,KAAKc,eAtE1B,EAAAK,aAAsC,CACzC3B,SAAS,EACTH,KAAM,GACNsB,QAAS,GACTI,SAAS,EACTC,OAAO,EACPH,iBAAkB,QAClBN,OAAQ,IAiEhB,EAzEA,CAA4B,c,oSCFfa,EAAkD,SAAC,G,IAC5DV,EAAA,EAAAA,SACAhC,EAAA,EAAAA,MACAG,EAAA,EAAAA,YACAU,EAAA,EAAAA,UACA8B,EAAA,EAAAA,KACA,IAAAvC,aAAA,IAAQ,EAAR,IAEMwC,EAA2C,CAC7C/B,UAAW,uBACXmB,SAAUhC,GAER6C,EAAI,KAAIzC,EAAQ,GACtB,OACI,4BAAUS,UAAW,EAAWA,EAAW8B,EAAM,SAASvC,EAAK,qCAC1DJ,GAAS,gBAAC6C,EAAC,KAAKD,IAChBzC,GAAe,qBAAGU,UAAU,eAAeV,GAC3C6B,K,y/BClBPc,EAAgC,CAAC,SAAU,OAAQ,YA4CnDC,EAAmB,CAAH,kQAUtB,cAWI,WAAYxB,EAAoByB,GAAhC,MACI,YAAMzB,EAAOyB,IAAM,K,OACnB,EAAKA,MAAQ,CACTC,MAAO,EAAK1B,MAAM0B,O,EAgI9B,OA9I2B,OAkBvB,YAAAC,mBAAA,WACI,GAAI5B,KAAKC,MAAM4B,SAAU,CAErB,IAAMC,EACF9B,KAAKC,MAAM8B,iBAAmB/B,KAAKC,MAAM+B,UAAYhC,KAAKC,MAAM+B,SAAShC,KAAKC,MAAMgC,cAAgB,IAExGjC,KAAKC,MAAM4B,SAAS7B,KAAKC,MAAMgC,aAAcH,EAAc9B,KAAKC,MAAMiC,mBAI9E,YAAAC,qBAAA,WACQnC,KAAKC,MAAMmC,WACXpC,KAAKC,MAAMmC,aAInB,YAAAC,mBAAA,SAAmBC,GACXtC,KAAKC,MAAM0B,QAAUW,EAAUX,OAC/B3B,KAAKgC,WAGLM,EAAUhD,QAAUU,KAAKC,MAAMX,OAASU,KAAKuC,aAC7CvC,KAAKuC,WAAWjD,MAAQU,KAAKC,MAAMX,QAI3C,YAAAkD,MAAA,WACIxC,KAAKuC,WAAWjD,MAAQ,IAG5B,YAAAmD,cAAA,WACI,OAAQzC,KAAKuC,YAAcvC,KAAKuC,WAAWjD,OAAU,IAGzD,YAAA0C,SAAA,WACIhC,KAAK0C,SAAS,CACVf,MAAO3B,KAAKC,MAAM0B,SAAW3B,KAAKC,MAAM+B,WAAahC,KAAKC,MAAM+B,SAAShC,KAAKyC,qBAI9E,YAAAE,WAAR,WACQ3C,KAAKC,MAAM2C,QACX5C,KAAKC,MAAM2C,OAAO5C,KAAKyC,kBAIvB,YAAAI,aAAR,WACI,GAAI7C,KAAKC,MAAM6C,SAAU,CACrB,IAAMC,EACF/C,KAAKC,MAAM+C,kBAAoBhD,KAAKC,MAAM+B,UAAYhC,KAAKC,MAAM+B,SAAShC,KAAKyC,iBACnFzC,KAAKC,MAAM6C,SAAS9C,KAAKyC,gBAAiBM,KAI1C,YAAAE,YAAR,SAAoBC,GACZlD,KAAKC,MAAMR,SACXO,KAAKC,MAAMR,QAAQyD,IAInB,YAAAC,YAAR,SAAoBC,GACZpD,KAAKC,MAAMoD,SACXrD,KAAKC,MAAMoD,QAAQD,IAInB,YAAAE,SAAR,WACU,iBAACC,EAAA,EAAAA,WAAYC,EAAA,EAAAA,WACnB,MAA0B,iBAAfA,EACAA,GAAcxD,KAAKC,MAAM+B,SAC5B,gBAAC,IAAK,GAACyB,IAAKzD,KAAKC,MAAMjB,GAAK,QAAS0E,QAAS1D,KAAKC,MAAMjB,IAAQuE,GAC5DC,GAEL,KAEGA,GAIf,YAAAtC,OAAA,sBACUD,EAAU,EACZ,yBACA,CACI,cAAe,mBAASO,EAAqBxB,KAAKC,MAAM0D,OAE5D3D,KAAKC,MAAMgB,SAET2C,EAAoB,EACtB,CACIC,SAAU7D,KAAK0B,MAAMC,OAAS,mBAASH,EAAqBxB,KAAKC,MAAM0D,OAE3E3D,KAAKC,MAAM2D,mBAGTE,EAAgB,CAClB,2BACIL,IAAKzD,KAAKC,MAAMjB,GAChBA,GAAIgB,KAAKC,MAAMjB,GACfO,UAAWqE,EACX3B,aAAe,sBAAYjC,KAAKC,MAAMX,OAA4BU,KAAKC,MAAMgC,aAA9BjC,KAAKC,MAAMX,MAC1DyE,IAAK,SAACxB,GAAiC,OAAC,EAAKA,WAAaA,GAC1DK,OAAQ,WAAM,SAAKD,cACnBG,SAAU,WAAM,SAAKD,gBACrBQ,QAAS,SAACD,GAAiD,SAAKD,YAAYC,IAC5EY,IAAKhE,KAAKC,MAAMgE,QAChBC,IAAKlE,KAAKC,MAAMkE,SACZ,OAAOnE,KAAKC,MAAO,EAAI,IAAiBmE,MAAU3C,MAE1DzB,KAAKsD,WACLtD,KAAKC,MAAMS,UAGf,OAAOV,KAAKC,MAAML,UAAYI,KAAKC,MAAMhB,gBACrC,uBAAKM,UAAW0B,EAASxB,QAAS,SAACyD,GAAqC,SAAKD,YAAYC,KACrF,gBAAC,IAAO,CAACxE,MAAOsB,KAAKC,MAAMhB,gBAAiB2B,UAAW,IAAiByD,OACnEP,IAIT,uBAAKvE,UAAW0B,EAASxB,QAAS,SAACyD,GAAqC,SAAKD,YAAYC,KACpFY,IAvIN,EAAA3C,aAAqC,CACxCnC,GAAI,mBAAS,SACb2E,KAAM,OACNhC,OAAO,EACP6B,WAAY,GACZc,UAAU,GAsIlB,EA9IA,CAA2B,c,s6BCxD3B,2B,+CAeA,OAf2B,OACvB,YAAApD,OAAA,WACI,IAAMD,EAAU,EAAWjB,KAAKC,MAAMgB,SAChC,aAACsD,EAAA,EAAAA,aAAcC,EAAA,EAAAA,eAAgB9D,EAAA,EAAAA,SAAU,oDAC/C,OACI,2BACInB,UAAW0B,EAAO,qBACEsD,EAAY,uBACVC,GAClBC,GAEH/D,IAIjB,EAfA,CAA2B,c,iWCVrBgE,EAAyC,CAAC,WAAY,2BAc/CC,EAAmB,CAC5BC,SAAUF,EACVN,M,wFAZqB,CAClBM,EAA4B,CAC/B,eACA,UACA,WACA,SACA,QACA,Y,iCCXJ,6CAEaG,EAA4C,SAAC,G,IAACnE,EAAA,EAAAA,SAAc,OACrE,2BAASnB,UAAU,mCAAmCmB,K,iCCH1D,sFAeaoE,EAA4D,SAAC,G,IACtEpE,EAAA,EAAAA,SACA3B,EAAA,EAAAA,MACAgG,EAAA,EAAAA,QACA,IAAAC,SACAC,EAAA,EAAAA,gBACA,IAAAC,oBAEMC,EACApG,GAAWqG,EACT,0BAAQ7F,UAAW,EAAW,QAAS,kBAAmB0F,IACnDlG,EAAQ,4BAAOA,GAAgB,KAC/BqG,EACC,gBAAC,IAAO,CAAC1G,MAAO0G,EAAaxE,UAAW,IAAiByE,IAAK9F,UAAU,OACpE,gBAAC,IAAG,CAAC+F,QAAQ,UAAUC,SAAS,2BAEpC,MAER,KAER,OACI,uBAAKhG,UAAU,iBACV4F,EACAzE,IACEqE,GAAW,gBAAC,IAAgB,KAAEA,KAC9BlG,GAAe,gBAAC,IAAgB,KAAEA,M,kZCGjD,2B,+CAoCA,OApCiC,OAC7B,YAAA2G,kBAAA,W,QACsB,QAAlB,KAAAxF,KAAKC,OAAMJ,eAAO,gBAAGG,KAAKC,MAAMjB,GAAIgB,KAAKC,MAAMd,aAAca,KAAKC,MAAMf,wBAG5E,YAAAiD,qBAAA,W,QACwB,QAApB,KAAAnC,KAAKC,OAAMH,iBAAS,gBAAGE,KAAKC,MAAMjB,KAGtC,YAAAkC,OAAA,sBACUR,EAAW,WAAe+E,IAAIzF,KAAKC,MAAMS,UAAU,SAACgF,GACtD,OAAO,eAAmBA,EAAO,CAC7BrG,KAAMqG,EAAMzF,MAAMZ,MAAQ,EAAKY,MAAMZ,KACrCsG,QAAS,EAAK1F,MAAMX,QAAUoG,EAAMzF,MAAMX,MAC1CM,SAAU,EAAKgG,gBAAgBF,EAAMzF,MAAMX,OAC3CL,gBAAiB,EAAKgB,MAAMhB,gBAC5BQ,QAAS,SAACyD,GACNwC,EAAMzF,MAAMR,SAAWiG,EAAMzF,MAAMR,QAAQyD,GAC3C,EAAK2C,aAAaH,EAAMzF,MAAMX,MAAO4D,SAKjD,OAAO,uBAAK3D,UAAW,EAAW,4BAA6BS,KAAKC,MAAMV,YAAamB,IAGnF,YAAAmF,aAAR,SAAqBvG,EAAe4D,G,YACb,QAAnB,KAAAlD,KAAKC,OAAM6C,gBAAQ,gBAAGxD,EAAOU,KAAKC,MAAMjB,GAAIkE,GACjB,QAA3B,KAAAlD,KAAKC,OAAMb,wBAAgB,gBAAGE,EAAOU,KAAKC,MAAMjB,GAAIkE,IAGhD,YAAA0C,gBAAR,SAAwBE,GACpB,OACI9F,KAAKC,MAAML,YAAeI,KAAKC,MAAMN,gBAAkB,WAAWK,KAAKC,MAAMN,eAAgBmG,IAGzG,EApCA,CAAiC,kB,iCC3CjC,8DAMMC,EAAM,SAACrE,EAAyB,G,IAAC1C,EAAA,EAAAA,GACnC,OAAO,YAAY0C,EAAMsE,aAAc,CAAChH,GAAE,KAAM,KASvCiH,EAAuB,CAChCF,IAAG,EACHG,SARa,YAAeH,GAAK,SAACI,GAAmC,OAAAA,GAAeA,EAAY7G,SAShG8G,iBAPqB,YACrBL,GACA,SAACI,GAAmC,OAAAA,GAAeA,EAAYxG,oB,mmBCVnE,2B,+CAWA,OAX2B,OAOvB,YAAAuB,OAAA,WACI,IAAMD,EAAkB,EAAW,eAAgBjB,KAAKC,MAAMgB,SAC9D,OAAO,gBAAC,IAAK,KAAKjB,KAAKC,MAAK,CAAEgB,QAAS,CAACA,GAAU0C,KAAK,YARpD,EAAAxC,aAAY,OACZ,IAAMA,cAAY,CACrBwE,SAAS,EACT/F,UAAU,IAOlB,EAXA,CAA2B,M,iCCJ3B,iFA0BayG,EAAmE,aAZxD,SAAC3E,EAAyB4E,GAAwD,OACtGhH,MAAO,IAAqB4G,SAASxE,EAAO,CAAC1C,GAAIsH,EAAStH,KAC1DW,eAAgB,IAAqByG,iBAAiB1E,EAAO,CAAC1C,GAAIsH,EAAStH,SAGpD,SAACU,GAAmD,OAC3EG,QAAS,SAACb,EAAYG,EAAsBD,GACxC,OAAAQ,EAAS,YAAeV,EAAI,CAACM,MAAOH,EAAcQ,eAAgBT,MACtEY,UAAW,SAACd,GAAe,OAAAU,EAAS,YAAkBV,KACtD8D,SAAU,SAACxD,EAAeN,GAAe,OAAAU,EAAS,YAAeV,EAAI,CAACM,MAAK,SAM3E,IAAWiH,WAHiE,CAI9E","file":"assets/1006.bundle.js","sourcesContent":["import * as React from 'react';\n\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\nimport {ExamplesStore} from '../../../../docs/Store';\nimport {Button} from '../../button/Button';\nimport {Label} from '../../input/Label';\nimport {LabeledInput} from '../../input/LabeledInput';\nimport {Section} from '../../section/Section';\nimport {Radio} from '../Radio';\nimport {IRadioSelectProps} from '../RadioSelect';\nimport {setRadioSelect} from '../RadioSelectActions';\nimport {RadioSelectConnected} from '../RadioSelectConnected';\n\nexport interface IRadioSelectExampleProps extends IRadioSelectProps {\n    defaultValue?: string;\n}\n\nexport interface IRadioSelectExampleState {\n    value: string;\n}\n\nexport const RadioExamples: ExampleComponent = () => (\n    <Section title=\"Radio set\">\n        <RadioSelectExample />\n        <RadioSelectDisabledExample />\n    </Section>\n);\n\nRadioExamples.description = 'Radio Buttons allow for the selection of a single option among a set of options.';\n\nconst radioSelectConnectedId = 'radioselectconnected';\n\n// start-print\n\nconst RadioSelectExample: React.FunctionComponent = () => (\n    <Section level={2} title=\"Radio select with redux store\">\n        <LabeledInput label=\"The Label of the Radio Select\">\n            <RadioSelectConnected\n                id=\"radioselectconnected\"\n                disabledTooltip=\"you see me because of the disabledTooltip prop\"\n                disabledValuesOnMount={['blue']}\n                valueOnMount={'brown'}\n                onChangeCallback={() => 'insert a callBack function here'}\n            >\n                <Radio id=\"Option1\" name=\"enabledOptions\" value=\"blue\">\n                    <Label>Blue</Label>\n                </Radio>\n                <Radio id=\"Option2\" name=\"enabledOptions\" value=\"green\">\n                    <Label>Green</Label>\n                    <div className=\"mod-align-with-radio-label text-lynch mt1\">\n                        The green color has an optional description.\n                    </div>\n                </Radio>\n                <Radio id=\"Option3\" name=\"enabledOptions\" value=\"brown\">\n                    <Label>Brown</Label>\n                </Radio>\n            </RadioSelectConnected>\n        </LabeledInput>\n        <Section level={3}>\n            <Button\n                enabled\n                name=\"disable blue option\"\n                onClick={() =>\n                    ExamplesStore.dispatch(setRadioSelect(radioSelectConnectedId, {disabledValues: ['blue']}))\n                }\n            />\n            <Button\n                enabled\n                name=\"enable blue option\"\n                onClick={() => ExamplesStore.dispatch(setRadioSelect(radioSelectConnectedId, {disabledValues: []}))}\n            />\n        </Section>\n    </Section>\n);\n\nconst RadioSelectDisabledExample: React.FunctionComponent = () => (\n    <Section level={3}>\n        <LabeledInput label=\"A Radio Select with all options disabled\">\n            <RadioSelectConnected\n                value=\"a-value\"\n                disabled\n                onMount={() => 'I am Mounted, just for you!'}\n                onUnmount={() => 'This is the end, my friend...'}\n            >\n                <Radio id=\"Option4\" name=\"disabledOptions\" value=\"yellow\">\n                    <Label>Yellow</Label>\n                </Radio>\n                <Radio id=\"Option5\" name=\"disabledOptions\" value=\"red\">\n                    <Label>Red</Label>\n                </Radio>\n            </RadioSelectConnected>\n        </LabeledInput>\n    </Section>\n);\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\nimport {contains, isUndefined, uniqueId} from 'underscore';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {PropsToOmitUtils} from '../../utils/PropsToOmitUtils';\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {IInputState} from './InputReducers';\r\nimport {ILabelProps, Label} from './Label';\r\n\r\nconst validatedInputTypes: string[] = ['number', 'text', 'password'];\r\n\r\ntype IInputNativeTagOwnProps = Omit<\r\n    React.AllHTMLAttributes<HTMLInputElement>,\r\n    'defaultValue' | 'onClick' | 'onChange' | 'onBlur' | 'value'\r\n>;\r\n\r\nexport interface IInputAdditionalOwnProps {\r\n    id?: string;\r\n    classes?: IClassName;\r\n    innerInputClasses?: IClassName;\r\n    validate?: (value: any) => boolean;\r\n    labelTitle?: React.ReactNode;\r\n    labelProps?: ILabelProps;\r\n    validateOnChange?: boolean;\r\n    disabledOnMount?: boolean;\r\n    validateOnMount?: boolean;\r\n    disabledTooltip?: string;\r\n    minimum?: number /* @deprecated use min instead */;\r\n    maximum?: number /* @deprecated use max instead */;\r\n    onBlur?: (value: string) => void;\r\n    defaultValue?: string;\r\n}\r\n\r\nexport interface IInputNativeTagStateProps {\r\n    value?: string;\r\n    checked?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IInputAdditionalStateProps {\r\n    valid?: boolean;\r\n    indeterminate?: boolean;\r\n}\r\n\r\nexport interface IInputStateProps extends IInputNativeTagStateProps, IInputAdditionalStateProps {}\r\n\r\nexport interface IInputDispatchProps {\r\n    onDestroy?: () => void;\r\n    onRender?: (value?: string, valid?: boolean, disabled?: boolean) => void;\r\n    onChange?: (value?: string, valid?: boolean) => void;\r\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nconst inputPropsToOmit = keys<IInputAdditionalOwnProps & IInputAdditionalStateProps & IInputDispatchProps>();\r\n\r\nexport interface IInputOwnProps extends IInputAdditionalOwnProps, IInputNativeTagOwnProps {}\r\n\r\nexport interface IInputProps extends IInputOwnProps, Partial<IInputStateProps>, Partial<IInputDispatchProps> {}\r\n\r\nexport interface IInputComponentState {\r\n    valid: boolean;\r\n}\r\n\r\nexport class Input extends React.Component<IInputProps, IInputComponentState> {\r\n    private innerInput: HTMLInputElement;\r\n\r\n    static defaultProps: Partial<IInputProps> = {\r\n        id: uniqueId('input'),\r\n        type: 'text',\r\n        valid: true,\r\n        labelTitle: '',\r\n        required: true,\r\n    };\r\n\r\n    constructor(props: IInputProps, state: IInputState) {\r\n        super(props, state);\r\n        this.state = {\r\n            valid: this.props.valid,\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            // undefined validOnMount will default to true in the state\r\n            const validOnMount =\r\n                this.props.validateOnMount && this.props.validate && this.props.validate(this.props.defaultValue || '');\r\n\r\n            this.props.onRender(this.props.defaultValue, validOnMount, this.props.disabledOnMount);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IInputProps) {\r\n        if (this.props.valid !== prevProps.valid) {\r\n            this.validate();\r\n        }\r\n\r\n        if (prevProps.value !== this.props.value && this.innerInput) {\r\n            this.innerInput.value = this.props.value;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.innerInput.value = '';\r\n    }\r\n\r\n    getInnerValue(): string {\r\n        return (this.innerInput && this.innerInput.value) || '';\r\n    }\r\n\r\n    validate() {\r\n        this.setState({\r\n            valid: this.props.valid && !(this.props.validate && !this.props.validate(this.getInnerValue())),\r\n        });\r\n    }\r\n\r\n    private handleBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(this.getInnerValue());\r\n        }\r\n    }\r\n\r\n    private handleChange() {\r\n        if (this.props.onChange) {\r\n            const validOnChange =\r\n                this.props.validateOnChange && this.props.validate && this.props.validate(this.getInnerValue());\r\n            this.props.onChange(this.getInnerValue(), validOnChange);\r\n        }\r\n    }\r\n\r\n    private handleClick(e: React.MouseEvent<HTMLElement>) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n\r\n    private handleKeyUp(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(event);\r\n        }\r\n    }\r\n\r\n    private getLabel(): React.ReactNode {\r\n        const {labelProps, labelTitle} = this.props;\r\n        if (typeof labelTitle === 'string') {\r\n            return labelTitle || this.props.validate ? (\r\n                <Label key={this.props.id + 'label'} htmlFor={this.props.id} {...labelProps}>\r\n                    {labelTitle}\r\n                </Label>\r\n            ) : null;\r\n        } else {\r\n            return labelTitle;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames(\r\n            'input-wrapper validate',\r\n            {\r\n                'input-field': contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.classes\r\n        );\r\n        const innerInputClasses = classNames(\r\n            {\r\n                invalid: !this.state.valid && contains(validatedInputTypes, this.props.type),\r\n            },\r\n            this.props.innerInputClasses\r\n        );\r\n\r\n        const inputElements = [\r\n            <input\r\n                key={this.props.id}\r\n                id={this.props.id}\r\n                className={innerInputClasses}\r\n                defaultValue={!isUndefined(this.props.value) ? this.props.value : this.props.defaultValue}\r\n                ref={(innerInput: HTMLInputElement) => (this.innerInput = innerInput)}\r\n                onBlur={() => this.handleBlur()}\r\n                onChange={() => this.handleChange()}\r\n                onKeyUp={(event: React.KeyboardEvent<HTMLInputElement>) => this.handleKeyUp(event)}\r\n                min={this.props.minimum}\r\n                max={this.props.maximum}\r\n                {..._.omit(this.props, [...PropsToOmitUtils.input, ...inputPropsToOmit])}\r\n            />,\r\n            this.getLabel(),\r\n            this.props.children,\r\n        ];\r\n\r\n        return this.props.disabled && this.props.disabledTooltip ? (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                <Tooltip title={this.props.disabledTooltip} placement={TooltipPlacement.Right}>\r\n                    {inputElements}\r\n                </Tooltip>\r\n            </div>\r\n        ) : (\r\n            <div className={classes} onClick={(e: React.MouseEvent<HTMLElement>) => this.handleClick(e)}>\r\n                {inputElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ILabelProps {\r\n    type?: string;\r\n    classes?: string[];\r\n    validMessage?: string;\r\n    invalidMessage?: string;\r\n}\r\n\r\nexport class Label extends React.Component<ILabelProps & React.HTMLProps<HTMLLabelElement>, any> {\r\n    render() {\r\n        const classes = classNames(this.props.classes);\r\n        const {validMessage, invalidMessage, children, ...attributes} = this.props;\r\n        return (\r\n            <label\r\n                className={classes}\r\n                data-valid-message={validMessage}\r\n                data-invalid-message={invalidMessage}\r\n                {...attributes}\r\n            >\r\n                {children}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","const internalComponentPropsToOmit: string[] = ['children', 'dangerouslySetInnerHTML'];\r\n\r\n// We omit those props for the input native tag because those props are reserved for the Input component and\r\n// to stay compatible with the old interface\r\nconst inputTagPropsToOmit: string[] = [\r\n    ...internalComponentPropsToOmit,\r\n    'defaultValue',\r\n    'onClick',\r\n    'onChange',\r\n    'onBlur',\r\n    'value',\r\n    'valid',\r\n];\r\n\r\nexport const PropsToOmitUtils = {\r\n    internal: internalComponentPropsToOmit,\r\n    input: inputTagPropsToOmit,\r\n};\r\n","import * as React from 'react';\n\nexport const InputDescription: React.FunctionComponent = ({children}) => (\n    <section className=\"text-dark-medium-grey help-text\">{children}</section>\n);\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\nimport {Svg} from '../svg/Svg';\nimport {Tooltip} from '../tooltip/Tooltip';\nimport {InputDescription} from './InputDescription';\n\nexport interface ILabeledInputProps {\n    label?: React.ReactNode;\n    message?: React.ReactNode;\n    helpText?: React.ReactNode;\n    headerClassName?: string;\n    optionalInformation?: string;\n}\n\nexport const LabeledInput: React.FunctionComponent<ILabeledInputProps> = ({\n    children,\n    label,\n    message,\n    helpText: description,\n    headerClassName,\n    optionalInformation: information,\n}) => {\n    const header =\n        !!label || !!information ? (\n            <header className={classNames('label', 'text-light-blue', headerClassName)}>\n                {!!label ? <span>{label}</span> : null}\n                {!!information ? (\n                    <Tooltip title={information} placement={TooltipPlacement.Top} className=\"ml1\">\n                        <Svg svgName=\"info-14\" svgClass=\"icon fill-medium-grey\" />\n                    </Tooltip>\n                ) : null}\n            </header>\n        ) : null;\n\n    return (\n        <div className=\"labeled-input\">\n            {header}\n            {children}\n            {!!message && <InputDescription>{message}</InputDescription>}\n            {!!description && <InputDescription>{description}</InputDescription>}\n        </div>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {ToggleForm} from '../childForm/ToggleForm';\r\nimport {Radio} from './Radio';\r\n\r\nexport interface IRadioSelectOnChangeCallback {\r\n    onChange?: (value: string, id?: string, e?: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nexport interface IRadioSelectProps extends IRadioSelectOnChangeCallback {\r\n    id?: string;\r\n    name?: string;\r\n    className?: string;\r\n    value?: string;\r\n    disabled?: boolean;\r\n    disabledTooltip?: string;\r\n    children?: Array<React.ReactElement<Radio>> | Array<React.ReactElement<ToggleForm>>;\r\n    onChangeCallback?: (value: string, id?: string, e?: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nexport interface IRadioSelectConnectedProps {\r\n    valueOnMount?: string;\r\n    disabledValuesOnMount?: string[];\r\n}\r\n\r\nexport interface IRadioSelectDispatchProps extends IRadioSelectOnChangeCallback {\r\n    onMount?: (id: string, valueOnMount: string, disabledValues: string[]) => void;\r\n    onUnmount?: (id: string) => void;\r\n}\r\n\r\nexport interface IRadioSelectStateProps {\r\n    value?: string;\r\n    disabledValues?: string[];\r\n}\r\n\r\nexport interface IRadioSelectAllProps\r\n    extends IRadioSelectProps,\r\n        IRadioSelectConnectedProps,\r\n        IRadioSelectDispatchProps,\r\n        IRadioSelectStateProps {}\r\n\r\nexport class RadioSelect extends React.PureComponent<IRadioSelectAllProps> {\r\n    componentDidMount() {\r\n        this.props.onMount?.(this.props.id, this.props.valueOnMount, this.props.disabledValuesOnMount);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onUnmount?.(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.map(this.props.children, (child: React.ReactElement<any>) => {\r\n            return React.cloneElement(child, {\r\n                name: child.props.name || this.props.name,\r\n                checked: this.props.value === child.props.value,\r\n                disabled: this.isValueDisabled(child.props.value),\r\n                disabledTooltip: this.props.disabledTooltip,\r\n                onClick: (e: React.MouseEvent<HTMLElement>) => {\r\n                    child.props.onClick && child.props.onClick(e);\r\n                    this.handleToggle(child.props.value, e);\r\n                },\r\n            });\r\n        });\r\n\r\n        return <div className={classNames('form-control radio-select', this.props.className)}>{children}</div>;\r\n    }\r\n\r\n    private handleToggle(value: string, e: React.MouseEvent<HTMLElement>) {\r\n        this.props.onChange?.(value, this.props.id, e);\r\n        this.props.onChangeCallback?.(value, this.props.id, e);\r\n    }\r\n\r\n    private isValueDisabled(childValue: string): boolean {\r\n        return (\r\n            this.props.disabled || (!!this.props.disabledValues && _.contains(this.props.disabledValues, childValue))\r\n        );\r\n    }\r\n}\r\n","import {createSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IRadioSelectState, radioSelectInitialState} from './RadioSelectReducers';\r\n\r\nconst get = (state: IReactVaporState, {id}: {id: string}): IRadioSelectState => {\r\n    return _.findWhere(state.radioSelects, {id}) || radioSelectInitialState;\r\n};\r\n\r\nconst getValue = createSelector(get, (radioSelect: IRadioSelectState) => radioSelect && radioSelect.value);\r\n\r\nconst getDisabledValue = createSelector(\r\n    get,\r\n    (radioSelect: IRadioSelectState) => radioSelect && radioSelect.disabledValues\r\n);\r\nexport const RadioSelectSelectors = {\r\n    get,\r\n    getValue,\r\n    getDisabledValue,\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {IInputProps, Input} from '../input/Input';\r\n\r\nexport class Radio extends Input {\r\n    static defaultProps: Partial<IInputProps> = {\r\n        ...Input.defaultProps,\r\n        checked: false,\r\n        disabled: false,\r\n    };\r\n\r\n    render() {\r\n        const classes: string = classNames('radio-option', this.props.classes);\r\n        return <Input {...this.props} classes={[classes]} type=\"radio\" />;\r\n    }\r\n}\r\n","import {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    IRadioSelectAllProps,\r\n    IRadioSelectDispatchProps,\r\n    IRadioSelectProps,\r\n    IRadioSelectStateProps,\r\n    RadioSelect,\r\n} from './RadioSelect';\r\nimport {removeRadioSelect, setRadioSelect} from './RadioSelectActions';\r\nimport {RadioSelectSelectors} from './RadioSelectSelectors';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IRadioSelectProps): IRadioSelectStateProps => ({\r\n    value: RadioSelectSelectors.getValue(state, {id: ownProps.id}),\r\n    disabledValues: RadioSelectSelectors.getDisabledValue(state, {id: ownProps.id}),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch): IRadioSelectDispatchProps => ({\r\n    onMount: (id: string, valueOnMount: string, disabledValuesOnMount?: string[]) =>\r\n        dispatch(setRadioSelect(id, {value: valueOnMount, disabledValues: disabledValuesOnMount})),\r\n    onUnmount: (id: string) => dispatch(removeRadioSelect(id)),\r\n    onChange: (value: string, id: string) => dispatch(setRadioSelect(id, {value})),\r\n});\r\n\r\nexport const RadioSelectConnected: React.ComponentClass<IRadioSelectAllProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(RadioSelect);\r\n"],"sourceRoot":""}