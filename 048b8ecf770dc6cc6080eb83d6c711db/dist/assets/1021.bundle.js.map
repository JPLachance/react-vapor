{"version":3,"sources":["webpack:///./src/components/numericInput/examples/NumericInputExamples.tsx?505a","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/numericInput/numeric-input.scss?b41e","webpack:///./src/components/numericInput/NumericInputSelectors.ts?491c","webpack:///./src/components/numericInput/NumericInputConnected.tsx?b5b0","webpack:///./src/components/numericInput/numeric-input.scss?8d0c"],"names":["NumericInputExamples","title","NumericInputs","description","level","id","initialValue","step","min","max","maxLength","invalidMessage","ButtonPropsToOmit","onClick","this","props","enabled","getTemplate","buttonClass","buttonElement","buttonAttrs","disabled","link","target","rel","href","className","name","children","tooltip","placement","tooltipPlacement","getClasses","primary","small","classes","render","defaultProps","Section","mods","titleProps","H","exports","module","push","i","locals","getNumericInput","state","ownProps","numericInputs","NumericInputSelectors","getValue","numericInput","value","getHasError","hasError","mapStateToProps","mapDispatchToProps","dispatch","mount","unmount","setValue","onKeyDown","e","key","keyCode","upArrow","onIncrement","downArrow","onDecrement","onChange","newValue","normalizeValue","getValueAsNumber","Math","componentDidMount","componentWillUnmount","valueAsNumber","parseFloat","incrementEnabled","decrementEnabled","type","svgName","svgClass","NumericInputConnected","content","options","transform","undefined","update","hot","accept","newContent","a","b","idx","Error","dispose"],"mappings":"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","file":"assets/1021.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\r\nimport {Section} from '../../section/Section';\r\nimport {NumericInputConnected} from '../NumericInputConnected';\r\n\r\nexport const NumericInputExamples: ExampleComponent = () => (\r\n    <Section title=\"Numeric Inputs Examples\">\r\n        <NumericInputs />\r\n    </Section>\r\n);\r\nNumericInputExamples.description =\r\n    'Numeric inputs are used to require the input of a numeric value. They can be configured in discrete jumps, when precision is not mandatory (e.g., 0, 5, 10, etc.).';\r\n\r\nconst NumericInputs: React.FunctionComponent = () => (\r\n    <Section level={2} title=\"Numeric input examples\">\r\n        <Section level={3} title=\"A numeric input with an initial value\">\r\n            <NumericInputConnected id=\"numeric-2\" initialValue={5} />\r\n        </Section>\r\n        <Section\r\n            level={3}\r\n            title=\"A numeric with an initial value of 500, a step of 50, a minimum of 25 and a max of 950 with three digits. Its inital value is 500.\"\r\n        >\r\n            <NumericInputConnected\r\n                id=\"numeric-4\"\r\n                initialValue={500}\r\n                step={50}\r\n                min={25}\r\n                max={950}\r\n                maxLength={3}\r\n                invalidMessage=\"The value must be between 25 and 999.\"\r\n            />\r\n        </Section>\r\n        <Section level={3}></Section>\r\n    </Section>\r\n);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/* ----------- Deprecated Palette ----------- */\\n.numeric-input-numericInput-3tL1iu3fVGsmDW2t_zxL0A {\\n  height: 26px;\\n  padding: 0.5rem;\\n  overflow: hidden;\\n  color: #1d4f76;\\n  font-size: 16px;\\n  text-overflow: ellipsis;\\n  border: 1px solid #bcc3ca;\\n  border-radius: 2px;\\n  box-shadow: inset 0 0 3px 0 rgba(0, 0, 0, 0.1); }\\n\\n.numeric-input-numericInputButton-27-DchXTMYUtrfzcO2BUDm {\\n  width: 26px;\\n  height: 26px;\\n  color: #ffffff;\\n  line-height: 24px;\\n  background-color: #354878;\\n  border-radius: 4px; }\\n\\n.coveo-styleguide .numeric-input-numericInputButton-27-DchXTMYUtrfzcO2BUDm {\\n  outline: none; }\\n\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"numericInput\": \"numeric-input-numericInput-3tL1iu3fVGsmDW2t_zxL0A\",\n\t\"numericInputButton\": \"numeric-input-numericInputButton-27-DchXTMYUtrfzcO2BUDm\"\n};","import * as React from 'react';\r\nimport {createSelector} from 'reselect';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {initialNumericInputState, INumericInputState} from './NumericInputReducers';\r\n\r\nconst getNumericInput = (state: IReactVaporState, ownProps: {id: string}): INumericInputState => {\r\n    return (state && state.numericInputs[ownProps.id]) || initialNumericInputState;\r\n};\r\n\r\nconst getValue: (state: IReactVaporState, ownProps: {id: string}) => React.ReactText = createSelector(\r\n    getNumericInput,\r\n    (numericInput: INumericInputState) => numericInput.value\r\n);\r\n\r\nconst getHasError: (state: IReactVaporState, ownProps: {id: string}) => boolean = createSelector(\r\n    getNumericInput,\r\n    (numericInput: INumericInputState) => numericInput.hasError\r\n);\r\n\r\nexport const NumericInputSelectors = {\r\n    getValue,\r\n    getHasError,\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {keyCode} from '../../utils/InputUtils';\r\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\r\nimport {Button} from '../button/Button';\r\nimport {Svg} from '../svg/Svg';\r\nimport * as styles from './numeric-input.scss';\r\nimport {NumericInputActions} from './NumericInputActions';\r\nimport {initialNumericInputState} from './NumericInputReducers';\r\nimport {NumericInputSelectors} from './NumericInputSelectors';\r\n\r\nexport interface NumericInputOwnProps {\r\n    id: string;\r\n    initialValue?: number;\r\n    step?: number;\r\n    min?: number;\r\n    max?: number;\r\n    invalidMessage?: string;\r\n    maxLength?: number; // we use the attribute from the input https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text\r\n}\r\n\r\nexport interface NumericInputStateProps {\r\n    value: React.ReactText;\r\n    hasError: boolean;\r\n}\r\n\r\nexport interface NumericInputDispatchProps {\r\n    mount: (value: number) => void;\r\n    unmount: () => void;\r\n    setValue: (value: number | string) => void;\r\n}\r\n\r\nexport interface NumericInputProps\r\n    extends NumericInputOwnProps,\r\n        Partial<NumericInputStateProps>,\r\n        Partial<NumericInputDispatchProps> {}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: NumericInputOwnProps): NumericInputStateProps => {\r\n    return {\r\n        value: NumericInputSelectors.getValue(state, ownProps),\r\n        hasError: NumericInputSelectors.getHasError(state, ownProps),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: NumericInputOwnProps): NumericInputDispatchProps => ({\r\n    mount: (value: number) => dispatch(NumericInputActions.mount(ownProps.id, value, ownProps.min, ownProps.max)),\r\n    unmount: () => dispatch(NumericInputActions.unmount(ownProps.id)),\r\n    setValue: (value: React.ReactText) =>\r\n        dispatch(NumericInputActions.setValue(ownProps.id, value, ownProps.min, ownProps.max)),\r\n});\r\n\r\n@ReduxConnect(mapStateToProps, mapDispatchToProps)\r\nexport class NumericInputConnected extends React.PureComponent<NumericInputProps & React.HTMLProps<HTMLInputElement>> {\r\n    static defaultProps: Partial<NumericInputOwnProps> = {\r\n        invalidMessage: 'Value is not valid',\r\n    };\r\n\r\n    componentDidMount() {\r\n        const initialValue = _.isUndefined(this.props.initialValue)\r\n            ? (initialNumericInputState.value as number)\r\n            : this.props.initialValue;\r\n        this.props.mount(initialValue);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.unmount();\r\n    }\r\n\r\n    render() {\r\n        const valueAsNumber = parseFloat('' + this.props.value);\r\n        const incrementEnabled =\r\n            _.isUndefined(this.props.max) || _.isNaN(valueAsNumber) || valueAsNumber < this.props.max;\r\n        const decrementEnabled =\r\n            _.isUndefined(this.props.min) || _.isNaN(valueAsNumber) || valueAsNumber > this.props.min;\r\n        return (\r\n            <div className=\"numeric-input flex flex-column\">\r\n                <div className=\"flex flex-row\">\r\n                    <Button\r\n                        classes={['js-decrement mr1 p0', styles.numericInputButton]}\r\n                        enabled={decrementEnabled}\r\n                        onClick={this.onDecrement}\r\n                        type=\"button\"\r\n                    >\r\n                        <Svg svgName=\"minus\" svgClass=\"icon mod-12 fill-pure-white\" />\r\n                    </Button>\r\n                    <div className=\"flex flex-column\">\r\n                        <input\r\n                            {..._.omit(this.props, keys<NumericInputProps>())}\r\n                            className={classNames(\r\n                                'js-numeric-input',\r\n                                {\r\n                                    [`mod-max-${this.props.maxLength}-digit`]:\r\n                                        _.isNumber(this.props.maxLength) && this.props.maxLength > 0,\r\n                                },\r\n                                this.props.className,\r\n                                styles.numericInput\r\n                            )}\r\n                            value={this.props.value}\r\n                            onChange={this.onChange}\r\n                            onKeyDown={this.onKeyDown}\r\n                        />\r\n                    </div>\r\n                    <Button\r\n                        classes={['js-increment ml1 p0', styles.numericInputButton]}\r\n                        enabled={incrementEnabled}\r\n                        onClick={this.onIncrement}\r\n                        type=\"button\"\r\n                    >\r\n                        <Svg svgName=\"plus\" svgClass=\"icon mod-12 fill-pure-white\" />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"flex flex-row\">\r\n                    {this.props.hasError && <span className=\"generic-form-error my1\">{this.props.invalidMessage}</span>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        const key = e.keyCode;\r\n        if (key === keyCode.upArrow) {\r\n            this.onIncrement();\r\n        } else if (key === keyCode.downArrow) {\r\n            this.onDecrement();\r\n        }\r\n    };\r\n\r\n    private onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = (e.target as HTMLInputElement).value;\r\n        this.props.setValue(value);\r\n    };\r\n\r\n    private getValueAsNumber() {\r\n        let value = this.props.value;\r\n        if (typeof value === 'string') {\r\n            value = parseFloat(value);\r\n        }\r\n        return value as number;\r\n    }\r\n\r\n    private normalizeValue(value: number) {\r\n        if (_.isNaN(value)) {\r\n            return this.props.initialValue || initialNumericInputState.value;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    private onDecrement = () => {\r\n        let newValue = this.normalizeValue(this.getValueAsNumber() - (this.props.step || 1));\r\n\r\n        if (!_.isUndefined(this.props.min)) {\r\n            newValue = Math.max(newValue, this.props.min);\r\n        }\r\n\r\n        this.props.setValue(newValue);\r\n    };\r\n\r\n    private onIncrement = () => {\r\n        let newValue = this.normalizeValue(this.getValueAsNumber() + (this.props.step || 1));\r\n\r\n        if (!_.isUndefined(this.props.max)) {\r\n            newValue = Math.min(newValue, this.props.max);\r\n        }\r\n\r\n        this.props.setValue(newValue);\r\n    };\r\n}\r\n","\nvar content = require(\"!!../../../node_modules/typings-for-css-modules-loader/lib/index.js??ref--7-1!../../../node_modules/postcss-loader/src/index.js!../../../node_modules/sass-loader/lib/loader.js!./numeric-input.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/typings-for-css-modules-loader/lib/index.js??ref--7-1!../../../node_modules/postcss-loader/src/index.js!../../../node_modules/sass-loader/lib/loader.js!./numeric-input.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/typings-for-css-modules-loader/lib/index.js??ref--7-1!../../../node_modules/postcss-loader/src/index.js!../../../node_modules/sass-loader/lib/loader.js!./numeric-input.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}