{"version":3,"sources":["webpack:///./src/components/blankSlate/examples/BlankSlateExample.tsx?cfc1","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/components/blankSlate/BlankSlate.tsx?79f5","webpack:///./src/components/refresh/RefreshCallback.tsx?1738","webpack:///./src/components/blankSlate/BlankSlatesHOC.tsx?a4e2","webpack:///./src/components/blankSlate/BlankSlateWithError.tsx?f438","webpack:///./src/components/blankSlate/BlankSlateWithTable.tsx?5bb7","webpack:///./src/components/refresh/ButtonWithRefreshCallback.tsx?5b8c"],"names":["render","className","title","description","href","withModal","buttons","name","primary","enabled","link","svgName","svgClass","additionalSection","id","delay","callback","start","setTimeout","renderCount","count","button","buttonContainerProps","ButtonPropsToOmit","onClick","this","props","getTemplate","buttonClass","buttonElement","buttonAttrs","disabled","target","rel","children","tooltip","placement","tooltipPlacement","getClasses","small","classes","defaultProps","getSvgTemplate","getDescriptionTemplate","descriptionClassName","getButtonsTemplate","buttonProps","key","blankSlateClasses","join","modalClasses","containerClasses","state","status","inProgress","stopped","started","stopInterval","clearInterval","activeInterval","startInterval","window","setInterval","setState","prevState","REFRESH_CALLBACK_INTERVAL_MS","componentDidMount","componentDidUpdate","prevProps","isStarted","isStopped","componentWillUnmount","isInProgress","stop","RefreshCallback","ownProps","getRefreshStatus","dispatch","RefreshCallbackDisconnected","BlankSlateWithTable","BlankSlateWithTableInError","BlankSlateWithError","blankSlateWithError","Component","info","blankSlateWithTable","numberOfColumn","colSpan","componentProps","isNotStopped","ButtonWithRefreshCallback","refreshCallbackProps"],"mappings":"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","file":"assets/1017.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {ButtonWithRefreshCallback} from '../../refresh/ButtonWithRefreshCallback';\r\nimport {BlankSlate} from '../BlankSlate';\r\nimport {BlankSlateWithError, BlankSlateWithTable, BlankSlateWithTableInError} from '../BlankSlatesHOC';\r\n\r\nexport class BlankSlateExample extends React.Component<any, any> {\r\n    render() {\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Default BlankSlate</label>\r\n                    <BlankSlate />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with title</label>\r\n                    <BlankSlate title=\"Title test\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with title and description</label>\r\n                    <BlankSlate title=\"Title test\" description=\"description test\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with title and description with a link</label>\r\n                    <BlankSlate\r\n                        title=\"Title test\"\r\n                        description={\r\n                            <span>\r\n                                This is a description with a link to <a href=\"https//www.google.com\">this website</a>\r\n                            </span>\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate to fit in a modal</label>\r\n                    <BlankSlate title=\"Title test\" description=\"Description test\" withModal={true} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with a button</label>\r\n                    <BlankSlate\r\n                        title=\"Title test\"\r\n                        buttons={[\r\n                            {\r\n                                name: 'button',\r\n                                primary: true,\r\n                                enabled: true,\r\n                            },\r\n                        ]}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with two button with one disabled</label>\r\n                    <BlankSlate\r\n                        title=\"Title test\"\r\n                        buttons={[\r\n                            {\r\n                                name: 'button 1',\r\n                                primary: true,\r\n                                enabled: true,\r\n                            },\r\n                            {\r\n                                name: 'button 2',\r\n                                enabled: false,\r\n                                link: 'link',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with an icon</label>\r\n                    <BlankSlate\r\n                        title=\"Title test\"\r\n                        description=\"description test\"\r\n                        svgName=\"tips\"\r\n                        svgClass=\"fill-orange\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate in error</label>\r\n                    <BlankSlateWithError\r\n                        title=\"Unable to retrieve X\"\r\n                        description=\"Super clear error message localized to ensure a good comprehension about the current error\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate for a table row</label>\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Firstname</th>\r\n                                <th>Lastname</th>\r\n                                <th>Age</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <BlankSlateWithTable\r\n                                title=\"Title test\"\r\n                                description=\"description test\"\r\n                                svgName=\"tips\"\r\n                                svgClass=\"fill-orange\"\r\n                            />\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate for a table in error</label>\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Firstname</th>\r\n                                <th>Lastname</th>\r\n                                <th>Age</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <BlankSlateWithTableInError\r\n                                title=\"Unable to retrieve X\"\r\n                                description=\"Super clear error message localized to ensure a good comprehension about the current error\"\r\n                            />\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate for a table in error</label>\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Firstname</th>\r\n                                <th>Lastname</th>\r\n                                <th>Age</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <BlankSlateWithTableInError\r\n                                title=\"Unable to retrieve X\"\r\n                                description=\"Super clear error message localized to ensure a good comprehension about the current error\"\r\n                                additionalSection={\r\n                                    <ButtonWithRefreshCallback\r\n                                        id=\"refresh\"\r\n                                        delay={10}\r\n                                        callback={(start) => setTimeout(start, 2000)}\r\n                                        renderCount={(count: number) => (\r\n                                            <span className=\"text-black small-text\">\r\n                                                Auto refresh in {count} seconds\r\n                                            </span>\r\n                                        )}\r\n                                        button={{\r\n                                            name: 'Refresh',\r\n                                            enabled: true,\r\n                                        }}\r\n                                        buttonContainerProps={{\r\n                                            className: 'mb2',\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Button} from '../button/Button';\r\nimport {Svg} from '../svg/Svg';\r\n\r\nexport interface IBlankSlateProps extends React.ClassAttributes<BlankSlate> {\r\n    title?: React.ReactNode;\r\n    description?: React.ReactNode;\r\n    additionalSection?: React.ReactNode;\r\n    buttons?: IBaseActionOptions[];\r\n    withModal?: boolean;\r\n    classes?: string[];\r\n    containerClasses?: string[];\r\n    descriptionClassName?: string;\r\n    svgName?: string;\r\n    svgClass?: string;\r\n}\r\n\r\nexport class BlankSlate extends React.Component<IBlankSlateProps, {}> {\r\n    static defaultProps: Partial<IBlankSlateProps> = {\r\n        title: null,\r\n        description: null,\r\n        additionalSection: null,\r\n        buttons: [],\r\n        withModal: false,\r\n        classes: [],\r\n        containerClasses: [],\r\n        descriptionClassName: '',\r\n        svgName: '',\r\n        svgClass: '',\r\n    };\r\n\r\n    private getSvgTemplate() {\r\n        return this.props.svgName ? (\r\n            <Svg svgName={this.props.svgName} svgClass={`icon mod-4x ${this.props.svgClass}`} />\r\n        ) : null;\r\n    }\r\n\r\n    private getDescriptionTemplate(): JSX.Element {\r\n        return this.props.description ? (\r\n            <p className={this.props.descriptionClassName}>{this.props.description}</p>\r\n        ) : null;\r\n    }\r\n\r\n    private getButtonsTemplate(): JSX.Element[] {\r\n        return _.map(this.props.buttons, (buttonProps: IBaseActionOptions) => {\r\n            return <Button key={buttonProps.name} {...buttonProps} />;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const marginClasses: string = this.props.withModal ? 'mt2 mb2' : 'm2';\r\n        const blankSlateClasses: string = `blankslate ${marginClasses} ${this.props.classes.join(' ')}`;\r\n        const modalClasses: string = classNames(\r\n            {'mod-header-padding': this.props.withModal},\r\n            this.props.containerClasses\r\n        );\r\n\r\n        return (\r\n            <div className={modalClasses}>\r\n                <div className={blankSlateClasses}>\r\n                    {this.getSvgTemplate()}\r\n                    <h1>{this.props.title}</h1>\r\n                    {this.getDescriptionTemplate()}\r\n                    {this.getButtonsTemplate()}\r\n                    {this.props.additionalSection}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {Defaults} from '../../Defaults';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {RefreshCallBackActions} from './RefeshCallbackActions';\nimport {RefreshStatus, RefreshStatusSelectors} from './RefreshCallbackReducer';\n\nexport interface IRefreshCallbackOwnProps {\n    id: string;\n    delay?: number;\n    renderCount?: (count: number) => React.ReactNode;\n    callback: (start: () => void) => void;\n}\n\nexport interface IRefreshCallbackState {\n    count: number;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IRefreshCallbackOwnProps) => ({\n    status: RefreshStatusSelectors.getRefreshStatus(state, {id: ownProps.id}),\n});\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IRefreshCallbackOwnProps) => ({\n    start: () => dispatch(RefreshCallBackActions.start(ownProps.id)),\n    stop: () => dispatch(RefreshCallBackActions.stop(ownProps.id)),\n    inProgress: () => dispatch(RefreshCallBackActions.inProgress(ownProps.id)),\n});\n\nexport type IRefreshCallbackProps = IRefreshCallbackOwnProps &\n    ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>;\n\nclass RefreshCallbackDisconnected extends React.PureComponent<IRefreshCallbackProps, IRefreshCallbackState> {\n    static defaultProps: Partial<IRefreshCallbackProps> = {\n        delay: 10,\n        renderCount: (count: number) => <span>Auto refresh in {count} seconds</span>,\n    };\n\n    private activeInterval: number;\n\n    state = {\n        count: this.props.delay,\n    };\n\n    get isInProgress() {\n        return this.state.count === 0 && this.props.status === RefreshStatus.inProgress;\n    }\n\n    get isStopped() {\n        return this.props.status === RefreshStatus.stopped;\n    }\n\n    get isStarted() {\n        return this.props.status === RefreshStatus.started;\n    }\n\n    private stopInterval() {\n        clearInterval(this.activeInterval);\n    }\n\n    private startInterval() {\n        this.activeInterval = window.setInterval(() => {\n            this.setState((prevState: IRefreshCallbackState) => ({\n                count: prevState.count - 1,\n            }));\n        }, Defaults.REFRESH_CALLBACK_INTERVAL_MS);\n        this.props.inProgress();\n    }\n\n    componentDidMount() {\n        this.startInterval();\n    }\n\n    componentDidUpdate(prevProps: Readonly<IRefreshCallbackProps>, prevState: Readonly<IRefreshCallbackState>) {\n        if (this.isStarted) {\n            this.stopInterval();\n            this.setState({\n                count: this.props.delay,\n            });\n            this.startInterval();\n        } else if (this.isStopped) {\n            this.stopInterval();\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    render() {\n        if (this.isInProgress) {\n            this.stopInterval();\n            this.props.stop();\n            this.props.callback?.(this.props.start);\n        }\n\n        return this.props.renderCount(this.state.count);\n    }\n}\n\nexport const RefreshCallback = connect(mapStateToProps, mapDispatchToProps)(RefreshCallbackDisconnected);\n","import {FunctionComponent} from 'react';\nimport * as _ from 'underscore';\nimport {BlankSlate, IBlankSlateProps} from './BlankSlate';\nimport {blankSlateWithError} from './BlankSlateWithError';\nimport {blankSlateWithTable, IBlankSlateWithTableProps} from './BlankSlateWithTable';\n\nexport interface IBlankSlateWithTable extends IBlankSlateWithTableProps, IBlankSlateProps {}\n\nexport const BlankSlateWithTable: FunctionComponent<IBlankSlateWithTable> = _.compose(blankSlateWithTable)(BlankSlate);\n\nexport const BlankSlateWithTableInError: FunctionComponent<IBlankSlateWithTable> = _.compose(\n    blankSlateWithTable,\n    blankSlateWithError\n)(BlankSlate);\n\nexport const BlankSlateWithError: FunctionComponent<IBlankSlateWithTable> = _.compose(blankSlateWithError)(BlankSlate);\n","import * as VaporSVG from 'coveo-styleguide';\nimport * as React from 'react';\nimport {Svg} from '../svg/Svg';\nimport {IBlankSlateProps} from './BlankSlate';\n\nexport const blankSlateWithError = (\n    Component: React.ComponentClass<IBlankSlateProps>\n): React.ComponentClass<IBlankSlateProps> => {\n    class BlankSlateWithErrorComponent extends React.PureComponent<IBlankSlateProps> {\n        render() {\n            return (\n                <Component\n                    {...this.props}\n                    title={\n                        <div className=\"text-orange-8 flex center-align\">\n                            <Svg\n                                svgName={VaporSVG.svg.info.name}\n                                className=\"icon mr1 fill-orange-8 flex center-align\"\n                            />\n                            {this.props.title}\n                        </div>\n                    }\n                    description={<span className=\"text-black semibold\">{this.props.description}</span>}\n                    classes={['border-color-orange-8 mod-error']}\n                >\n                    {this.props.children}\n                </Component>\n            );\n        }\n    }\n\n    return BlankSlateWithErrorComponent;\n};\n","import {ComponentClass} from 'react';\nimport * as React from 'react';\nimport {IBlankSlateProps} from './BlankSlate';\n\nexport interface IBlankSlateWithTableProps extends IBlankSlateProps {\n    numberOfColumn?: number;\n}\n\nexport const blankSlateWithTable = <P extends IBlankSlateProps>(\n    Component: React.ComponentType<P>\n): ComponentClass<IBlankSlateWithTableProps & P> => {\n    class ComponentBlankSlateWithTable extends React.PureComponent<IBlankSlateWithTableProps & P> {\n        static defaultProps: Partial<IBlankSlateWithTableProps & P> = {\n            numberOfColumn: 20,\n        } as Partial<IBlankSlateWithTableProps & P>;\n\n        render() {\n            const {numberOfColumn, ...componentProps} = this.props;\n            return (\n                <tr className=\"blankslate-row no-hover\">\n                    <td colSpan={numberOfColumn}>\n                        <Component {...(componentProps as P)}>{this.props.children}</Component>\n                    </td>\n                </tr>\n            );\n        }\n    }\n\n    return ComponentBlankSlateWithTable;\n};\n","import {FunctionComponent} from 'react';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {Button, IButtonProps} from '../button/Button';\nimport {RefreshCallBackActions} from './RefeshCallbackActions';\nimport {IRefreshCallbackOwnProps, RefreshCallback} from './RefreshCallback';\nimport {RefreshStatus, RefreshStatusSelectors} from './RefreshCallbackReducer';\n\nexport interface IButtonWithRefreshCallbackProps extends IRefreshCallbackOwnProps {\n    buttonContainerProps?: React.HtmlHTMLAttributes<HTMLDivElement>;\n    button: IButtonProps;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IButtonWithRefreshCallbackProps) => ({\n    status: RefreshStatusSelectors.getRefreshStatus(state, {id: ownProps.id}),\n});\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IButtonWithRefreshCallbackProps) => ({\n    start: () => dispatch(RefreshCallBackActions.start(ownProps.id)),\n    stop: () => dispatch(RefreshCallBackActions.stop(ownProps.id)),\n});\n\nconst isNotStopped = (status: string) => status !== RefreshStatus.stopped;\n\nconst buttonWithRefreshCallbackDisconnected: FunctionComponent<IButtonWithRefreshCallbackProps &\n    Partial<ReturnType<typeof mapStateToProps>> &\n    Partial<ReturnType<typeof mapDispatchToProps>>> = ({\n    button,\n    buttonContainerProps,\n    status,\n    start,\n    stop,\n    ...refreshCallbackProps\n}) => (\n    <>\n        <div {...(buttonContainerProps || {})}>\n            <Button\n                {...button}\n                onClick={() => {\n                    stop();\n                    refreshCallbackProps.callback?.(start);\n                }}\n                enabled={isNotStopped(status)}\n            />\n        </div>\n        <RefreshCallback {...refreshCallbackProps} />\n    </>\n);\n\nexport const ButtonWithRefreshCallback = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(buttonWithRefreshCallbackDisconnected);\n"],"sourceRoot":""}