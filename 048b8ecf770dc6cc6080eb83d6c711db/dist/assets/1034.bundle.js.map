{"version":3,"sources":["webpack:///./src/components/editor/examples/JSONEditorExamples.tsx?ea0a","webpack:///./src/components/editor/EditorConstants.ts?ac90","webpack:///./src/components/editor/CodeEditor.tsx?c19e","webpack:///./src/utils/JSONUtils.ts?2cdd","webpack:///./src/components/editor/JSONEditor.tsx?b4a6"],"names":["render","className","value","readOnly","onChange","json","alert","CodeMirrorGutters","LineNumbers","FoldGutter","LintMarkers","CodeMirrorModes","JSON","XML","Python","props","state","codemirror","componentDidMount","this","onMount","current","componentDidUpdate","prevProps","editor","setState","getDoc","clearHistory","ref","editorDidMount","addExtraKeywords","onBeforeChange","data","handleChange","options","CodeEditor","Options","removeCursorWhenEditorIsReadOnly","mode","code","extraKeywords","name","hintWords","concat","defaultProps","lineNumbers","foldGutter","lint","gutters","extraKeys","fakeJSON","_id","index","guid","isActive","balance","picture","age","eyeColor","first","last","company","email","phone","address","about","registered","latitude","longitude","tags","range","friends","id","greeting","favoriteFruit","fakeJSONCopy","otherThing","fakeJSON1","JSONToString","stringify","undefined","isInError","classes","getValidationDetails","svgName","svgClass","errorMessage","inError","parse","error","callOnChange"],"mappings":"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","file":"assets/1034.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {fakeJSON, JSONToString} from '../../../utils/JSONUtils';\r\nimport {JSONEditor} from '../JSONEditor';\r\n\r\nexport class JSONEditorExamples extends React.Component<{}, {}> {\r\n    render() {\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">JSON Editor using codemirror</label>\r\n                    <JSONEditor value={JSONToString(fakeJSON)} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">JSON Editor using codemirror in readonly mode</label>\r\n                    <JSONEditor value={JSONToString(fakeJSON)} readOnly />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">JSON Editor using codemirror with an action on change</label>\r\n                    <JSONEditor value={JSONToString(fakeJSON)} onChange={(json: string) => alert(json)} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export const CodeMirrorGutters = {\r\n    LineNumbers: 'CodeMirror-linenumbers',\r\n    FoldGutter: 'CodeMirror-foldgutter',\r\n    LintMarkers: 'CodeMirror-lint-markers',\r\n};\r\n\r\nexport const CodeMirrorModes = {\r\n    JSON: 'application/json',\r\n    XML: 'xml',\r\n    Python: 'python',\r\n};\r\n","import 'codemirror/addon/dialog/dialog';\r\nimport 'codemirror/addon/dialog/dialog.css';\r\nimport 'codemirror/addon/hint/anyword-hint';\r\nimport 'codemirror/addon/hint/show-hint';\r\nimport 'codemirror/addon/hint/show-hint.css';\r\nimport 'codemirror/addon/search/jump-to-line';\r\nimport 'codemirror/addon/search/matchesonscrollbar';\r\nimport 'codemirror/addon/search/search';\r\nimport 'codemirror/mode/python/python';\r\n\r\nimport * as CodeMirror from 'codemirror';\r\nimport * as React from 'react';\r\nimport * as ReactCodeMirror from 'react-codemirror2';\r\nimport * as _ from 'underscore';\r\n\r\nimport {CodeMirrorGutters} from './EditorConstants';\r\n\r\nexport interface ICodeEditorProps {\r\n    value: string;\r\n    readOnly?: boolean;\r\n    onChange?: (code: string) => void;\r\n    onMount?: (codemirror: ReactCodeMirror.Controlled) => void;\r\n    errorMessage?: string;\r\n    mode: any; // string or object ex.: {name: \"javascript\", json: true}\r\n    extraKeywords?: string[];\r\n    className?: string;\r\n}\r\n\r\nexport interface CodeEditorState {\r\n    value: string;\r\n}\r\n\r\nexport class CodeEditor extends React.Component<ICodeEditorProps, CodeEditorState> {\r\n    static defaultProps: Partial<ICodeEditorProps> = {\r\n        className: 'mod-border',\r\n    };\r\n\r\n    static Options: CodeMirror.EditorConfiguration = {\r\n        lineNumbers: true,\r\n        foldGutter: true,\r\n        lint: true,\r\n        gutters: [CodeMirrorGutters.LineNumbers, CodeMirrorGutters.FoldGutter, CodeMirrorGutters.LintMarkers],\r\n        extraKeys: {\r\n            'Ctrl-Space': 'autocomplete',\r\n            'Alt-F': 'findPersistent',\r\n        },\r\n    };\r\n\r\n    private codemirror = React.createRef<ReactCodeMirror.Controlled>();\r\n    private editor: ReactCodeMirror.IInstance;\r\n\r\n    constructor(props: ICodeEditorProps, state: CodeEditorState) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            value: props.value,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onMount?.(this.codemirror.current);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ICodeEditorProps) {\r\n        if (prevProps.value !== this.props.value && this.editor) {\r\n            this.setState({value: this.props.value});\r\n            this.editor.getDoc().clearHistory();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ReactCodeMirror.Controlled\r\n                ref={this.codemirror}\r\n                editorDidMount={(editor: ReactCodeMirror.IInstance) => {\r\n                    this.editor = editor;\r\n                    this.addExtraKeywords();\r\n                }}\r\n                onBeforeChange={(editor, data, value: string) => {\r\n                    this.setState({value});\r\n                }}\r\n                value={this.state.value}\r\n                onChange={(editor, data, value: string) => this.handleChange(value)}\r\n                options={_.extend({}, CodeEditor.Options, {\r\n                    readOnly: this.removeCursorWhenEditorIsReadOnly(),\r\n                    mode: this.props.mode,\r\n                })}\r\n                className={this.props.className}\r\n            />\r\n        );\r\n    }\r\n\r\n    private removeCursorWhenEditorIsReadOnly() {\r\n        return this.props.readOnly ? 'nocursor' : this.props.readOnly;\r\n    }\r\n\r\n    private handleChange(code: string) {\r\n        this.props.onChange?.(code);\r\n    }\r\n\r\n    private addExtraKeywords() {\r\n        if (this.props.extraKeywords) {\r\n            const mode: string = this.props.mode.name || this.props.mode;\r\n            (CodeMirror as any).helpers.hintWords[mode] = (CodeMirror as any).helpers.hintWords[mode].concat(\r\n                this.props.extraKeywords\r\n            );\r\n        }\r\n    }\r\n}\r\n","export const fakeJSON = {\r\n    _id: '5aa97c3a188912df4047d157',\r\n    index: 0,\r\n    guid: 'a77733c5-01ea-4d3d-9f22-9ec4d06c2da6',\r\n    isActive: false,\r\n    balance: '$3,307.29',\r\n    picture: 'http://placehold.it/32x32',\r\n    age: 33,\r\n    eyeColor: 'green',\r\n    name: {\r\n        first: 'Natasha',\r\n        last: 'Jenkins',\r\n    },\r\n    company: 'ZANYMAX',\r\n    email: 'natasha.jenkins@zanymax.net',\r\n    phone: '+1 (917) 404-3066',\r\n    address: '555 Linden Boulevard, Stonybrook, Wisconsin, 2342',\r\n    about: 'Nulla sunt excepteur veniam elit laboris pariatur. Occaecat aliquip magna aliqua sunt tempor sunt id.',\r\n    registered: 'Sunday, January 31, 2016 2:37 AM',\r\n    latitude: '-11.761137',\r\n    longitude: '-23.176443',\r\n    tags: ['voluptate', 'et', 'sunt', 'sunt', 'cupidatat'],\r\n    range: [0, 1, 2],\r\n    friends: [\r\n        {\r\n            id: 0,\r\n            name: 'Mccray Kerr',\r\n        },\r\n        {\r\n            id: 1,\r\n            name: 'Cristina Osborn',\r\n        },\r\n    ],\r\n    greeting: 'Hello, Natasha! You have 8 unread messages.',\r\n    favoriteFruit: 'apple',\r\n};\r\n\r\nconst fakeJSONCopy: {[key: string]: any} = {\r\n    ...fakeJSON,\r\n    range: [5, 6],\r\n    friends: [\r\n        ...fakeJSON.friends,\r\n        {\r\n            id: 4,\r\n            name: 'Someone New',\r\n        },\r\n    ],\r\n    otherThing: 'This is a new property',\r\n};\r\ndelete fakeJSONCopy.isActive;\r\n\r\nexport const fakeJSON1 = fakeJSONCopy;\r\n\r\nexport const JSONToString = (json: {[key: string]: any}) => JSON.stringify(json, undefined, 2);\r\n","import 'codemirror/mode/javascript/javascript';\r\n\r\nimport * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nimport {Svg} from '../svg/Svg';\r\nimport {CodeEditor} from './CodeEditor';\r\nimport {CodeMirrorModes} from './EditorConstants';\r\n\r\nexport interface IJSONEditorProps {\r\n    value: string;\r\n    readOnly?: boolean;\r\n    onChange?: (json: string, inError: boolean) => void;\r\n    errorMessage?: string;\r\n}\r\n\r\nexport interface IJSONEditorState {\r\n    isInError: boolean;\r\n}\r\n\r\nexport const DEFAULT_JSON_ERROR_MESSAGE: string = 'The JSON configuration is syntactically invalid.';\r\n\r\nexport class JSONEditor extends React.Component<IJSONEditorProps, IJSONEditorState> {\r\n    static defaultProps: Partial<IJSONEditorProps> = {\r\n        errorMessage: DEFAULT_JSON_ERROR_MESSAGE,\r\n    };\r\n\r\n    constructor(props: IJSONEditorProps, state: IJSONEditorState) {\r\n        super(props, state);\r\n        this.state = {\r\n            isInError: false,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const classes: string = classNames('form-group', {\r\n            'input-validation-error': this.state.isInError,\r\n        });\r\n        return (\r\n            <div className={classes}>\r\n                <CodeEditor\r\n                    value={this.props.value}\r\n                    onChange={(json: string) => this.handleChange(json)}\r\n                    mode={CodeMirrorModes.JSON}\r\n                    readOnly={this.props.readOnly}\r\n                />\r\n                {this.getValidationDetails()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getValidationDetails(): JSX.Element {\r\n        return this.state.isInError ? (\r\n            <div className=\"input-validation-error-details\">\r\n                <Svg className=\"input-validation-error-icon\" svgName=\"message-alert\" svgClass=\"icon fill-white\" />\r\n                <span className=\"input-validation-error-message\">{this.props.errorMessage}</span>\r\n            </div>\r\n        ) : null;\r\n    }\r\n\r\n    private handleChange(json: string) {\r\n        let inError: boolean = false;\r\n        try {\r\n            JSON.parse(json);\r\n        } catch (error) {\r\n            inError = true;\r\n        }\r\n        this.setState({\r\n            isInError: inError,\r\n        });\r\n        this.callOnChange(json, inError);\r\n    }\r\n\r\n    private callOnChange(json: string, inError: boolean) {\r\n        this.props.onChange?.(json, inError);\r\n    }\r\n}\r\n"],"sourceRoot":""}