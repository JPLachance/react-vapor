{"version":3,"sources":["webpack:///./src/components/validation/tests/ValidationReducer.spec.ts"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/933.bundle.js","sourcesContent":["export default \"import {ValidationActionsTypes} from '../ValidationActions';\\nimport {validationReducer} from '../ValidationReducer';\\n\\ndescribe('ValidationReducer', () => {\\n    const componentId = '🐟';\\n    const nonEmptyValidationType = '🕳';\\n    const aMessage = 'ohno';\\n\\n    it('should ignore a random action type', () => {\\n        const newState = validationReducer(\\n            {},\\n            {type: 'sorandom', payload: {id: 'jenkins', validationType: 'wow', value: 'bloup'}}\\n        );\\n\\n        expect(newState).toEqual({});\\n    });\\n\\n    describe('updateError', () => {\\n        it('should create the validation state of a new component', () => {\\n            const newState = validationReducer(\\n                {},\\n                {\\n                    type: ValidationActionsTypes.updateError,\\n                    payload: {\\n                        id: componentId,\\n                        validationType: nonEmptyValidationType,\\n                        value: aMessage,\\n                    },\\n                }\\n            );\\n\\n            expect(newState[componentId].error).toContain({\\n                validationType: nonEmptyValidationType,\\n                value: aMessage,\\n            });\\n        });\\n\\n        it('should append a new validationType to an existing component', () => {\\n            const newState = validationReducer(\\n                {\\n                    [componentId]: {\\n                        error: [\\n                            {\\n                                validationType: 'wow',\\n                                value: 'ok',\\n                            },\\n                        ],\\n                        warning: [],\\n                        isDirty: [],\\n                    },\\n                },\\n                {\\n                    type: ValidationActionsTypes.updateError,\\n                    payload: {\\n                        id: componentId,\\n                        validationType: nonEmptyValidationType,\\n                        value: aMessage,\\n                    },\\n                }\\n            );\\n\\n            expect(newState[componentId].error.length).toBe(2);\\n        });\\n\\n        it('should update an existing validationType', () => {\\n            const newState = validationReducer(\\n                {\\n                    [componentId]: {\\n                        error: [\\n                            {\\n                                validationType: nonEmptyValidationType,\\n                                value: 'oldvalue',\\n                            },\\n                        ],\\n                        warning: [],\\n                        isDirty: [],\\n                    },\\n                },\\n                {\\n                    type: ValidationActionsTypes.updateError,\\n                    payload: {\\n                        id: componentId,\\n                        validationType: nonEmptyValidationType,\\n                        value: aMessage,\\n                    },\\n                }\\n            );\\n\\n            expect(newState[componentId].error[0]).toEqual({\\n                validationType: nonEmptyValidationType,\\n                value: aMessage,\\n            });\\n        });\\n    });\\n\\n    describe('updateWarning', () => {\\n        it('should create the validation state of a new component', () => {\\n            const newState = validationReducer(\\n                {},\\n                {\\n                    type: ValidationActionsTypes.updateWarning,\\n                    payload: {\\n                        id: componentId,\\n                        validationType: nonEmptyValidationType,\\n                        value: aMessage,\\n                    },\\n                }\\n            );\\n\\n            expect(newState[componentId].warning).toContain({\\n                validationType: nonEmptyValidationType,\\n                value: aMessage,\\n            });\\n        });\\n\\n        it('should append a new validationType to an existing component', () => {\\n            const newState = validationReducer(\\n                {\\n                    [componentId]: {\\n                        error: [],\\n                        warning: [\\n                            {\\n                                validationType: 'wow',\\n                                value: 'ok',\\n                            },\\n                        ],\\n                        isDirty: [],\\n                    },\\n                },\\n                {\\n                    type: ValidationActionsTypes.updateWarning,\\n                    payload: {\\n                        id: componentId,\\n                        validationType: nonEmptyValidationType,\\n                        value: aMessage,\\n                    },\\n                }\\n            );\\n\\n            expect(newState[componentId].warning.length).toBe(2);\\n        });\\n\\n        it('should update an existing validationType', () => {\\n            const newState = validationReducer(\\n                {\\n                    [componentId]: {\\n                        error: [,],\\n                        warning: [\\n                            {\\n                                validationType: nonEmptyValidationType,\\n                                value: 'oldvalue',\\n                            },\\n                        ],\\n                        isDirty: [],\\n                    },\\n                },\\n                {\\n                    type: ValidationActionsTypes.updateWarning,\\n                    payload: {\\n                        id: componentId,\\n                        validationType: nonEmptyValidationType,\\n                        value: aMessage,\\n                    },\\n                }\\n            );\\n\\n            expect(newState[componentId].warning[0]).toEqual({\\n                validationType: nonEmptyValidationType,\\n                value: aMessage,\\n            });\\n        });\\n    });\\n\\n    describe('updateWarning', () => {\\n        it('should create the validation state of a new component', () => {\\n            const newState = validationReducer(\\n                {},\\n                {\\n                    type: ValidationActionsTypes.updateDirty,\\n                    payload: {\\n                        id: componentId,\\n                        validationType: nonEmptyValidationType,\\n                        value: true,\\n                    },\\n                }\\n            );\\n\\n            expect(newState[componentId].isDirty).toContain({\\n                validationType: nonEmptyValidationType,\\n                value: true,\\n            });\\n        });\\n\\n        it('should append a new validationType to an existing component', () => {\\n            const newState = validationReducer(\\n                {\\n                    [componentId]: {\\n                        error: [],\\n                        warning: [],\\n                        isDirty: [\\n                            {\\n                                validationType: 'wow',\\n                                value: true,\\n                            },\\n                        ],\\n                    },\\n                },\\n                {\\n                    type: ValidationActionsTypes.updateDirty,\\n                    payload: {\\n                        id: componentId,\\n                        validationType: nonEmptyValidationType,\\n                        value: false,\\n                    },\\n                }\\n            );\\n\\n            expect(newState[componentId].isDirty.length).toBe(2);\\n        });\\n\\n        it('should update an existing validationType', () => {\\n            const newState = validationReducer(\\n                {\\n                    [componentId]: {\\n                        error: [,],\\n                        warning: [],\\n                        isDirty: [\\n                            {\\n                                validationType: nonEmptyValidationType,\\n                                value: false,\\n                            },\\n                        ],\\n                    },\\n                },\\n                {\\n                    type: ValidationActionsTypes.updateDirty,\\n                    payload: {\\n                        id: componentId,\\n                        validationType: nonEmptyValidationType,\\n                        value: true,\\n                    },\\n                }\\n            );\\n\\n            expect(newState[componentId].isDirty[0]).toEqual({\\n                validationType: nonEmptyValidationType,\\n                value: true,\\n            });\\n        });\\n    });\\n});\\n\""],"sourceRoot":""}