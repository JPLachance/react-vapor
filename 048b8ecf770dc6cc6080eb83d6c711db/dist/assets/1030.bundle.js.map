{"version":3,"sources":["webpack:///./src/components/filterBox/examples/FilterBoxExamples.tsx?ae94","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/filterBox/FilterBoxConnected.tsx?7041","webpack:///./src/components/filterBox/FilterBox.tsx?d7c0"],"names":["FilterBoxExamples","FilterBoxes","description","title","level","id","filterPlaceholder","maxWidth","className","classes","enabled","onClick","alert","svgName","ButtonPropsToOmit","this","props","getTemplate","buttonClass","buttonElement","buttonAttrs","disabled","link","target","rel","href","name","children","tooltip","placement","tooltipPlacement","getClasses","primary","small","render","defaultProps","Section","mods","titleProps","H","debouncedFilterThrough","dispatch","filterText","FilterBoxConnected","state","ownProps","getFilterText","onRender","onDestroy","onFilter","mergeProps","handleChange","nextInputValue","filterInput","value","nextElementSibling","setAttribute","length","onFilterCallback","clearValue","focus","handleOnBlur","onBlur","handleOnKeyDown","e","onKeyDown","handleOnKeyUp","onKeyUp","placeCursorAtEndOfInputValue","input","temp","componentWillMount","componentWillUnmount","componentWillReceiveProps","nextProps","inputMaxWidth","filterBoxContainerClasses","containerClasses","filterInputClasses","truncate","svgClearClasses","hidden","style","withTitleOnInput","undefined","ref","type","placeholder","onChange","currentTarget","onFocus","autoFocus","isAutoFocus","svgClass"],"mappings":"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","file":"assets/1030.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\r\nimport {Button} from '../../button/Button';\r\nimport {Section} from '../../section/Section';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {FilterBoxConnected} from '../FilterBoxConnected';\r\n\r\nexport const FilterBoxExamples: ExampleComponent = () => <FilterBoxes />;\r\nFilterBoxExamples.description = 'Will be used to filter content';\r\n\r\n// start-print\r\n\r\nconst FilterBoxes: React.FunctionComponent = () => (\r\n    <Section title=\"FilterBox Examples\">\r\n        <Section level={3} title=\"A filterBox with a custom placeholder.\">\r\n            <FilterBoxConnected id=\"FirstFilterBox\" filterPlaceholder=\"Custom Placeholder\" />\r\n        </Section>\r\n        <Section level={3} title=\"A filterBox with a maximum width.\">\r\n            <FilterBoxConnected id=\"SecondFilterBox\" maxWidth={160} />\r\n        </Section>\r\n        <Section level={3} title=\"A filterBox with a child component\">\r\n            <FilterBoxConnected\r\n                id=\"FilterBoxExampleComponentWithChildren\"\r\n                className={'flex flex-center'}\r\n                filterPlaceholder=\"Filter\"\r\n            >\r\n                <Button classes={['p1', 'ml1']} enabled onClick={() => alert('clicked !')}>\r\n                    <Svg svgName={'add'} className=\"icon mod-lg mod-align-with-text\" />\r\n                </Button>\r\n            </FilterBoxConnected>\r\n        </Section>\r\n    </Section>\r\n);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    FilterBox,\r\n    IFilterBoxDispatchProps,\r\n    IFilterBoxOwnProps,\r\n    IFilterBoxProps,\r\n    IFilterBoxStateProps,\r\n} from './FilterBox';\r\nimport {addFilter, filterThrough, removeFilter} from './FilterBoxActions';\r\nimport {FilterBoxSelectors} from './FilterBoxSelectors';\r\n\r\nconst FILTER_THROUGH_DEBOUNCE = 400;\r\nexport const debouncedFilterThrough = _.debounce(\r\n    (dispatch: IDispatch, id: string, filterText: string) => dispatch(filterThrough(id, filterText)),\r\n    FILTER_THROUGH_DEBOUNCE\r\n);\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFilterBoxOwnProps): IFilterBoxStateProps => ({\r\n    filterText: FilterBoxSelectors.getFilterText(state, {id: ownProps.id}),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch): IFilterBoxDispatchProps => ({\r\n    onRender: (id: string) => dispatch(addFilter(id)),\r\n    onDestroy: (id: string) => dispatch(removeFilter(id)),\r\n    onFilter: (id: string, filterText: string) => debouncedFilterThrough(dispatch, id, filterText),\r\n});\r\n\r\nexport const FilterBoxConnected: React.ComponentClass<IFilterBoxProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FilterBox);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Svg} from '../svg/Svg';\r\n\r\nexport interface IFilterBoxOwnProps extends React.ClassAttributes<FilterBox> {\r\n    id?: string;\r\n    containerClasses?: string[];\r\n    filterPlaceholder?: string;\r\n    onBlur?: () => void;\r\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    onKeyUp?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    isAutoFocus?: boolean;\r\n    maxWidth?: number;\r\n    withTitleOnInput?: boolean;\r\n    truncate?: boolean;\r\n    onFilterCallback?: (id: string, filterText: string) => void;\r\n    className?: string;\r\n}\r\n\r\nexport interface IFilterBoxStateProps {\r\n    filterText?: string;\r\n}\r\n\r\nexport interface IFilterBoxDispatchProps {\r\n    onRender?: (id: string) => void;\r\n    onDestroy?: (id: string) => void;\r\n    onFilter?: (id: string, filterText: string) => void;\r\n}\r\n\r\nexport interface IFilterBoxProps extends IFilterBoxOwnProps, IFilterBoxStateProps, IFilterBoxDispatchProps {}\r\n\r\nexport const FILTER_PLACEHOLDER: string = 'Filter';\r\n\r\nexport class FilterBox extends React.Component<IFilterBoxProps, any> {\r\n    filterInput: HTMLInputElement;\r\n\r\n    constructor(props: IFilterBoxProps) {\r\n        super(props);\r\n    }\r\n\r\n    static defaultProps: Partial<IFilterBoxProps> = {\r\n        isAutoFocus: false,\r\n    };\r\n\r\n    private handleChange = (nextInputValue: string) => {\r\n        this.filterInput.value = nextInputValue;\r\n        this.filterInput.nextElementSibling.setAttribute('class', this.filterInput.value.length ? '' : 'hidden');\r\n\r\n        if (this.props.onFilterCallback) {\r\n            this.props.onFilterCallback(this.props.id, this.filterInput.value);\r\n        }\r\n\r\n        if (this.props.onFilter) {\r\n            this.props.onFilter(this.props.id, this.filterInput.value);\r\n        }\r\n    };\r\n\r\n    private handleOnBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur();\r\n        }\r\n    }\r\n\r\n    private handleOnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyDown) {\r\n            this.props.onKeyDown(e);\r\n        }\r\n    }\r\n\r\n    private handleOnKeyUp(e: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(e);\r\n        }\r\n    }\r\n\r\n    private clearValue = () => {\r\n        this.filterInput.focus();\r\n        this.handleChange('');\r\n    };\r\n\r\n    placeCursorAtEndOfInputValue(e: React.FocusEvent<any>) {\r\n        const input = e.target as HTMLInputElement;\r\n        const temp = input.value;\r\n        input.value = '';\r\n        input.value = temp;\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender(this.props.id);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy(this.props.id);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFilterBoxProps) {\r\n        if (this.props.filterText !== nextProps.filterText && this.filterInput.value !== nextProps.filterText) {\r\n            this.handleChange(nextProps.filterText);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const inputMaxWidth = {maxWidth: `${this.props.maxWidth}px`};\r\n        const filterPlaceholder = this.props.filterPlaceholder || FILTER_PLACEHOLDER;\r\n        const filterBoxContainerClasses = classNames('filter-container', this.props.containerClasses);\r\n        const filterInputClasses = classNames('filter-box', {truncate: this.props.truncate});\r\n        const svgClearClasses = classNames({hidden: !(this.filterInput && this.filterInput.value)});\r\n\r\n        return (\r\n            <div className={this.props.className}>\r\n                <div\r\n                    id={this.props.id}\r\n                    className={filterBoxContainerClasses}\r\n                    style={inputMaxWidth}\r\n                    title={this.filterInput && this.props.withTitleOnInput ? this.filterInput.value : undefined}\r\n                >\r\n                    <input\r\n                        ref={(filterInput: HTMLInputElement) => (this.filterInput = filterInput)}\r\n                        type=\"text\"\r\n                        className={filterInputClasses}\r\n                        placeholder={filterPlaceholder}\r\n                        onChange={(e: React.FormEvent<HTMLInputElement>) => this.handleChange(e.currentTarget.value)}\r\n                        onBlur={() => this.handleOnBlur()}\r\n                        onFocus={(e: React.FocusEvent<HTMLInputElement>) => {\r\n                            this.placeCursorAtEndOfInputValue(e);\r\n                        }}\r\n                        onKeyDown={(e) => this.handleOnKeyDown(e)}\r\n                        onKeyUp={(e) => this.handleOnKeyUp(e)}\r\n                        style={inputMaxWidth}\r\n                        autoFocus={this.props.isAutoFocus}\r\n                    />\r\n                    <Svg\r\n                        svgName=\"clear\"\r\n                        className={svgClearClasses}\r\n                        svgClass=\"icon mod-lg fill-medium-grey\"\r\n                        onClick={() => this.clearValue()}\r\n                    />\r\n                    <Svg svgName=\"filter\" className=\"filter-icon\" svgClass=\"icon fill-medium-grey mod-lg\" />\r\n                </div>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}