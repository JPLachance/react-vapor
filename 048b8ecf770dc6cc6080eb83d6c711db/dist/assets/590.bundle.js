(window.webpackJsonp=window.webpackJsonp||[]).push([[590],{1697:function(n,r,e){"use strict";e.r(r),r.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Loading} from '../../loading/Loading';\r\nimport {INavigationProps, Navigation} from '../Navigation';\r\nimport {NavigationPagination} from '../pagination/NavigationPagination';\r\nimport {NavigationPerPage, PER_PAGE_NUMBERS} from '../perPage/NavigationPerPage';\r\nimport {NavigationPerPageSelect} from '../perPage/NavigationPerPageSelect';\r\n\r\ndescribe(' navigation', () => {\r\n    const basicNavigationProps: INavigationProps = {\r\n        totalPages: 4,\r\n        totalEntries: 12,\r\n    };\r\n\r\n    describe('<Navigation />', () => {\r\n        it('should render without errors', () => {\r\n            expect(() => {\r\n                shallow(<Navigation {...basicNavigationProps} />);\r\n            }).not.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('<Navigation />', () => {\r\n        let navigation: ReactWrapper<INavigationProps, any>;\r\n\r\n        beforeEach(() => {\r\n            navigation = mount(<Navigation {...basicNavigationProps} />, {attachTo: document.getElementById('App')});\r\n        });\r\n\r\n        afterEach(() => {\r\n            navigation.detach();\r\n        });\r\n\r\n        it('should get the number of pages as a prop', () => {\r\n            const totalPagesProp = navigation.props().totalPages;\r\n\r\n            expect(totalPagesProp).toBeDefined();\r\n            expect(totalPagesProp).toBe(basicNavigationProps.totalPages);\r\n        });\r\n\r\n        it('should get the number of entries as a prop', () => {\r\n            const totalEntriesProp = navigation.props().totalEntries;\r\n\r\n            expect(totalEntriesProp).toBeDefined();\r\n            expect(totalEntriesProp).toBe(basicNavigationProps.totalEntries);\r\n        });\r\n\r\n        it('should render a <Loading /> component', () => {\r\n            expect(navigation.find(Loading).length).toBe(1);\r\n        });\r\n\r\n        it('should render a <NavigationPagination /> component if totalPages is higher than 1', () => {\r\n            const newNavigationProps = _.extend({}, basicNavigationProps, {totalPages: 1});\r\n\r\n            expect(\r\n                navigation\r\n                    .find(NavigationPagination)\r\n                    .closest('div')\r\n                    .hasClass('hidden')\r\n            ).toBe(false);\r\n\r\n            navigation.setProps(newNavigationProps);\r\n            expect(\r\n                navigation\r\n                    .find(NavigationPagination)\r\n                    .closest('div')\r\n                    .hasClass('hidden')\r\n            ).toBe(true);\r\n        });\r\n\r\n        it('should render a <NavigationPerPage /> component if totalEntries is higher than the first perPageNumber', () => {\r\n            const newNavigationProps = _.extend({}, basicNavigationProps, {totalEntries: PER_PAGE_NUMBERS[0]});\r\n\r\n            expect(\r\n                navigation\r\n                    .find(NavigationPerPage)\r\n                    .closest('div')\r\n                    .hasClass('hidden')\r\n            ).toBe(false);\r\n\r\n            navigation.setProps(newNavigationProps);\r\n            expect(\r\n                navigation\r\n                    .find(NavigationPerPage)\r\n                    .closest('div')\r\n                    .hasClass('hidden')\r\n            ).toBe(true);\r\n        });\r\n\r\n        it('should pass on the currentPerPage prop if it is set (used without Redux)', () => {\r\n            const expectedPerPage: number = 33;\r\n            const newNavigationProps: INavigationProps = _.extend({}, basicNavigationProps, {\r\n                currentPerPage: expectedPerPage,\r\n            });\r\n\r\n            expect(navigation.find(NavigationPerPage).props().currentPerPage).toBeUndefined();\r\n\r\n            navigation.setProps(newNavigationProps).update();\r\n            expect(navigation.find(NavigationPerPage).props().currentPerPage).toBe(expectedPerPage);\r\n        });\r\n\r\n        it('should call onPerPageClick prop with the correct values when it is set', () => {\r\n            const onPerPageClick = jasmine.createSpy('mockOnPerPageClick');\r\n            const perPageNumbers: number[] = [2, 3, 4];\r\n            const currentPerPage: number = perPageNumbers[1];\r\n            const expectedPerPage: number = perPageNumbers[perPageNumbers.length - 1];\r\n\r\n            const newNavigationProps: INavigationProps = _.extend({}, basicNavigationProps, {\r\n                currentPerPage,\r\n                perPageNumbers,\r\n                onPerPageClick,\r\n            });\r\n            navigation\r\n                .setProps(newNavigationProps)\r\n                .update()\r\n                .find(NavigationPerPageSelect)\r\n                .last()\r\n                .simulate('click');\r\n            expect(onPerPageClick).toHaveBeenCalledWith(expectedPerPage, currentPerPage, undefined); // newPerPage, currentPerPage, currentPage (currentPerPage and currentPage are undefined unless passed as props)\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=590.bundle.js.map