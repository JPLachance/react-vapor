(window.webpackJsonp=window.webpackJsonp||[]).push([[932],{2030:function(t,n,e){"use strict";e.r(n),n.default="import {ShallowWrapper} from 'enzyme';\nimport {shallowWithStore} from 'enzyme-redux';\nimport * as React from 'react';\nimport * as _ from 'underscore';\nimport {getStoreMock} from '../../../../utils/tests/TestUtils';\nimport {IInputOwnProps} from '../../../input/Input';\nimport {InputConnected} from '../../../input/InputConnected';\nimport {ValidationActions} from '../../ValidationActions';\nimport {ValidationTypes} from '../../ValidationTypes';\nimport {withDirtyInputHOC} from '../WithDirtyInputHOC';\n\ndescribe('WithDirtyInputHOC', () => {\n    const InputWithHOC = withDirtyInputHOC(InputConnected);\n\n    let store: ReturnType<typeof getStoreMock>;\n    let inputWrapper: ShallowWrapper<IInputOwnProps>;\n\n    const INPUT_PROPS: IInputOwnProps = {\n        id: '🥔',\n        title: 'ok',\n        defaultValue: '🧀',\n    };\n\n    beforeEach(() => {\n        store = getStoreMock({\n            validation: {},\n        });\n    });\n\n    afterEach(() => {\n        store.clearActions();\n    });\n\n    describe('<InputWithHOC />', () => {\n        it('should render without error', () => {\n            expect(() => shallowWithStore(<InputWithHOC {...INPUT_PROPS} />, store)).not.toThrow();\n        });\n\n        it('should mount and unmount/detach without error', () => {\n            expect(() => {\n                inputWrapper = shallowWithStore(<InputWithHOC {...INPUT_PROPS} />, store);\n                inputWrapper.unmount();\n            }).not.toThrow();\n        });\n\n        describe('after mount', () => {\n            let validateSpy: jasmine.Spy;\n\n            beforeEach(() => {\n                validateSpy = jasmine.createSpy('validate');\n                inputWrapper = shallowWithStore<typeof InputWithHOC>(\n                    <InputWithHOC {...INPUT_PROPS} validate={validateSpy} />,\n                    store\n                ).dive();\n            });\n\n            it('should dispatch a set dirty action with true when the value is different from the initial value', () => {\n                inputWrapper.prop('validate')('🍕');\n\n                expect(store.getActions()).toContain(\n                    ValidationActions.setDirty(INPUT_PROPS.id, true, ValidationTypes.wrongInitialValue)\n                );\n            });\n\n            it('should dispatch a set dirty action with false when the value is the same as the initial value', () => {\n                inputWrapper.prop('validate')(INPUT_PROPS.defaultValue);\n\n                expect(store.getActions()).toContain(\n                    ValidationActions.setDirty(INPUT_PROPS.id, false, ValidationTypes.wrongInitialValue)\n                );\n            });\n\n            it('should call the original validate function and return the same value', () => {\n                validateSpy.and.returnValue(true);\n\n                const result = inputWrapper.prop('validate')('🧀');\n\n                expect(validateSpy).toHaveBeenCalledWith('🧀');\n                expect(result).toBe(true);\n            });\n        });\n    });\n});\n"}}]);
//# sourceMappingURL=932.bundle.js.map