(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{1235:function(n,t,a){"use strict";a.r(t),t.default="import * as _ from 'underscore';\r\nimport * as s from 'underscore.string';\r\nimport {IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {ListBoxActions} from '../listBox/ListBoxActions';\r\nimport {LoadingActions} from '../loading/LoadingActions';\r\nimport {PaginationActions} from '../navigation/pagination/NavigationPaginationActions';\r\nimport {PerPageActions} from '../navigation/perPage/NavigationPerPageActions';\r\nimport {TableHOCRowActionsType} from '../table-hoc/actions/TableHOCRowActions';\r\nimport {TableHOCUtils} from '../table-hoc/utils/TableHOCUtils';\r\nimport {IActionOptions} from './Action';\r\nimport {ActionBarActions} from './ActionBarActions';\r\n\r\nexport interface IActionBarState {\r\n    id: string;\r\n    actions: IActionOptions[];\r\n    tableYPosition: number;\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport const actionBarInitialState: IActionBarState = {\r\n    id: undefined,\r\n    actions: [],\r\n    tableYPosition: undefined,\r\n};\r\nexport const actionBarsInitialState: IActionBarState[] = [];\r\n\r\nexport const actionBarReducer = (\r\n    state: IActionBarState = actionBarInitialState,\r\n    action: IReduxAction<IReduxActionsPayload>\r\n): IActionBarState => {\r\n    switch (action.type) {\r\n        case ActionBarActions.addActions:\r\n            return state.id !== action.payload.id ? state : {...state, actions: action.payload.actions};\r\n        case ActionBarActions.add:\r\n            return {\r\n                ...state,\r\n                id: action.payload.id,\r\n                isLoading: false,\r\n            };\r\n        case PerPageActions.change:\r\n        case PaginationActions.changePage:\r\n        case TableHOCRowActionsType.deselectAll:\r\n        case ListBoxActions.select:\r\n            return state.id === action.payload.id ||\r\n                TableHOCUtils.getPaginationId(state.id) === action.payload.id ||\r\n                s.contains(action.payload.id, state.id)\r\n                ? {...state, actions: []}\r\n                : state;\r\n        case TableHOCRowActionsType.remove:\r\n            return action.payload.isSelected && state.id === action.payload.tableId ? {...state, actions: []} : state;\r\n        case LoadingActions.turnOn:\r\n            return _.contains(action.payload.ids, state.id) ? {...state, isLoading: true} : state;\r\n        case LoadingActions.turnOff:\r\n            return _.contains(action.payload.ids, state.id) ? {...state, isLoading: false} : state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actionBarsReducer = (\r\n    state: IActionBarState[] = actionBarsInitialState,\r\n    action: IReduxAction<IReduxActionsPayload>\r\n): IActionBarState[] => {\r\n    switch (action.type) {\r\n        case ActionBarActions.addActions:\r\n        case PaginationActions.changePage:\r\n        case TableHOCRowActionsType.deselectAll:\r\n        case TableHOCRowActionsType.remove:\r\n        case PerPageActions.change:\r\n        case ListBoxActions.select:\r\n        case LoadingActions.turnOn:\r\n        case LoadingActions.turnOff:\r\n            return state.map((bar) => actionBarReducer(bar, action));\r\n        case ActionBarActions.add:\r\n            return [...state, actionBarReducer(undefined, action)];\r\n        case ActionBarActions.remove:\r\n            return _.reject(state, (bar) => {\r\n                return action.payload.id === bar.id;\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"}}]);
//# sourceMappingURL=121.bundle.js.map