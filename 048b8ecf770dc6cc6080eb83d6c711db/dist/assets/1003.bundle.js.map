{"version":3,"sources":["webpack:///./src/components/actions/filters/examples/ItemFilterConnectedExamples.tsx?a468","webpack:///./src/components/actions/PrimaryAction.tsx?99b6","webpack:///./src/components/actions/LinkAction.tsx?6c14","webpack:///./src/components/actions/Action.tsx?aa30","webpack:///./src/components/actions/TriggerActionConnected.tsx?81e8","webpack:///./src/components/actions/PrimaryActionConnected.tsx?6039","webpack:///./src/components/actions/ActionBar.tsx?d37a","webpack:///./src/components/inlinePrompt/InlinePrompt.tsx?d979","webpack:///./src/components/actions/filters/ItemFilter.tsx?17bf","webpack:///./src/components/actions/SecondaryActions.tsx?a067","webpack:///./src/components/actions/ActionsDropdown.tsx?b330","webpack:///./src/components/dropdown/DropdownConnected.tsx?3b40","webpack:///./src/components/dropdown/Dropdown.tsx?7709","webpack:///./src/components/actions/ActionDropdownItem.tsx?d416"],"names":["ACTION_BAR_ID","componentDidMount","dispatch","render","className","id","itemFilterLabel","onClearItemFilter","alert","itemFilterCropLength","itemTooltipProps","title","placement","action","this","props","link","withReduxState","parentId","actionClasses","enabled","hideDisabled","simple","opts","children","href","undefined","target","rel","name","icon","tooltipPlacement","tooltip","actionIcon","svgName","svgClass","inside","Right","defaultProps","onTriggerAction","confirmData","requiresConfirmation","onTriggerConfirm","confirmLabel","trigger","onConfirm","description","cancel","buttonLabels","choices","confirm","confirmType","onCloseDropdown","disabled","onClick","TriggerActionConnected","ownProps","userChoice","isOpened","TriggerAction","PrimaryActionConnected","mergeProps","Actions","primaryActions","actions","filter","primary","map","index","primaryAction","key","secondaryActions","secondaryActionsView","moreLabel","prompt","Prompt","length","options","Filter","itemFilter","label","item","onClear","clearItemFilter","crop","onRender","componentWillUnmount","onDestroy","containerClasses","defaultClasses","extraContainerClasses","isLoading","withSmallActions","prefixContentElement","prefixContent","style","width","removeDefaultContainerClasses","ActionBar","ActionBarConnected","state","actionBar","actionBars","prompts","indexOf","itemFilters","InlinePromptConnected","onCancel","choice","type","opened","itemFilterText","itemFilterLength","Math","abs","substring","SecondaryActions","lastFilteredAction","filteredActions","separator","actionItems","actionsItems","ActionsDropdown","toggleContent","dropdownItems","DropdownConnected","dropdowns","onDocumentClick","handleClick","handleDocumentClick","e","dropdown","contains","componentWillMount","document","addEventListener","removeEventListener","dropdownClasses","open","ref","ActionDropdownItem"],"mappings":"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","file":"assets/1003.bundle.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport {ExamplesStore} from '../../../../../docs/Store';\r\nimport {ActionBarConnected} from '../../ActionBar';\r\nimport {filterItems} from '../ItemFilterActions';\r\n\r\nconst ACTION_BAR_ID = 'item-filter-connected-example';\r\nconst ITEM_FILTER_LABEL = 'Item filter';\r\n\r\nexport class ItemFilterConnectedExamples extends React.Component<any, any> {\r\n    componentDidMount() {\r\n        ExamplesStore.dispatch(filterItems(ACTION_BAR_ID, 'Item'));\r\n        ExamplesStore.dispatch(filterItems(ACTION_BAR_ID + '1', 'Very looooooooooooong item'));\r\n        ExamplesStore.dispatch(filterItems(ACTION_BAR_ID + '2', 'Very looooooooooooong item'));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Action bar with an item filter and Redux state</label>\r\n                    <ActionBarConnected\r\n                        id={ACTION_BAR_ID}\r\n                        itemFilterLabel={ITEM_FILTER_LABEL}\r\n                        onClearItemFilter={() => alert('Item filter was cleared')}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Action bar with an item filter cropped on the right and with Redux state\r\n                    </label>\r\n                    <ActionBarConnected\r\n                        id={`${ACTION_BAR_ID}1`}\r\n                        itemFilterLabel={ITEM_FILTER_LABEL}\r\n                        itemFilterCropLength={10}\r\n                        onClearItemFilter={() => alert('Item filter was cleared')}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Action bar with an item filter cropped on the left and with Redux state\r\n                    </label>\r\n                    <ActionBarConnected\r\n                        id={`${ACTION_BAR_ID}2`}\r\n                        itemFilterLabel={ITEM_FILTER_LABEL}\r\n                        itemFilterCropLength={-10}\r\n                        onClearItemFilter={() => alert('Item filter was cleared')}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Action bar with an item filter cropped on the left with Redux state and tooltip options\r\n                    </label>\r\n                    <ActionBarConnected\r\n                        id={`${ACTION_BAR_ID}3`}\r\n                        itemFilterLabel={ITEM_FILTER_LABEL}\r\n                        itemTooltipProps={{title: 'tooltip', placement: 'top'}}\r\n                        itemFilterCropLength={-10}\r\n                        onClearItemFilter={() => alert('Item filter was cleared')}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {IBasicActionProps} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerAction, TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IPrimaryActionOwnProps extends React.ClassAttributes<PrimaryAction>, IBasicActionProps {\r\n    parentId?: string;\r\n}\r\n\r\nexport interface IPrimaryActionStateProps extends IReduxStatePossibleProps {}\r\n\r\nexport interface IPrimaryActionProps extends IPrimaryActionOwnProps, IPrimaryActionStateProps {}\r\n\r\nexport class PrimaryAction extends React.Component<IPrimaryActionProps, any> {\r\n    render() {\r\n        const action: JSX.Element = this.props.action.link ? (\r\n            <LinkAction action={this.props.action} />\r\n        ) : this.props.withReduxState ? (\r\n            <TriggerActionConnected action={this.props.action} parentId={this.props.parentId} />\r\n        ) : (\r\n            <TriggerAction action={this.props.action} />\r\n        );\r\n\r\n        return <div>{action}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Action, IBasicActionProps} from './Action';\r\n\r\nexport interface ILinkActionProps extends React.ClassAttributes<LinkAction>, IBasicActionProps {}\r\n\r\nexport class LinkAction extends React.Component<ILinkActionProps> {\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && !this.props.action.hideDisabled,\r\n            'inline-flex flex-center': !this.props.simple,\r\n        });\r\n        const opts: React.AllHTMLAttributes<HTMLAnchorElement> = {\r\n            children: <Action action={this.props.action} simple={this.props.simple} />,\r\n        };\r\n        const href = this.props.action.enabled ? this.props.action.link : undefined;\r\n        if (this.props.action.target) {\r\n            opts.target = this.props.action.enabled ? this.props.action.target : undefined;\r\n            opts.rel = 'noopener noreferrer';\r\n        }\r\n\r\n        return <a className={actionClasses} href={href} title={this.props.action.name} {...opts} />;\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IConfirmButtonLabel {\r\n    cancel: string;\r\n    confirm: string;\r\n}\r\n\r\nexport interface IConfirmData {\r\n    confirmType: string;\r\n    confirmLabel?: string;\r\n    buttonLabels?: IConfirmButtonLabel;\r\n}\r\n\r\nexport interface IBaseActionOptions {\r\n    enabled: boolean;\r\n    name?: string;\r\n    link?: string;\r\n    target?: string;\r\n    primary?: boolean;\r\n    tooltip?: string;\r\n    tooltipPlacement?: string;\r\n    hideDisabled?: boolean;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport interface IActionOptions extends IBaseActionOptions {\r\n    icon?: string;\r\n    iconClass?: string;\r\n    id?: string;\r\n    trigger?: () => void;\r\n    unrepeatable?: boolean;\r\n    callOnDoubleClick?: boolean;\r\n    requiresConfirmation?: IConfirmData;\r\n    separator?: boolean;\r\n    grouped?: boolean;\r\n    subActions?: IActionOptions[];\r\n    hidden?: boolean;\r\n}\r\n\r\nexport interface IBasicActionProps {\r\n    action: IActionOptions;\r\n    simple?: boolean;\r\n}\r\n\r\nexport interface IActionProps extends React.ClassAttributes<Action>, IBasicActionProps {}\r\n\r\nexport class Action extends React.Component<IActionProps, any> {\r\n    static defaultProps: Partial<IActionOptions> = {\r\n        hideDisabled: true,\r\n    };\r\n\r\n    render() {\r\n        const {icon, id, name, tooltipPlacement, tooltip} = this.props.action;\r\n        const actionIcon: JSX.Element = icon ? (\r\n            <Svg svgName={icon} className=\"action-icon\" svgClass=\"icon fill-medium-blue\" />\r\n        ) : (\r\n            <Svg svgName=\"more\" className=\"action-icon action-icon-more\" svgClass=\"icon icon-medium fill-medium-blue\" />\r\n        );\r\n        const inside: string | JSX.Element = this.props.simple ? (\r\n            name\r\n        ) : (\r\n            <span className=\"inline-flex flex-center\">\r\n                {actionIcon}\r\n                <span className=\"action-label\" data-trigger={id || name}>\r\n                    {name}\r\n                </span>\r\n            </span>\r\n        );\r\n        const placement: string = tooltipPlacement || TooltipPlacement.Right;\r\n        const wholeAction: JSX.Element = tooltip ? (\r\n            <Tooltip title={tooltip} placement={placement}>\r\n                {inside}\r\n            </Tooltip>\r\n        ) : (\r\n            <span>{inside}</span>\r\n        );\r\n\r\n        return wholeAction;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {closeDropdown} from '../dropdown/DropdownActions';\r\nimport {IUserChoice} from '../inlinePrompt/InlinePrompt';\r\nimport {addPrompt, removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {Action, IBasicActionProps, IConfirmData} from './Action';\r\n\r\nexport interface ITriggerActionOwnProps extends React.ClassAttributes<TriggerAction>, IBasicActionProps {\r\n    confirmLabel?: string;\r\n    parentId?: string;\r\n}\r\n\r\nexport interface ITriggerActionProps extends ITriggerActionOwnProps, Partial<ReturnType<typeof mapDispatchToProps>> {}\r\n\r\nexport const CONFIRM_LABEL: string = 'Are you sure?';\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: ITriggerActionOwnProps\r\n) => ({\r\n    onTriggerConfirm: (onClick: () => void, userChoice: IUserChoice, className: string) => {\r\n        dispatch(addPrompt(ownProps.parentId, {onClick, userChoice, isOpened: false, className}));\r\n    },\r\n    onConfirm: () => dispatch(removePrompt(ownProps.parentId)),\r\n    onCloseDropdown: () => dispatch(closeDropdown(ownProps.parentId)),\r\n});\r\n\r\nexport class TriggerAction extends React.Component<ITriggerActionProps, any> {\r\n    private onTriggerAction() {\r\n        const confirmData: IConfirmData = this.props.action.requiresConfirmation;\r\n        if (confirmData && this.props.onTriggerConfirm) {\r\n            const confirmLabel: string =\r\n                this.props.confirmLabel || this.props.action.requiresConfirmation.confirmLabel || CONFIRM_LABEL;\r\n            const icon: string = this.props.action.icon;\r\n            this.props.onTriggerConfirm(\r\n                () => {\r\n                    if (this.props.action.trigger) {\r\n                        this.props.action.trigger();\r\n                    }\r\n                    if (this.props.onConfirm) {\r\n                        this.props.onConfirm();\r\n                    }\r\n                },\r\n                {\r\n                    icon: icon,\r\n                    description: confirmLabel,\r\n                    cancel: confirmData.buttonLabels.cancel,\r\n                    choices: {\r\n                        confirm: confirmData.buttonLabels.confirm,\r\n                    },\r\n                },\r\n                confirmData.confirmType\r\n            );\r\n        } else {\r\n            if (this.props.action.trigger) {\r\n                this.props.action.trigger();\r\n                this.props.onCloseDropdown && this.props.onCloseDropdown();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && (this.props.simple || !this.props.action.hideDisabled),\r\n            disabled: !this.props.action.enabled && !this.props.simple,\r\n        });\r\n\r\n        return (\r\n            <span\r\n                onClick={() => this.props.action.enabled && this.onTriggerAction()}\r\n                className={actionClasses}\r\n                title={this.props.action.name}\r\n            >\r\n                <Action action={this.props.action} simple={this.props.simple} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport const TriggerActionConnected = connect(undefined, mapDispatchToProps)(TriggerAction);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IPrimaryActionProps, IPrimaryActionStateProps, PrimaryAction} from './PrimaryAction';\r\n\r\nconst mapStateToProps = (): IPrimaryActionStateProps => ({\r\n    withReduxState: true,\r\n});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport const PrimaryActionConnected: React.ComponentClass<IPrimaryActionProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(PrimaryAction);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Content, IContentProps} from '../content/Content';\r\nimport {InlinePromptConnected} from '../inlinePrompt/InlinePrompt';\r\nimport {removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {IPromptState} from '../inlinePrompt/InlinePromptReducers';\r\nimport {ITooltipProps} from '../tooltip/Tooltip';\r\nimport {IActionOptions} from './Action';\r\nimport {addActionBar, removeActionBar} from './ActionBarActions';\r\nimport {IActionBarState} from './ActionBarReducers';\r\nimport {ItemFilter} from './filters/ItemFilter';\r\nimport {addItemFilter, filterItems, removeItemFilter} from './filters/ItemFilterActions';\r\nimport {IItemFilterState} from './filters/ItemFilterReducers';\r\nimport {PrimaryAction} from './PrimaryAction';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\nimport {SecondaryActions} from './SecondaryActions';\r\n\r\nexport interface IActionBarProps {\r\n    id?: string;\r\n    itemFilterLabel?: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClearItemFilter?: () => void;\r\n    extraContainerClasses?: string[];\r\n    removeDefaultContainerClasses?: boolean;\r\n    withSmallActions?: boolean;\r\n    prefixContent?: IContentProps;\r\n    width?: number;\r\n    moreLabel?: string;\r\n    itemFilterCropLength?: number;\r\n}\r\n\r\nexport class ActionBar extends React.PureComponent<\r\n    IActionBarProps & Partial<ReturnType<typeof mapStateToProps>> & Partial<ReturnType<typeof mapDispatchToProps>>\r\n> {\r\n    static defaultProps: Partial<IActionBarProps> = {\r\n        extraContainerClasses: [],\r\n        withSmallActions: false,\r\n    };\r\n\r\n    static defaultClasses = [\r\n        'coveo-table-actions-container',\r\n        'mod-cancel-header-padding',\r\n        'mod-border-bottom',\r\n        'mod-align-header',\r\n    ];\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        const containerClasses = classNames(this.defaultClasses, this.props.extraContainerClasses, {\r\n            'mod-deactivate-pointer': !!this.props.isLoading,\r\n            'small-actions-container': this.props.withSmallActions,\r\n        });\r\n\r\n        const prefixContentElement = this.props.prefixContent ? <Content {...this.props.prefixContent} /> : null;\r\n\r\n        return (\r\n            <div className={containerClasses} style={this.props.width ? {width: this.props.width} : null}>\r\n                {prefixContentElement}\r\n                <this.Filter />\r\n                <this.Actions />\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private get defaultClasses(): string {\r\n        return classNames(this.props.removeDefaultContainerClasses ? '' : ActionBar.defaultClasses);\r\n    }\r\n\r\n    private Actions: React.FunctionComponent = () => {\r\n        const primaryActions =\r\n            this.props.actions\r\n                ?.filter(({primary}) => !!primary)\r\n                .map((action: IActionOptions, index: number) => {\r\n                    const primaryAction = this.props.withReduxState ? (\r\n                        <PrimaryActionConnected action={action} parentId={this.props.id} />\r\n                    ) : (\r\n                        <PrimaryAction action={action} />\r\n                    );\r\n                    return (\r\n                        <div className=\"action primary-action\" key={`primary-${index}`}>\r\n                            {primaryAction}\r\n                        </div>\r\n                    );\r\n                }) ?? [];\r\n\r\n        const secondaryActions: IActionOptions[] = this.props.actions?.filter(({primary}) => !primary) ?? [];\r\n\r\n        let secondaryActionsView: JSX.Element = null;\r\n        if (!_.isEmpty(secondaryActions)) {\r\n            secondaryActionsView = (\r\n                <SecondaryActions id={this.props.id} moreLabel={this.props.moreLabel} actions={secondaryActions} />\r\n            );\r\n        }\r\n\r\n        const actions = this.props.prompt ? (\r\n            <this.Prompt />\r\n        ) : (\r\n            <>\r\n                {primaryActions}\r\n                {secondaryActionsView}\r\n            </>\r\n        );\r\n\r\n        return primaryActions.length || secondaryActionsView || this.props.prompt ? (\r\n            <div className=\"coveo-table-actions\">{actions}</div>\r\n        ) : null;\r\n    };\r\n\r\n    private Prompt: React.FunctionComponent = () =>\r\n        this.props.prompt?.options ? (\r\n            <div className=\"prompt\">\r\n                <InlinePromptConnected {...this.props.prompt} />\r\n            </div>\r\n        ) : null;\r\n\r\n    private Filter: React.FunctionComponent = () =>\r\n        this.props.itemFilter ? (\r\n            <ItemFilter\r\n                label={this.props.itemFilterLabel}\r\n                item={this.props.itemFilter}\r\n                itemTooltipProps={this.props.itemTooltipProps}\r\n                onClear={this.props.clearItemFilter}\r\n                crop={this.props.itemFilterCropLength}\r\n            />\r\n        ) : null;\r\n}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IActionBarProps) => {\r\n    const actionBar: IActionBarState = _.findWhere(state.actionBars, {id: ownProps.id});\r\n    const prompt: IPromptState = _.find(state.prompts, ({id}) => id.indexOf(ownProps.id) >= 0);\r\n    const itemFilter: IItemFilterState = _.findWhere(state.itemFilters, {id: ownProps.id});\r\n\r\n    return {\r\n        withReduxState: true,\r\n        actions: actionBar?.actions.filter(({enabled, hideDisabled}) => enabled || hideDisabled === false) ?? [],\r\n        isLoading: actionBar?.isLoading ?? false,\r\n        prompt,\r\n        itemFilter: itemFilter?.item ?? '',\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IActionBarProps) => ({\r\n    onRender: () => {\r\n        dispatch(addActionBar(ownProps.id));\r\n        if (ownProps.itemFilterLabel) {\r\n            dispatch(addItemFilter(ownProps.id));\r\n        }\r\n    },\r\n    onDestroy: () => {\r\n        dispatch(removeActionBar(ownProps.id));\r\n        dispatch(removeItemFilter(ownProps.id));\r\n        dispatch(removePrompt(ownProps.id));\r\n    },\r\n    clearItemFilter: () => {\r\n        ownProps.onClearItemFilter?.();\r\n        dispatch(filterItems(ownProps.id, ''));\r\n    },\r\n});\r\n\r\nexport const ActionBarConnected = connect(mapStateToProps, mapDispatchToProps)(ActionBar);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {removePrompt} from './InlinePromptActions';\r\n\r\nexport interface IUserChoice {\r\n    description?: string;\r\n    cancel?: string;\r\n    choices?: Record<string, string>;\r\n    icon?: string;\r\n}\r\n\r\nexport interface IInlinePromptOptions {\r\n    onClick: () => void;\r\n    userChoice: IUserChoice;\r\n    isOpened?: boolean;\r\n    className?: string;\r\n}\r\n\r\nexport interface IInlinePromptProps {\r\n    id?: string;\r\n    options: IInlinePromptOptions;\r\n}\r\n\r\nexport const InlinePrompt: React.FunctionComponent<IInlinePromptProps &\r\n    Partial<ReturnType<typeof mapDispatchToProps>>> = ({options, onCancel}) => {\r\n    const icon: JSX.Element = options.userChoice.icon ? (\r\n        <Svg svgName={options.userChoice.icon} className=\"prompt-icon mr1\" svgClass=\"icon mod-2x fill-medium-blue\" />\r\n    ) : null;\r\n\r\n    const choices: JSX.Element[] = _.map(options.userChoice.choices, (choice: string) => (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn action mod-danger prompt-action enabled\"\r\n            onClick={options.onClick}\r\n            key={choice}\r\n        >\r\n            {choice}\r\n        </button>\r\n    ));\r\n\r\n    const description: JSX.Element = options.userChoice.description ? (\r\n        <span className=\"description\">{options.userChoice.description}</span>\r\n    ) : null;\r\n\r\n    const cancel: JSX.Element = options.userChoice.cancel ? (\r\n        <button type=\"button\" className=\"btn cancel prompt-action enabled\" onClick={onCancel}>\r\n            {options.userChoice.cancel}\r\n        </button>\r\n    ) : null;\r\n\r\n    const className = classNames(`prompt-${options.className ?? 'info'}`, {opened: options.isOpened});\r\n\r\n    return (\r\n        <span className={className}>\r\n            <span className=\"label-confirmation\">\r\n                {icon}\r\n                {description}\r\n            </span>\r\n            {choices}\r\n            {cancel}\r\n        </span>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IInlinePromptProps) => ({\r\n    onCancel: () => dispatch(removePrompt(ownProps.id)),\r\n});\r\n\r\nexport const InlinePromptConnected = connect(null, mapDispatchToProps)(InlinePrompt);\r\n","import * as React from 'react';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ITooltipProps, Tooltip} from '../../tooltip/Tooltip';\r\n\r\nexport interface IItemFilterProps extends React.ClassAttributes<ItemFilter> {\r\n    label: string;\r\n    item: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClear: () => void;\r\n    crop?: number;\r\n}\r\n\r\nexport const ELLIPSIS: string = '...';\r\n\r\nexport class ItemFilter extends React.Component<IItemFilterProps, any> {\r\n    render() {\r\n        let itemFilterText: string = this.props.item;\r\n        if (this.props.crop) {\r\n            const itemFilterLength: number = itemFilterText.length;\r\n\r\n            if (itemFilterLength > Math.abs(this.props.crop)) {\r\n                itemFilterText =\r\n                    this.props.crop > 0\r\n                        ? itemFilterText.substring(0, this.props.crop) + ELLIPSIS\r\n                        : ELLIPSIS + itemFilterText.substring(itemFilterLength + this.props.crop, itemFilterLength);\r\n            }\r\n        }\r\n\r\n        const itemFilter: JSX.Element = this.props.itemTooltipProps ? (\r\n            <Tooltip {...this.props.itemTooltipProps}>\r\n                <span className=\"item-filter-item\">{itemFilterText}</span>\r\n            </Tooltip>\r\n        ) : (\r\n            <span className=\"item-filter-item\">{itemFilterText}</span>\r\n        );\r\n\r\n        return (\r\n            <div className=\"coveo-table-actions item-filter\">\r\n                <span className=\"item-filter-label\">{this.props.label}: </span>\r\n                {itemFilter}\r\n                <button className=\"item-filter-clear\" onClick={() => this.props.onClear()}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-dark-blue\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {isEmpty} from 'underscore';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {ActionsDropdown} from './ActionsDropdown';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\n\r\nexport interface ISecondaryActionsProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport const SecondaryActions: React.FunctionComponent<ISecondaryActionsProps> = ({actions, id, moreLabel}) => {\r\n    let lastFilteredAction: IActionOptions = null;\r\n    const filteredActions = actions\r\n        // filter out disabled actions\r\n        .filter((action: IActionOptions) => action.separator || action.enabled || action.hideDisabled === false)\r\n        // Filter out all separator that are preceded by another separator\r\n        .filter((action: IActionOptions) => {\r\n            if (!action.separator || (action.separator && lastFilteredAction && !lastFilteredAction.separator)) {\r\n                lastFilteredAction = action;\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        // Filter out the last action if it's a separator\r\n        .filter((action: IActionOptions, index: number, actionItems: IActionOptions[]) => {\r\n            return index < actionItems.length - 1 || !action.separator;\r\n        });\r\n\r\n    if (isEmpty(filteredActions)) {\r\n        return null;\r\n    } else {\r\n        const actionsItems: JSX.Element =\r\n            filteredActions?.length === 1 ? (\r\n                <PrimaryActionConnected action={filteredActions[0]} parentId={id} />\r\n            ) : (\r\n                <ActionsDropdown moreLabel={moreLabel} actions={filteredActions} id={`${id}_actionsDropdown`} />\r\n            );\r\n        return <div className=\"dropdown action primary-action\">{actionsItems}</div>;\r\n    }\r\n};\r\n\r\n/**\r\n * @deprecated use SecondaryActions directly\r\n */\r\nexport const SecondaryActionsConnected = SecondaryActions;\r\n","import * as React from 'react';\r\n\r\nimport {DropdownConnected} from '../dropdown/DropdownConnected';\r\nimport {Svg} from '../svg/Svg';\r\nimport {IActionOptions} from './Action';\r\nimport {ActionDropdownItem} from './ActionDropdownItem';\r\n\r\nexport interface IActionsDropdownProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport const MORE_LABEL: string = 'More';\r\n\r\nexport const ActionsDropdown: React.FunctionComponent<IActionsDropdownProps> = ({actions, moreLabel, id}) => {\r\n    const actionItems = actions?.map((action: IActionOptions, index: number) => (\r\n        <ActionDropdownItem key={`action-${action.id ?? index}`} action={action} parentId={id} />\r\n    ));\r\n\r\n    const toggleContent: JSX.Element[] = [\r\n        <Svg\r\n            key=\"action-dropdown-toggle-icon\"\r\n            svgName=\"more\"\r\n            className=\"action-icon\"\r\n            svgClass=\"icon icon-medium fill-medium-blue\"\r\n        />,\r\n        <span key=\"action-dropdown-toggle-label\" className=\"action-label\" data-trigger=\"more\">\r\n            {moreLabel || MORE_LABEL}\r\n        </span>,\r\n    ];\r\n\r\n    return <DropdownConnected toggleContent={toggleContent} dropdownItems={actionItems} id={id} />;\r\n};\r\n\r\n/**\r\n * @deprecated use ActionsDropdown directly instead\r\n */\r\nexport const ActionsDropdownConnected = ActionsDropdown;\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {Dropdown, IDropdownDispatchProps, IDropdownOwnProps, IDropdownProps, IDropdownStateProps} from './Dropdown';\r\nimport {addDropdown, closeDropdown, removeDropdown, toggleDropdown} from './DropdownActions';\r\nimport {IDropdownState} from './DropdownReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IDropdownOwnProps): IDropdownStateProps => {\r\n    const item: IDropdownState = _.findWhere(state.dropdowns, {id: ownProps.id});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IDropdownOwnProps\r\n): IDropdownDispatchProps => ({\r\n    onRender: () => dispatch(addDropdown(ownProps.id)),\r\n    onDestroy: () => dispatch(removeDropdown(ownProps.id)),\r\n    onClick: () => dispatch(toggleDropdown(ownProps.id)),\r\n    onDocumentClick: () => dispatch(closeDropdown(ownProps.id)),\r\n});\r\n\r\nexport const DropdownConnected: React.ComponentClass<IDropdownProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Dropdown);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nexport interface IDropdownOwnProps extends React.ClassAttributes<Dropdown> {\r\n    id?: string;\r\n    toggleContent: JSX.Element[];\r\n    dropdownItems: JSX.Element[];\r\n    className?: string;\r\n}\r\n\r\nexport interface IDropdownStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IDropdownDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onClick?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IDropdownProps extends IDropdownOwnProps, IDropdownStateProps, IDropdownDispatchProps {}\r\n\r\nexport class Dropdown extends React.Component<IDropdownProps, any> {\r\n    private dropdown: HTMLDivElement;\r\n\r\n    private handleClick = () => {\r\n        if (this.props.onClick) {\r\n            this.props.onClick();\r\n        }\r\n    };\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.dropdown);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dropdownClasses = classNames('dropdown', {open: this.props.isOpened}, this.props.className);\r\n\r\n        return (\r\n            <div className={dropdownClasses} ref={(dropdown: HTMLDivElement) => (this.dropdown = dropdown)}>\r\n                <span className=\"dropdown-toggle inline-flex flex-center\" onClick={() => this.handleClick()}>\r\n                    {this.props.toggleContent}\r\n                </span>\r\n                <ul className=\"dropdown-menu normal-height\">{this.props.dropdownItems}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IActionDropdownItemProps {\r\n    action: IActionOptions;\r\n    parentId?: string;\r\n}\r\n\r\nexport const ActionDropdownItem: React.FunctionComponent<IActionDropdownItemProps> = ({parentId, action}) => {\r\n    if (action.separator) {\r\n        return <li className=\"divider\" />;\r\n    }\r\n\r\n    if (action.link) {\r\n        return (\r\n            <li>\r\n                <LinkAction action={action} simple={true} />\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <TriggerActionConnected action={action} simple={true} parentId={parentId} />\r\n        </li>\r\n    );\r\n};\r\n"],"sourceRoot":""}