(window.webpackJsonp=window.webpackJsonp||[]).push([[925],{2021:function(t,a,n){"use strict";n.r(a),a.default="import {IReactVaporState} from '../../ReactVapor';\nimport {ValidationState} from './ValidationState';\n\nconst getErrors = (id: string) => (state: IReactVaporState) =>\n    state.validation[id]?.error.filter((error) => !!error.value) || [];\nconst getWarnings = (id: string) => (state: IReactVaporState) =>\n    state.validation[id]?.warning?.filter((warning) => !!warning.value) || [];\nconst getIsDirty = (id: string) => (state: IReactVaporState) => state.validation[id]?.isDirty || [];\n\nconst getAnyError = (ids: string[]) => (state: IReactVaporState) =>\n    ids\n        .reduce((all, id) => all.concat(getErrors(id)(state)), [] as ValidationState['error'])\n        .filter((error) => !!error.value);\nconst getAnyWarning = (ids: string[]) => (state: IReactVaporState) =>\n    ids\n        .reduce((all, id) => all.concat(getWarnings(id)(state)), [] as ValidationState['warning'])\n        .filter((warning) => !!warning.value);\nconst getAnyDirty = (ids: string[]) => (state: IReactVaporState) =>\n    ids\n        .reduce((all, id) => all.concat(getIsDirty(id)(state)), [] as ValidationState['isDirty'])\n        .filter((dirty) => dirty.value);\n\nexport const ValidationSelectors = {\n    getErrors,\n    getWarnings,\n    getIsDirty,\n    getAnyError,\n    getAnyWarning,\n    getAnyDirty,\n};\n"}}]);
//# sourceMappingURL=925.bundle.js.map