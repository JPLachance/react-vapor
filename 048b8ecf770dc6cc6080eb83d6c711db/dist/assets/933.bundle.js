(window.webpackJsonp=window.webpackJsonp||[]).push([[933],{2029:function(n,e,t){"use strict";t.r(e),e.default="import {ValidationActionsTypes} from '../ValidationActions';\nimport {validationReducer} from '../ValidationReducer';\n\ndescribe('ValidationReducer', () => {\n    const componentId = '🐟';\n    const nonEmptySubId = '🕳';\n    const aMessage = 'ohno';\n\n    it('should ignore a random action type', () => {\n        const newState = validationReducer(\n            {},\n            {type: 'sorandom', payload: {id: 'jenkins', subId: 'wow', value: 'bloup'}}\n        );\n\n        expect(newState).toEqual({});\n    });\n\n    describe('updateError', () => {\n        it('should create the validation state of a new component', () => {\n            const newState = validationReducer(\n                {},\n                {\n                    type: ValidationActionsTypes.updateError,\n                    payload: {\n                        id: componentId,\n                        subId: nonEmptySubId,\n                        value: aMessage,\n                    },\n                }\n            );\n\n            expect(newState[componentId].error).toContain({\n                subId: nonEmptySubId,\n                value: aMessage,\n            });\n        });\n\n        it('should append a new subId to an existing component', () => {\n            const newState = validationReducer(\n                {\n                    [componentId]: {\n                        error: [\n                            {\n                                subId: 'wow',\n                                value: 'ok',\n                            },\n                        ],\n                        warning: [],\n                        isDirty: [],\n                    },\n                },\n                {\n                    type: ValidationActionsTypes.updateError,\n                    payload: {\n                        id: componentId,\n                        subId: nonEmptySubId,\n                        value: aMessage,\n                    },\n                }\n            );\n\n            expect(newState[componentId].error.length).toBe(2);\n        });\n\n        it('should update an existing subId', () => {\n            const newState = validationReducer(\n                {\n                    [componentId]: {\n                        error: [\n                            {\n                                subId: nonEmptySubId,\n                                value: 'oldvalue',\n                            },\n                        ],\n                        warning: [],\n                        isDirty: [],\n                    },\n                },\n                {\n                    type: ValidationActionsTypes.updateError,\n                    payload: {\n                        id: componentId,\n                        subId: nonEmptySubId,\n                        value: aMessage,\n                    },\n                }\n            );\n\n            expect(newState[componentId].error[0]).toEqual({\n                subId: nonEmptySubId,\n                value: aMessage,\n            });\n        });\n    });\n\n    describe('updateWarning', () => {\n        it('should create the validation state of a new component', () => {\n            const newState = validationReducer(\n                {},\n                {\n                    type: ValidationActionsTypes.updateWarning,\n                    payload: {\n                        id: componentId,\n                        subId: nonEmptySubId,\n                        value: aMessage,\n                    },\n                }\n            );\n\n            expect(newState[componentId].warning).toContain({\n                subId: nonEmptySubId,\n                value: aMessage,\n            });\n        });\n\n        it('should append a new subId to an existing component', () => {\n            const newState = validationReducer(\n                {\n                    [componentId]: {\n                        error: [],\n                        warning: [\n                            {\n                                subId: 'wow',\n                                value: 'ok',\n                            },\n                        ],\n                        isDirty: [],\n                    },\n                },\n                {\n                    type: ValidationActionsTypes.updateWarning,\n                    payload: {\n                        id: componentId,\n                        subId: nonEmptySubId,\n                        value: aMessage,\n                    },\n                }\n            );\n\n            expect(newState[componentId].warning.length).toBe(2);\n        });\n\n        it('should update an existing subId', () => {\n            const newState = validationReducer(\n                {\n                    [componentId]: {\n                        error: [,],\n                        warning: [\n                            {\n                                subId: nonEmptySubId,\n                                value: 'oldvalue',\n                            },\n                        ],\n                        isDirty: [],\n                    },\n                },\n                {\n                    type: ValidationActionsTypes.updateWarning,\n                    payload: {\n                        id: componentId,\n                        subId: nonEmptySubId,\n                        value: aMessage,\n                    },\n                }\n            );\n\n            expect(newState[componentId].warning[0]).toEqual({\n                subId: nonEmptySubId,\n                value: aMessage,\n            });\n        });\n    });\n\n    describe('updateWarning', () => {\n        it('should create the validation state of a new component', () => {\n            const newState = validationReducer(\n                {},\n                {\n                    type: ValidationActionsTypes.updateDirty,\n                    payload: {\n                        id: componentId,\n                        subId: nonEmptySubId,\n                        value: true,\n                    },\n                }\n            );\n\n            expect(newState[componentId].isDirty).toContain({\n                subId: nonEmptySubId,\n                value: true,\n            });\n        });\n\n        it('should append a new subId to an existing component', () => {\n            const newState = validationReducer(\n                {\n                    [componentId]: {\n                        error: [],\n                        warning: [],\n                        isDirty: [\n                            {\n                                subId: 'wow',\n                                value: true,\n                            },\n                        ],\n                    },\n                },\n                {\n                    type: ValidationActionsTypes.updateDirty,\n                    payload: {\n                        id: componentId,\n                        subId: nonEmptySubId,\n                        value: false,\n                    },\n                }\n            );\n\n            expect(newState[componentId].isDirty.length).toBe(2);\n        });\n\n        it('should update an existing subId', () => {\n            const newState = validationReducer(\n                {\n                    [componentId]: {\n                        error: [,],\n                        warning: [],\n                        isDirty: [\n                            {\n                                subId: nonEmptySubId,\n                                value: false,\n                            },\n                        ],\n                    },\n                },\n                {\n                    type: ValidationActionsTypes.updateDirty,\n                    payload: {\n                        id: componentId,\n                        subId: nonEmptySubId,\n                        value: true,\n                    },\n                }\n            );\n\n            expect(newState[componentId].isDirty[0]).toEqual({\n                subId: nonEmptySubId,\n                value: true,\n            });\n        });\n    });\n});\n"}}]);
//# sourceMappingURL=933.bundle.js.map