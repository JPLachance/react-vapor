(window.webpackJsonp=window.webpackJsonp||[]).push([[922],{2018:function(n,t,a){"use strict";a.r(t),t.default="import * as _ from 'underscore';\nimport {ValidationActions, ValidationActionsTypes} from './ValidationActions';\nimport {ValidationsState, ValidationState} from './ValidationState';\n\ntype ValidationActions =\n    | ReturnType<typeof ValidationActions.setError>\n    | ReturnType<typeof ValidationActions.setWarning>\n    | ReturnType<typeof ValidationActions.setDirty>;\n\nexport const validationReducer = (state: ValidationsState = {}, action: ValidationActions): ValidationsState => {\n    switch (action.type) {\n        case ValidationActionsTypes.updateError:\n        case ValidationActionsTypes.updateWarning:\n        case ValidationActionsTypes.updateDirty:\n            return {\n                ...state,\n                [action.payload.id]: oneValidationReducer(state[action.payload.id], action),\n            };\n        default:\n            return state;\n    }\n};\n\nconst oneValidationReducer = (\n    state: ValidationState = {error: [], isDirty: [], warning: []},\n    action: ValidationActions\n): ValidationState => {\n    switch (action.type) {\n        case ValidationActionsTypes.updateError:\n            return {\n                ...state,\n                error: [\n                    ...state.error.filter((error) => error.subId !== action.payload.subId),\n                    {subId: action.payload.subId, value: action.payload.value as string},\n                ],\n            };\n        case ValidationActionsTypes.updateWarning:\n            return {\n                ...state,\n                warning: [\n                    ...state.warning.filter((warning) => warning.subId !== action.payload.subId),\n                    {subId: action.payload.subId, value: action.payload.value as string},\n                ],\n            };\n        case ValidationActionsTypes.updateDirty:\n            return {\n                ...state,\n                isDirty: [\n                    ...state.isDirty.filter((dirty) => dirty.subId !== action.payload.subId),\n                    {subId: action.payload.subId, value: action.payload.value as boolean},\n                ],\n            };\n        default:\n            return state;\n    }\n};\n"}}]);
//# sourceMappingURL=922.bundle.js.map