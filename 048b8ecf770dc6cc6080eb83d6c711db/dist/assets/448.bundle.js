(window.webpackJsonp=window.webpackJsonp||[]).push([[448],{1554:function(n,r,t){"use strict";t.r(r),r.default="import {shallow, ShallowWrapper} from 'enzyme';\r\nimport * as React from 'react';\r\n\r\nimport {Tooltip} from '../../tooltip/Tooltip';\r\nimport {IInputProps, Input} from '../Input';\r\nimport {Label} from '../Label';\r\n\r\ndescribe('<Input />', () => {\r\n    it('should mount without errors', () => {\r\n        expect(() => {\r\n            shallow(<Input />);\r\n        }).not.toThrow();\r\n    });\r\n\r\n    it('should unMount without errors', () => {\r\n        const wrapper = shallow(<Input />);\r\n        expect(() => {\r\n            wrapper.unmount();\r\n        }).not.toThrow();\r\n    });\r\n\r\n    describe('once mounted', () => {\r\n        let input: ShallowWrapper<IInputProps>;\r\n\r\n        const shallowInput = (props: IInputProps = {}) => {\r\n            input = shallow(<Input {...props} />);\r\n        };\r\n\r\n        it('should set inner input classes when specified', () => {\r\n            const innerInputClasses = ['valid'];\r\n            shallowInput({\r\n                innerInputClasses,\r\n            });\r\n\r\n            expect(\r\n                input\r\n                    .find('input')\r\n                    .first()\r\n                    .find(`.${innerInputClasses[0]}`).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should set inner input id when specified', () => {\r\n            const id = 'plume';\r\n            shallowInput({\r\n                id,\r\n            });\r\n            expect(\r\n                input\r\n                    .find('input')\r\n                    .first()\r\n                    .props().id\r\n            ).toBe(id);\r\n        });\r\n\r\n        it('should set inner input name when specified', () => {\r\n            const name = 'pain';\r\n            shallowInput({\r\n                name,\r\n            });\r\n            expect(\r\n                input\r\n                    .find('input')\r\n                    .first()\r\n                    .props().name\r\n            ).toBe(name);\r\n        });\r\n\r\n        it('should set checked prop when specified', () => {\r\n            const name = 'pita';\r\n            shallowInput({\r\n                name,\r\n            });\r\n            expect(\r\n                input\r\n                    .find('input')\r\n                    .first()\r\n                    .props().name\r\n            ).toBe(name);\r\n        });\r\n\r\n        it('should set disabled prop when specified', () => {\r\n            shallowInput({\r\n                disabled: true,\r\n            });\r\n            expect(\r\n                input\r\n                    .find('input')\r\n                    .first()\r\n                    .props().disabled\r\n            ).toBe(true);\r\n        });\r\n\r\n        it('should set readonly prop when specified', () => {\r\n            shallowInput({\r\n                readOnly: true,\r\n            });\r\n            expect(\r\n                input\r\n                    .find('input')\r\n                    .first()\r\n                    .props().readOnly\r\n            ).toBe(true);\r\n        });\r\n\r\n        it('should set inner input type when specified', () => {\r\n            const type = 'Calinours';\r\n            shallowInput({\r\n                type,\r\n            });\r\n            expect(\r\n                input\r\n                    .find('input')\r\n                    .first()\r\n                    .props().type\r\n            ).toBe(type);\r\n        });\r\n\r\n        it('should call prop onBlur on inner input blur', () => {\r\n            const spyOnBlur = jasmine.createSpy('onBlur');\r\n\r\n            shallowInput({\r\n                onBlur: spyOnBlur,\r\n                defaultValue: 'test',\r\n            });\r\n\r\n            input\r\n                .find('input')\r\n                .first()\r\n                .props()\r\n                .onBlur({} as any);\r\n\r\n            expect(spyOnBlur).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should call prop onChange on inner input change', () => {\r\n            const spyOnChange = jasmine.createSpy('onChange');\r\n\r\n            shallowInput({\r\n                onChange: spyOnChange,\r\n            });\r\n\r\n            input\r\n                .find('input')\r\n                .first()\r\n                .simulate('change');\r\n\r\n            expect(spyOnChange).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should call prop onClick on inner container click', () => {\r\n            const spyOnClick = jasmine.createSpy('onClick');\r\n\r\n            shallowInput({\r\n                classes: 'banane',\r\n                disabled: true,\r\n                disabledTooltip: 'biscuit aux fromages',\r\n                onClick: spyOnClick,\r\n            });\r\n            input\r\n                .find('.banane')\r\n                .first()\r\n                .simulate('click');\r\n\r\n            expect(spyOnClick).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should call prop onKeyUp on key up', () => {\r\n            const spyOnKeyUp = jasmine.createSpy('onKeyUp');\r\n\r\n            shallowInput({\r\n                onKeyUp: spyOnKeyUp,\r\n            });\r\n\r\n            input\r\n                .find('input')\r\n                .first()\r\n                .simulate('keyUp');\r\n\r\n            expect(spyOnKeyUp).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should render the label even if the labelTitle is undefined when validate prop exists', () => {\r\n            shallowInput({validate: () => false});\r\n            expect(input.find(Label).length).toBe(1);\r\n        });\r\n\r\n        it('should pass the labelProps to the rendered Label if labelTitle and labelProps are set as props', () => {\r\n            const labelProps = {invalidMessage: 'do not leave me empty'};\r\n\r\n            shallowInput({\r\n                labelProps,\r\n                labelTitle: 'potatos',\r\n            });\r\n            expect(input.find(Label).props()).toEqual(jasmine.objectContaining(labelProps));\r\n        });\r\n\r\n        describe('add classes on specific input type defined in validatedInputTypes', () => {\r\n            it('should set the input-field class on the container if the input is of type text', () => {\r\n                shallowInput({\r\n                    type: 'text',\r\n                });\r\n\r\n                expect(\r\n                    input\r\n                        .find('div')\r\n                        .first()\r\n                        .hasClass('input-field')\r\n                ).toBe(true);\r\n            });\r\n\r\n            it('should set the input-field class on the container if the input is of type number', () => {\r\n                shallowInput({\r\n                    type: 'number',\r\n                });\r\n\r\n                expect(\r\n                    input\r\n                        .find('div')\r\n                        .first()\r\n                        .hasClass('input-field')\r\n                ).toBe(true);\r\n            });\r\n\r\n            it('should set the input-field class on the container if the input is of type password', () => {\r\n                shallowInput({\r\n                    type: 'password',\r\n                });\r\n\r\n                expect(\r\n                    input\r\n                        .find('div')\r\n                        .first()\r\n                        .hasClass('input-field')\r\n                ).toBe(true);\r\n            });\r\n\r\n            it('should not set the input-field class on the container if the input is of type checkbox', () => {\r\n                shallowInput({\r\n                    type: 'checkbox',\r\n                });\r\n\r\n                expect(\r\n                    input\r\n                        .find('div')\r\n                        .first()\r\n                        .hasClass('input-field')\r\n                ).toBe(false);\r\n            });\r\n\r\n            it('should set the invalid class on the input if valid prop is false and input type text', () => {\r\n                shallowInput({\r\n                    type: 'text',\r\n                    valid: false,\r\n                });\r\n\r\n                expect(input.find('.invalid').length).toBe(1);\r\n            });\r\n\r\n            it('should set the invalid class on the input if valid prop is false and input type number', () => {\r\n                shallowInput({\r\n                    type: 'number',\r\n                    valid: false,\r\n                });\r\n\r\n                expect(input.find('.invalid').length).toBe(1);\r\n            });\r\n\r\n            it('should set the invalid class on the input if valid prop is false and input type password', () => {\r\n                shallowInput({\r\n                    type: 'password',\r\n                    valid: false,\r\n                });\r\n\r\n                expect(input.find('.invalid').length).toBe(1);\r\n            });\r\n\r\n            it('should not set the invalid class on the input if valid prop is true and input type text', () => {\r\n                shallowInput({\r\n                    type: 'text',\r\n                    valid: true,\r\n                });\r\n\r\n                expect(input.find('.invalid').length).toBe(0);\r\n            });\r\n\r\n            it('should not set the invalid class on the input if valid prop is false and input type is not valid', () => {\r\n                shallowInput({\r\n                    type: 'checkbox',\r\n                    valid: false,\r\n                });\r\n\r\n                expect(input.find('.invalid').length).toBe(0);\r\n            });\r\n        });\r\n\r\n        it('should set the autoFocus prop to the input', () => {\r\n            shallowInput({\r\n                autoFocus: true,\r\n            });\r\n\r\n            expect(input.find('input').props().autoFocus).toBe(true);\r\n        });\r\n\r\n        describe('with disabledTooltip', () => {\r\n            it('should wrap the input with a tooltip if the input is disabled and disabledTooltip is truthy', () => {\r\n                const disabledTooltip = 'i am truthy';\r\n                shallowInput({\r\n                    disabled: true,\r\n                    disabledTooltip,\r\n                });\r\n\r\n                expect(input.find(Tooltip).props().title).toBe(disabledTooltip);\r\n                expect(input.find(Tooltip).find('input').length).toBe(1);\r\n            });\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=448.bundle.js.map