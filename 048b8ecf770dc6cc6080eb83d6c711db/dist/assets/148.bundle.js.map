{"version":3,"sources":["webpack:///./src/components/actions/tests/TriggerAction.spec.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/148.bundle.js","sourcesContent":["export default \"import {mount, ReactWrapper, shallow} from 'enzyme';\\r\\n// tslint:disable-next-line:no-unused-variable\\r\\nimport * as React from 'react';\\r\\nimport * as _ from 'underscore';\\r\\nimport {IActionOptions} from '../Action';\\r\\nimport {ITriggerActionProps, TriggerAction} from '../TriggerActionConnected';\\r\\n\\r\\ndescribe('Actions', () => {\\r\\n    let triggerSpy: jasmine.Spy;\\r\\n    const action: IActionOptions = {\\r\\n        name: 'action',\\r\\n        enabled: true,\\r\\n    };\\r\\n    const simple: boolean = false;\\r\\n\\r\\n    describe('<TriggerAction />', () => {\\r\\n        it('should render without errors', () => {\\r\\n            expect(() => {\\r\\n                shallow(<TriggerAction action={action} />);\\r\\n            }).not.toThrow();\\r\\n        });\\r\\n    });\\r\\n\\r\\n    describe('<TriggerAction />', () => {\\r\\n        let triggerAction: ReactWrapper<ITriggerActionProps, any>;\\r\\n        let triggerActionInstance: TriggerAction;\\r\\n\\r\\n        beforeEach(() => {\\r\\n            triggerSpy = jasmine.createSpy('triggerMethod');\\r\\n            action.trigger = triggerSpy;\\r\\n            triggerAction = mount(<TriggerAction action={action} simple={simple} />, {\\r\\n                attachTo: document.getElementById('App'),\\r\\n            });\\r\\n            triggerActionInstance = triggerAction.instance() as TriggerAction;\\r\\n        });\\r\\n\\r\\n        afterEach(() => {\\r\\n            triggerAction.unmount();\\r\\n            triggerAction.detach();\\r\\n        });\\r\\n\\r\\n        it('should get if the action is simple (no html) as a prop', () => {\\r\\n            const simpleProp = triggerAction.props().simple;\\r\\n\\r\\n            expect(simpleProp).toBeDefined();\\r\\n            expect(simpleProp).toBe(simple);\\r\\n        });\\r\\n\\r\\n        it('should render a <Action /> component', () => {\\r\\n            expect(triggerAction.find('Action').length).toBe(1);\\r\\n        });\\r\\n\\r\\n        it('should have the \\\"enabled\\\" class if action is enabled', () => {\\r\\n            expect(triggerAction.find('.enabled').length).toBe(1);\\r\\n\\r\\n            const newAction = _.extend({}, action);\\r\\n            newAction.enabled = false;\\r\\n            triggerAction.setProps({action: newAction, simple: simple});\\r\\n\\r\\n            expect(triggerAction.find('.enabled').length).toBe(0);\\r\\n            expect(triggerAction.find('.disabled').length).toBe(1);\\r\\n\\r\\n            triggerAction.setProps({action: newAction, simple: true});\\r\\n\\r\\n            expect(triggerAction.find('.enabled').length).toBe(0);\\r\\n            expect(triggerAction.find('.state-disabled').length).toBe(1);\\r\\n\\r\\n            triggerAction.setProps({action: {...newAction, hideDisabled: false}, simple: false});\\r\\n\\r\\n            expect(triggerAction.find('.enabled').length).toBe(0);\\r\\n            expect(triggerAction.find('.state-disabled').length).toBe(1);\\r\\n        });\\r\\n\\r\\n        it('should call onTriggerAction when clicked if action is enabled', () => {\\r\\n            const onTriggerActionSpy = spyOn<any>(triggerActionInstance, 'onTriggerAction');\\r\\n\\r\\n            triggerAction.find('.enabled').simulate('click');\\r\\n            expect(onTriggerActionSpy).toHaveBeenCalledTimes(1);\\r\\n        });\\r\\n\\r\\n        it('should not call onTriggerAction when clicked if action is not enabled and visible', () => {\\r\\n            triggerAction.setProps({action: {...action, enabled: false, hideDisabled: false}});\\r\\n            const onTriggerActionSpy = spyOn<any>(triggerActionInstance, 'onTriggerAction');\\r\\n\\r\\n            triggerAction.find('.state-disabled').simulate('click');\\r\\n            expect(onTriggerActionSpy).not.toHaveBeenCalled();\\r\\n        });\\r\\n\\r\\n        it('should call the trigger of the action when clicked and no confirmation is required', () => {\\r\\n            triggerAction.find('.enabled').simulate('click');\\r\\n            expect(triggerSpy).toHaveBeenCalledTimes(1);\\r\\n        });\\r\\n\\r\\n        it('should call the onCloseDropdown if it exists and no confirmation is required', () => {\\r\\n            const onCloseDropdownSpy = jasmine.createSpy('onCloseDropdownSpy');\\r\\n            triggerAction.setProps({onCloseDropdown: onCloseDropdownSpy});\\r\\n\\r\\n            triggerAction.find('.enabled').simulate('click');\\r\\n            expect(onCloseDropdownSpy).toHaveBeenCalledTimes(1);\\r\\n        });\\r\\n\\r\\n        it('should call the onTriggerConfirm if set when clicked and confirmation is required', () => {\\r\\n            const onTriggerConfirmSpy = jasmine.createSpy('onTriggerConfirmSpy');\\r\\n\\r\\n            const newAction = _.extend({}, action);\\r\\n            newAction.requiresConfirmation = {\\r\\n                confirmType: 'danger',\\r\\n                buttonLabels: {\\r\\n                    confirm: 'delete',\\r\\n                    cancel: 'cancel',\\r\\n                },\\r\\n            };\\r\\n            triggerAction.setProps({action: newAction});\\r\\n            expect(() => triggerActionInstance['onTriggerAction'].call(triggerActionInstance)).not.toThrow();\\r\\n\\r\\n            triggerAction.setProps({action: newAction, onTriggerConfirm: onTriggerConfirmSpy});\\r\\n\\r\\n            triggerAction.find('.enabled').simulate('click');\\r\\n            expect(onTriggerConfirmSpy.calls.count()).toBe(1);\\r\\n        });\\r\\n\\r\\n        it('should not throw when clicking the action when the trigger of the action is not set and confirmation is not required', () => {\\r\\n            const newAction = _.extend({}, action);\\r\\n            newAction.trigger = undefined;\\r\\n            triggerAction.setProps({action: newAction});\\r\\n            expect(() => triggerActionInstance['onTriggerAction'].call(triggerActionInstance)).not.toThrow();\\r\\n        });\\r\\n\\r\\n        it(\\r\\n            'should send a function that calls the trigger of the action and the onConfirm prop when confirmation is required and ' +\\r\\n                'onTriggerConfirm is set',\\r\\n            () => {\\r\\n                const onTriggerConfirm = (onClick: () => void) => {\\r\\n                    onClick();\\r\\n                };\\r\\n                const onConfirmSpy = jasmine.createSpy('onConfirm');\\r\\n                const newAction = _.extend({}, action);\\r\\n                newAction.requiresConfirmation = {\\r\\n                    confirmType: 'danger',\\r\\n                    buttonLabels: {\\r\\n                        confirm: 'delete',\\r\\n                        cancel: 'cancel',\\r\\n                    },\\r\\n                };\\r\\n                triggerAction.setProps({\\r\\n                    action: newAction,\\r\\n                    onTriggerConfirm: onTriggerConfirm,\\r\\n                    onConfirm: onConfirmSpy,\\r\\n                });\\r\\n                triggerAction.find('.enabled').simulate('click');\\r\\n                expect(triggerSpy).toHaveBeenCalled();\\r\\n                expect(onConfirmSpy).toHaveBeenCalled();\\r\\n            }\\r\\n        );\\r\\n\\r\\n        it('should not thrown on the function sent when the trigger of the action or the onConfirm prop are not set', () => {\\r\\n            const onTriggerConfirm = (onClick: () => void) => {\\r\\n                onClick();\\r\\n            };\\r\\n            const newAction = _.extend({}, action, {trigger: undefined});\\r\\n            newAction.requiresConfirmation = {\\r\\n                confirmType: 'danger',\\r\\n                buttonLabels: {\\r\\n                    confirm: 'delete',\\r\\n                    cancel: 'cancel',\\r\\n                },\\r\\n            };\\r\\n            triggerAction.setProps({action: newAction, onTriggerConfirm: onTriggerConfirm});\\r\\n            expect(() => triggerActionInstance['onTriggerAction'].call(triggerActionInstance)).not.toThrow();\\r\\n        });\\r\\n\\r\\n        it('should use a custom prompt description when the confirmLabel is set', () => {\\r\\n            const newAction = _.extend({requiresConfirmation: {confirmLabel: 'custom label'}}, action);\\r\\n            triggerAction.setProps({action: newAction});\\r\\n\\r\\n            triggerAction\\r\\n                .find('.enabled')\\r\\n                .props()\\r\\n                .onClick('mouseEvent' as any);\\r\\n            expect(triggerSpy).toHaveBeenCalled();\\r\\n            expect(triggerSpy.calls.first().object.requiresConfirmation.confirmLabel).toEqual(\\r\\n                newAction.requiresConfirmation.confirmLabel\\r\\n            );\\r\\n        });\\r\\n    });\\r\\n});\\r\\n\""],"sourceRoot":""}