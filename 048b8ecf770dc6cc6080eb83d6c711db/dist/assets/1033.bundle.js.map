{"version":3,"sources":["webpack:///./src/components/toast/examples/ToastExamples.tsx?fee0","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/components/section/Section.tsx?b7b7","webpack:///./src/components/toast/ToastContainer.tsx?e74b","webpack:///./src/components/toast/ToastContainerConnected.tsx?ded3"],"names":["ToastExamples","ToastsWithLocalState","ToastsWithReduxStore","state","setState","level","title","enabled","className","name","onClick","Success","Warning","Error","Timed","left","key","id","dismiss","onClose","type","right","bottom","dismissible","dispatch","renderToast","containerId","options","toastContent","style","marginBottom","href","content","ButtonPropsToOmit","this","props","getTemplate","buttonClass","buttonElement","buttonAttrs","disabled","link","target","rel","children","tooltip","placement","tooltipPlacement","getClasses","primary","small","classes","render","defaultProps","Section","description","mods","titleProps","H","componentWillMount","onRender","componentWillUnmount","onDestroy","onCloseToast","toasts","toast","ToastContainerConnected","ownProps","toastContainers","mergeProps"],"mappings":"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","file":"assets/1033.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\r\nimport {IDispatch} from '../../../utils/ReduxUtils';\r\nimport {Button} from '../../button/Button';\r\nimport {Section} from '../../section/Section';\r\nimport {IToastProps, Toast} from '../Toast';\r\nimport {addToast} from '../ToastActions';\r\nimport {ToastContainer} from '../ToastContainer';\r\nimport {ToastContainerConnected} from '../ToastContainerConnected';\r\n\r\nexport const ToastExamples: ExampleComponent = () => (\r\n    <Section>\r\n        <ToastsWithLocalState />\r\n        <ToastsWithReduxStore />\r\n    </Section>\r\n);\r\n\r\nconst ToastsWithLocalState: React.FunctionComponent = () => {\r\n    const [state, setState] = React.useState({\r\n        Success: false,\r\n        Warning: false,\r\n        Error: false,\r\n        Timed: false,\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Section level={2} title=\"Toasts with a local state\">\r\n                <Button\r\n                    enabled\r\n                    className=\"btn\"\r\n                    name=\"Top left\"\r\n                    onClick={() => setState({...state, Success: !state.Success})}\r\n                />\r\n\r\n                <Button\r\n                    enabled\r\n                    className=\"btn\"\r\n                    name=\"Middle Earth\"\r\n                    onClick={() => setState({...state, Warning: !state.Warning})}\r\n                />\r\n\r\n                <Button className=\"btn\" name=\"Top right\" onClick={() => setState({...state, Error: !state.Error})} />\r\n\r\n                <Button className=\"btn\" name=\"Bottom\" onClick={() => setState({...state, Timed: !state.Timed})} />\r\n            </Section>\r\n\r\n            <ToastContainer left>\r\n                {state.Success && (\r\n                    <Toast\r\n                        key=\"toast-1\"\r\n                        id=\"toast-1\"\r\n                        title=\"Timed Sucess !!\"\r\n                        dismiss={1000}\r\n                        onClose={() => setState({...state, Success: false})}\r\n                    />\r\n                )}\r\n            </ToastContainer>\r\n            <ToastContainer>\r\n                {state.Warning && (\r\n                    <Toast\r\n                        key=\"toast-1\"\r\n                        id=\"toast-1\"\r\n                        title=\"Warning !!\"\r\n                        type=\"Warning\"\r\n                        onClose={() => setState({...state, Warning: false})}\r\n                    />\r\n                )}\r\n            </ToastContainer>\r\n            <ToastContainer right>\r\n                {state.Error && (\r\n                    <Toast\r\n                        key=\"toast-1\"\r\n                        id=\"toast-1\"\r\n                        title=\"Error !!\"\r\n                        type=\"Error\"\r\n                        onClose={() => setState({...state, Error: false})}\r\n                    />\r\n                )}\r\n            </ToastContainer>\r\n            <ToastContainer bottom>\r\n                {state.Timed && (\r\n                    <Toast\r\n                        key=\"toast-1\"\r\n                        id=\"toast-1\"\r\n                        title=\"An eternal Success !\"\r\n                        dismissible={false}\r\n                        onClose={() => setState({...state, Timed: false})}\r\n                    />\r\n                )}\r\n            </ToastContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nconst MapDispatchToProps = (dispatch: IDispatch) => ({\r\n    renderToast: (containerId: string, title: string, options?: IToastProps) =>\r\n        dispatch(addToast(containerId, title, options)),\r\n});\r\n\r\nconst ToastsWithReduxStoreDisconnected: React.FunctionComponent<ReturnType<typeof MapDispatchToProps>> = ({\r\n    renderToast,\r\n}) => {\r\n    const toastContent = () => (\r\n        <ul>\r\n            <li style={{marginBottom: '5px'}}>\r\n                <a href=\"#\">Some Link</a>\r\n            </li>\r\n            <li>Complex React Component</li>\r\n        </ul>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Section level={2} title=\"Toasts with a redux store\">\r\n                <Button\r\n                    enabled\r\n                    className=\"btn\"\r\n                    name=\"Success\"\r\n                    onClick={() => renderToast('containerId', 'Success !')}\r\n                />\r\n\r\n                <Button\r\n                    enabled\r\n                    className=\"btn\"\r\n                    name=\"Warning   \"\r\n                    onClick={() => renderToast('containerId', 'Warning !', {type: 'Warning'})}\r\n                />\r\n\r\n                <Button\r\n                    className=\"btn\"\r\n                    name=\"Error\"\r\n                    onClick={() => renderToast('containerId', 'Error !', {type: 'Error'})}\r\n                />\r\n\r\n                <Button\r\n                    className=\"btn\"\r\n                    name=\"Timed Success\"\r\n                    onClick={() => renderToast('containerId', 'Timed Success !', {dismiss: 1000})}\r\n                />\r\n\r\n                <Button\r\n                    className=\"btn\"\r\n                    name=\"custom JSX\"\r\n                    onClick={() => renderToast('containerId', 'Custom JSX !', {content: toastContent})}\r\n                />\r\n                <Button\r\n                    className=\"btn\"\r\n                    name=\"custom String\"\r\n                    onClick={() => renderToast('containerId', 'Timed Success!', {content: 'I am a string !'})}\r\n                />\r\n            </Section>\r\n            <ToastContainerConnected id=\"containerId\" />\r\n        </>\r\n    );\r\n};\r\nconst ToastsWithReduxStore = connect(null, MapDispatchToProps)(ToastsWithReduxStoreDisconnected);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IToastProps, Toast} from './Toast';\r\nimport {IToastState} from './ToastReducers';\r\n\r\nexport interface IToastContainerOwnProps {\r\n    id?: string;\r\n    classes?: string[];\r\n    bottom?: boolean;\r\n    left?: boolean;\r\n    right?: boolean;\r\n}\r\n\r\nexport interface IToastContainerStateProps {\r\n    toasts?: IToastState[];\r\n}\r\n\r\nexport interface IToastContainerDispatchProps {\r\n    onDestroy?: () => void;\r\n    onRender?: () => void;\r\n    onCloseToast?: (id: string) => void;\r\n}\r\n\r\nexport interface IToastContainerProps\r\n    extends IToastContainerOwnProps,\r\n        IToastContainerStateProps,\r\n        IToastContainerDispatchProps {}\r\n\r\nexport class ToastContainer extends React.Component<IToastContainerProps, {}> {\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    private onCloseToast(id: string) {\r\n        if (this.props.onCloseToast) {\r\n            this.props.onCloseToast(id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames('toast-container', this.props.classes, {\r\n            'mod-bottom': this.props.bottom,\r\n            'mod-left': this.props.left,\r\n            'mod-right': this.props.right,\r\n        });\r\n        const toasts = this.props.toasts\r\n            ? _.map(this.props.toasts, (toast: IToastProps) => (\r\n                  <Toast\r\n                      key={toast.id}\r\n                      {...toast}\r\n                      onClose={() => {\r\n                          this.onCloseToast(toast.id);\r\n                          toast.onClose?.();\r\n                      }}\r\n                  />\r\n              ))\r\n            : this.props.children;\r\n\r\n        return <div className={classes}>{toasts}</div>;\r\n    }\r\n}\r\n","import {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {addToastContainer, removeToast, removeToastContainer} from './ToastActions';\r\nimport {\r\n    IToastContainerDispatchProps,\r\n    IToastContainerOwnProps,\r\n    IToastContainerProps,\r\n    IToastContainerStateProps,\r\n    ToastContainer,\r\n} from './ToastContainer';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IToastContainerOwnProps): IToastContainerStateProps => {\r\n    const container = _.findWhere(state.toastContainers, {id: ownProps.id}) || {id: null, toasts: []};\r\n    return {\r\n        toasts: container.toasts,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IToastContainerOwnProps): IToastContainerDispatchProps => ({\r\n    onRender: () => dispatch(addToastContainer(ownProps.id)),\r\n    onDestroy: () => dispatch(removeToastContainer(ownProps.id)),\r\n    onCloseToast: (id: string) => dispatch(removeToast(ownProps.id, id)),\r\n});\r\n\r\nexport const ToastContainerConnected: React.ComponentClass<IToastContainerProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(ToastContainer);\r\n"],"sourceRoot":""}