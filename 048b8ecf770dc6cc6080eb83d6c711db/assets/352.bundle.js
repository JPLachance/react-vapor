(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{1458:function(e,t,n){"use strict";n.r(t),t.default="import * as _ from 'underscore';\r\nimport {keyCode} from '../../../utils/InputUtils';\r\nimport {IReduxAction} from '../../../utils/ReduxUtils';\r\nimport {IDropdownOption} from '../DropdownSearch';\r\nimport {addDropdownSearch, DropdownSearchActions, IOptionsDropdownSearchPayload} from '../DropdownSearchActions';\r\nimport {\r\n    addUniqueSelectedOption,\r\n    defaultSelectedOptionPlaceholder,\r\n    deselectAllOptions,\r\n    deselectLastSelectedOption,\r\n    deselectOption,\r\n    dropdownSearchInitialState,\r\n    dropdownSearchReducer,\r\n    dropdownsSearchInitialState,\r\n    dropdownsSearchReducer,\r\n    getDisplayedOptions,\r\n    IDropdownSearchState,\r\n    isNotCustomOption,\r\n    multiSelectOption,\r\n    removeCustomOptions,\r\n    shouldHideOnFilter,\r\n} from '../DropdownSearchReducers';\r\n\r\ndescribe('DropdownSearch', () => {\r\n    describe('DropdownSearchReducers', () => {\r\n        const defaultAction = {\r\n            type: 'default',\r\n        };\r\n\r\n        const defaultState: IDropdownSearchState[] = [\r\n            {\r\n                id: 'new-dropdown-search',\r\n                isOpened: false,\r\n                options: [],\r\n            },\r\n            {\r\n                id: 'new-dropdown-search-1',\r\n                isOpened: false,\r\n                options: [],\r\n            },\r\n            {\r\n                id: 'new-dropdown-search-2',\r\n                isOpened: true,\r\n                options: [],\r\n            },\r\n        ];\r\n\r\n        const defaultPayload = {id: 'new-dropdown-search'};\r\n\r\n        const options = [\r\n            {value: 'test 1', displayValue: 'display 1'},\r\n            {value: 'test 2', displayValue: 'display 2'},\r\n            {value: 'test 3', displayValue: 'display 3'},\r\n        ];\r\n\r\n        const defaultOldState: IDropdownSearchState[] = [\r\n            {\r\n                id: 'new-dropdown-search',\r\n                isOpened: false,\r\n                options,\r\n            },\r\n        ];\r\n\r\n        it('should return the default state if the action is not defined and the state is undefined', () => {\r\n            const oldState: IDropdownSearchState[] = undefined;\r\n            const actionBarsState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, defaultAction);\r\n\r\n            expect(actionBarsState).toBe(dropdownsSearchInitialState);\r\n        });\r\n\r\n        it('should return the default state if the action is not defined and the state is undefined for one action bar', () => {\r\n            const oldState: IDropdownSearchState = undefined;\r\n            const actionBarState: IDropdownSearchState = dropdownSearchReducer(oldState, defaultAction);\r\n\r\n            expect(actionBarState).toBe(dropdownSearchInitialState);\r\n        });\r\n\r\n        it('should return the old state when the action is not defined', () => {\r\n            const oldState: IDropdownSearchState[] = [dropdownSearchInitialState];\r\n            const actionBarsState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, defaultAction);\r\n\r\n            expect(actionBarsState).toBe(oldState);\r\n        });\r\n\r\n        it('should return the old state when the action is not defined for one action bar', () => {\r\n            const oldState: IDropdownSearchState = dropdownSearchInitialState;\r\n            const actionBarState: IDropdownSearchState = dropdownSearchReducer(oldState, defaultAction);\r\n\r\n            expect(actionBarState).toBe(oldState);\r\n        });\r\n\r\n        it('should return a new state with actions payload has parameter on \"ADD_DROPDOWN_SEARCH\"', () => {\r\n            let oldState: IDropdownSearchState[] = dropdownsSearchInitialState;\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.add,\r\n                payload: _.extend({}, defaultPayload),\r\n            };\r\n            let dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length + 1);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (dropdownSearch: IDropdownSearchState) => dropdownSearch.id === action.payload.id\r\n                ).length\r\n            ).toBe(1);\r\n\r\n            oldState = dropdownSearchState;\r\n            action.payload.id = 'new-dropdown-search-2';\r\n            dropdownSearchState = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length + 1);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (dropdownSearch: IDropdownSearchState) => dropdownSearch.id === action.payload.id\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should return a state with a default selected option when defaultSelectedOption is given on \"ADD_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = dropdownsSearchInitialState;\r\n            const defaultSelectedOption: IDropdownOption = {value: 'Default option'};\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.add,\r\n                payload: _.extend({}, {...defaultPayload, defaultSelectedOption, dropdownOptions: options}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            const dropdownSearch = _.find(\r\n                dropdownSearchState,\r\n                (currentDropdownSearch: IDropdownSearchState) => currentDropdownSearch.id === action.payload.id\r\n            );\r\n\r\n            expect(\r\n                _.find(dropdownSearch.options, (option) => option.value === defaultSelectedOption.value).selected\r\n            ).toBe(true);\r\n        });\r\n\r\n        it('should return a state with a default selected option when no options are given on \"ADD_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = dropdownsSearchInitialState;\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.add,\r\n                payload: _.extend({}, {...defaultPayload}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            const dropdownSearch = _.find(\r\n                dropdownSearchState,\r\n                (currentDropdownSearch: IDropdownSearchState) => currentDropdownSearch.id === action.payload.id\r\n            );\r\n\r\n            expect(\r\n                _.find(dropdownSearch.options, (option) => option.value === defaultSelectedOptionPlaceholder.value)\r\n            ).toBeDefined();\r\n        });\r\n\r\n        it('should return a state with a selectedOption if the defaultSelectedOption is equal to one option already present \"ADD_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = dropdownsSearchInitialState;\r\n            const defaultSelectedOption: IDropdownOption = {value: 'Default option', selected: false};\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.add,\r\n                payload: _.extend({}, {...defaultPayload, options: [defaultSelectedOption], defaultSelectedOption}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            const dropdownSearch = _.find(\r\n                dropdownSearchState,\r\n                (currentDropdownSearch: IDropdownSearchState) => currentDropdownSearch.id === action.payload.id\r\n            );\r\n\r\n            expect(\r\n                _.find(dropdownSearch.options, (option) => option.value === defaultSelectedOption.value).selected\r\n            ).toBe(true);\r\n        });\r\n\r\n        it('should return a state with supportSingleCustomOption set to false if the property is not passed to the addDropdownSearch action generator on \"ADD_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = dropdownsSearchInitialState;\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = addDropdownSearch(\r\n                defaultPayload.id,\r\n                [],\r\n                undefined\r\n            );\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            const dropdownSearch = _.find(\r\n                dropdownSearchState,\r\n                (currentDropdownSearch: IDropdownSearchState) => currentDropdownSearch.id === action.payload.id\r\n            );\r\n\r\n            expect(dropdownSearch.supportSingleCustomOption).toBe(false);\r\n        });\r\n\r\n        it('should return a state with supportSingleCustomOption set to false if the property is passed with false in the payload on \"ADD_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = dropdownsSearchInitialState;\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = addDropdownSearch(\r\n                defaultPayload.id,\r\n                [],\r\n                undefined,\r\n                false\r\n            );\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            const dropdownSearch = _.find(\r\n                dropdownSearchState,\r\n                (currentDropdownSearch: IDropdownSearchState) => currentDropdownSearch.id === action.payload.id\r\n            );\r\n\r\n            expect(dropdownSearch.supportSingleCustomOption).toBe(false);\r\n        });\r\n\r\n        it('should return a state with supportSingleCustomOption set to true if the property is passed with false in the payload on \"ADD_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = dropdownsSearchInitialState;\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = addDropdownSearch(\r\n                defaultPayload.id,\r\n                [],\r\n                undefined,\r\n                true\r\n            );\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            const dropdownSearch = _.find(\r\n                dropdownSearchState,\r\n                (currentDropdownSearch: IDropdownSearchState) => currentDropdownSearch.id === action.payload.id\r\n            );\r\n\r\n            expect(dropdownSearch.supportSingleCustomOption).toBe(true);\r\n        });\r\n\r\n        it('should return the old state without the dropdownSearch with the payload id when the action is \"REMOVE_DROPDOWN_SEARCH\"', () => {\r\n            let oldState: IDropdownSearchState[] = defaultState.slice();\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.remove,\r\n                payload: _.extend({}, defaultPayload),\r\n            };\r\n            let dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length - 1);\r\n            expect(dropdownSearchState.filter((dropdownSearch) => dropdownSearch.id === action.payload.id).length).toBe(\r\n                0\r\n            );\r\n\r\n            oldState = dropdownSearchState;\r\n            action.payload.id = 'new-dropdown-search-2';\r\n            dropdownSearchState = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length - 1);\r\n            expect(dropdownSearchState.filter((dropdownSearch) => dropdownSearch.id === action.payload.id).length).toBe(\r\n                0\r\n            );\r\n        });\r\n\r\n        it('should return the old state when the action is \"REMOVE_DROPDOWN_SEARCH\" and the payload id does not exist', () => {\r\n            const oldState: IDropdownSearchState[] = defaultState.slice();\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.remove,\r\n                payload: {id: 'not a id'},\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (dropdownSearch: IDropdownSearchState) => dropdownSearch.id === action.payload.id\r\n                ).length\r\n            ).toBe(0);\r\n        });\r\n\r\n        it('should return the new state with the isOpened toggle and the filterText reset to empty string on \"TOGGLE_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = defaultState.slice();\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.toggle,\r\n                payload: _.extend({}, defaultPayload),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (dropdownSearch: IDropdownSearchState) =>\r\n                        dropdownSearch.id === action.payload.id &&\r\n                        _.isEmpty(dropdownSearch.filterText) &&\r\n                        dropdownSearch.isOpened\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should return the new state with the isOpened toggle and the filterText reset to empty string on \"UPDATE_DROPDOWN_SEARCH\"', () => {\r\n            const dropdownOption = [{value: 'test'}, {value: 'test 1'}, {value: 'test 2'}];\r\n            const newDropdownOption = [{value: 'test 4', selected: true}];\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: false,\r\n                    options: dropdownOption,\r\n                },\r\n            ];\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.update,\r\n                payload: _.extend({}, defaultPayload, {\r\n                    dropdownOptions: newDropdownOption,\r\n                    defaultSelectedOption: newDropdownOption[0],\r\n                }),\r\n            };\r\n\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (dropdownSearch: IDropdownSearchState) => dropdownSearch.id === action.payload.id\r\n                )[0].options\r\n            ).toEqual(newDropdownOption);\r\n        });\r\n\r\n        it('should return the new state with the filterText set to newFilterText on \"FILTER_DROPDOWN_SEARCH\"', () => {\r\n            const newFilterText = 'new filter';\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: false,\r\n                    filterText: '',\r\n                    options: [],\r\n                },\r\n            ];\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.filter,\r\n                payload: _.extend({}, defaultPayload, {filterText: newFilterText}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (currentDropdownSearch: IDropdownSearchState) =>\r\n                        currentDropdownSearch.id === action.payload.id &&\r\n                        currentDropdownSearch.filterText === newFilterText\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        describe('FILTER_DROPDOWN_SEARCH with supportSingleCustomOption', () => {\r\n            let oldState: IDropdownSearchState[];\r\n\r\n            beforeEach(() => {\r\n                oldState = [\r\n                    {\r\n                        id: 'new-dropdown-search',\r\n                        isOpened: false,\r\n                        filterText: '',\r\n                        options: [\r\n                            {\r\n                                value: 'testOption',\r\n                                displayValue: 'testOption',\r\n                                custom: false,\r\n                                selected: false,\r\n                            },\r\n                        ],\r\n                        supportSingleCustomOption: true,\r\n                    },\r\n                ];\r\n            });\r\n\r\n            it('should should not add a custom option if the filterText is empty', () => {\r\n                const newFilterText = '';\r\n\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.filter,\r\n                    payload: _.extend({}, defaultPayload, {filterText: newFilterText}),\r\n                };\r\n                const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n                expect(\r\n                    dropdownSearchState.filter(\r\n                        (currentDropdownSearch: IDropdownSearchState) =>\r\n                            currentDropdownSearch.id === action.payload.id &&\r\n                            currentDropdownSearch.options[1] === undefined\r\n                    ).length\r\n                ).toBe(1);\r\n            });\r\n\r\n            it('should add a custom option if the filterText is not empty', () => {\r\n                const newFilterText = 'non empty filterText';\r\n\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.filter,\r\n                    payload: _.extend({}, defaultPayload, {filterText: newFilterText}),\r\n                };\r\n                const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n                expect(\r\n                    dropdownSearchState.filter(\r\n                        (currentDropdownSearch: IDropdownSearchState) =>\r\n                            currentDropdownSearch.id === action.payload.id &&\r\n                            currentDropdownSearch.options[0].custom === true\r\n                    ).length\r\n                ).toBe(1);\r\n            });\r\n\r\n            it('should add a custom option if the filterText is not empty with its value being the filterText value', () => {\r\n                const newFilterText = 'non empty filterText';\r\n\r\n                const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                    type: DropdownSearchActions.filter,\r\n                    payload: _.extend({}, defaultPayload, {filterText: newFilterText}),\r\n                };\r\n                const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n                expect(\r\n                    dropdownSearchState.filter(\r\n                        (currentDropdownSearch: IDropdownSearchState) =>\r\n                            currentDropdownSearch.id === action.payload.id &&\r\n                            currentDropdownSearch.options[0].value === newFilterText\r\n                    ).length\r\n                ).toBe(1);\r\n            });\r\n        });\r\n\r\n        it('should return the new state with the selectedOptions modified on \"SELECT_DROPDOWN_SEARCH\"', () => {\r\n            const selectedOption: IDropdownOption = {value: 'test', displayValue: 'yolo test'};\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: true,\r\n                },\r\n            ];\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.select,\r\n                payload: _.extend({}, defaultPayload, {addedSelectedOption: selectedOption}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (currentDropdownSearch: IDropdownSearchState) =>\r\n                        currentDropdownSearch.id === action.payload.id &&\r\n                        _.where(currentDropdownSearch.options, {value: selectedOption.value})\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should return the old state on \"SELECT_DROPDOWN_SEARCH\" with a disabled option in the payload', () => {\r\n            const selectedOption: IDropdownOption = {value: 'test', displayValue: 'yolo test', disabled: true};\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: true,\r\n                },\r\n            ];\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.select,\r\n                payload: _.extend({}, defaultPayload, {addedSelectedOption: selectedOption}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState).toEqual(oldState);\r\n        });\r\n\r\n        it('should remove custom options on \"SELECT_DROPDOWN_SEARCH\" with supportSingleCustomOption', () => {\r\n            const selectedOption: IDropdownOption = {value: 'test', displayValue: 'yolo test'};\r\n            const dropdownOption = [\r\n                {value: 'test'},\r\n                {value: 'test 1'},\r\n                {value: 'custom 1', custom: true},\r\n                {value: 'test 2'},\r\n            ];\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: false,\r\n                    options: dropdownOption,\r\n                    supportSingleCustomOption: true,\r\n                },\r\n            ];\r\n\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.select,\r\n                payload: _.extend({}, defaultPayload, {addedSelectedOption: selectedOption}),\r\n            };\r\n\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                _.findWhere(\r\n                    dropdownSearchState.filter(\r\n                        (currentDropdownSearch: IDropdownSearchState) => currentDropdownSearch.id === action.payload.id\r\n                    )[0].options,\r\n                    {custom: true}\r\n                )\r\n            ).toBeUndefined();\r\n        });\r\n\r\n        it('should return the new state with the activeOption set, isOpened at true and setFocusOnDropdownButton at false if the keyCode is \"Down Arrow\" on \"ACTIVE_DROPDOWN_SEARCH\"', () => {\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.active,\r\n                payload: _.extend({}, defaultPayload, {keyCode: keyCode.downArrow}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(defaultOldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(defaultOldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (currentDropdownSearch: IDropdownSearchState) =>\r\n                        currentDropdownSearch.id === action.payload.id &&\r\n                        currentDropdownSearch.activeOption.value === options[0].value &&\r\n                        !currentDropdownSearch.setFocusOnDropdownButton &&\r\n                        currentDropdownSearch.isOpened\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should return the new state with the activeOption set, isOpened at true and setFocusOnDropdownButton at false if the keyCode is \"Up Arrow\" on \"ACTIVE_DROPDOWN_SEARCH\"', () => {\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.active,\r\n                payload: _.extend({}, defaultPayload, {keyCode: keyCode.upArrow}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(defaultOldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(defaultOldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (currentDropdownSearch: IDropdownSearchState) =>\r\n                        currentDropdownSearch.id === action.payload.id &&\r\n                        currentDropdownSearch.activeOption.value === options[0].value &&\r\n                        !currentDropdownSearch.setFocusOnDropdownButton &&\r\n                        currentDropdownSearch.isOpened\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should return the new state with the activeOption set with the option after this one set in activeOption in oldState if the keyCode is \"Down Arrow\" on \"ACTIVE_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: false,\r\n                    options,\r\n                    activeOption: options[0],\r\n                },\r\n            ];\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.active,\r\n                payload: _.extend({}, defaultPayload, {keyCode: keyCode.downArrow}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (currentDropdownSearch: IDropdownSearchState) =>\r\n                        currentDropdownSearch.id === action.payload.id &&\r\n                        currentDropdownSearch.activeOption.value === options[1].value &&\r\n                        !currentDropdownSearch.setFocusOnDropdownButton &&\r\n                        currentDropdownSearch.isOpened\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should return the new state with the activeOption set with the option before this one set in activeOption in oldState if the keyCode is \"Up Arrow\" on \"ACTIVE_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: false,\r\n                    options,\r\n                    activeOption: options[1],\r\n                },\r\n            ];\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.active,\r\n                payload: _.extend({}, defaultPayload, {keyCode: keyCode.upArrow}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (currentDropdownSearch: IDropdownSearchState) =>\r\n                        currentDropdownSearch.id === action.payload.id &&\r\n                        currentDropdownSearch.activeOption.value === options[0].value &&\r\n                        !currentDropdownSearch.setFocusOnDropdownButton &&\r\n                        currentDropdownSearch.isOpened\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should stay action on the last element if the keyCode is \"Down Arrow\" on \"ACTIVE_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: true,\r\n                    options,\r\n                    activeOption: options[options.length - 1],\r\n                    setFocusOnDropdownButton: false,\r\n                    filterText: '',\r\n                },\r\n            ];\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.active,\r\n                payload: _.extend({}, defaultPayload, {keyCode: keyCode.downArrow}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (currentDropdownSearch: IDropdownSearchState) =>\r\n                        currentDropdownSearch.id === action.payload.id &&\r\n                        currentDropdownSearch.activeOption &&\r\n                        currentDropdownSearch.activeOption.value === options[options.length - 1].value &&\r\n                        !currentDropdownSearch.setFocusOnDropdownButton &&\r\n                        currentDropdownSearch.isOpened\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should close the dropdown and remove the activeOption if the keyCode is \"Up Arrow\" with the first option on \"ACTIVE_DROPDOWN_SEARCH\"', () => {\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: true,\r\n                    options,\r\n                    activeOption: options[0],\r\n                },\r\n            ];\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.active,\r\n                payload: _.extend({}, defaultPayload, {keyCode: keyCode.upArrow}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (currentDropdownSearch: IDropdownSearchState) =>\r\n                        currentDropdownSearch.id === action.payload.id &&\r\n                        !currentDropdownSearch.isOpened &&\r\n                        currentDropdownSearch.setFocusOnDropdownButton\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should close the dropdown if the keyCode is \"Escape\" on ACTIVE_DROPDOWN_SEARCH', () => {\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: true,\r\n                    options,\r\n                    activeOption: options[0],\r\n                },\r\n            ];\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.active,\r\n                payload: _.extend({}, defaultPayload, {keyCode: keyCode.escape}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(\r\n                dropdownSearchState.filter(\r\n                    (currentDropdownSearch: IDropdownSearchState) =>\r\n                        currentDropdownSearch.id === action.payload.id && !currentDropdownSearch.isOpened\r\n                ).length\r\n            ).toBe(1);\r\n        });\r\n\r\n        it('should return oldstate with activeOption undefined and setFocusOnDropdownButton false if the keyCode is equal to -1 on ACTIVE_DROPDOWN_SEARCH', () => {\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: false,\r\n                    options,\r\n                    activeOption: options[0],\r\n                },\r\n            ];\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.active,\r\n                payload: _.extend({}, defaultPayload, {keyCode: -1}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(dropdownSearchState[0]).toEqual(\r\n                _.extend({}, oldState[0], {\r\n                    activeOption: undefined,\r\n                    setFocusOnDropdownButton: false,\r\n                })\r\n            );\r\n        });\r\n\r\n        it('should return the oldState if the keyCode is not -1 or one of the keyCode for enter, tab, up_arrow and down_arrow', () => {\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'new-dropdown-search',\r\n                    isOpened: false,\r\n                    options,\r\n                    activeOption: options[0],\r\n                },\r\n            ];\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.active,\r\n                payload: _.extend({}, defaultPayload, {keyCode: 1231}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState.length).toBe(oldState.length);\r\n            expect(dropdownSearchState[0]).toEqual(oldState[0]);\r\n        });\r\n\r\n        it('should return old state if the id does not match with a multiselect action', () => {\r\n            const oldState: IDropdownSearchState[] = [\r\n                {\r\n                    id: 'no-match',\r\n                    isOpened: false,\r\n                    options,\r\n                    activeOption: options[0],\r\n                },\r\n            ];\r\n            const action: IReduxAction<IOptionsDropdownSearchPayload> = {\r\n                type: DropdownSearchActions.multiSelect,\r\n                payload: _.extend({}, defaultPayload, {addedSelectedOption: options[0]}),\r\n            };\r\n            const dropdownSearchState: IDropdownSearchState[] = dropdownsSearchReducer(oldState, action);\r\n\r\n            expect(dropdownSearchState).toEqual(oldState);\r\n        });\r\n\r\n        describe('utility functions', () => {\r\n            describe('get displayed options', () => {\r\n                it('should return all the options if selectedOptions is empty', () => {\r\n                    const state: IDropdownSearchState = {\r\n                        id: 'new-dropdown-search',\r\n                        options,\r\n                    };\r\n\r\n                    expect(getDisplayedOptions(state)).toEqual(options);\r\n                });\r\n\r\n                it('should return only the options that are not selected', () => {\r\n                    const state: IDropdownSearchState = {\r\n                        id: 'new-dropdown-search',\r\n                        options: [{...options[0], selected: true, hidden: true}, options[1], options[2]],\r\n                    };\r\n\r\n                    expect(getDisplayedOptions(state)).toEqual([options[1], options[2]]);\r\n                });\r\n\r\n                it('should return only the options in the right order', () => {\r\n                    const state: IDropdownSearchState = {\r\n                        id: 'new-dropdown-search',\r\n                        options: [options[0], {...options[1], selected: true, hidden: true}, options[2]],\r\n                    };\r\n\r\n                    expect(getDisplayedOptions(state)).toEqual([options[0], options[2]]);\r\n                });\r\n            });\r\n\r\n            describe('deselect last selected option', () => {\r\n                it('should return an array of option without the last one', () => {\r\n                    const optionToBeRemoved: IDropdownOption = {\r\n                        value: 'value',\r\n                        displayValue: 'display',\r\n                        selected: true,\r\n                    };\r\n\r\n                    const selectedOptions: IDropdownOption[] = [...options, optionToBeRemoved];\r\n\r\n                    expect(deselectLastSelectedOption(selectedOptions)).toEqual([\r\n                        ...options,\r\n                        {...optionToBeRemoved, selected: false, hidden: false},\r\n                    ]);\r\n                });\r\n\r\n                it('should return an array equals to the one passed if there are no selected options', () => {\r\n                    const selectedOptions: IDropdownOption[] = [].concat(options);\r\n\r\n                    expect(deselectLastSelectedOption(selectedOptions)).toEqual(options);\r\n                });\r\n            });\r\n\r\n            describe('add unique selected option', () => {\r\n                it('should add a custom selected option', () => {\r\n                    const opts: IDropdownOption[] = [];\r\n                    const value = 'Display value';\r\n\r\n                    expect(\r\n                        _.findWhere(addUniqueSelectedOption(opts, value), {value, selected: true, custom: true})\r\n                    ).toBeDefined();\r\n                });\r\n\r\n                it('should not add a custom selected option if another one with the same value is present', () => {\r\n                    const newOptions: IDropdownOption[] = [options[0]];\r\n\r\n                    expect(addUniqueSelectedOption(newOptions, options[0].value).length).toBe(1);\r\n                });\r\n\r\n                it('should add a custom selected option when reselecting values and value does not exist', () => {\r\n                    const expectedOption: IDropdownOption = {value: 'custom', displayValue: 'A custom value'};\r\n                    const newOptions: IDropdownOption[] = [options[0]];\r\n\r\n                    const resultingOptions: IDropdownOption[] = multiSelectOption(newOptions, expectedOption);\r\n\r\n                    expect(resultingOptions.length).toBe(2);\r\n                    expect(resultingOptions[1].value).toBe(expectedOption.value);\r\n                    expect(resultingOptions[1].displayValue).toBe(expectedOption.displayValue);\r\n                    expect(resultingOptions[1].selected).toBe(true);\r\n                });\r\n            });\r\n\r\n            describe('deselect all options', () => {\r\n                it('should return an array with all option unselected', () => {\r\n                    const optionsToDeselect: IDropdownOption[] = [\r\n                        {...options[0], selected: true},\r\n                        {...options[1], selected: true},\r\n                        {...options[2], selected: true},\r\n                    ];\r\n\r\n                    expect(_.where(deselectAllOptions(optionsToDeselect), {selected: true}).length).toBe(0);\r\n                });\r\n\r\n                it('should remove the custom options', () => {\r\n                    const optionsToDeselect: IDropdownOption[] = [\r\n                        {...options[0], selected: true},\r\n                        {...options[1], selected: true, custom: true},\r\n                        {...options[2], selected: true, custom: true},\r\n                    ];\r\n\r\n                    const expectedDeselectedOptions: IDropdownOption[] = [\r\n                        {...options[0], selected: false, hidden: false},\r\n                    ];\r\n\r\n                    expect(deselectAllOptions(optionsToDeselect)).toEqual(expectedDeselectedOptions);\r\n                });\r\n            });\r\n\r\n            describe('deselect option', () => {\r\n                it('should return an array with the right option unselected', () => {\r\n                    const optionsToDeselect: IDropdownOption[] = [\r\n                        {...options[0], selected: true},\r\n                        {...options[1], selected: true},\r\n                        {...options[2], selected: true},\r\n                    ];\r\n\r\n                    expect(\r\n                        _.where(deselectOption(optionsToDeselect, options[0].value), {\r\n                            value: options[0].value,\r\n                            selected: false,\r\n                            hidden: false,\r\n                        }).length\r\n                    ).toBe(1);\r\n                });\r\n\r\n                it('should remove the option if it is custom', () => {\r\n                    const optionsToDeselect: IDropdownOption[] = [\r\n                        {...options[0], selected: true},\r\n                        {...options[1], selected: true},\r\n                        {...options[2], selected: true, custom: true},\r\n                    ];\r\n\r\n                    expect(\r\n                        _.find(deselectOption(optionsToDeselect, options[2].value), {value: options[2].value})\r\n                    ).toBeUndefined();\r\n                });\r\n            });\r\n\r\n            describe('isNotCustomOption', () => {\r\n                let customOption: IDropdownOption;\r\n\r\n                beforeEach(() => {\r\n                    customOption = {value: 'test', custom: true, selected: false};\r\n                });\r\n\r\n                it('should return false if the option is custom and unselected by default', () => {\r\n                    expect(isNotCustomOption(customOption)).toBe(false);\r\n                });\r\n\r\n                it('should return false if the option is custom and selected by default', () => {\r\n                    customOption.selected = true;\r\n                    expect(isNotCustomOption(customOption)).toBe(false);\r\n                });\r\n\r\n                it('should return false if the option is custom and unselected, and includeSelected is set to false', () => {\r\n                    expect(isNotCustomOption(customOption, false)).toBe(false);\r\n                });\r\n\r\n                it('should return true if the option is custom and selected, and includeSelected is set to false', () => {\r\n                    customOption.selected = true;\r\n                    expect(isNotCustomOption(customOption, false)).toBe(true);\r\n                });\r\n\r\n                it('should return true if the option is not custom', () => {\r\n                    const optionNotCustom = _.extend(customOption, {custom: false});\r\n                    expect(isNotCustomOption(optionNotCustom)).toBe(true);\r\n                    expect(isNotCustomOption(optionNotCustom)).toBe(true);\r\n                });\r\n            });\r\n\r\n            describe('removeCustomOptions', () => {\r\n                const supportSingleCustomOption = true;\r\n\r\n                let testOptions: IDropdownOption[];\r\n\r\n                beforeEach(() => {\r\n                    testOptions = [\r\n                        {value: 'test 1', displayValue: 'display 1', custom: true, selected: true},\r\n                        {value: 'test 2', displayValue: 'display 2', custom: true, selected: false},\r\n                        {value: 'test 3', displayValue: 'display 3', custom: false, selected: false},\r\n                        {value: 'test 4', displayValue: 'display 4', custom: false, selected: true},\r\n                    ];\r\n                });\r\n\r\n                it('should return the same options if supportSingleCustomOption is false', () => {\r\n                    expect(removeCustomOptions(testOptions, !supportSingleCustomOption)).toEqual(testOptions);\r\n                });\r\n\r\n                describe('with supportSingleCustomOption', () => {\r\n                    it('should return only the non custom options by default', () => {\r\n                        expect(removeCustomOptions(testOptions, supportSingleCustomOption)).toEqual(\r\n                            testOptions.filter((option: IDropdownOption) => !option.custom)\r\n                        );\r\n                    });\r\n\r\n                    it('should return the non custom options with the selected custom option if includeSelected is set to false', () => {\r\n                        expect(removeCustomOptions(testOptions, supportSingleCustomOption, false)).toEqual(\r\n                            testOptions.filter((option: IDropdownOption) => !option.custom || option.selected)\r\n                        );\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe('removeCustomOptions', () => {\r\n                const supportSingleCustomOption = true;\r\n\r\n                let testOptions: IDropdownOption[];\r\n\r\n                beforeEach(() => {\r\n                    testOptions = [\r\n                        {value: 'test 1', displayValue: 'display 1', custom: true, selected: true},\r\n                        {value: 'test 2', displayValue: 'display 2', custom: true, selected: false},\r\n                        {value: 'test 3', displayValue: 'display 3', custom: false, selected: false},\r\n                        {value: 'test 4', displayValue: 'display 4', custom: false, selected: true},\r\n                    ];\r\n                });\r\n\r\n                it('should return the same options if supportSingleCustomOption is false', () => {\r\n                    expect(removeCustomOptions(testOptions, !supportSingleCustomOption)).toEqual(testOptions);\r\n                });\r\n\r\n                describe('with supportSingleCustomOption', () => {\r\n                    it('should return only the non custom options by default', () => {\r\n                        expect(removeCustomOptions(testOptions, supportSingleCustomOption)).toEqual(\r\n                            testOptions.filter((option: IDropdownOption) => !option.custom)\r\n                        );\r\n                    });\r\n\r\n                    it('should return the non custom options with the selected custom option if includeSelected is set to false', () => {\r\n                        expect(removeCustomOptions(testOptions, supportSingleCustomOption, false)).toEqual(\r\n                            testOptions.filter((option: IDropdownOption) => !option.custom || option.selected)\r\n                        );\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe('shouldHideOnFilter', () => {\r\n                const testFilterText = 'testFilterText';\r\n\r\n                let testOption: IDropdownOption;\r\n\r\n                beforeEach(() => {\r\n                    testOption = {value: 'test'};\r\n                });\r\n\r\n                it('should return false if the option is not default and not custom, regardless of the filterText', () => {\r\n                    expect(shouldHideOnFilter(testOption, testFilterText)).toBe(false);\r\n\r\n                    testOption.value = testFilterText;\r\n                    expect(shouldHideOnFilter(testOption, testFilterText)).toBe(false);\r\n                });\r\n\r\n                it('should return true if the option is default regardless of the filterText', () => {\r\n                    testOption.default = true;\r\n                    expect(shouldHideOnFilter(testOption, testFilterText)).toBe(true);\r\n\r\n                    testOption.default = true;\r\n                    testOption.value = testFilterText;\r\n                    expect(shouldHideOnFilter(testOption, testFilterText)).toBe(true);\r\n                });\r\n\r\n                it('should return false if the option is custom and its value does not equal to the filterText', () => {\r\n                    testOption.custom = true;\r\n                    expect(shouldHideOnFilter(testOption, testFilterText)).toBe(false);\r\n                });\r\n\r\n                it('should return true if the option is custom and its value equals the filterText', () => {\r\n                    testOption.custom = true;\r\n                    testOption.value = testFilterText;\r\n                    expect(shouldHideOnFilter(testOption, testFilterText)).toBe(true);\r\n                });\r\n            });\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=352.bundle.js.map