(window.webpackJsonp=window.webpackJsonp||[]).push([[448],{1558:function(n,t,e){"use strict";e.r(t),t.default="import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {\r\n    AutocompleteConnected,\r\n    IItemBoxProps,\r\n    IMultilineSingleBoxProps,\r\n    MultilineBox,\r\n    multilineBoxContainer,\r\n    multilineBoxWithDnD,\r\n    multilineBoxWithRemoveButton,\r\n} from '../..';\r\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\r\nimport {ExamplesStore} from '../../../../docs/Store';\r\nimport {Button} from '../../button/Button';\r\nimport {IMultilineInputValue, MultilineInput} from '../../multilineInput/MultilineInput';\r\nimport {ISplitInput, SplitMultilineInput} from '../../multilineInput/SplitMultilineInput';\r\nimport {Section} from '../../section/Section';\r\nimport {withDirtyInputHOC} from '../../validation/hoc/WithDirtyInputHOC';\r\nimport {ValidationSelectors} from '../../validation/ValidationSelectors';\r\nimport {Input} from '../Input';\r\nimport {setDisabledInput} from '../InputActions';\r\nimport {InputConnected} from '../InputConnected';\r\nimport {Label} from '../Label';\r\n\r\nexport const TextInputExamples: ExampleComponent = () => (\r\n    <Section title=\"Inputs Examples\">\r\n        <SimpleInputDisconnected />\r\n        <InputsConnected />\r\n        <InputsWithDirtyManagement />\r\n        <MultilineInputComponents />\r\n        <MultilineBoxExamples />\r\n    </Section>\r\n);\r\nTextInputExamples.description =\r\n    'Text Inputs allow users to enter a single line of letters, numbers, or symbols. They are used to submit short character strings.';\r\n\r\nexport const MultilineInputComponents: React.FunctionComponent = () => (\r\n    <Section level={2} title=\"Multiline Input Examples\">\r\n        <MultilineInputExample />\r\n        <SplitMultilineInputExamples />\r\n    </Section>\r\n);\r\n\r\ninterface IMultilineInputWithMultilineBox {\r\n    [1]: string;\r\n    [2]: string;\r\n    [3]?: string;\r\n}\r\n\r\ntype IMultilineInputWithMultilineBoxData = Array<IMultilineSingleBoxProps<IMultilineInputWithMultilineBox>>;\r\n\r\nconst autoCompleteItems: IItemBoxProps[] = [\r\n    {displayValue: 'Test', value: '0'},\r\n    {displayValue: 'Test One', value: '1'},\r\n    {displayValue: 'Disabled', value: 'disabled', disabled: true},\r\n    {displayValue: 'Three', value: '3'},\r\n    {displayValue: 'Four', value: '4'},\r\n    {displayValue: 'Five', value: '5'},\r\n    {displayValue: 'Six', value: '6'},\r\n    {displayValue: 'Seven', value: '7'},\r\n];\r\n\r\n// start-print\r\n\r\nconst SimpleInputDisconnected: React.FunctionComponent = () => {\r\n    const [inputValue, setInputValue] = React.useState(null);\r\n    const [inputClasses, setInputClasses] = React.useState([]);\r\n\r\n    const onChange = () => {\r\n        const innerInput = inputValue.getInnerValue();\r\n        setInputClasses(innerInput ? ['valid'] : ['invalid']);\r\n    };\r\n\r\n    return (\r\n        <Section level={3} title=\"A simple input with a local state\">\r\n            <Input\r\n                id=\"local-state-input\"\r\n                innerInputClasses={inputClasses}\r\n                placeholder=\"Please, do not leave me empty!\"\r\n                ref={(input: Input) => setInputValue(input)}\r\n                onKeyUp={() => onChange()}\r\n            >\r\n                <Label validMessage=\"Great!\" invalidMessage=\"The input box must not be empty.\">\r\n                    An Input Box Label\r\n                </Label>\r\n            </Input>\r\n        </Section>\r\n    );\r\n};\r\n\r\nconst InputsConnected: React.FunctionComponent = () => {\r\n    const validate = (value: any) => !!value;\r\n\r\n    return (\r\n        <Section>\r\n            <Section level={2} title=\"Inputs connected to store.\">\r\n                <Section level={3} title=\"A simple input connected to the store\">\r\n                    <InputConnected\r\n                        id=\"super-input\"\r\n                        validate={validate}\r\n                        labelTitle=\"I am a connected input, and validated in real time.\"\r\n                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                        innerInputClasses=\"mb2\"\r\n                        validateOnChange\r\n                    />\r\n                </Section>\r\n\r\n                <Section level={3} title=\"A simple input disabled on mount.\">\r\n                    <InputConnected\r\n                        id=\"super-input-2\"\r\n                        labelTitle=\"I am the disabled input label.\"\r\n                        disabledOnMount={true}\r\n                        innerInputClasses=\"mb2\"\r\n                        defaultValue=\"I am disabled on mount.\"\r\n                    />\r\n                </Section>\r\n\r\n                <Section level={3} title=\"A connect input that you can toggle at will.\">\r\n                    <Button\r\n                        name={'Toggle input'}\r\n                        enabled\r\n                        onClick={() => {\r\n                            ExamplesStore.dispatch(\r\n                                setDisabledInput(\r\n                                    'super-input-3',\r\n                                    !_.findWhere(ExamplesStore.getState().inputs, {id: 'super-input-3'}).disabled\r\n                                )\r\n                            );\r\n                        }}\r\n                    />\r\n                    <InputConnected\r\n                        id=\"super-input-3\"\r\n                        validate={validate}\r\n                        labelTitle=\"I am the input label\"\r\n                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                        defaultValue=\"Awesome connected feature\"\r\n                        validateOnChange\r\n                    />\r\n                </Section>\r\n                <Section level={3} title=\"An input with autoCompletion\">\r\n                    <AutocompleteConnected id=\"autocomplete-input\" items={autoCompleteItems}>\r\n                        <Label>An autocomplete</Label>\r\n                    </AutocompleteConnected>\r\n                </Section>\r\n            </Section>\r\n        </Section>\r\n    );\r\n};\r\n\r\nconst InputsWithDirtyManagement: React.FunctionComponent = () => (\r\n    <Section level={2} title=\"Inputs with dirty management functionnalities\">\r\n        <InputWithDirty id=\"dirtyinput\" />\r\n        <MessageWhenInputIsDirty />\r\n    </Section>\r\n);\r\n\r\nconst MessageWhenInputIsDirty = connect(\r\n    createStructuredSelector({\r\n        isDirty: ValidationSelectors.isDirty(['dirtyinput']),\r\n    })\r\n)(({isDirty}) => isDirty && <div>I am now dirty!</div>);\r\n\r\nconst InputWithDirty = withDirtyInputHOC(InputConnected);\r\n\r\nconst MultilineInputExample: React.FunctionComponent = () => {\r\n    const [inputValues, setInputValues] = React.useState([]);\r\n\r\n    return (\r\n        <Section level={3} title=\"A multiline input with local state\">\r\n            <MultilineInput\r\n                id=\"multiline-input\"\r\n                title=\"A Multiline Input label\"\r\n                placeholder=\"Enter a value\"\r\n                values={inputValues}\r\n                onChange={(inputValuesWithNewValue: IMultilineInputValue[]) =>\r\n                    setInputValues(inputValuesWithNewValue.map((value) => value))\r\n                }\r\n            />\r\n        </Section>\r\n    );\r\n};\r\n\r\nconst inputs: ISplitInput[] = [\r\n    {\r\n        id: '1',\r\n        label: 'First input',\r\n        placeholder: 'enter a value',\r\n        validation: (value: string) => !!value,\r\n        validationMessage: 'This cannot be empty',\r\n    },\r\n    {\r\n        id: '2',\r\n        label: 'Second input',\r\n        placeholder: 'enter another value',\r\n    },\r\n];\r\n\r\nconst InitialValues = [\r\n    {\r\n        '1': 'First Multiline Input: first value',\r\n        '2': 'First Multiline Input: second value',\r\n        '3': 'First Multiline Input: third value',\r\n    },\r\n    {\r\n        '1': 'Second Multiline Input: first value',\r\n        '2': 'Second Multiline Input: second value',\r\n        '3': 'Second Multiline Input: third value',\r\n    },\r\n];\r\n\r\nconst SplitMultilineInputExamples: React.FunctionComponent = () => {\r\n    return (\r\n        <>\r\n            <Section level={3} title=\"A split multiline input with default values\">\r\n                <SplitMultilineInput inputs={inputs} defaultValues={InitialValues} />\r\n            </Section>\r\n            <Section level={3} title=\"A split multiline input with 3 inputs\">\r\n                <SplitMultilineInput\r\n                    inputs={[...inputs, {id: '3', label: 'Third input', placeholder: 'enter yet another value'}]}\r\n                    defaultValues={[...InitialValues, {'1': 'One', '2': 'Two', '3': 'three'}]}\r\n                />\r\n            </Section>\r\n        </>\r\n    );\r\n};\r\n\r\nconst MultilineBoxWithFunctionnalities = _.compose(\r\n    multilineBoxContainer(),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxWithDnD()\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxWithCustomization = _.compose(\r\n    multilineBoxContainer({\r\n        containerNode: (child: React.ReactNode, data: any[], index: number) => (\r\n            <div key={`${data[index].id}Container`} className={'p2 bg-light-grey'}>\r\n                {child}\r\n            </div>\r\n        ),\r\n    })\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxExamples: React.FunctionComponent = () => {\r\n    return (\r\n        <Section level={2} title=\"Examples of Multiline Inputs built with the MultilineBox Component\">\r\n            <Section\r\n                className=\"mb0\"\r\n                level={3}\r\n                title=\"A multiline box of inputs with a default container, default props, a drag and drop and a remove button. It will add a new box on change of the last input\"\r\n            >\r\n                <MultilineBoxWithFunctionnalities<IMultilineInputWithMultilineBox>\r\n                    id=\"FirstMultilineBoxExample\"\r\n                    data={InitialValues}\r\n                    className=\"my2\"\r\n                    renderBody={(data: IMultilineInputWithMultilineBoxData, parentProps: {addNewBox: () => void}) =>\r\n                        _.map(data, (cData) => (\r\n                            <div key={cData.id}>\r\n                                <InputConnected\r\n                                    id={`${cData.id}1`}\r\n                                    classes=\"mt1 inline-block mx1\"\r\n                                    defaultValue={cData.props['1']}\r\n                                    validate={(value: string) => cData.props['1'] === value}\r\n                                    validateOnChange\r\n                                />\r\n                                <InputConnected\r\n                                    id={`${cData.id}2`}\r\n                                    classes=\"mt1 inline-block mx1\"\r\n                                    defaultValue={cData.props['2']}\r\n                                />\r\n                                <InputConnected\r\n                                    classes=\"mt2 mx1\"\r\n                                    id={`${cData.id}3`}\r\n                                    defaultValue={cData.props['3']}\r\n                                    onChange={(value: string) => {\r\n                                        if (value !== '' && cData.isLast) {\r\n                                            parentProps.addNewBox();\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    defaultProps={{\r\n                        '1': 'default',\r\n                        '2': 'props',\r\n                        '3': 'Will add a new box if you change this.',\r\n                    }}\r\n                />\r\n            </Section>\r\n            <Section\r\n                level={3}\r\n                title=\"A multiline box of inputs with a custom container. Will validate only when the value is the expected one\"\r\n            >\r\n                <MultilineBoxWithCustomization<IMultilineInputWithMultilineBox>\r\n                    id=\"secondMultilineBoxExample\"\r\n                    data={InitialValues}\r\n                    renderBody={(data: IMultilineInputWithMultilineBoxData, parentProps: {addNewBox: () => void}) =>\r\n                        _.map(data, (cData: IMultilineSingleBoxProps<IMultilineInputWithMultilineBox>) => (\r\n                            <div key={cData.id}>\r\n                                <InputConnected\r\n                                    id={`${cData.id}1`}\r\n                                    classes=\"mt1 mx1\"\r\n                                    defaultValue={cData.props['1']}\r\n                                    onChange={(value: string) => {\r\n                                        if (value === 'next' && cData.isLast) {\r\n                                            parentProps.addNewBox();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    }}\r\n                                />\r\n                                <InputConnected id={`${cData.id}2`} classes=\"mt1 mx1\" defaultValue={cData.props['2']} />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    defaultProps={{\r\n                        '1': \"Will create another box if you type 'next' here.\",\r\n                        '2': 'But not here.',\r\n                    }}\r\n                />\r\n            </Section>\r\n        </Section>\r\n    );\r\n};\r\n\r\n// stop-print\r\n"}}]);
//# sourceMappingURL=448.bundle.js.map