{"version":3,"sources":["webpack:///./src/components/input/tests/LabeledInput.spec.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/455.bundle.js","sourcesContent":["export default \"import {shallow} from 'enzyme';\\nimport * as React from 'react';\\nimport {Tooltip} from '../../tooltip/Tooltip';\\nimport {InputDescription} from '../InputDescription';\\nimport {LabeledInput} from '../LabeledInput';\\n\\ndescribe('LabeledInput', () => {\\n    const SOME_LABEL = '📺📽';\\n    const SOME_MESSAGE = '📜';\\n    const SOME_HELP_TEXT = '👞👟👡';\\n    const SOME_HEADER_CLASS = '🐦🐓🐤🐣';\\n\\n    describe('<LabeledInput />', () => {\\n        it('should render without errors', () => {\\n            expect(() => {\\n                shallow(<LabeledInput />);\\n            }).not.toThrow();\\n        });\\n    });\\n\\n    describe('<LabeledInput />', () => {\\n        it('should output label when specified', () => {\\n            const label = shallow(<LabeledInput label={SOME_LABEL} />);\\n            expect(label.find('header').text()).toContain(SOME_LABEL);\\n        });\\n\\n        it('should configure a tooltip with information prop when specified', () => {\\n            const label = shallow(<LabeledInput optionalInformation={SOME_LABEL} />);\\n            expect(label.find(Tooltip).props().title).toBe(SOME_LABEL);\\n        });\\n\\n        it('should output headerClassName on the header element when specified', () => {\\n            const label = shallow(<LabeledInput label={SOME_LABEL} headerClassName={SOME_HEADER_CLASS} />);\\n            expect(label.find('header').hasClass(SOME_HEADER_CLASS)).toBe(true);\\n        });\\n\\n        it('should not output a header when both label and information are not specified', () => {\\n            const label = shallow(<LabeledInput />);\\n            expect(label.find('header').exists()).toBe(false);\\n        });\\n\\n        it('should output message when specified', () => {\\n            const label = shallow(<LabeledInput message={SOME_MESSAGE} />);\\n            expect(\\n                label\\n                    .find(InputDescription)\\n                    .dive()\\n                    .text()\\n            ).toBe(SOME_MESSAGE);\\n        });\\n\\n        it('should output description when specified', () => {\\n            const label = shallow(<LabeledInput message={SOME_HELP_TEXT} />);\\n            expect(\\n                label\\n                    .find(InputDescription)\\n                    .dive()\\n                    .text()\\n            ).toBe(SOME_HELP_TEXT);\\n        });\\n\\n        it('should output both message and description when specified', () => {\\n            const label = shallow(<LabeledInput helpText={SOME_HELP_TEXT} message={SOME_MESSAGE} />);\\n            expect(\\n                label\\n                    .find(InputDescription)\\n                    .first()\\n                    .dive()\\n                    .text()\\n            ).toBe(SOME_MESSAGE);\\n            expect(\\n                label\\n                    .find(InputDescription)\\n                    .last()\\n                    .dive()\\n                    .text()\\n            ).toBe(SOME_HELP_TEXT);\\n        });\\n\\n        it('should not output message and description when not specified', () => {\\n            const label = shallow(<LabeledInput />);\\n            expect(label.find(InputDescription).exists()).toBe(false);\\n        });\\n\\n        it('should render children', () => {\\n            const SomeComponent = () => <div>COMPONENT</div>;\\n            const form = shallow(\\n                <LabeledInput>\\n                    <SomeComponent />\\n                </LabeledInput>\\n            );\\n\\n            expect(form.find(SomeComponent)).toBeDefined();\\n        });\\n    });\\n});\\n\""],"sourceRoot":""}