(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{1306:function(n,r,e){"use strict";e.r(r),r.default="import * as React from 'react';\r\n\r\nimport {XYChartContext} from './XYChart';\r\n\r\nexport interface InfoLineProps {\r\n    value: number;\r\n    label?: string;\r\n    stroke?: string;\r\n    isVertical?: boolean;\r\n    padding?: number;\r\n}\r\n\r\nexport const InfoLine: React.FunctionComponent<InfoLineProps> = ({\r\n    stroke = '#000',\r\n    isVertical = false,\r\n    label = '',\r\n    padding = 30,\r\n    value,\r\n}: InfoLineProps) => {\r\n    const {xDomain, yDomain, xScale, yScale, height} = React.useContext(XYChartContext);\r\n\r\n    return (\r\n        <g className=\"info-line\">\r\n            <line\r\n                stroke={stroke}\r\n                strokeDasharray=\"6\"\r\n                x1={isVertical ? xScale(value) : 0 - padding}\r\n                x2={isVertical ? xScale(value) : xScale(xDomain[1]) + padding}\r\n                y1={isVertical ? 0 - padding : yScale(value)}\r\n                y2={isVertical ? height + padding : yScale(value)}\r\n            />\r\n            {label && !isVertical && (\r\n                <text textAnchor=\"end\" x={xScale(xDomain[1])} y={yScale(value) - 4}>\r\n                    {label}\r\n                </text>\r\n            )}\r\n            {label && isVertical && (\r\n                <text textAnchor=\"end\" transform=\"rotate(-90)\" x={yScale(yDomain[1])} y={xScale(value) - 4}>\r\n                    {label}\r\n                </text>\r\n            )}\r\n        </g>\r\n    );\r\n};\r\nInfoLine.displayName = 'InfoLine';\r\n"}}]);
//# sourceMappingURL=196.bundle.js.map