(window.webpackJsonp=window.webpackJsonp||[]).push([[467],{1572:function(t,e,n){"use strict";n.r(e),e.default="import {mount, ReactWrapper, shallow, ShallowWrapper} from 'enzyme';\r\nimport * as moment from 'moment';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport * as s from 'underscore.string';\r\nimport {TestUtils} from '../../../utils/tests/TestUtils';\r\nimport {ILastUpdatedProps, LAST_UPDATE_LABEL, LastUpdated} from '../LastUpdated';\r\n\r\ndescribe('LastUpdated', () => {\r\n    describe('<LastUpdated />', () => {\r\n        let lastUpdatedWrapper: ShallowWrapper<ILastUpdatedProps, any>;\r\n        let lastUpdated: ReactWrapper<ILastUpdatedProps, any>;\r\n        let time: Date;\r\n\r\n        it('should render without errors', () => {\r\n            expect(() => {\r\n                shallow(<LastUpdated />);\r\n            }).not.toThrow();\r\n        });\r\n\r\n        it('should display the time passed as a prop', () => {\r\n            time = TestUtils.randomDate();\r\n\r\n            const expectedTime = moment(time).format('LTS');\r\n\r\n            lastUpdatedWrapper = shallow(<LastUpdated time={time} />);\r\n\r\n            expect(s.contains(lastUpdatedWrapper.html(), expectedTime));\r\n        });\r\n\r\n        it('should add the current time if we do not pass it the time prop', () => {\r\n            jasmine.clock().install();\r\n            time = TestUtils.randomDate();\r\n            jasmine.clock().mockDate(time);\r\n\r\n            const expectedTime = moment(time).format('LTS');\r\n\r\n            lastUpdatedWrapper = shallow(<LastUpdated />);\r\n\r\n            expect(s.contains(lastUpdatedWrapper.html(), expectedTime));\r\n\r\n            jasmine.clock().uninstall();\r\n        });\r\n\r\n        it('should use the label passed as a prop to display the time, else it uses the default label', () => {\r\n            lastUpdatedWrapper = shallow(<LastUpdated />);\r\n            expect(s.contains(lastUpdatedWrapper.html(), LAST_UPDATE_LABEL));\r\n\r\n            const expectedLabel = 'Last update was at =>';\r\n            lastUpdatedWrapper.setProps({label: expectedLabel});\r\n            expect(s.contains(lastUpdatedWrapper.html(), expectedLabel));\r\n        });\r\n\r\n        it('should trigger onRender prop when mounting', () => {\r\n            const renderSpy = jasmine.createSpy('onRender');\r\n            lastUpdated = mount(<LastUpdated />, {attachTo: document.getElementById('App')});\r\n\r\n            expect(() => (lastUpdated.instance() as LastUpdated).componentWillMount()).not.toThrow();\r\n\r\n            lastUpdated.unmount();\r\n            lastUpdated.setProps({onRender: renderSpy});\r\n            lastUpdated.mount();\r\n            expect(renderSpy.calls.count()).toBe(1);\r\n        });\r\n\r\n        it('should trigger onDestroy prop when unmounting', () => {\r\n            const destroySpy = jasmine.createSpy('onDestroy');\r\n            lastUpdated = mount(<LastUpdated />, {attachTo: document.getElementById('App')});\r\n            expect(() => (lastUpdated.instance() as LastUpdated).componentWillUnmount()).not.toThrow();\r\n\r\n            lastUpdated.unmount();\r\n            lastUpdated.setProps({onDestroy: destroySpy});\r\n            lastUpdated.mount();\r\n            lastUpdated.unmount();\r\n            expect(destroySpy.calls.count()).toBe(1);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=467.bundle.js.map