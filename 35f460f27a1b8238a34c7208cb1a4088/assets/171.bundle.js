(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{1283:function(n,t,e){"use strict";e.r(t),t.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Svg} from '../../svg/Svg';\r\nimport {BlankSlate, IBlankSlateProps} from '../BlankSlate';\r\n\r\ndescribe('BlankSlate', () => {\r\n    let blankSlateComponent: ReactWrapper<IBlankSlateProps, any>;\r\n\r\n    it('should render without errors', () => {\r\n        expect(() => {\r\n            shallow(<BlankSlate />);\r\n        }).not.toThrow();\r\n    });\r\n\r\n    describe('<Blankslate /> with default props', () => {\r\n        beforeEach(() => {\r\n            blankSlateComponent = mount(<BlankSlate />, {attachTo: document.getElementById('App')});\r\n        });\r\n\r\n        it('should render the default title', () => {\r\n            expect(blankSlateComponent.find('h1').text()).toEqual('');\r\n        });\r\n\r\n        it('should render without the class added to adjust the style with a modal', () => {\r\n            expect(blankSlateComponent.find('.mod-header-padding').length).toBe(0);\r\n        });\r\n\r\n        it('should render without description', () => {\r\n            expect(blankSlateComponent.find('p').length).toBe(0);\r\n        });\r\n\r\n        it('should render without button', () => {\r\n            expect(blankSlateComponent.find('button').length).toBe(0);\r\n        });\r\n    });\r\n\r\n    describe('<Blankslate /> with custom props', () => {\r\n        const customProps = {\r\n            title: 'title',\r\n            description: 'description test',\r\n            buttons: [\r\n                {\r\n                    name: 'test',\r\n                    primary: true,\r\n                    enabled: true,\r\n                },\r\n            ],\r\n            withModal: false,\r\n            svgName: 'tips',\r\n        };\r\n\r\n        const renderBlankSlate = (props: IBlankSlateProps = {}) => {\r\n            blankSlateComponent = mount(<BlankSlate {..._.defaults(props, customProps)} />, {\r\n                attachTo: document.getElementById('App'),\r\n            });\r\n        };\r\n\r\n        it('should render the custom title', () => {\r\n            renderBlankSlate();\r\n            expect(blankSlateComponent.find('h1').text()).toEqual(customProps.title);\r\n        });\r\n\r\n        it('should add the class to adjust the style with a modal', () => {\r\n            renderBlankSlate({\r\n                withModal: true,\r\n            });\r\n            expect(blankSlateComponent.find('.mod-header-padding').length).toBe(1);\r\n        });\r\n\r\n        it('should render the custom description', () => {\r\n            renderBlankSlate();\r\n            expect(blankSlateComponent.find('p').length).toBe(1);\r\n            expect(blankSlateComponent.find('p').text()).toEqual(customProps.description);\r\n        });\r\n\r\n        it('should render the custom description with a link', () => {\r\n            renderBlankSlate({\r\n                description: (\r\n                    <span>\r\n                        This is a description with a link to <a href=\"https://www.google.com\"></a>this website.\r\n                    </span>\r\n                ),\r\n            });\r\n\r\n            expect(blankSlateComponent.find('p').text()).toEqual('This is a description with a link to this website.');\r\n        });\r\n\r\n        it('should render the button', () => {\r\n            renderBlankSlate();\r\n            expect(blankSlateComponent.find('button').length).toBe(1);\r\n        });\r\n\r\n        it('should render two buttons', () => {\r\n            renderBlankSlate({\r\n                buttons: [\r\n                    {\r\n                        name: 'test',\r\n                        primary: true,\r\n                        enabled: true,\r\n                    },\r\n                    {\r\n                        name: 'test 2',\r\n                        primary: true,\r\n                        enabled: true,\r\n                    },\r\n                ],\r\n            });\r\n            expect(blankSlateComponent.find('button').length).toBe(2);\r\n        });\r\n\r\n        it('should render the icon', () => {\r\n            renderBlankSlate();\r\n            expect(blankSlateComponent.find(Svg).length).toBe(1);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=171.bundle.js.map