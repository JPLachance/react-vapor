{"version":3,"sources":["webpack:///./src/components/select/examples/MultiSelectExamples.tsx?ea99","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/utils/UUID.ts?611d","webpack:///./src/components/filterBox/FilterBox.tsx?d7c0","webpack:///./src/components/filterBox/FilterBoxConnected.tsx?7041","webpack:///./src/components/select/SingleSelectConnected.tsx?7086","webpack:///./src/components/dragAndDrop/DnDUtils.ts?6815","webpack:///./src/components/dropdownSearch/MultiSelectDropdownSearch/SelectedOption.tsx?08de","webpack:///./src/components/flatSelect/FlatSelectConnected.tsx?87e7","webpack:///./src/components/flatSelect/FlatSelect.tsx?30fc","webpack:///./src/components/flatSelect/FlatSelectOption.tsx?11b2","webpack:///./src/components/select/MultiSelectConnected.tsx?5600","webpack:///./src/components/dropdownSearch/MultiSelectDropdownSearch/DraggableSelectedOption.tsx?56a6","webpack:///./src/components/select/hoc/SelectWithFilter.tsx?f401","webpack:///./src/components/select/hoc/SelectWithPredicate.tsx?7883","webpack:///./src/components/select/hoc/SelectComponents.tsx?4179"],"names":["defaultItems","displayValue","value","disabled","defaultFlatSelectOptions","id","generate","option","content","selected","props","state","second","item","hoc","append","className","first","drag","render","items","this","placeholder","deselectAllTooltipText","sortable","customValues","defaultCustomValues","matchFilter","filter","indexOf","options","matchPredicate","p","i","multiSelectStyle","width","selectClasses","repeat","predicate","parseInt","description","ButtonPropsToOmit","onClick","enabled","getTemplate","buttonClass","buttonElement","buttonAttrs","link","target","rel","href","name","children","tooltip","title","placement","tooltipPlacement","getClasses","primary","small","classes","defaultProps","d","Date","now","replace","c","r","Math","random","floor","toString","handleChange","nextInputValue","filterInput","nextElementSibling","setAttribute","length","onFilterCallback","onFilter","clearValue","focus","handleOnBlur","onBlur","handleOnKeyDown","e","onKeyDown","handleOnKeyUp","onKeyUp","placeCursorAtEndOfInputValue","input","temp","componentWillMount","onRender","componentWillUnmount","onDestroy","componentWillReceiveProps","nextProps","filterText","inputMaxWidth","maxWidth","filterPlaceholder","filterBoxContainerClasses","containerClasses","filterInputClasses","truncate","svgClearClasses","hidden","style","withTitleOnInput","undefined","ref","type","onChange","currentTarget","onFocus","autoFocus","isAutoFocus","svgName","svgClass","debouncedFilterThrough","dispatch","FilterBoxConnected","ownProps","getFilterText","mergeProps","selectPropsKeys","mapStateToProps","customSelected","getListState","selectedOption","getListBoxSelected","mapDispatchToProps","deselect","getButton","showClear","canClear","buttonClasses","toggleClasses","noFixedWidth","buttonPrepend","prepend","getSelectedOptionElement","getDeselectOptionButton","handleDeselect","componentDidUpdate","prevProps","onSelectOptionCallback","button","isLoading","selectedDisplayValue","key","deselectTooltipText","noSpanWrapper","clear","SingleSelectConnected","context","DnDUtils","move","dragIndex","hoverIndex","list","callBack","moving","newOrder","splice","getBoxTarget","parameter","hover","monitor","component","getItem","index","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","getSelectedBoxSource","isDragging","beginDrag","parentDropTarget","TagControlContext","DecoratedClass","handleOnRemove","onRemoveClick","tooltipContent","count","label","tooltipLabel","Top","delayShow","FlatSelectConnected","selectedOptionId","getSelectedOptionId","defaultSelectedOptionId","onOptionClick","handleOnOptionClick","getOptions","flatSelectOption","group","optionPicker","selectable","makeMapStateToProps","getStateProps","getMultiSelectSelectedValues","onRemoveAll","onReorder","values","noDisabled","connectDropTarget","getSelectedOptionComponents","getRemoveAllSelectedOptionsButton","multi","getSelectedOptions","map","renderDraggableOption","renderOption","emptyPlaceholder","compact","MultiSelect","connect","dropTarget","MultiSelectConnected","selectedOptionSource","cardTarget","DraggableSelectedOptionType","DraggableSelectedOptionPropsToOmit","opacity","connectDragPreview","connectDragSource","DraggableSelectedOption","dragSource","dragPreview","SelectWithFilterPropsToOmit","selectWithFilter","Component","initialState","initialOwnProps","filterValue","isServer","getServerFilteredItems","getCustomItemsWithFilter","onRenderFilter","onDestroyFilter","onSelectCustomValue","dividerId","handleOnClick","onUpdate","addItemBoxCustomValue","addItemBox","addValueText","divider","noResultFilter","noResultFilterText","duplicateValue","duplicateText","noItems","noItemsText","getAddValueButton","filterButton","isDuplicateValue","pluck","concat","allValuesAreSelected","contains","filterBoxClassNames","mb2","noResultItem","highlight","newProps","hasFocusableChild","displayName","WrappedComponent","SelectWithPredicatePropsToOmit","selectWithPredicate","visible","SingleSelectWithFilter","SingleSelectWithPredicate","SingleSelectWithPredicateAndFilter","MultiSelectWithFilter","MultiSelectWithPredicate","MultiSelectWithPredicateAndFilter"],"mappings":"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","file":"assets/988.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {getReactNodeTextContent} from '../../../utils/JSXUtils';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {IFlatSelectOptionProps} from '../../flatSelect/FlatSelectOption';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {\r\n    MultiSelectWithFilter,\r\n    MultiSelectWithPredicate,\r\n    MultiSelectWithPredicateAndFilter,\r\n} from '../hoc/SelectComponents';\r\nimport {MultiSelectConnected} from '../MultiSelectConnected';\r\n\r\nconst defaultItems: IItemBoxProps[] = [\r\n    {displayValue: 'Test', value: '0'},\r\n    {displayValue: 'Test One', value: '1'},\r\n    {displayValue: 'Disabled', value: 'disabled', disabled: true},\r\n    {displayValue: 'Three', value: '3'},\r\n    {displayValue: 'Four', value: '4'},\r\n    {displayValue: 'Five', value: '5'},\r\n    {displayValue: 'Six', value: '6'},\r\n    {displayValue: 'Seven', value: '7'},\r\n];\r\n\r\nconst defaultFlatSelectOptions: IFlatSelectOptionProps[] = [\r\n    {id: UUID.generate(), option: {content: 'All'}, selected: true},\r\n    {id: UUID.generate(), option: {content: 'even'}},\r\n    {id: UUID.generate(), option: {content: 'odd'}},\r\n];\r\n\r\nexport interface IMultiSelectExamplesState {\r\n    first: IItemBoxProps[];\r\n    drag: IItemBoxProps[];\r\n    second: IItemBoxProps[];\r\n    hoc: IItemBoxProps[];\r\n}\r\n\r\nexport class MultiSelectExamples extends React.Component<{}, IMultiSelectExamplesState> {\r\n    static description =\r\n        'A multi-select component allows users to select one or more options from a set of predefined options, or, if relevant, to add custom options.';\r\n\r\n    constructor({props, state}: {props: {}; state: IMultiSelectExamplesState}) {\r\n        super(props, state);\r\n\r\n        const second = _.map(defaultItems, (item) => _.clone(item));\r\n        second[0].selected = true;\r\n\r\n        const hoc = _.map(defaultItems, (item) =>\r\n            _.extend({}, item, {append: {content: () => <span className=\"text-medium-grey ml1\">{item.value}</span>}})\r\n        );\r\n        hoc[0].selected = true;\r\n\r\n        this.state = {\r\n            first: _.clone(defaultItems),\r\n            drag: _.clone(defaultItems),\r\n            second,\r\n            hoc,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mb2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Simple Multi Select without items</label>\r\n                    <br />\r\n                    <MultiSelectConnected id={UUID.generate()} items={[]} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Simple Multi Select with only one items</label>\r\n                    <br />\r\n                    <MultiSelectConnected id={UUID.generate()} items={[{value: 'Single Item'}]} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select with filter, disabled</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={[{value: 'Single Item'}]} disabled />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Simple Multi Select with Custom Strings</label>\r\n                    <br />\r\n                    <MultiSelectConnected\r\n                        id={UUID.generate()}\r\n                        items={this.state.first}\r\n                        placeholder=\"Select something\"\r\n                        deselectAllTooltipText=\"Remove all\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Sortable Multi Select with Custom Strings</label>\r\n                    <br />\r\n                    <MultiSelectConnected\r\n                        id={UUID.generate()}\r\n                        items={this.state.first}\r\n                        placeholder=\"Select something\"\r\n                        deselectAllTooltipText=\"Remove all\"\r\n                        sortable\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={this.state.hoc} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter and Custom Values</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={this.state.hoc} customValues />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter, Custom Values and no items</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={[]} customValues />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter, Custom Values and list of items selectable\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={[{value: 'a'}, {value: 'b'}]} customValues />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter and list of items selectable\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter id={UUID.generate()} items={[{value: 'a'}, {value: 'b'}]} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter and default list</label>\r\n                    <br />\r\n                    <MultiSelectWithFilter\r\n                        id={UUID.generate()}\r\n                        defaultCustomValues={['c', 'd']}\r\n                        items={[{value: 'a'}, {value: 'b'}]}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter, default list and Custom Values{' '}\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter\r\n                        id={UUID.generate()}\r\n                        defaultCustomValues={['c', 'd']}\r\n                        items={[{value: 'a'}, {value: 'b'}]}\r\n                        customValues\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter that only match display value\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        matchFilter={(filter: string, item: IItemBoxProps) =>\r\n                            getReactNodeTextContent(item.displayValue).indexOf(filter) !== -1\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Predicates</label>\r\n                    <br />\r\n                    <MultiSelectWithPredicate\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        options={defaultFlatSelectOptions}\r\n                        matchPredicate={(p: string, i: IItemBoxProps) => this.matchPredicate(p, i)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With 500px width</label>\r\n                    <br />\r\n                    <MultiSelectConnected\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        multiSelectStyle={{width: '500px'}}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select with width 100%</label>\r\n                    <br />\r\n                    <MultiSelectConnected\r\n                        id={'test'}\r\n                        items={this.state.hoc}\r\n                        selectClasses=\"mod-width-100\"\r\n                        multiSelectStyle={{width: '100%'}}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">A Multi Select With Filter and Predicates</label>\r\n                    <br />\r\n                    <MultiSelectWithPredicateAndFilter\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        options={defaultFlatSelectOptions}\r\n                        matchPredicate={(p: string, i: IItemBoxProps) => this.matchPredicate(p, i)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter, Predicate and Custom Values\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithPredicateAndFilter\r\n                        id={UUID.generate()}\r\n                        items={this.state.hoc}\r\n                        options={defaultFlatSelectOptions}\r\n                        matchPredicate={(p: string, i: IItemBoxProps) => this.matchPredicate(p, i)}\r\n                        customValues\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        A Multi Select With Filter, default list and Custom Values{' '}\r\n                    </label>\r\n                    <br />\r\n                    <MultiSelectWithFilter\r\n                        id={UUID.generate()}\r\n                        defaultCustomValues={['b'.repeat(100)]}\r\n                        items={[{value: 'a'.repeat(100)}]}\r\n                        customValues\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private matchPredicate(predicate: string, item: IItemBoxProps) {\r\n        const value = parseInt(item.value, 10);\r\n        if (predicate === defaultFlatSelectOptions[0].id) {\r\n            return true;\r\n        } else if (predicate === defaultFlatSelectOptions[1].id) {\r\n            return value % 2 === 0;\r\n        } else if (predicate === defaultFlatSelectOptions[2].id) {\r\n            return value % 2 === 1;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","// tslint:disable\r\nexport class UUID {\r\n    // TODO: replace for https://www.npmjs.com/package/uuid\r\n    static generate() {\r\n        // Source: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n        let d = Date.now();\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\r\n            const r = (d + Math.random() * 16) % 16 | 0;\r\n            d = Math.floor(d / 16);\r\n            return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n        });\r\n    }\r\n}\r\n// tslint:enable\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Svg} from '../svg/Svg';\r\n\r\nexport interface IFilterBoxOwnProps extends React.ClassAttributes<FilterBox> {\r\n    id?: string;\r\n    containerClasses?: string[];\r\n    filterPlaceholder?: string;\r\n    onBlur?: () => void;\r\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    onKeyUp?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    isAutoFocus?: boolean;\r\n    maxWidth?: number;\r\n    withTitleOnInput?: boolean;\r\n    truncate?: boolean;\r\n    onFilterCallback?: (id: string, filterText: string) => void;\r\n    className?: string;\r\n}\r\n\r\nexport interface IFilterBoxStateProps {\r\n    filterText?: string;\r\n}\r\n\r\nexport interface IFilterBoxDispatchProps {\r\n    onRender?: (id: string) => void;\r\n    onDestroy?: (id: string) => void;\r\n    onFilter?: (id: string, filterText: string) => void;\r\n}\r\n\r\nexport interface IFilterBoxProps extends IFilterBoxOwnProps, IFilterBoxStateProps, IFilterBoxDispatchProps {}\r\n\r\nexport const FILTER_PLACEHOLDER: string = 'Filter';\r\n\r\nexport class FilterBox extends React.Component<IFilterBoxProps, any> {\r\n    filterInput: HTMLInputElement;\r\n\r\n    constructor(props: IFilterBoxProps) {\r\n        super(props);\r\n    }\r\n\r\n    static defaultProps: Partial<IFilterBoxProps> = {\r\n        isAutoFocus: false,\r\n    };\r\n\r\n    private handleChange = (nextInputValue: string) => {\r\n        this.filterInput.value = nextInputValue;\r\n        this.filterInput.nextElementSibling.setAttribute('class', this.filterInput.value.length ? '' : 'hidden');\r\n\r\n        if (this.props.onFilterCallback) {\r\n            this.props.onFilterCallback(this.props.id, this.filterInput.value);\r\n        }\r\n\r\n        if (this.props.onFilter) {\r\n            this.props.onFilter(this.props.id, this.filterInput.value);\r\n        }\r\n    };\r\n\r\n    private handleOnBlur() {\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur();\r\n        }\r\n    }\r\n\r\n    private handleOnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyDown) {\r\n            this.props.onKeyDown(e);\r\n        }\r\n    }\r\n\r\n    private handleOnKeyUp(e: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (this.props.onKeyUp) {\r\n            this.props.onKeyUp(e);\r\n        }\r\n    }\r\n\r\n    private clearValue = () => {\r\n        this.filterInput.focus();\r\n        this.handleChange('');\r\n    };\r\n\r\n    placeCursorAtEndOfInputValue(e: React.FocusEvent<any>) {\r\n        const input = e.target as HTMLInputElement;\r\n        const temp = input.value;\r\n        input.value = '';\r\n        input.value = temp;\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender(this.props.id);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy(this.props.id);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IFilterBoxProps) {\r\n        if (this.props.filterText !== nextProps.filterText && this.filterInput.value !== nextProps.filterText) {\r\n            this.handleChange(nextProps.filterText);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const inputMaxWidth = {maxWidth: `${this.props.maxWidth}px`};\r\n        const filterPlaceholder = this.props.filterPlaceholder || FILTER_PLACEHOLDER;\r\n        const filterBoxContainerClasses = classNames('filter-container', this.props.containerClasses);\r\n        const filterInputClasses = classNames('filter-box', {truncate: this.props.truncate});\r\n        const svgClearClasses = classNames({hidden: !(this.filterInput && this.filterInput.value)});\r\n\r\n        return (\r\n            <div className={this.props.className}>\r\n                <div\r\n                    id={this.props.id}\r\n                    className={filterBoxContainerClasses}\r\n                    style={inputMaxWidth}\r\n                    title={this.filterInput && this.props.withTitleOnInput ? this.filterInput.value : undefined}\r\n                >\r\n                    <input\r\n                        ref={(filterInput: HTMLInputElement) => (this.filterInput = filterInput)}\r\n                        type=\"text\"\r\n                        className={filterInputClasses}\r\n                        placeholder={filterPlaceholder}\r\n                        onChange={(e: React.FormEvent<HTMLInputElement>) => this.handleChange(e.currentTarget.value)}\r\n                        onBlur={() => this.handleOnBlur()}\r\n                        onFocus={(e: React.FocusEvent<HTMLInputElement>) => {\r\n                            this.placeCursorAtEndOfInputValue(e);\r\n                        }}\r\n                        onKeyDown={(e) => this.handleOnKeyDown(e)}\r\n                        onKeyUp={(e) => this.handleOnKeyUp(e)}\r\n                        style={inputMaxWidth}\r\n                        autoFocus={this.props.isAutoFocus}\r\n                    />\r\n                    <Svg\r\n                        svgName=\"clear\"\r\n                        className={svgClearClasses}\r\n                        svgClass=\"icon mod-lg fill-medium-grey\"\r\n                        onClick={() => this.clearValue()}\r\n                    />\r\n                    <Svg svgName=\"filter\" className=\"filter-icon\" svgClass=\"icon fill-medium-grey mod-lg\" />\r\n                </div>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    FilterBox,\r\n    IFilterBoxDispatchProps,\r\n    IFilterBoxOwnProps,\r\n    IFilterBoxProps,\r\n    IFilterBoxStateProps,\r\n} from './FilterBox';\r\nimport {addFilter, filterThrough, removeFilter} from './FilterBoxActions';\r\nimport {FilterBoxSelectors} from './FilterBoxSelectors';\r\n\r\nconst FILTER_THROUGH_DEBOUNCE = 400;\r\nexport const debouncedFilterThrough = _.debounce(\r\n    (dispatch: IDispatch, id: string, filterText: string) => dispatch(filterThrough(id, filterText)),\r\n    FILTER_THROUGH_DEBOUNCE\r\n);\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFilterBoxOwnProps): IFilterBoxStateProps => ({\r\n    filterText: FilterBoxSelectors.getFilterText(state, {id: ownProps.id}),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch): IFilterBoxDispatchProps => ({\r\n    onRender: (id: string) => dispatch(addFilter(id)),\r\n    onDestroy: (id: string) => dispatch(removeFilter(id)),\r\n    onFilter: (id: string, filterText: string) => debouncedFilterThrough(dispatch, id, filterText),\r\n});\r\n\r\nexport const FilterBoxConnected: React.ComponentClass<IFilterBoxProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FilterBox);\r\n","import * as classNames from 'classnames';\r\nimport * as VaporSVG from 'coveo-styleguide';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IComponentBehaviour} from '../../utils/ComponentUtils';\r\nimport {getReactNodeTextContent} from '../../utils/JSXUtils';\r\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\r\nimport {Content} from '../content/Content';\r\nimport {IItemBoxProps} from '../itemBox/ItemBox';\r\nimport {clearListBoxOption} from '../listBox/ListBoxActions';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {ISelectButtonProps, ISelectOwnProps, ISelectProps, SelectConnected} from './SelectConnected';\r\nimport {SelectSelector} from './SelectSelector';\r\nimport * as styles from './styles/SingleSelect.scss';\r\n\r\nexport interface ISingleSelectOwnProps extends ISelectProps, IComponentBehaviour {\r\n    placeholder?: string;\r\n    toggleClasses?: string;\r\n    onSelectOptionCallback?: (option: string) => void;\r\n    items?: IItemBoxProps[];\r\n    buttonPrepend?: React.ReactNode;\r\n    noFixedWidth?: boolean;\r\n    canClear?: boolean;\r\n    deselectTooltipText?: string;\r\n    footer?: React.ReactNode;\r\n}\r\n\r\nconst selectPropsKeys = keys<ISelectOwnProps>();\r\n\r\nexport interface ISingleSelectStateProps {\r\n    selectedOption: string;\r\n}\r\n\r\nexport interface ISingleSelectDispatchProps {\r\n    deselect: () => void;\r\n}\r\n\r\nexport interface ISingleSelectProps\r\n    extends ISingleSelectOwnProps,\r\n        Partial<ISingleSelectStateProps>,\r\n        Partial<ISingleSelectDispatchProps> {}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: ISingleSelectOwnProps): ISingleSelectStateProps => {\r\n    const customSelected: string[] = SelectSelector.getListState(state, ownProps);\r\n    return {\r\n        selectedOption: customSelected.length\r\n            ? customSelected[customSelected.length - 1]\r\n            : SelectSelector.getListBoxSelected(state, ownProps)[0],\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: ISingleSelectOwnProps): ISingleSelectDispatchProps => ({\r\n    deselect: () => dispatch(clearListBoxOption(ownProps.id)),\r\n});\r\n\r\n@ReduxConnect(mapStateToProps, mapDispatchToProps)\r\nexport class SingleSelectConnected extends React.PureComponent<\r\n    ISingleSelectProps & React.ButtonHTMLAttributes<HTMLButtonElement>\r\n> {\r\n    static defaultProps: Partial<ISingleSelectOwnProps>;\r\n\r\n    componentDidUpdate(prevProps: ISingleSelectProps) {\r\n        if (prevProps.selectedOption !== this.props.selectedOption) {\r\n            this.props.onSelectOptionCallback?.(this.props.selectedOption);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <SelectConnected\r\n                {..._.pick(this.props, selectPropsKeys)}\r\n                button={this.getButton}\r\n                isLoading={this.props.isLoading}\r\n            >\r\n                {this.props.children}\r\n            </SelectConnected>\r\n        );\r\n    }\r\n\r\n    private getButton = (props: ISelectButtonProps): JSX.Element => {\r\n        const option = _.findWhere(this.props.items, {value: this.props.selectedOption});\r\n        const showClear = !!option && this.props.canClear && !this.props.disabled;\r\n        const buttonClasses = classNames('btn dropdown-toggle', this.props.toggleClasses, {\r\n            'dropdown-toggle-placeholder': !option,\r\n            [styles.singleSelectFixedWidth]: !this.props.noFixedWidth,\r\n            'mod-append': showClear,\r\n        });\r\n\r\n        return (\r\n            <button\r\n                className={buttonClasses}\r\n                type=\"button\"\r\n                onClick={props.onClick}\r\n                onKeyDown={props.onKeyDown}\r\n                onKeyUp={props.onKeyUp}\r\n                disabled={this.props.disabled}\r\n            >\r\n                {this.props.buttonPrepend}\r\n                {option && option.prepend ? <Content {...option.prepend} /> : null}\r\n                {this.getSelectedOptionElement(option)}\r\n                {option && option.append ? <Content {...option.append} /> : null}\r\n                <span className=\"dropdown-toggle-arrow\" />\r\n                {showClear && this.getDeselectOptionButton()}\r\n            </button>\r\n        );\r\n    };\r\n\r\n    private getSelectedOptionElement(option: IItemBoxProps): JSX.Element {\r\n        if (option) {\r\n            const displayValue =\r\n                option.selectedDisplayValue || getReactNodeTextContent(option.displayValue) || option.value;\r\n            return (\r\n                <span\r\n                    key={option.value}\r\n                    className=\"dropdown-selected-value flex-auto left-align\"\r\n                    data-value={option.value}\r\n                    title={displayValue}\r\n                >\r\n                    {displayValue}\r\n                </span>\r\n            );\r\n        }\r\n\r\n        return <span className=\"dropdown-no-value\">{this.props.placeholder}</span>;\r\n    }\r\n\r\n    private getDeselectOptionButton(): React.ReactNode {\r\n        return (\r\n            <Tooltip title={this.props.deselectTooltipText} placement=\"top\" noSpanWrapper onClick={this.handleDeselect}>\r\n                <Svg svgName={VaporSVG.svg.clear.name} svgClass=\"icon mod-12\" className=\"btn-append center-align\" />\r\n            </Tooltip>\r\n        );\r\n    }\r\n\r\n    private handleDeselect = () => {\r\n        if (!this.props.disabled) {\r\n            this.props.deselect();\r\n        }\r\n    };\r\n}\r\n\r\nSingleSelectConnected.defaultProps = {\r\n    placeholder: 'Select an option',\r\n    deselectTooltipText: 'Deselect',\r\n};\r\n","import {IDragSource, IDropTarget} from 'react-dnd';\r\nimport {DragDropContext} from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport {findDOMNode} from 'react-dom';\r\nimport * as _ from 'underscore';\r\nimport {DnDContainer, IDraggableContainerOwnProps} from './DnDContainer';\r\n\r\nconst move = (dragIndex: number, hoverIndex: number, list: any[], callBack: (listReorder: any[]) => void) => {\r\n    const moving = list[dragIndex];\r\n    const newOrder = [...list];\r\n\r\n    // Remove the element at position dragIndex\r\n    newOrder.splice(dragIndex, 1);\r\n\r\n    // Insert the moving element at hoverIndex\r\n    newOrder.splice(hoverIndex, 0, moving);\r\n\r\n    callBack(newOrder);\r\n};\r\n\r\nconst getBoxTarget = (parameter: string): IDropTarget => ({\r\n    hover(props: IDraggableContainerOwnProps, monitor: any, component?: DnDContainer): void {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = (findDOMNode(component) as Element).getBoundingClientRect();\r\n\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.move(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n    drop(props: IDraggableContainerOwnProps, monitor: any) {\r\n        monitor.getItem()[parameter] = null;\r\n    },\r\n});\r\n\r\nconst getSelectedBoxSource = (parameter: string): IDragSource => ({\r\n    isDragging(props: IDraggableContainerOwnProps, monitor: any) {\r\n        return props.id === monitor.getItem()[parameter];\r\n    },\r\n    beginDrag(props: IDraggableContainerOwnProps) {\r\n        return {...props};\r\n    },\r\n});\r\n\r\n// This object is usefull when the drag happen outside of the DraggableSelectedOption,\r\n// instead of making the child handle it, the parent catches the event\r\nconst parentDropTarget = {\r\n    drop: _.noop,\r\n};\r\n\r\nlet context: any;\r\nconst TagControlContext = (DecoratedClass: any) => {\r\n    if (!context) {\r\n        context = DragDropContext(HTML5Backend);\r\n    }\r\n    return context(DecoratedClass);\r\n};\r\n\r\nexport const DnDUtils = {\r\n    move,\r\n    getBoxTarget,\r\n    getSelectedBoxSource,\r\n    parentDropTarget,\r\n    TagControlContext,\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {TooltipPlacement} from '../../../utils/TooltipUtils';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {Tooltip} from '../../tooltip/Tooltip';\r\n\r\nexport interface ISelectedOptionProps {\r\n    value: string;\r\n    label: React.ReactNode;\r\n    onRemoveClick?: (value: string) => void;\r\n}\r\n\r\nexport class SelectedOption extends React.PureComponent<ISelectedOptionProps> {\r\n    handleOnRemove = () => {\r\n        this.props.onRemoveClick?.(this.props.value);\r\n    };\r\n\r\n    render() {\r\n        const tooltipContent = React.Children.count(this.props.children) > 0 ? this.props.children : this.props.label;\r\n        const tooltipLabel = typeof this.props.label === 'string' ? this.props.label : '';\r\n\r\n        return (\r\n            <div className=\"selected-option\" key={this.props.value}>\r\n                <Tooltip\r\n                    title={tooltipLabel}\r\n                    placement={TooltipPlacement.Top}\r\n                    className=\"selected-option-value\"\r\n                    delayShow={300}\r\n                >\r\n                    {tooltipContent}\r\n                </Tooltip>\r\n\r\n                <div className=\"remove-option\" onClick={this.handleOnRemove}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-medium-blue mod-small\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    FlatSelect,\r\n    IFlatSelectDispatchProps,\r\n    IFlatSelectOwnProps,\r\n    IFlatSelectProps,\r\n    IFlatSelectStateProps,\r\n} from './FlatSelect';\r\nimport {addFlatSelect, removeFlatSelect, selectFlatSelect} from './FlatSelectActions';\r\nimport {IFlatSelectOptionProps} from './FlatSelectOption';\r\nimport {FlatSelectSelectors} from './FlatSelectSelectors';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFlatSelectOwnProps): IFlatSelectStateProps => {\r\n    return {\r\n        selectedOptionId: FlatSelectSelectors.getSelectedOptionId(state, ownProps),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IFlatSelectOwnProps): IFlatSelectDispatchProps => ({\r\n    onRender: () =>\r\n        dispatch(\r\n            addFlatSelect(\r\n                ownProps.id,\r\n                ownProps.defaultSelectedOptionId || (ownProps.options.length && ownProps.options[0].id)\r\n            )\r\n        ),\r\n    onDestroy: () => dispatch(removeFlatSelect(ownProps.id)),\r\n    onOptionClick: (selected: IFlatSelectOptionProps) => dispatch(selectFlatSelect(ownProps.id, selected.id)),\r\n});\r\n\r\nexport const FlatSelectConnected: React.ComponentClass<IFlatSelectProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FlatSelect);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {FlatSelectOption, IFlatSelectOptionProps} from './FlatSelectOption';\r\n\r\nexport interface IFlatSelectOwnProps {\r\n    id: string;\r\n    options: IFlatSelectOptionProps[];\r\n    className?: string;\r\n    group?: boolean;\r\n    optionPicker?: boolean;\r\n    defaultSelectedOptionId?: string;\r\n    onClick?: (option: IFlatSelectOptionProps) => void;\r\n    disabled?: boolean;\r\n    classes?: string[] /* @deprecated use className instead */;\r\n}\r\n\r\nexport interface IFlatSelectStateProps {\r\n    selectedOptionId?: string;\r\n}\r\n\r\nexport interface IFlatSelectDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onOptionClick?: (option: IFlatSelectOptionProps) => void;\r\n}\r\n\r\nexport interface IFlatSelectProps extends IFlatSelectOwnProps, IFlatSelectStateProps, IFlatSelectDispatchProps {}\r\n\r\nexport class FlatSelect extends React.Component<IFlatSelectProps> {\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    private handleOnOptionClick(option: IFlatSelectOptionProps) {\r\n        if (this.props.onOptionClick) {\r\n            this.props.onOptionClick(option);\r\n        }\r\n\r\n        if (this.props.onClick) {\r\n            this.props.onClick(option);\r\n        }\r\n    }\r\n\r\n    private getOptions(): JSX.Element[] {\r\n        return _.map(this.props.options, (flatSelectOption: IFlatSelectOptionProps, index: number) => {\r\n            flatSelectOption.selected =\r\n                this.props.selectedOptionId && this.props.selectedOptionId === flatSelectOption.id;\r\n            flatSelectOption.onClick = (option: IFlatSelectOptionProps) => this.handleOnOptionClick(option);\r\n\r\n            return <FlatSelectOption key={index} {...flatSelectOption} disabled={this.props.disabled} />;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const classes: string = classNames(\r\n            'flat-select',\r\n            {\r\n                'mod-btn-group': this.props.group,\r\n                'mod-option-picker': this.props.optionPicker,\r\n            },\r\n            this.props.classes,\r\n            this.props.className\r\n        );\r\n\r\n        return <div className={classes}>{this.getOptions()}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Content, IContentProps} from '../content/Content';\r\nimport {ITooltipProps, Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IFlatSelectOptionProps {\r\n    id: string;\r\n    option: IContentProps;\r\n    classes?: string[];\r\n    prepend?: IContentProps;\r\n    append?: IContentProps;\r\n    tooltip?: ITooltipProps;\r\n    selected?: boolean;\r\n    onClick?: (option: IFlatSelectOptionProps) => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport class FlatSelectOption extends React.Component<IFlatSelectOptionProps, any> {\r\n    static defaultProps: Partial<IFlatSelectOptionProps> = {\r\n        selected: false,\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes: string = classNames(\r\n            'flat-select-option',\r\n            {\r\n                selectable: !this.props.selected,\r\n                disabled: this.props.disabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n\r\n        return (\r\n            <a className={classes} onClick={() => this.onClick()}>\r\n                <Tooltip {...this.props.tooltip}>\r\n                    {this.props.prepend ? <Content {...this.props.prepend} /> : null}\r\n                    {<Content {...this.props.option} />}\r\n                    {this.props.append ? <Content {...this.props.append} /> : null}\r\n                </Tooltip>\r\n            </a>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {DropTarget, IDropTargetProps} from 'react-dnd';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\r\nimport {DnDUtils} from '../dragAndDrop/DnDUtils';\r\nimport {\r\n    DraggableSelectedOption,\r\n    DraggableSelectedOptionType,\r\n} from '../dropdownSearch/MultiSelectDropdownSearch/DraggableSelectedOption';\r\nimport {SelectedOption} from '../dropdownSearch/MultiSelectDropdownSearch/SelectedOption';\r\nimport {IItemBoxProps} from '../itemBox/ItemBox';\r\nimport {clearListBoxOption, reorderListBoxOption, unselectListBoxOption} from '../listBox/ListBoxActions';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {ISelectButtonProps, ISelectOwnProps, ISelectProps, SelectConnected} from './SelectConnected';\r\nimport {SelectSelector} from './SelectSelector';\r\n\r\nexport interface IMultiSelectOwnProps extends ISelectProps, IDropTargetProps {\r\n    placeholder?: string;\r\n    emptyPlaceholder?: string;\r\n    deselectAllTooltipText?: string;\r\n    sortable?: boolean;\r\n    noDisabled?: boolean;\r\n    multiSelectStyle?: React.CSSProperties;\r\n}\r\n\r\nexport interface IMultiSelectStateProps {\r\n    selected?: string[];\r\n}\r\n\r\nexport interface IMultiSelectDispatchProps {\r\n    onRemoveClick?: (item: IItemBoxProps) => void;\r\n    onRemoveAll?: () => void;\r\n    onReorder?: (values: string[]) => void;\r\n}\r\n\r\nexport interface IMultiSelectProps extends IMultiSelectOwnProps, IMultiSelectStateProps, IMultiSelectDispatchProps {}\r\n\r\nconst selectPropsKeys = keys<ISelectOwnProps>();\r\n\r\nconst makeMapStateToProps = () => {\r\n    const getStateProps = createStructuredSelector({\r\n        selected: SelectSelector.getMultiSelectSelectedValues,\r\n    });\r\n\r\n    return (state: IReactVaporState, ownProps: IMultiSelectOwnProps): IMultiSelectStateProps =>\r\n        getStateProps(state, ownProps);\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IMultiSelectOwnProps): IMultiSelectDispatchProps => ({\r\n    onRemoveClick: (item: IItemBoxProps) => dispatch(unselectListBoxOption(ownProps.id, item.value)),\r\n    onRemoveAll: () => dispatch(clearListBoxOption(ownProps.id)),\r\n    onReorder: (values: string[]) => dispatch(reorderListBoxOption(ownProps.id, values)),\r\n});\r\n\r\n// This object is usefull when the drag happen outside of the DraggableSelectedOption,\r\n// instead of making the child handle it, the parent catches the event\r\nconst parentDropTarget = {\r\n    drop: _.noop,\r\n};\r\n\r\n@ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\n@DropTarget(DraggableSelectedOptionType, parentDropTarget, (connect: any) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))\r\nclass MultiSelect extends React.PureComponent<IMultiSelectProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IMultiSelectProps> = {\r\n        placeholder: 'Select an option',\r\n        emptyPlaceholder: 'No selected option',\r\n        deselectAllTooltipText: 'Deselect All',\r\n        sortable: false,\r\n        noDisabled: false,\r\n        multiSelectStyle: {},\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <SelectConnected\r\n                id={this.props.id}\r\n                key={this.props.id}\r\n                {..._.pick(this.props, selectPropsKeys)}\r\n                button={this.getButton}\r\n                multi\r\n            >\r\n                {this.props.children}\r\n            </SelectConnected>\r\n        );\r\n    }\r\n\r\n    private getSelectedOptionComponents(): React.ReactNode {\r\n        const selected = this.getSelectedOptions();\r\n\r\n        if (selected.length) {\r\n            return selected.map((item: IItemBoxProps, index: number) =>\r\n                this.props.sortable ? this.renderDraggableOption(item, index) : this.renderOption(item)\r\n            );\r\n        }\r\n        return <span className=\"multiselect-empty\">{this.props.emptyPlaceholder}</span>;\r\n    }\r\n\r\n    private renderOption(item: IItemBoxProps): JSX.Element {\r\n        const displayValue = item.displayValue || item.value;\r\n        return (\r\n            <SelectedOption\r\n                label={displayValue}\r\n                value={item.value}\r\n                key={item.value}\r\n                onRemoveClick={() => this.props.onRemoveClick(item)}\r\n            >\r\n                {displayValue}\r\n            </SelectedOption>\r\n        );\r\n    }\r\n\r\n    private renderDraggableOption(item: IItemBoxProps, index: number): JSX.Element {\r\n        return (\r\n            <div className=\"flex flex-row flex-center sortable-selected-option\" key={item.value}>\r\n                <span className=\"mr1 text-medium-grey\">{index + 1}</span>\r\n                <DraggableSelectedOption\r\n                    label={item.displayValue || item.value}\r\n                    value={item.value}\r\n                    onRemoveClick={() => this.props.onRemoveClick(item)}\r\n                    index={index}\r\n                    move={(dragIndex: number, hoverIndex: number) => this.move(dragIndex, hoverIndex)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private move(dragIndex: number, hoverIndex: number) {\r\n        const moving = this.props.selected[dragIndex];\r\n        const newOrder = [...this.props.selected];\r\n\r\n        // Remove the element at position dragIndex\r\n        newOrder.splice(dragIndex, 1);\r\n\r\n        // Insert the moving element at hoverIndex\r\n        newOrder.splice(hoverIndex, 0, moving);\r\n\r\n        this.props.onReorder(newOrder);\r\n    }\r\n\r\n    private getRemoveAllSelectedOptionsButton(): JSX.Element {\r\n        return this.getSelectedOptions().length > 1 ? (\r\n            <Tooltip title={this.props.deselectAllTooltipText} placement=\"top\" noSpanWrapper>\r\n                <div className=\"remove-all-selected-options ml1\" onClick={() => this.props.onRemoveAll()}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-medium-blue\" />\r\n                </div>\r\n            </Tooltip>\r\n        ) : null;\r\n    }\r\n\r\n    private getButton = (props: ISelectButtonProps): JSX.Element => {\r\n        const classes = classNames('multiselect-input', {'mod-sortable': this.props.sortable});\r\n        const buttonAttrs =\r\n            !this.props.noDisabled && this.props.selected && this.props.selected.length === this.props.items.length\r\n                ? {disabled: true}\r\n                : {disabled: this.props.disabled};\r\n        return (\r\n            <div className={classes} style={this.props.multiSelectStyle}>\r\n                {this.props.connectDropTarget(\r\n                    <div className=\"multiselect-selected flex flex-center flex-auto full-content\">\r\n                        <div className=\"selected-options-container truncate\">{this.getSelectedOptionComponents()}</div>\r\n                        {this.getRemoveAllSelectedOptionsButton()}\r\n                    </div>\r\n                )}\r\n                <button\r\n                    className=\"btn dropdown-toggle multiselect-add dropdown-toggle-placeholder\"\r\n                    type=\"button\"\r\n                    onKeyDown={props.onKeyDown}\r\n                    onKeyUp={props.onKeyUp}\r\n                    onClick={props.onClick}\r\n                    {...buttonAttrs}\r\n                >\r\n                    <span className=\"dropdown-no-value\">{this.props.placeholder}</span>\r\n                    <span className=\"dropdown-toggle-arrow\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    private getSelectedOptions(): IItemBoxProps[] {\r\n        if (this.props.sortable) {\r\n            return _.chain(this.props.selected)\r\n                .map((selected: string) => _.findWhere(this.props.items, {value: selected}))\r\n                .compact()\r\n                .value();\r\n        }\r\n\r\n        return this.props.items.filter((option: IItemBoxProps) => _.contains(this.props.selected, option.value));\r\n    }\r\n}\r\n\r\nexport const MultiSelectConnected: React.ComponentClass<IMultiSelectProps &\r\n    React.ButtonHTMLAttributes<HTMLButtonElement>> = DnDUtils.TagControlContext(MultiSelect);\r\n","import * as React from 'react';\r\nimport {DragSource, DropTarget, IDragSource, IDropTarget} from 'react-dnd';\r\nimport {findDOMNode} from 'react-dom';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ISelectedOptionProps, SelectedOption} from './SelectedOption';\r\n\r\nexport interface IDraggableSelectedOptionOwnProps {\r\n    isDragging?: boolean;\r\n    connectDragSource?: any;\r\n    connectDropTarget?: any;\r\n    connectDragPreview?: any;\r\n    index: number;\r\n    move: (dragIndex: number, hoverIndex: number) => void;\r\n}\r\n\r\nexport interface IDraggableSelectedOptionProps extends IDraggableSelectedOptionOwnProps, ISelectedOptionProps {}\r\n\r\nconst selectedOptionSource: IDragSource = {\r\n    isDragging(props: IDraggableSelectedOptionProps, monitor: any) {\r\n        return props.label === monitor.getItem().label;\r\n    },\r\n    beginDrag(props: IDraggableSelectedOptionProps) {\r\n        return {...props};\r\n    },\r\n};\r\n\r\nconst cardTarget: IDropTarget = {\r\n    hover(props: IDraggableSelectedOptionProps, monitor: any, component?: DraggableSelectedOption): void {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = (findDOMNode(component) as Element).getBoundingClientRect();\r\n\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.move(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n    drop(props: IDraggableSelectedOptionProps, monitor: any) {\r\n        monitor.getItem().label = null;\r\n    },\r\n};\r\n\r\nexport const DraggableSelectedOptionType = 'SELECTED_OPTION';\r\nconst DraggableSelectedOptionPropsToOmit = keys<IDraggableSelectedOptionOwnProps>();\r\n\r\n@DropTarget(DraggableSelectedOptionType, cardTarget, (connect: any) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))\r\n@DragSource(DraggableSelectedOptionType, selectedOptionSource, (connect: any, monitor: any) => ({\r\n    connectDragSource: connect.dragSource(),\r\n    connectDragPreview: connect.dragPreview(),\r\n    isDragging: monitor.isDragging(),\r\n}))\r\nexport class DraggableSelectedOption extends React.PureComponent<IDraggableSelectedOptionProps> {\r\n    render() {\r\n        const opacity = this.props.isDragging ? 0 : 1;\r\n\r\n        return this.props.connectDragPreview(\r\n            this.props.connectDropTarget(\r\n                <div className=\"selected-option-wrapper\" style={{opacity}}>\r\n                    <SelectedOption\r\n                        {..._.omit(this.props, DraggableSelectedOptionPropsToOmit)}\r\n                        label={this.props.isDragging ? null : this.props.label}\r\n                    >\r\n                        <div className=\"inline-flex\">\r\n                            {this.props.connectDragSource(\r\n                                <div className=\"move-option infline-flex cursor-move align-center\">\r\n                                    <Svg svgName=\"drag-drop\" svgClass=\"icon mod-small\" />\r\n                                </div>\r\n                            )}\r\n                            {this.props.label}\r\n                        </div>\r\n                    </SelectedOption>\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {WithServerSideProcessingProps} from '../../../hoc/withServerSideProcessing/withServerSideProcessing';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {addStringList, addValueStringList, removeStringList} from '../../../reusableState/customList/StringListActions';\r\nimport {IDispatch, ReduxConnect} from '../../../utils/ReduxUtils';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {Button, IButtonProps} from '../../button/Button';\r\nimport {IFilterBoxOwnProps} from '../../filterBox/FilterBox';\r\nimport {FilterBoxConnected} from '../../filterBox/FilterBoxConnected';\r\nimport {FilterBoxSelectors} from '../../filterBox/FilterBoxSelectors';\r\nimport {MatchFilter} from '../../filterBox/FilterBoxUtils';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ISelectOwnProps, ISelectSpecificProps} from '../SelectConnected';\r\nimport {SelectSelector} from '../SelectSelector';\r\n\r\nexport interface ISelectWithFilterOwnProps {\r\n    defaultCustomValues?: string[];\r\n    matchFilter?: MatchFilter;\r\n    customValues?: boolean;\r\n    addValueText?: (filterText: string) => string;\r\n    duplicateText?: string;\r\n    noResultFilterText?: (filterText: string) => string;\r\n    noItemsText?: string;\r\n    filterButton?: IButtonProps;\r\n    filter?: IFilterBoxOwnProps;\r\n}\r\n\r\nexport interface ISelectWithFilterStateProps {\r\n    filterValue: string;\r\n    selected: string[];\r\n    items: IItemBoxProps[];\r\n}\r\n\r\nexport interface ISelectWithFilterDispatchProps {\r\n    onRenderFilter: (items: string[]) => void;\r\n    onDestroyFilter: () => void;\r\n    onSelectCustomValue: (filterValue: string) => void;\r\n}\r\n\r\nconst SelectWithFilterPropsToOmit = keys<ISelectWithFilterOwnProps>();\r\n\r\nexport interface ISelectWithFilterProps\r\n    extends ISelectWithFilterOwnProps,\r\n        Partial<ISelectWithFilterStateProps>,\r\n        Partial<ISelectWithFilterDispatchProps>,\r\n        WithServerSideProcessingProps,\r\n        ISelectOwnProps {}\r\n\r\nexport const selectWithFilter = (\r\n    Component: React.ComponentType<ISelectWithFilterProps>\r\n): React.ComponentType<ISelectWithFilterProps> => {\r\n    const makeMapStateToProps = (initialState: IReactVaporState, initialOwnProps: ISelectWithFilterProps) =>\r\n        createStructuredSelector({\r\n            filterValue: FilterBoxSelectors.getFilterText,\r\n            items: initialOwnProps.isServer\r\n                ? SelectSelector.getServerFilteredItems\r\n                : SelectSelector.getCustomItemsWithFilter,\r\n            selected: SelectSelector.getListBoxSelected,\r\n        });\r\n\r\n    const mapDispatchToProps = (\r\n        dispatch: IDispatch,\r\n        ownProps: ISelectOwnProps & ISelectSpecificProps\r\n    ): ISelectWithFilterDispatchProps => ({\r\n        onRenderFilter: (items: string[]) => dispatch(addStringList(ownProps.id, items)),\r\n        onDestroyFilter: () => dispatch(removeStringList(ownProps.id)),\r\n        onSelectCustomValue: (filterValue: string) => dispatch(addValueStringList(ownProps.id, filterValue)),\r\n    });\r\n\r\n    @ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\n    class WrappedComponent extends React.Component<ISelectWithFilterProps> {\r\n        static displayName = `withFilter(${Component.displayName})`;\r\n        static defaultProps: Partial<ISelectWithFilterProps> = {\r\n            duplicateText: 'Cannot add a duplicate value',\r\n            noResultFilterText: (filterText: string) => `No results match \"${filterText}\"`,\r\n            noItemsText: 'No items, enter a new value',\r\n            addValueText: (filterText: string) => `Add \"${filterText}\"`,\r\n            filterButton: {\r\n                enabled: true,\r\n                tooltip: 'Add',\r\n                tooltipPlacement: 'top',\r\n            },\r\n            defaultCustomValues: [],\r\n        };\r\n\r\n        private dividerId: string = UUID.generate();\r\n\r\n        componentWillMount() {\r\n            this.props.onRenderFilter(this.props.defaultCustomValues);\r\n        }\r\n\r\n        componentDidUpdate(prevProps: ISelectWithFilterProps) {\r\n            if (prevProps.filterValue !== this.props.filterValue) {\r\n                this.props.onUpdate?.();\r\n            }\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            this.props.onDestroyFilter();\r\n        }\r\n\r\n        private addItemBoxCustomValue(): IItemBoxProps[] {\r\n            const addItemBox: IItemBoxProps = {\r\n                displayValue: this.props.addValueText(this.props.filterValue),\r\n                value: this.props.filterValue,\r\n                onOptionClick: () => this.props.onSelectCustomValue(this.props.filterValue),\r\n            };\r\n            const divider: IItemBoxProps[] = _.some(this.props.items, (item: IItemBoxProps) => !item.hidden)\r\n                ? [{value: this.dividerId, divider: true, disabled: true}]\r\n                : [];\r\n\r\n            return [addItemBox, ...divider];\r\n        }\r\n\r\n        private noResultFilter(): IItemBoxProps {\r\n            return {\r\n                value: this.props.noResultFilterText(this.props.filterValue),\r\n            };\r\n        }\r\n\r\n        private duplicateValue(): IItemBoxProps {\r\n            return {\r\n                value: this.props.duplicateText,\r\n                disabled: true,\r\n            };\r\n        }\r\n\r\n        private noItems(): IItemBoxProps {\r\n            return {\r\n                value: this.props.noItemsText,\r\n                disabled: true,\r\n            };\r\n        }\r\n\r\n        private handleOnClick = () => {\r\n            if (!_.isEmpty(this.props.filterValue)) {\r\n                this.props.onSelectCustomValue(this.props.filterValue);\r\n            }\r\n        };\r\n\r\n        private getAddValueButton(): React.ReactNode {\r\n            return (\r\n                this.props.customValues && (\r\n                    <div className=\"ml1\">\r\n                        <Button classes={['p1']} onClick={this.handleOnClick} {...this.props.filterButton}>\r\n                            <Svg svgName={'add'} className=\"icon mod-lg mod-align-with-text\" />\r\n                        </Button>\r\n                    </div>\r\n                )\r\n            );\r\n        }\r\n\r\n        private isDuplicateValue(): boolean {\r\n            return (\r\n                _.chain(this.props.items)\r\n                    .pluck('value')\r\n                    .concat(this.props.selected)\r\n                    .indexOf(this.props.filterValue)\r\n                    .value() !== -1\r\n            );\r\n        }\r\n\r\n        private allValuesAreSelected(): boolean {\r\n            return !_.chain(this.props.items)\r\n                .pluck('value')\r\n                .contains(this.props.selected)\r\n                .value();\r\n        }\r\n\r\n        render() {\r\n            const filterBoxClassNames: string = classNames({\r\n                'flex flex-center': this.props.customValues,\r\n                mb2: !!this.props.children,\r\n            });\r\n\r\n            let noResultItem: React.ReactNode = this.props.noResultItem || this.noResultFilter();\r\n            let items = this.props.items.map(\r\n                (item: IItemBoxProps): IItemBoxProps => ({...item, highlight: this.props.filterValue})\r\n            );\r\n\r\n            if (this.isDuplicateValue()) {\r\n                noResultItem = this.duplicateValue();\r\n            } else if (!_.isEmpty(this.props.filterValue) && this.props.customValues) {\r\n                items = [...this.addItemBoxCustomValue(), ...items];\r\n            } else if (this.props.customValues && _.every(items, (item) => item.hidden)) {\r\n                noResultItem = this.noItems();\r\n            } else if (items.length && this.allValuesAreSelected()) {\r\n                noResultItem = this.noItems();\r\n            }\r\n\r\n            const newProps = {\r\n                ..._.omit(this.props, [...SelectWithFilterPropsToOmit, 'selected']),\r\n                items,\r\n            };\r\n\r\n            return (\r\n                <Component\r\n                    {...newProps}\r\n                    noResultItem={noResultItem}\r\n                    noDisabled={this.props.customValues}\r\n                    hasFocusableChild\r\n                >\r\n                    <FilterBoxConnected\r\n                        {...this.props.filter}\r\n                        id={this.props.id}\r\n                        onKeyDown={(this.props as any).onKeyDown}\r\n                        onKeyUp={(this.props as any).onKeyUp}\r\n                        className={filterBoxClassNames}\r\n                        isAutoFocus\r\n                    >\r\n                        {this.getAddValueButton()}\r\n                    </FilterBoxConnected>\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return WrappedComponent;\r\n};\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {WithServerSideProcessingProps} from '../../../hoc/withServerSideProcessing/withServerSideProcessing';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {FlatSelectConnected} from '../../flatSelect/FlatSelectConnected';\r\nimport {IFlatSelectOptionProps} from '../../flatSelect/FlatSelectOption';\r\nimport {FlatSelectSelectors} from '../../flatSelect/FlatSelectSelectors';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {ISelectProps} from '../SelectConnected';\r\n\r\nexport interface ISelectWithPredicateOwnProps {\r\n    options: IFlatSelectOptionProps[];\r\n    matchPredicate: (predicate: string, item: IItemBoxProps) => boolean;\r\n}\r\nconst SelectWithPredicatePropsToOmit = keys<ISelectWithPredicateOwnProps>();\r\ninterface SelectWithPredicateStateProps {\r\n    predicate: string;\r\n    items: IItemBoxProps[];\r\n}\r\n\r\nexport interface ISelectWithPredicateProps\r\n    extends ISelectWithPredicateOwnProps,\r\n        ISelectProps,\r\n        Partial<SelectWithPredicateStateProps>,\r\n        WithServerSideProcessingProps {}\r\n\r\nexport const selectWithPredicate = (\r\n    Component: React.ComponentType<ISelectProps>\r\n): React.ComponentType<ISelectWithPredicateProps> => {\r\n    const WrappedComponent: React.FunctionComponent<ISelectWithPredicateProps> = (props) => {\r\n        React.useEffect(() => {\r\n            props.onUpdate?.();\r\n        }, [props.predicate, props.onUpdate]);\r\n\r\n        return (\r\n            <Component {..._.omit(props, SelectWithPredicatePropsToOmit)}>\r\n                <FlatSelectConnected\r\n                    id={props.id}\r\n                    classes={['full-content-x']}\r\n                    options={props.options}\r\n                    group\r\n                    optionPicker\r\n                />\r\n                {props.children}\r\n            </Component>\r\n        );\r\n    };\r\n\r\n    WrappedComponent.displayName = `withPredicate(${Component.displayName})`;\r\n\r\n    return connect(mapStateToProps)(WrappedComponent);\r\n};\r\n\r\nfunction mapStateToProps(state: IReactVaporState, ownProps: ISelectWithPredicateProps): SelectWithPredicateStateProps {\r\n    const predicate = FlatSelectSelectors.getSelectedOptionId(state, {id: ownProps.id}) || ownProps.options[0].id;\r\n\r\n    const items = ownProps.isServer\r\n        ? ownProps.items\r\n        : _.map(ownProps.items, (item: IItemBoxProps) => {\r\n              const visible = ownProps.matchPredicate(predicate, item);\r\n\r\n              return {...item, hidden: !visible || item.hidden};\r\n          });\r\n\r\n    return {\r\n        items,\r\n        predicate,\r\n    };\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IMultiSelectOwnProps, MultiSelectConnected} from '../MultiSelectConnected';\r\nimport {ISingleSelectOwnProps, SingleSelectConnected} from '../SingleSelectConnected';\r\nimport {ISelectWithFilterProps, selectWithFilter} from './SelectWithFilter';\r\nimport {ISelectWithPredicateProps, selectWithPredicate} from './SelectWithPredicate';\r\n\r\ntype ButtonHTMLAttributes = React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nexport interface ISelectWithPredicateAndFilterProps extends ISelectWithFilterProps, ISelectWithPredicateProps {}\r\n\r\n// Single Select\r\nexport const SingleSelectWithFilter: React.ComponentType<ISelectWithFilterProps &\r\n    ISingleSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithFilter(SingleSelectConnected);\r\nexport const SingleSelectWithPredicate: React.ComponentType<ISelectWithPredicateProps &\r\n    ISingleSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithPredicate(SingleSelectConnected);\r\nexport const SingleSelectWithPredicateAndFilter: React.ComponentType<ISelectWithPredicateAndFilterProps &\r\n    ISingleSelectOwnProps &\r\n    ButtonHTMLAttributes> = _.compose(selectWithPredicate, selectWithFilter)(SingleSelectConnected);\r\n\r\n// Multi Select\r\nexport const MultiSelectWithFilter: React.ComponentType<ISelectWithFilterProps &\r\n    IMultiSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithFilter(MultiSelectConnected);\r\nexport const MultiSelectWithPredicate: React.ComponentType<ISelectWithPredicateProps &\r\n    IMultiSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithPredicate(MultiSelectConnected);\r\nexport const MultiSelectWithPredicateAndFilter: React.ComponentType<ISelectWithPredicateAndFilterProps &\r\n    IMultiSelectOwnProps &\r\n    ButtonHTMLAttributes> = _.compose(selectWithPredicate, selectWithFilter)(MultiSelectConnected);\r\n"],"sourceRoot":""}