{"version":3,"sources":["webpack:///./src/components/actions/examples/ActionBarConnectedExamples.tsx?a02b","webpack:///./src/components/actions/ActionBar.tsx?d37a","webpack:///./src/components/actions/PrimaryAction.tsx?99b6","webpack:///./src/components/actions/LinkAction.tsx?6c14","webpack:///./src/components/actions/Action.tsx?aa30","webpack:///./src/components/actions/TriggerActionConnected.tsx?81e8","webpack:///./src/components/actions/PrimaryActionConnected.tsx?6039","webpack:///./src/components/inlinePrompt/InlinePrompt.tsx?d979","webpack:///./src/components/actions/filters/ItemFilter.tsx?17bf","webpack:///./src/components/actions/SecondaryActions.tsx?a067","webpack:///./src/components/actions/ActionsDropdown.tsx?b330","webpack:///./src/components/dropdown/DropdownConnected.tsx?3b40","webpack:///./src/components/dropdown/Dropdown.tsx?7709","webpack:///./src/components/actions/ActionDropdownItem.tsx?d416","webpack:///./src/components/actions/ActionConstants.tsx?f96d"],"names":["componentDidMount","actions","name","link","target","icon","primary","enabled","trigger","alert","requiresConfirmation","confirmLabel","confirmType","buttonLabels","confirm","cancel","hideDisabled","setTimeout","dispatch","render","className","id","Actions","primaryActions","props","filter","map","action","index","primaryAction","withReduxState","parentId","key","secondaryActions","secondaryActionsView","moreLabel","prompt","Prompt","length","options","Filter","itemFilter","label","itemFilterLabel","item","itemTooltipProps","onClear","clearItemFilter","crop","itemFilterCropLength","this","onRender","componentWillUnmount","onDestroy","containerClasses","defaultClasses","extraContainerClasses","isLoading","withSmallActions","prefixContentElement","prefixContent","style","width","children","removeDefaultContainerClasses","ActionBar","defaultProps","ActionBarConnected","state","ownProps","actionBar","actionBars","prompts","indexOf","itemFilters","onClearItemFilter","actionClasses","simple","opts","href","undefined","rel","title","tooltipPlacement","tooltip","actionIcon","svgName","svgClass","inside","placement","Right","onTriggerAction","confirmData","onTriggerConfirm","onConfirm","description","choices","onCloseDropdown","disabled","onClick","TriggerActionConnected","userChoice","isOpened","TriggerAction","PrimaryActionConnected","mergeProps","InlinePromptConnected","onCancel","choice","type","opened","itemFilterText","itemFilterLength","Math","abs","substring","SecondaryActions","lastFilteredAction","filteredActions","separator","actionItems","actionsItems","ActionsDropdown","toggleContent","dropdownItems","DropdownConnected","dropdowns","onDocumentClick","handleClick","handleDocumentClick","e","dropdown","contains","componentWillMount","document","addEventListener","removeEventListener","dropdownClasses","open","ref","ActionDropdownItem","ACTION_SEPARATOR"],"mappings":"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","file":"assets/988.bundle.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport {ExamplesStore} from '../../../../docs/Store';\r\nimport {IActionOptions} from '../Action';\r\nimport {ActionBarConnected} from '../ActionBar';\r\nimport {addActionsToActionBar} from '../ActionBarActions';\r\nimport {ACTION_SEPARATOR} from '../ActionConstants';\r\n\r\nconst actionBarId = 'action-bar-connected';\r\n\r\nexport class ActionBarConnectedExamples extends React.Component<any, any> {\r\n    componentDidMount() {\r\n        const actions: IActionOptions[] = [\r\n            ACTION_SEPARATOR,\r\n            {\r\n                name: 'Link to Coveo',\r\n                link: 'http://coveo.com',\r\n                target: '_blank',\r\n                icon: 'edit',\r\n                primary: true,\r\n                enabled: true,\r\n            },\r\n            ACTION_SEPARATOR,\r\n            {\r\n                name: 'Confirm Me',\r\n                trigger: () => alert('You confirmed this action !'),\r\n                target: '_blank',\r\n                icon: 'disable',\r\n                primary: true,\r\n                enabled: true,\r\n                requiresConfirmation: {\r\n                    confirmLabel: 'Want to do this action ?',\r\n                    confirmType: 'danger',\r\n                    buttonLabels: {\r\n                        confirm: 'sure !',\r\n                        cancel: 'never !',\r\n                    },\r\n                },\r\n            },\r\n            ACTION_SEPARATOR,\r\n            {\r\n                name: 'Action 1',\r\n                trigger: () => alert('Action 1 was triggered'),\r\n                enabled: true,\r\n                icon: 'edit',\r\n                requiresConfirmation: {\r\n                    confirmType: 'danger',\r\n                    buttonLabels: {\r\n                        confirm: 'Yes',\r\n                        cancel: 'Cancel',\r\n                    },\r\n                },\r\n            },\r\n            ACTION_SEPARATOR,\r\n            ACTION_SEPARATOR,\r\n            {\r\n                name: 'Action 2',\r\n                trigger: () => alert('Action 2 was triggered'),\r\n                enabled: true,\r\n                requiresConfirmation: {\r\n                    confirmType: 'danger',\r\n                    buttonLabels: {\r\n                        confirm: 'Pretty sure!',\r\n                        cancel: 'Cancel',\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                name: 'Action 4',\r\n                trigger: () => alert('Action 4 was triggered'),\r\n                enabled: true,\r\n            },\r\n            ACTION_SEPARATOR,\r\n            {\r\n                name: 'Link to Coveo (disabled)',\r\n                link: 'http://coveo.com',\r\n                target: '_blank',\r\n                icon: 'edit',\r\n                primary: true,\r\n                enabled: false,\r\n                hideDisabled: false,\r\n            },\r\n            {\r\n                name: 'Action 3',\r\n                trigger: () => alert('You cannot trigger me'),\r\n                icon: 'edit',\r\n                primary: true,\r\n                enabled: false,\r\n                hideDisabled: false,\r\n            },\r\n            ACTION_SEPARATOR,\r\n        ];\r\n        setTimeout(() => {\r\n            ExamplesStore.dispatch(addActionsToActionBar(actionBarId, actions));\r\n        }, 4000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Action bar with Redux state and inline prompt (actions appear after 4 seconds)\r\n                    </label>\r\n                    <ActionBarConnected id={actionBarId} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Content, IContentProps} from '../content/Content';\r\nimport {InlinePromptConnected} from '../inlinePrompt/InlinePrompt';\r\nimport {removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {IPromptState} from '../inlinePrompt/InlinePromptReducers';\r\nimport {ITooltipProps} from '../tooltip/Tooltip';\r\nimport {IActionOptions} from './Action';\r\nimport {addActionBar, removeActionBar} from './ActionBarActions';\r\nimport {IActionBarState} from './ActionBarReducers';\r\nimport {ItemFilter} from './filters/ItemFilter';\r\nimport {addItemFilter, filterItems, removeItemFilter} from './filters/ItemFilterActions';\r\nimport {IItemFilterState} from './filters/ItemFilterReducers';\r\nimport {PrimaryAction} from './PrimaryAction';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\nimport {SecondaryActions} from './SecondaryActions';\r\n\r\nexport interface IActionBarProps {\r\n    id?: string;\r\n    itemFilterLabel?: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClearItemFilter?: () => void;\r\n    extraContainerClasses?: string[];\r\n    removeDefaultContainerClasses?: boolean;\r\n    withSmallActions?: boolean;\r\n    prefixContent?: IContentProps;\r\n    width?: number;\r\n    moreLabel?: string;\r\n    itemFilterCropLength?: number;\r\n}\r\n\r\nexport class ActionBar extends React.PureComponent<\r\n    IActionBarProps & Partial<ReturnType<typeof mapStateToProps>> & Partial<ReturnType<typeof mapDispatchToProps>>\r\n> {\r\n    static defaultProps: Partial<IActionBarProps> = {\r\n        extraContainerClasses: [],\r\n        withSmallActions: false,\r\n    };\r\n\r\n    static defaultClasses = [\r\n        'coveo-table-actions-container',\r\n        'mod-cancel-header-padding',\r\n        'mod-border-bottom',\r\n        'mod-align-header',\r\n    ];\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        const containerClasses = classNames(this.defaultClasses, this.props.extraContainerClasses, {\r\n            'mod-deactivate-pointer': !!this.props.isLoading,\r\n            'small-actions-container': this.props.withSmallActions,\r\n        });\r\n\r\n        const prefixContentElement = this.props.prefixContent ? <Content {...this.props.prefixContent} /> : null;\r\n\r\n        return (\r\n            <div className={containerClasses} style={this.props.width ? {width: this.props.width} : null}>\r\n                {prefixContentElement}\r\n                <this.Filter />\r\n                <this.Actions />\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private get defaultClasses(): string {\r\n        return classNames(this.props.removeDefaultContainerClasses ? '' : ActionBar.defaultClasses);\r\n    }\r\n\r\n    private Actions: React.FunctionComponent = () => {\r\n        const primaryActions =\r\n            this.props.actions\r\n                ?.filter(({primary}) => !!primary)\r\n                .map((action: IActionOptions, index: number) => {\r\n                    const primaryAction = this.props.withReduxState ? (\r\n                        <PrimaryActionConnected action={action} parentId={this.props.id} />\r\n                    ) : (\r\n                        <PrimaryAction action={action} />\r\n                    );\r\n                    return (\r\n                        <div className=\"action primary-action\" key={`primary-${index}`}>\r\n                            {primaryAction}\r\n                        </div>\r\n                    );\r\n                }) ?? [];\r\n\r\n        const secondaryActions: IActionOptions[] = this.props.actions?.filter(({primary}) => !primary) ?? [];\r\n\r\n        let secondaryActionsView: JSX.Element = null;\r\n        if (!_.isEmpty(secondaryActions)) {\r\n            secondaryActionsView = (\r\n                <SecondaryActions id={this.props.id} moreLabel={this.props.moreLabel} actions={secondaryActions} />\r\n            );\r\n        }\r\n\r\n        const actions = this.props.prompt ? (\r\n            <this.Prompt />\r\n        ) : (\r\n            <>\r\n                {primaryActions}\r\n                {secondaryActionsView}\r\n            </>\r\n        );\r\n\r\n        return primaryActions.length || secondaryActionsView || this.props.prompt ? (\r\n            <div className=\"coveo-table-actions\">{actions}</div>\r\n        ) : null;\r\n    };\r\n\r\n    private Prompt: React.FunctionComponent = () =>\r\n        this.props.prompt?.options ? (\r\n            <div className=\"prompt\">\r\n                <InlinePromptConnected {...this.props.prompt} />\r\n            </div>\r\n        ) : null;\r\n\r\n    private Filter: React.FunctionComponent = () =>\r\n        this.props.itemFilter ? (\r\n            <ItemFilter\r\n                label={this.props.itemFilterLabel}\r\n                item={this.props.itemFilter}\r\n                itemTooltipProps={this.props.itemTooltipProps}\r\n                onClear={this.props.clearItemFilter}\r\n                crop={this.props.itemFilterCropLength}\r\n            />\r\n        ) : null;\r\n}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IActionBarProps) => {\r\n    const actionBar: IActionBarState = _.findWhere(state.actionBars, {id: ownProps.id});\r\n    const prompt: IPromptState = _.find(state.prompts, ({id}) => id.indexOf(ownProps.id) >= 0);\r\n    const itemFilter: IItemFilterState = _.findWhere(state.itemFilters, {id: ownProps.id});\r\n\r\n    return {\r\n        withReduxState: true,\r\n        actions: actionBar?.actions.filter(({enabled, hideDisabled}) => enabled || hideDisabled === false) ?? [],\r\n        isLoading: actionBar?.isLoading ?? false,\r\n        prompt,\r\n        itemFilter: itemFilter?.item ?? '',\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IActionBarProps) => ({\r\n    onRender: () => {\r\n        dispatch(addActionBar(ownProps.id));\r\n        if (ownProps.itemFilterLabel) {\r\n            dispatch(addItemFilter(ownProps.id));\r\n        }\r\n    },\r\n    onDestroy: () => {\r\n        dispatch(removeActionBar(ownProps.id));\r\n        dispatch(removeItemFilter(ownProps.id));\r\n        dispatch(removePrompt(ownProps.id));\r\n    },\r\n    clearItemFilter: () => {\r\n        ownProps.onClearItemFilter?.();\r\n        dispatch(filterItems(ownProps.id, ''));\r\n    },\r\n});\r\n\r\nexport const ActionBarConnected = connect(mapStateToProps, mapDispatchToProps)(ActionBar);\r\n","import * as React from 'react';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {IBasicActionProps} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerAction, TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IPrimaryActionOwnProps extends React.ClassAttributes<PrimaryAction>, IBasicActionProps {\r\n    parentId?: string;\r\n}\r\n\r\nexport interface IPrimaryActionStateProps extends IReduxStatePossibleProps {}\r\n\r\nexport interface IPrimaryActionProps extends IPrimaryActionOwnProps, IPrimaryActionStateProps {}\r\n\r\nexport class PrimaryAction extends React.Component<IPrimaryActionProps, any> {\r\n    render() {\r\n        const action: JSX.Element = this.props.action.link ? (\r\n            <LinkAction action={this.props.action} />\r\n        ) : this.props.withReduxState ? (\r\n            <TriggerActionConnected action={this.props.action} parentId={this.props.parentId} />\r\n        ) : (\r\n            <TriggerAction action={this.props.action} />\r\n        );\r\n\r\n        return <div>{action}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Action, IBasicActionProps} from './Action';\r\n\r\nexport interface ILinkActionProps extends React.ClassAttributes<LinkAction>, IBasicActionProps {}\r\n\r\nexport class LinkAction extends React.Component<ILinkActionProps> {\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && !this.props.action.hideDisabled,\r\n            'inline-flex flex-center': !this.props.simple,\r\n        });\r\n        const opts: React.AllHTMLAttributes<HTMLAnchorElement> = {\r\n            children: <Action action={this.props.action} simple={this.props.simple} />,\r\n        };\r\n        const href = this.props.action.enabled ? this.props.action.link : undefined;\r\n        if (this.props.action.target) {\r\n            opts.target = this.props.action.enabled ? this.props.action.target : undefined;\r\n            opts.rel = 'noopener noreferrer';\r\n        }\r\n\r\n        return <a className={actionClasses} href={href} title={this.props.action.name} {...opts} />;\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IConfirmButtonLabel {\r\n    cancel: string;\r\n    confirm: string;\r\n}\r\n\r\nexport interface IConfirmData {\r\n    confirmType: string;\r\n    confirmLabel?: string;\r\n    buttonLabels?: IConfirmButtonLabel;\r\n}\r\n\r\nexport interface IBaseActionOptions {\r\n    enabled: boolean;\r\n    name?: string;\r\n    link?: string;\r\n    target?: string;\r\n    primary?: boolean;\r\n    tooltip?: string;\r\n    tooltipPlacement?: string;\r\n    hideDisabled?: boolean;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport interface IActionOptions extends IBaseActionOptions {\r\n    icon?: string;\r\n    iconClass?: string;\r\n    id?: string;\r\n    trigger?: () => void;\r\n    unrepeatable?: boolean;\r\n    callOnDoubleClick?: boolean;\r\n    requiresConfirmation?: IConfirmData;\r\n    separator?: boolean;\r\n    grouped?: boolean;\r\n    subActions?: IActionOptions[];\r\n    hidden?: boolean;\r\n}\r\n\r\nexport interface IBasicActionProps {\r\n    action: IActionOptions;\r\n    simple?: boolean;\r\n}\r\n\r\nexport interface IActionProps extends React.ClassAttributes<Action>, IBasicActionProps {}\r\n\r\nexport class Action extends React.Component<IActionProps, any> {\r\n    static defaultProps: Partial<IActionOptions> = {\r\n        hideDisabled: true,\r\n    };\r\n\r\n    render() {\r\n        const {icon, id, name, tooltipPlacement, tooltip} = this.props.action;\r\n        const actionIcon: JSX.Element = icon ? (\r\n            <Svg svgName={icon} className=\"action-icon\" svgClass=\"icon fill-medium-blue\" />\r\n        ) : (\r\n            <Svg svgName=\"more\" className=\"action-icon action-icon-more\" svgClass=\"icon icon-medium fill-medium-blue\" />\r\n        );\r\n        const inside: string | JSX.Element = this.props.simple ? (\r\n            name\r\n        ) : (\r\n            <span className=\"inline-flex flex-center\">\r\n                {actionIcon}\r\n                <span className=\"action-label\" data-trigger={id || name}>\r\n                    {name}\r\n                </span>\r\n            </span>\r\n        );\r\n        const placement: string = tooltipPlacement || TooltipPlacement.Right;\r\n        const wholeAction: JSX.Element = tooltip ? (\r\n            <Tooltip title={tooltip} placement={placement}>\r\n                {inside}\r\n            </Tooltip>\r\n        ) : (\r\n            <span>{inside}</span>\r\n        );\r\n\r\n        return wholeAction;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {closeDropdown} from '../dropdown/DropdownActions';\r\nimport {IUserChoice} from '../inlinePrompt/InlinePrompt';\r\nimport {addPrompt, removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {Action, IBasicActionProps, IConfirmData} from './Action';\r\n\r\nexport interface ITriggerActionOwnProps extends React.ClassAttributes<TriggerAction>, IBasicActionProps {\r\n    confirmLabel?: string;\r\n    parentId?: string;\r\n}\r\n\r\nexport interface ITriggerActionProps extends ITriggerActionOwnProps, Partial<ReturnType<typeof mapDispatchToProps>> {}\r\n\r\nexport const CONFIRM_LABEL: string = 'Are you sure?';\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: ITriggerActionOwnProps\r\n) => ({\r\n    onTriggerConfirm: (onClick: () => void, userChoice: IUserChoice, className: string) => {\r\n        dispatch(addPrompt(ownProps.parentId, {onClick, userChoice, isOpened: false, className}));\r\n    },\r\n    onConfirm: () => dispatch(removePrompt(ownProps.parentId)),\r\n    onCloseDropdown: () => dispatch(closeDropdown(ownProps.parentId)),\r\n});\r\n\r\nexport class TriggerAction extends React.Component<ITriggerActionProps, any> {\r\n    private onTriggerAction() {\r\n        const confirmData: IConfirmData = this.props.action.requiresConfirmation;\r\n        if (confirmData && this.props.onTriggerConfirm) {\r\n            const confirmLabel: string =\r\n                this.props.confirmLabel || this.props.action.requiresConfirmation.confirmLabel || CONFIRM_LABEL;\r\n            const icon: string = this.props.action.icon;\r\n            this.props.onTriggerConfirm(\r\n                () => {\r\n                    if (this.props.action.trigger) {\r\n                        this.props.action.trigger();\r\n                    }\r\n                    if (this.props.onConfirm) {\r\n                        this.props.onConfirm();\r\n                    }\r\n                },\r\n                {\r\n                    icon: icon,\r\n                    description: confirmLabel,\r\n                    cancel: confirmData.buttonLabels.cancel,\r\n                    choices: {\r\n                        confirm: confirmData.buttonLabels.confirm,\r\n                    },\r\n                },\r\n                confirmData.confirmType\r\n            );\r\n        } else {\r\n            if (this.props.action.trigger) {\r\n                this.props.action.trigger();\r\n                this.props.onCloseDropdown && this.props.onCloseDropdown();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && (this.props.simple || !this.props.action.hideDisabled),\r\n            disabled: !this.props.action.enabled && !this.props.simple,\r\n        });\r\n\r\n        return (\r\n            <span\r\n                onClick={() => this.props.action.enabled && this.onTriggerAction()}\r\n                className={actionClasses}\r\n                title={this.props.action.name}\r\n            >\r\n                <Action action={this.props.action} simple={this.props.simple} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport const TriggerActionConnected = connect(undefined, mapDispatchToProps)(TriggerAction);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IPrimaryActionProps, IPrimaryActionStateProps, PrimaryAction} from './PrimaryAction';\r\n\r\nconst mapStateToProps = (): IPrimaryActionStateProps => ({\r\n    withReduxState: true,\r\n});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport const PrimaryActionConnected: React.ComponentClass<IPrimaryActionProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(PrimaryAction);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {removePrompt} from './InlinePromptActions';\r\n\r\nexport interface IUserChoice {\r\n    description?: string;\r\n    cancel?: string;\r\n    choices?: Record<string, string>;\r\n    icon?: string;\r\n}\r\n\r\nexport interface IInlinePromptOptions {\r\n    onClick: () => void;\r\n    userChoice: IUserChoice;\r\n    isOpened?: boolean;\r\n    className?: string;\r\n}\r\n\r\nexport interface IInlinePromptProps {\r\n    id?: string;\r\n    options: IInlinePromptOptions;\r\n}\r\n\r\nexport const InlinePrompt: React.FunctionComponent<IInlinePromptProps &\r\n    Partial<ReturnType<typeof mapDispatchToProps>>> = ({options, onCancel}) => {\r\n    const icon: JSX.Element = options.userChoice.icon ? (\r\n        <Svg svgName={options.userChoice.icon} className=\"prompt-icon mr1\" svgClass=\"icon mod-2x fill-medium-blue\" />\r\n    ) : null;\r\n\r\n    const choices: JSX.Element[] = _.map(options.userChoice.choices, (choice: string) => (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn action mod-danger prompt-action enabled\"\r\n            onClick={options.onClick}\r\n            key={choice}\r\n        >\r\n            {choice}\r\n        </button>\r\n    ));\r\n\r\n    const description: JSX.Element = options.userChoice.description ? (\r\n        <span className=\"description\">{options.userChoice.description}</span>\r\n    ) : null;\r\n\r\n    const cancel: JSX.Element = options.userChoice.cancel ? (\r\n        <button type=\"button\" className=\"btn cancel prompt-action enabled\" onClick={onCancel}>\r\n            {options.userChoice.cancel}\r\n        </button>\r\n    ) : null;\r\n\r\n    const className = classNames(`prompt-${options.className ?? 'info'}`, {opened: options.isOpened});\r\n\r\n    return (\r\n        <span className={className}>\r\n            <span className=\"label-confirmation\">\r\n                {icon}\r\n                {description}\r\n            </span>\r\n            {choices}\r\n            {cancel}\r\n        </span>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IInlinePromptProps) => ({\r\n    onCancel: () => dispatch(removePrompt(ownProps.id)),\r\n});\r\n\r\nexport const InlinePromptConnected = connect(null, mapDispatchToProps)(InlinePrompt);\r\n","import * as React from 'react';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ITooltipProps, Tooltip} from '../../tooltip/Tooltip';\r\n\r\nexport interface IItemFilterProps extends React.ClassAttributes<ItemFilter> {\r\n    label: string;\r\n    item: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClear: () => void;\r\n    crop?: number;\r\n}\r\n\r\nexport const ELLIPSIS: string = '...';\r\n\r\nexport class ItemFilter extends React.Component<IItemFilterProps, any> {\r\n    render() {\r\n        let itemFilterText: string = this.props.item;\r\n        if (this.props.crop) {\r\n            const itemFilterLength: number = itemFilterText.length;\r\n\r\n            if (itemFilterLength > Math.abs(this.props.crop)) {\r\n                itemFilterText =\r\n                    this.props.crop > 0\r\n                        ? itemFilterText.substring(0, this.props.crop) + ELLIPSIS\r\n                        : ELLIPSIS + itemFilterText.substring(itemFilterLength + this.props.crop, itemFilterLength);\r\n            }\r\n        }\r\n\r\n        const itemFilter: JSX.Element = this.props.itemTooltipProps ? (\r\n            <Tooltip {...this.props.itemTooltipProps}>\r\n                <span className=\"item-filter-item\">{itemFilterText}</span>\r\n            </Tooltip>\r\n        ) : (\r\n            <span className=\"item-filter-item\">{itemFilterText}</span>\r\n        );\r\n\r\n        return (\r\n            <div className=\"coveo-table-actions item-filter\">\r\n                <span className=\"item-filter-label\">{this.props.label}: </span>\r\n                {itemFilter}\r\n                <button className=\"item-filter-clear\" onClick={() => this.props.onClear()}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-dark-blue\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {isEmpty} from 'underscore';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {ActionsDropdown} from './ActionsDropdown';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\n\r\nexport interface ISecondaryActionsProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport const SecondaryActions: React.FunctionComponent<ISecondaryActionsProps> = ({actions, id, moreLabel}) => {\r\n    let lastFilteredAction: IActionOptions = null;\r\n    const filteredActions = actions\r\n        // filter out disabled actions\r\n        .filter((action: IActionOptions) => action.separator || action.enabled || action.hideDisabled === false)\r\n        // Filter out all separator that are preceded by another separator\r\n        .filter((action: IActionOptions) => {\r\n            if (!action.separator || (action.separator && lastFilteredAction && !lastFilteredAction.separator)) {\r\n                lastFilteredAction = action;\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        // Filter out the last action if it's a separator\r\n        .filter((action: IActionOptions, index: number, actionItems: IActionOptions[]) => {\r\n            return index < actionItems.length - 1 || !action.separator;\r\n        });\r\n\r\n    if (isEmpty(filteredActions)) {\r\n        return null;\r\n    } else {\r\n        const actionsItems: JSX.Element =\r\n            filteredActions?.length === 1 ? (\r\n                <PrimaryActionConnected action={filteredActions[0]} parentId={id} />\r\n            ) : (\r\n                <ActionsDropdown moreLabel={moreLabel} actions={filteredActions} id={`${id}_actionsDropdown`} />\r\n            );\r\n        return <div className=\"dropdown action primary-action\">{actionsItems}</div>;\r\n    }\r\n};\r\n\r\n/**\r\n * @deprecated use SecondaryActions directly\r\n */\r\nexport const SecondaryActionsConnected = SecondaryActions;\r\n","import * as React from 'react';\r\n\r\nimport {DropdownConnected} from '../dropdown/DropdownConnected';\r\nimport {Svg} from '../svg/Svg';\r\nimport {IActionOptions} from './Action';\r\nimport {ActionDropdownItem} from './ActionDropdownItem';\r\n\r\nexport interface IActionsDropdownProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport const MORE_LABEL: string = 'More';\r\n\r\nexport const ActionsDropdown: React.FunctionComponent<IActionsDropdownProps> = ({actions, moreLabel, id}) => {\r\n    const actionItems = actions?.map((action: IActionOptions, index: number) => (\r\n        <ActionDropdownItem key={`action-${action.id ?? index}`} action={action} parentId={id} />\r\n    ));\r\n\r\n    const toggleContent: JSX.Element[] = [\r\n        <Svg\r\n            key=\"action-dropdown-toggle-icon\"\r\n            svgName=\"more\"\r\n            className=\"action-icon\"\r\n            svgClass=\"icon icon-medium fill-medium-blue\"\r\n        />,\r\n        <span key=\"action-dropdown-toggle-label\" className=\"action-label\" data-trigger=\"more\">\r\n            {moreLabel || MORE_LABEL}\r\n        </span>,\r\n    ];\r\n\r\n    return <DropdownConnected toggleContent={toggleContent} dropdownItems={actionItems} id={id} />;\r\n};\r\n\r\n/**\r\n * @deprecated use ActionsDropdown directly instead\r\n */\r\nexport const ActionsDropdownConnected = ActionsDropdown;\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {Dropdown, IDropdownDispatchProps, IDropdownOwnProps, IDropdownProps, IDropdownStateProps} from './Dropdown';\r\nimport {addDropdown, closeDropdown, removeDropdown, toggleDropdown} from './DropdownActions';\r\nimport {IDropdownState} from './DropdownReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IDropdownOwnProps): IDropdownStateProps => {\r\n    const item: IDropdownState = _.findWhere(state.dropdowns, {id: ownProps.id});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IDropdownOwnProps\r\n): IDropdownDispatchProps => ({\r\n    onRender: () => dispatch(addDropdown(ownProps.id)),\r\n    onDestroy: () => dispatch(removeDropdown(ownProps.id)),\r\n    onClick: () => dispatch(toggleDropdown(ownProps.id)),\r\n    onDocumentClick: () => dispatch(closeDropdown(ownProps.id)),\r\n});\r\n\r\nexport const DropdownConnected: React.ComponentClass<IDropdownProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Dropdown);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nexport interface IDropdownOwnProps extends React.ClassAttributes<Dropdown> {\r\n    id?: string;\r\n    toggleContent: JSX.Element[];\r\n    dropdownItems: JSX.Element[];\r\n    className?: string;\r\n}\r\n\r\nexport interface IDropdownStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IDropdownDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onClick?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IDropdownProps extends IDropdownOwnProps, IDropdownStateProps, IDropdownDispatchProps {}\r\n\r\nexport class Dropdown extends React.Component<IDropdownProps, any> {\r\n    private dropdown: HTMLDivElement;\r\n\r\n    private handleClick = () => {\r\n        if (this.props.onClick) {\r\n            this.props.onClick();\r\n        }\r\n    };\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.dropdown);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dropdownClasses = classNames('dropdown', {open: this.props.isOpened}, this.props.className);\r\n\r\n        return (\r\n            <div className={dropdownClasses} ref={(dropdown: HTMLDivElement) => (this.dropdown = dropdown)}>\r\n                <span className=\"dropdown-toggle inline-flex flex-center\" onClick={() => this.handleClick()}>\r\n                    {this.props.toggleContent}\r\n                </span>\r\n                <ul className=\"dropdown-menu normal-height\">{this.props.dropdownItems}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IActionDropdownItemProps {\r\n    action: IActionOptions;\r\n    parentId?: string;\r\n}\r\n\r\nexport const ActionDropdownItem: React.FunctionComponent<IActionDropdownItemProps> = ({parentId, action}) => {\r\n    if (action.separator) {\r\n        return <li className=\"divider\" />;\r\n    }\r\n\r\n    if (action.link) {\r\n        return (\r\n            <li>\r\n                <LinkAction action={action} simple={true} />\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <TriggerActionConnected action={action} simple={true} parentId={parentId} />\r\n        </li>\r\n    );\r\n};\r\n","import {IActionOptions} from './Action';\r\n\r\nexport const ACTION_SEPARATOR: IActionOptions = {\r\n    separator: true,\r\n    enabled: true,\r\n};\r\n"],"sourceRoot":""}