{"version":3,"sources":["webpack:///./src/components/popover/examples/PopoverConnectedExamples.tsx?d926","webpack:///./src/components/popover/Popover.tsx?2db2","webpack:///./src/components/splitlayout/SplitLayout.tsx?b9d1","webpack:///./src/components/popover/PopoverConnected.tsx?f6a6"],"names":["leftContent","className","count","sentenceUpperBound","rightContent","style","position","paddingBottom","height","top","left","width","src","frameBorder","PopoverConnectedExamples","id","attachment","targetAttachment","leftChildren","rightChildren","marginLeft","bottom","enabled","small","name","PopoverExample","description","props","state","handleDocumentClick","event","isOpen","tetherToggle","current","tetherElement","target","contains","isModal","stopImmediatePropagation","preventDefault","toggleOpened","onToggle","componentDidMount","this","onMount","isOpenOnMount","document","addEventListener","componentWillUnmount","onUnmount","removeEventListener","render","children","toArray","ref","onClick","hide","setState","SplitLayout","leftContainerClassName","rightContainerClassName","PopoverConnected","ownProps","popoverState","popovers","dispatch","mergeProps"],"mappings":"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","file":"assets/996.bundle.js","sourcesContent":["import * as React from 'react';\n\nimport * as loremIpsum from 'lorem-ipsum';\nimport {ExampleComponent} from '../../../../docs/src/components/ComponentsInterface';\nimport {Button} from '../../button/Button';\nimport {SplitLayout} from '../../splitlayout/SplitLayout';\nimport {PopoverConnected} from '../PopoverConnected';\n\nconst leftContent = (\n    <div>\n        <h2 className=\"h2\">Popover Title Lorem</h2>\n        <p className=\"h3 pt2 pb2\">I am popping under the button. {loremIpsum({count: 5, sentenceUpperBound: 15})}</p>\n    </div>\n);\nconst rightContent = (\n    <div\n        className=\"video\"\n        style={{\n            position: 'relative',\n            paddingBottom: '56.25%',\n            height: 0,\n        }}\n    >\n        <iframe\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n            }}\n            src={'https://www.youtube.com/embed/kmUTQMpi4BI'}\n            frameBorder=\"0\"\n        />\n    </div>\n);\n\nconst PopoverConnectedExamples = () => (\n    <div className=\"mb5\">\n        <div className=\"mt2 mb3\">\n            <PopoverConnected\n                id=\"popover-connected-example1\"\n                attachment=\"top left\"\n                targetAttachment=\"bottom left\"\n                className=\"mod-width-70\"\n            >\n                <div className=\"btn inline-block\">Click to toggle the popover</div>\n                <div className=\"coveo-child pb5\">\n                    <SplitLayout\n                        className=\"pb4\"\n                        leftChildren={<div className=\"m2\">{leftContent}</div>}\n                        rightChildren={<div className=\"m2\">{rightContent}</div>}\n                    />\n                    <div\n                        className=\"modal-footer mod-small bg-pure-white\"\n                        style={{\n                            position: 'absolute',\n                            marginLeft: '-20px',\n                            width: '100%',\n                            bottom: 0,\n                        }}\n                    >\n                        <Button enabled={true} small={true} name=\"Action Lorem\" />\n                    </div>\n                </div>\n            </PopoverConnected>\n        </div>\n        <div className=\"display-block w100 mb5\">\n            <p className=\"h3 mb2\">{loremIpsum({count: 5, sentenceUpperBound: 15})}</p>\n            <p className=\"h3 mb2\">{loremIpsum({count: 5, sentenceUpperBound: 15})}</p>\n        </div>\n    </div>\n);\n\nexport const PopoverExample: ExampleComponent = PopoverConnectedExamples;\nPopoverConnectedExamples.description =\n    'Popovers provide additional details or interactions. They are visually attached to interactive elements and support various contents and layouts.';\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {findDOMNode} from 'react-dom';\r\nimport TetherComponent from 'react-tether';\r\nimport * as _ from 'underscore';\r\n\r\nexport interface ITetherComponentCopiedProps {\r\n    renderElementTag?: string;\r\n    renderElementTo?: Element | string;\r\n    attachment: string;\r\n    targetAttachment?: string;\r\n    offset?: string;\r\n    targetOffset?: string;\r\n    targetModifier?: string;\r\n    enabled?: boolean;\r\n    classes?: any;\r\n    className?: string;\r\n    style?: {[key: string]: any};\r\n    classPrefix?: string;\r\n    optimizations?: {[key: string]: any};\r\n    constraints?: any[];\r\n    onUpdate?: (...args: any[]) => void;\r\n    onRepositioned?: (...args: any[]) => void;\r\n}\r\n\r\nexport interface IPopoverDispatchProps {\r\n    onToggle?: (isOpen: boolean) => void;\r\n    onMount?: (isOpen: boolean) => void;\r\n    onUnmount?: () => void;\r\n}\r\n\r\nexport interface IPopoverProps extends IPopoverDispatchProps, ITetherComponentCopiedProps {\r\n    id?: string;\r\n    /**\r\n     * Optionnal, use it to specify the isOpen state of the Popover.\r\n     * @default: false\r\n     */\r\n    isOpen?: boolean;\r\n    isOpenOnMount?: boolean;\r\n\r\n    /**\r\n     * Optionnal, a callback fired when the Popover wishes to change visibility. Called with the requested `isOpen` value. Use this prop if\r\n     * you want to control the Popover state. Let it undefined if you want the Popover to control his state itself.\r\n     */\r\n    onToggle?: (isOpen: boolean) => void;\r\n\r\n    /**\r\n     * Optionnal, use it to prevent default when the Popover isOpen and the user clicks outside.\r\n     * @default: false\r\n     */\r\n    isModal?: boolean;\r\n}\r\n\r\nexport interface IPopoverState {\r\n    isOpen?: boolean;\r\n}\r\n\r\nexport class Popover extends React.Component<IPopoverProps, IPopoverState> {\r\n    private tetherToggle: React.RefObject<HTMLDivElement>;\r\n    private tetherElement: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: IPopoverProps, state: IPopoverState) {\r\n        super(props, state);\r\n\r\n        this.tetherToggle = React.createRef();\r\n        this.tetherElement = React.createRef();\r\n\r\n        // If onToggle wasn't passed, Popover is uncontrolled and we set an initial state.\r\n        if (!_.isFunction(this.props.onToggle)) {\r\n            this.state = {\r\n                isOpen: !!this.props.isOpen,\r\n            };\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onMount?.(this.props.isOpenOnMount);\r\n        document.addEventListener('click', this.handleDocumentClick, true);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onUnmount?.();\r\n        document.removeEventListener('click', this.handleDocumentClick, true);\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n\r\n        const isOpen: boolean = (this.state && this.state.isOpen) || this.props.isOpen;\r\n\r\n        return (\r\n            <TetherComponent {..._.omit(this.props, 'children')}>\r\n                <div ref={this.tetherToggle} onClick={() => this.toggleOpened(!isOpen)}>\r\n                    {children[0]}\r\n                </div>\r\n                <div ref={this.tetherElement} className={classNames({hide: !isOpen}, 'shadow-2')}>\r\n                    {children[1]}\r\n                </div>\r\n            </TetherComponent>\r\n        );\r\n    }\r\n\r\n    toggleOpened(isOpen: boolean) {\r\n        if (_.isFunction(this.props.onToggle)) {\r\n            this.props.onToggle(isOpen);\r\n        } else {\r\n            this.setState({\r\n                isOpen: isOpen,\r\n            });\r\n        }\r\n    }\r\n\r\n    // Using a fat arrow function instead of a method here to bind it to context and to make sure we have the same listener for both\r\n    // addEventListener and removeEventListener and therefore prevent leaking listeners.\r\n    private handleDocumentClick: EventListener = (event: Event) => {\r\n        if (this.props.isOpen) {\r\n            const tetherToggle: Element | Text = findDOMNode(this.tetherToggle.current);\r\n            const tetherElement: Element | Text = findDOMNode(this.tetherElement.current);\r\n            const target: Node = event.target as Node;\r\n\r\n            if (!tetherElement.contains(target) && !tetherToggle.contains(target)) {\r\n                if (this.props.isModal) {\r\n                    event.stopImmediatePropagation();\r\n                    event.preventDefault();\r\n                }\r\n\r\n                this.toggleOpened(false);\r\n            }\r\n        }\r\n    };\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ISplitLayoutProps {\r\n    leftChildren?: React.ReactNode;\r\n    rightChildren?: React.ReactNode;\r\n    className?: string | string[];\r\n    leftContainerClassName?: string | string[];\r\n    rightContainerClassName?: string | string[];\r\n}\r\n\r\nexport const SplitLayout = (props: ISplitLayoutProps): JSX.Element => (\r\n    <div className={classNames('split-layout', props.className)}>\r\n        <div className={classNames('column', props.leftContainerClassName)}>{props.leftChildren}</div>\r\n        <div className={classNames('column', props.rightContainerClassName)}>{props.rightChildren}</div>\r\n    </div>\r\n);\r\n","import {connect} from 'react-redux';\r\nimport {findWhere} from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IPopoverDispatchProps, IPopoverProps, IPopoverState, Popover} from './Popover';\r\nimport {addPopover, removePopover, setPopoverIsOpen} from './PopoverActions';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IPopoverProps): IPopoverState => {\r\n    const popoverState = findWhere(state.popovers, {id: ownProps.id});\r\n\r\n    return {isOpen: popoverState && popoverState.isOpen};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IPopoverProps): IPopoverDispatchProps => ({\r\n    onToggle: (isOpen: boolean) => dispatch(setPopoverIsOpen(ownProps.id, isOpen)),\r\n    onMount: (isOpen: boolean = false) => dispatch(addPopover(ownProps.id, isOpen)),\r\n    onUnmount: () => dispatch(removePopover(ownProps.id)),\r\n});\r\n\r\nexport const PopoverConnected: React.ComponentClass<IPopoverProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Popover);\r\n"],"sourceRoot":""}