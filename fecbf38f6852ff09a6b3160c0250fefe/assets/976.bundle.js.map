{"version":3,"sources":["webpack:///./src/components/blankSlate/examples/BlankSlateExample.tsx?cfc1","webpack:///./src/components/refresh/RefreshCallback.tsx?1738","webpack:///./src/components/refresh/ButtonWithRefreshCallback.tsx?5b8c","webpack:///./src/components/blankSlate/BlankSlateWithError.tsx?f438","webpack:///./src/components/blankSlate/BlankSlateWithTable.tsx?5bb7","webpack:///./src/components/blankSlate/BlankSlatesHOC.tsx?a4e2"],"names":["render","className","title","description","href","withModal","buttons","name","primary","enabled","link","svgName","svgClass","additionalSection","id","delay","callback","start","setTimeout","renderCount","count","button","buttonContainerProps","state","props","this","status","inProgress","stopped","started","stopInterval","clearInterval","activeInterval","startInterval","window","setInterval","setState","prevState","REFRESH_CALLBACK_INTERVAL_MS","componentDidMount","componentDidUpdate","prevProps","isStarted","isStopped","componentWillUnmount","isInProgress","stop","defaultProps","RefreshCallback","ownProps","getRefreshStatus","dispatch","RefreshCallbackDisconnected","isNotStopped","ButtonWithRefreshCallback","onClick","refreshCallbackProps","blankSlateWithError","Component","info","classes","children","blankSlateWithTable","numberOfColumn","colSpan","componentProps","BlankSlateWithTable","BlankSlateWithTableInError","BlankSlateWithError"],"mappings":"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","file":"assets/976.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {ButtonWithRefreshCallback} from '../../refresh/ButtonWithRefreshCallback';\r\nimport {BlankSlate} from '../BlankSlate';\r\nimport {BlankSlateWithError, BlankSlateWithTable, BlankSlateWithTableInError} from '../BlankSlatesHOC';\r\n\r\nexport class BlankSlateExample extends React.Component<any, any> {\r\n    render() {\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Default BlankSlate</label>\r\n                    <BlankSlate />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with title</label>\r\n                    <BlankSlate title=\"Title test\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with title and description</label>\r\n                    <BlankSlate title=\"Title test\" description=\"description test\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with title and description with a link</label>\r\n                    <BlankSlate\r\n                        title=\"Title test\"\r\n                        description={\r\n                            <span>\r\n                                This is a description with a link to <a href=\"https//www.google.com\">this website</a>\r\n                            </span>\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate to fit in a modal</label>\r\n                    <BlankSlate title=\"Title test\" description=\"Description test\" withModal={true} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with a button</label>\r\n                    <BlankSlate\r\n                        title=\"Title test\"\r\n                        buttons={[\r\n                            {\r\n                                name: 'button',\r\n                                primary: true,\r\n                                enabled: true,\r\n                            },\r\n                        ]}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with two button with one disabled</label>\r\n                    <BlankSlate\r\n                        title=\"Title test\"\r\n                        buttons={[\r\n                            {\r\n                                name: 'button 1',\r\n                                primary: true,\r\n                                enabled: true,\r\n                            },\r\n                            {\r\n                                name: 'button 2',\r\n                                enabled: false,\r\n                                link: 'link',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate with an icon</label>\r\n                    <BlankSlate\r\n                        title=\"Title test\"\r\n                        description=\"description test\"\r\n                        svgName=\"tips\"\r\n                        svgClass=\"fill-orange\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate in error</label>\r\n                    <BlankSlateWithError\r\n                        title=\"Unable to retrieve X\"\r\n                        description=\"Super clear error message localized to ensure a good comprehension about the current error\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate for a table row</label>\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Firstname</th>\r\n                                <th>Lastname</th>\r\n                                <th>Age</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <BlankSlateWithTable\r\n                                title=\"Title test\"\r\n                                description=\"description test\"\r\n                                svgName=\"tips\"\r\n                                svgClass=\"fill-orange\"\r\n                            />\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate for a table in error</label>\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Firstname</th>\r\n                                <th>Lastname</th>\r\n                                <th>Age</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <BlankSlateWithTableInError\r\n                                title=\"Unable to retrieve X\"\r\n                                description=\"Super clear error message localized to ensure a good comprehension about the current error\"\r\n                            />\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">BlankSlate for a table in error</label>\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Firstname</th>\r\n                                <th>Lastname</th>\r\n                                <th>Age</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <BlankSlateWithTableInError\r\n                                title=\"Unable to retrieve X\"\r\n                                description=\"Super clear error message localized to ensure a good comprehension about the current error\"\r\n                                additionalSection={\r\n                                    <ButtonWithRefreshCallback\r\n                                        id=\"refresh\"\r\n                                        delay={10}\r\n                                        callback={(start) => setTimeout(start, 2000)}\r\n                                        renderCount={(count: number) => (\r\n                                            <span className=\"text-black small-text\">\r\n                                                Auto refresh in {count} seconds\r\n                                            </span>\r\n                                        )}\r\n                                        button={{\r\n                                            name: 'Refresh',\r\n                                            enabled: true,\r\n                                        }}\r\n                                        buttonContainerProps={{\r\n                                            className: 'mb2',\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {Defaults} from '../../Defaults';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {RefreshCallBackActions} from './RefeshCallbackActions';\nimport {RefreshStatus, RefreshStatusSelectors} from './RefreshCallbackReducer';\n\nexport interface IRefreshCallbackOwnProps {\n    id: string;\n    delay?: number;\n    renderCount?: (count: number) => React.ReactNode;\n    callback: (start: () => void) => void;\n}\n\nexport interface IRefreshCallbackState {\n    count: number;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IRefreshCallbackOwnProps) => ({\n    status: RefreshStatusSelectors.getRefreshStatus(state, {id: ownProps.id}),\n});\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IRefreshCallbackOwnProps) => ({\n    start: () => dispatch(RefreshCallBackActions.start(ownProps.id)),\n    stop: () => dispatch(RefreshCallBackActions.stop(ownProps.id)),\n    inProgress: () => dispatch(RefreshCallBackActions.inProgress(ownProps.id)),\n});\n\nexport type IRefreshCallbackProps = IRefreshCallbackOwnProps &\n    ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>;\n\nclass RefreshCallbackDisconnected extends React.PureComponent<IRefreshCallbackProps, IRefreshCallbackState> {\n    static defaultProps: Partial<IRefreshCallbackProps> = {\n        delay: 10,\n        renderCount: (count: number) => <span>Auto refresh in {count} seconds</span>,\n    };\n\n    private activeInterval: number;\n\n    state = {\n        count: this.props.delay,\n    };\n\n    get isInProgress() {\n        return this.state.count === 0 && this.props.status === RefreshStatus.inProgress;\n    }\n\n    get isStopped() {\n        return this.props.status === RefreshStatus.stopped;\n    }\n\n    get isStarted() {\n        return this.props.status === RefreshStatus.started;\n    }\n\n    private stopInterval() {\n        clearInterval(this.activeInterval);\n    }\n\n    private startInterval() {\n        this.activeInterval = window.setInterval(() => {\n            this.setState((prevState: IRefreshCallbackState) => ({\n                count: prevState.count - 1,\n            }));\n        }, Defaults.REFRESH_CALLBACK_INTERVAL_MS);\n        this.props.inProgress();\n    }\n\n    componentDidMount() {\n        this.startInterval();\n    }\n\n    componentDidUpdate(prevProps: Readonly<IRefreshCallbackProps>, prevState: Readonly<IRefreshCallbackState>) {\n        if (this.isStarted) {\n            this.stopInterval();\n            this.setState({\n                count: this.props.delay,\n            });\n            this.startInterval();\n        } else if (this.isStopped) {\n            this.stopInterval();\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    render() {\n        if (this.isInProgress) {\n            this.stopInterval();\n            this.props.stop();\n            this.props.callback?.(this.props.start);\n        }\n\n        return this.props.renderCount(this.state.count);\n    }\n}\n\nexport const RefreshCallback = connect(mapStateToProps, mapDispatchToProps)(RefreshCallbackDisconnected);\n","import {FunctionComponent} from 'react';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport {IReactVaporState} from '../../ReactVapor';\nimport {IDispatch} from '../../utils/ReduxUtils';\nimport {Button, IButtonProps} from '../button/Button';\nimport {RefreshCallBackActions} from './RefeshCallbackActions';\nimport {IRefreshCallbackOwnProps, RefreshCallback} from './RefreshCallback';\nimport {RefreshStatus, RefreshStatusSelectors} from './RefreshCallbackReducer';\n\nexport interface IButtonWithRefreshCallbackProps extends IRefreshCallbackOwnProps {\n    buttonContainerProps?: React.HtmlHTMLAttributes<HTMLDivElement>;\n    button: IButtonProps;\n}\n\nconst mapStateToProps = (state: IReactVaporState, ownProps: IButtonWithRefreshCallbackProps) => ({\n    status: RefreshStatusSelectors.getRefreshStatus(state, {id: ownProps.id}),\n});\n\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IButtonWithRefreshCallbackProps) => ({\n    start: () => dispatch(RefreshCallBackActions.start(ownProps.id)),\n    stop: () => dispatch(RefreshCallBackActions.stop(ownProps.id)),\n});\n\nconst isNotStopped = (status: string) => status !== RefreshStatus.stopped;\n\nconst buttonWithRefreshCallbackDisconnected: FunctionComponent<IButtonWithRefreshCallbackProps &\n    Partial<ReturnType<typeof mapStateToProps>> &\n    Partial<ReturnType<typeof mapDispatchToProps>>> = ({\n    button,\n    buttonContainerProps,\n    status,\n    start,\n    stop,\n    ...refreshCallbackProps\n}) => (\n    <>\n        <div {...(buttonContainerProps || {})}>\n            <Button\n                {...button}\n                onClick={() => {\n                    stop();\n                    refreshCallbackProps.callback?.(start);\n                }}\n                enabled={isNotStopped(status)}\n            />\n        </div>\n        <RefreshCallback {...refreshCallbackProps} />\n    </>\n);\n\nexport const ButtonWithRefreshCallback = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(buttonWithRefreshCallbackDisconnected);\n","import * as VaporSVG from 'coveo-styleguide';\nimport * as React from 'react';\nimport {Svg} from '../svg/Svg';\nimport {IBlankSlateProps} from './BlankSlate';\n\nexport const blankSlateWithError = (\n    Component: React.ComponentClass<IBlankSlateProps>\n): React.ComponentClass<IBlankSlateProps> => {\n    class BlankSlateWithErrorComponent extends React.PureComponent<IBlankSlateProps> {\n        render() {\n            return (\n                <Component\n                    {...this.props}\n                    title={\n                        <div className=\"text-orange-8 flex center-align\">\n                            <Svg\n                                svgName={VaporSVG.svg.info.name}\n                                className=\"icon mr1 fill-orange-8 flex center-align\"\n                            />\n                            {this.props.title}\n                        </div>\n                    }\n                    description={<span className=\"text-black semibold\">{this.props.description}</span>}\n                    classes={['border-color-orange-8 mod-error']}\n                >\n                    {this.props.children}\n                </Component>\n            );\n        }\n    }\n\n    return BlankSlateWithErrorComponent;\n};\n","import {ComponentClass} from 'react';\nimport * as React from 'react';\nimport {IBlankSlateProps} from './BlankSlate';\n\nexport interface IBlankSlateWithTableProps extends IBlankSlateProps {\n    numberOfColumn?: number;\n}\n\nexport const blankSlateWithTable = <P extends IBlankSlateProps>(\n    Component: React.ComponentType<P>\n): ComponentClass<IBlankSlateWithTableProps & P> => {\n    class ComponentBlankSlateWithTable extends React.PureComponent<IBlankSlateWithTableProps & P> {\n        static defaultProps: Partial<IBlankSlateWithTableProps & P> = {\n            numberOfColumn: 20,\n        } as Partial<IBlankSlateWithTableProps & P>;\n\n        render() {\n            const {numberOfColumn, ...componentProps} = this.props;\n            return (\n                <tr className=\"blankslate-row no-hover\">\n                    <td colSpan={numberOfColumn}>\n                        <Component {...(componentProps as P)}>{this.props.children}</Component>\n                    </td>\n                </tr>\n            );\n        }\n    }\n\n    return ComponentBlankSlateWithTable;\n};\n","import {FunctionComponent} from 'react';\nimport * as _ from 'underscore';\nimport {BlankSlate, IBlankSlateProps} from './BlankSlate';\nimport {blankSlateWithError} from './BlankSlateWithError';\nimport {blankSlateWithTable, IBlankSlateWithTableProps} from './BlankSlateWithTable';\n\nexport interface IBlankSlateWithTable extends IBlankSlateWithTableProps, IBlankSlateProps {}\n\nexport const BlankSlateWithTable: FunctionComponent<IBlankSlateWithTable> = _.compose(blankSlateWithTable)(BlankSlate);\n\nexport const BlankSlateWithTableInError: FunctionComponent<IBlankSlateWithTable> = _.compose(\n    blankSlateWithTable,\n    blankSlateWithError\n)(BlankSlate);\n\nexport const BlankSlateWithError: FunctionComponent<IBlankSlateWithTable> = _.compose(blankSlateWithError)(BlankSlate);\n"],"sourceRoot":""}