{"version":3,"sources":["webpack:///./src/components/drop/examples/DropExamples.tsx?2736","webpack:///./src/components/modal/ModalHeader.tsx?b2a3","webpack:///./src/components/modal/ModalBody.tsx?936a","webpack:///./src/components/modal/ModalComposite.tsx?bd1b","webpack:///./src/components/modal/ModalCompositeConnected.tsx?5339","webpack:///./src/components/modal/ModalHeaderConnected.tsx?0096","webpack:///./src/utils/ValidComponentChildren.ts?995c","webpack:///./src/components/childForm/ChildForm.tsx?7cd2"],"names":["openModal","id","dispatch","render","defaultItems","value","onOptionClick","alert","defaultItemsLongText","className","generate","selector","buttonContainerProps","renderOpenButton","onClick","name","enabled","items","positions","left","right","bottom","top","parentSelector","style","width","hasSameWidth","title","classes","modalBodyChildren","displayValue","disabled","selectedDisplayValue","modalBodyClasses","modalFooterChildren","componentDidMount","this","canClose","props","lastOpened","componentDidUpdate","close","onClose","docLinkProps","docLink","svg","svgName","svgClass","closeComponent","text","documentationLink","children","defaultProps","modalPropsToOmit","onRequestClose","e","preventDefault","stopPropagation","validateShouldNavigate","isDirty","getModalBody","key","getModalFooter","modalFooterClasses","getParent","document","querySelector","MODAL_ROOT","reactModalprops","isOpen","isOpened","base","afterOpen","beforeClose","overlayClassName","layer","closeTimeoutMS","closeTimeout","contentRef","onAfterClose","closeCallback","getModalHeader","onRender","componentWillUnmount","onDestroy","basicProps","modalHeaderClasses","withReduxState","modalHeaderChildren","MODAL_TIMEOUT","ModalCompositeConnected","state","ownProps","modals","some","modal","openModals","indexOf","openOnMount","mergeProps","ModalHeaderConnected","undefined","map","func","context","child","call"],"mappings":"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","file":"assets/969.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {ExamplesStore} from '../../../../docs/Store';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {Button} from '../../button/Button';\r\nimport {ChildForm} from '../../childForm/ChildForm';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {ListBox} from '../../listBox/ListBox';\r\nimport {openModal} from '../../modal/ModalActions';\r\nimport {ModalCompositeConnected} from '../../modal/ModalCompositeConnected';\r\nimport {SingleSelectWithFilter} from '../../select/hoc/SelectComponents';\r\nimport {DropPodPosition} from '../DomPositionCalculator';\r\nimport {Drop} from '../Drop';\r\n\r\nconst modalId: string = 'ModalIDDrop';\r\nconst modalId2: string = 'ModalIDDrop2';\r\n\r\nexport class DropExamples extends React.PureComponent<any> {\r\n    openModal(id: string) {\r\n        ExamplesStore.dispatch(openModal(id));\r\n    }\r\n    render() {\r\n        const triggerAlertFunction = () => {\r\n            alert(`Alert function triggered`);\r\n        };\r\n\r\n        const defaultItems: IItemBoxProps[] = [\r\n            {value: 'Add Digimon'},\r\n            {value: 'Duplicate Meepo'},\r\n            {value: 'Disable Dragon Ball', onOptionClick: () => triggerAlertFunction()},\r\n            {value: 'Delete BitConnect'},\r\n        ];\r\n\r\n        const defaultItemsLongText: IItemBoxProps[] = [\r\n            {value: 'Add Digimon'},\r\n            {value: 'Duplicate Meepo, Meepo, Meepo, Meepo, Meepo, Meepo, Meepo, Meepo, Meepo, Meepo'},\r\n        ];\r\n\r\n        return (\r\n            <div className=\"mt2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Default drop</label>\r\n                    <div className=\"form-control\">\r\n                        <Drop\r\n                            id={UUID.generate()}\r\n                            selector={'#App'}\r\n                            buttonContainerProps={{\r\n                                className: 'inline-block',\r\n                            }}\r\n                            renderOpenButton={(onClick: () => void) => (\r\n                                <Button name={'Text'} enabled={true} onClick={() => onClick()} />\r\n                            )}\r\n                        >\r\n                            <ListBox items={defaultItems} />\r\n                        </Drop>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Drop with list position left</label>\r\n                    <div className=\"form-control\">\r\n                        <Drop\r\n                            id={UUID.generate()}\r\n                            selector={'#App'}\r\n                            positions={[DropPodPosition.left, DropPodPosition.right]}\r\n                            buttonContainerProps={{\r\n                                className: 'right inline-block',\r\n                            }}\r\n                            renderOpenButton={(onClick: () => void) => (\r\n                                <Button name={'Text'} enabled={true} onClick={() => onClick()} />\r\n                            )}\r\n                        >\r\n                            <ListBox items={defaultItems} />\r\n                        </Drop>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Drop with list position bottom</label>\r\n                    <div className=\"form-control\">\r\n                        <Drop\r\n                            id={UUID.generate()}\r\n                            selector={'#App'}\r\n                            positions={[DropPodPosition.bottom, DropPodPosition.top]}\r\n                            renderOpenButton={(onClick: () => void) => (\r\n                                <Button name={'Text'} enabled={true} onClick={() => onClick()} />\r\n                            )}\r\n                        >\r\n                            <ListBox items={defaultItems} />\r\n                        </Drop>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Drop with list position top</label>\r\n                    <div className=\"form-control\">\r\n                        <Drop\r\n                            id={UUID.generate()}\r\n                            selector={'#App'}\r\n                            positions={[DropPodPosition.top, DropPodPosition.bottom]}\r\n                            buttonContainerProps={{\r\n                                className: 'inline-block',\r\n                            }}\r\n                            renderOpenButton={(onClick: () => void) => (\r\n                                <Button name={'Text'} enabled={true} onClick={() => onClick()} />\r\n                            )}\r\n                        >\r\n                            <ListBox items={defaultItems} />\r\n                        </Drop>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Drop: no position. no toolip</label>\r\n                    <div className=\"form-control\">\r\n                        <Drop\r\n                            id={UUID.generate()}\r\n                            selector={'#App'}\r\n                            positions={[]}\r\n                            buttonContainerProps={{\r\n                                className: 'right inline-block',\r\n                            }}\r\n                            renderOpenButton={(onClick: () => void) => (\r\n                                <Button name={'Text'} enabled={true} onClick={() => onClick()} />\r\n                            )}\r\n                        >\r\n                            <ListBox items={defaultItems} />\r\n                        </Drop>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Drop with the same size than the button</label>\r\n                    <div className=\"form-control\">\r\n                        <Drop\r\n                            id={UUID.generate()}\r\n                            parentSelector={'body'}\r\n                            selector={'#App'}\r\n                            positions={[DropPodPosition.bottom]}\r\n                            buttonContainerProps={{\r\n                                className: 'inline-block',\r\n                            }}\r\n                            renderOpenButton={(onClick: () => void) => (\r\n                                <Button\r\n                                    name={'Text'}\r\n                                    enabled={true}\r\n                                    onClick={() => onClick()}\r\n                                    style={{width: '300px'}}\r\n                                />\r\n                            )}\r\n                            hasSameWidth\r\n                        >\r\n                            <ListBox items={defaultItems} />\r\n                        </Drop>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Drop with an item with a long text</label>\r\n                    <div className=\"form-control flex center-align\">\r\n                        <Drop\r\n                            id={UUID.generate()}\r\n                            parentSelector={'body'}\r\n                            selector={'#App'}\r\n                            positions={[DropPodPosition.bottom]}\r\n                            buttonContainerProps={{\r\n                                className: 'inline-block',\r\n                            }}\r\n                            renderOpenButton={(onClick: () => void) => (\r\n                                <Button\r\n                                    name={'Text'}\r\n                                    enabled={true}\r\n                                    onClick={() => onClick()}\r\n                                    style={{width: '300px'}}\r\n                                />\r\n                            )}\r\n                        >\r\n                            <ListBox\r\n                                items={[\r\n                                    ...defaultItems,\r\n                                    {\r\n                                        value:\r\n                                            'this is a long storyyyyyyyyyyyyyyyyyyyy!!!!!!!!! and more ....... more ..... more ..... more .... more ..... more',\r\n                                    },\r\n                                ]}\r\n                            />\r\n                        </Drop>\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Drop inside a modal</label>\r\n                    <div className=\"form-control\">\r\n                        <button className=\"btn\" onClick={() => this.openModal(modalId)}>\r\n                            Open Modal\r\n                        </button>\r\n                        <ModalCompositeConnected\r\n                            id={modalId}\r\n                            title=\"Modal composite\"\r\n                            classes={['mod-fade-in-scale']}\r\n                            modalBodyChildren={\r\n                                <>\r\n                                    <Drop\r\n                                        id={UUID.generate()}\r\n                                        selector={'#App'}\r\n                                        positions={[\r\n                                            DropPodPosition.right,\r\n                                            DropPodPosition.left,\r\n                                            DropPodPosition.bottom,\r\n                                        ]}\r\n                                        buttonContainerProps={{\r\n                                            className: 'inline-block',\r\n                                        }}\r\n                                        renderOpenButton={(onClick: () => void) => (\r\n                                            <Button name={'Text'} enabled={true} onClick={() => onClick()} />\r\n                                        )}\r\n                                    >\r\n                                        <ListBox items={defaultItemsLongText} />\r\n                                    </Drop>\r\n                                    <div className=\"mt5 pt5\">\r\n                                        <SingleSelectWithFilter\r\n                                            id={UUID.generate()}\r\n                                            items={[\r\n                                                {displayValue: 'Test', value: '0'},\r\n                                                {displayValue: 'Test One', value: '1'},\r\n                                                {displayValue: 'Disabled', value: 'disabled', disabled: true},\r\n                                                {displayValue: 'Three', value: '3'},\r\n                                                {displayValue: 'Four', value: '4'},\r\n                                                {displayValue: 'Five', value: '5'},\r\n                                                {displayValue: 'Six', value: '6'},\r\n                                                {\r\n                                                    displayValue: 'Seven',\r\n                                                    value: '7',\r\n                                                    selectedDisplayValue: '007 Bond, James',\r\n                                                },\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                            modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Drop inside a modal with a scroll</label>\r\n                    <div className=\"form-control\">\r\n                        <button className=\"btn\" onClick={() => this.openModal(modalId2)}>\r\n                            Open Modal\r\n                        </button>\r\n                        <ModalCompositeConnected\r\n                            id={modalId2}\r\n                            title=\"Modal composite\"\r\n                            classes={['mod-slide-in-bottom', 'mod-stick-bottom', 'mod-big']}\r\n                            modalBodyChildren={\r\n                                <>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">\r\n                                        <Drop\r\n                                            id={UUID.generate()}\r\n                                            selector={'#App'}\r\n                                            positions={[DropPodPosition.top]}\r\n                                            buttonContainerProps={{\r\n                                                className: 'inline-block relative',\r\n                                            }}\r\n                                            renderOpenButton={(onClick: () => void) => (\r\n                                                <Button name={'Text'} enabled={true} onClick={() => onClick()} />\r\n                                            )}\r\n                                        >\r\n                                            <ListBox items={defaultItemsLongText} />\r\n                                        </Drop>\r\n                                    </div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                    <div className=\"my5\">more...</div>\r\n                                </>\r\n                            }\r\n                            modalBodyClasses={['mod-header-padding', 'mod-form-top-bottom-padding']}\r\n                            modalFooterChildren={\r\n                                <div className={'mt5'}>\r\n                                    <button className=\"btn\">Do nothing</button>\r\n                                </div>\r\n                            }\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <ChildForm>\r\n                    <Drop\r\n                        id={UUID.generate()}\r\n                        selector={'#App'}\r\n                        positions={[DropPodPosition.bottom]}\r\n                        buttonContainerProps={{\r\n                            className: 'inline-block relative',\r\n                        }}\r\n                        parentSelector={'body'}\r\n                        renderOpenButton={(onClick: () => void) => (\r\n                            <Button name={'Text'} enabled={true} onClick={() => onClick()} />\r\n                        )}\r\n                    >\r\n                        <ListBox items={defaultItemsLongText} />\r\n                    </Drop>\r\n                </ChildForm>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {ILinkSvgProps} from '../svg/LinkSvg';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Title} from '../title/Title';\r\n\r\nexport interface IModalHeaderOwnProps {\r\n    id?: string;\r\n    title: string;\r\n    classes?: IClassName;\r\n    docLink?: ILinkSvgProps;\r\n}\r\n\r\nexport interface IModalHeaderStateProps {\r\n    lastOpened: boolean;\r\n}\r\n\r\nexport interface IModalHeaderDispatchProps {\r\n    onClose: () => void;\r\n}\r\n\r\nexport interface IModalHeaderProps\r\n    extends IModalHeaderOwnProps,\r\n        Partial<IModalHeaderStateProps>,\r\n        Partial<IModalHeaderDispatchProps> {}\r\n\r\nexport class ModalHeader extends React.Component<IModalHeaderProps, {}> {\r\n    static defaultProps: Partial<IModalHeaderProps> = {\r\n        lastOpened: true,\r\n    };\r\n\r\n    private canClose: boolean;\r\n\r\n    componentDidMount() {\r\n        this.canClose = this.props.lastOpened;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.canClose = false;\r\n        _.defer(() => (this.canClose = this.props.lastOpened));\r\n    }\r\n\r\n    close() {\r\n        if (this.canClose) {\r\n            this.props.onClose?.();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes = classNames('modal-header', this.props.classes);\r\n        const docLinkProps: ILinkSvgProps = this.props.docLink\r\n            ? {\r\n                  svg: {\r\n                      svgName: 'help',\r\n                      svgClass: 'fill-orange icon mod-20',\r\n                  },\r\n                  ...this.props.docLink,\r\n              }\r\n            : null;\r\n\r\n        let closeComponent: JSX.Element = null;\r\n        if (this.props.onClose) {\r\n            closeComponent = (\r\n                <span\r\n                    className=\"small-close\"\r\n                    onClick={() => {\r\n                        this.close();\r\n                    }}\r\n                >\r\n                    <Svg svgName=\"close\" className=\"icon mod-lg fill-pure-white\" />\r\n                </span>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <header className={classes}>\r\n                <div className=\"truncate\">\r\n                    <Title text={this.props.title} documentationLink={docLinkProps} classes={['regular']} />\r\n                </div>\r\n                {this.props.children}\r\n                {closeComponent}\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\n\r\nexport interface IModalBodyProps {\r\n    classes?: IClassName;\r\n}\r\n\r\nexport class ModalBody extends React.Component<IModalBodyProps, {}> {\r\n    render() {\r\n        const classes = classNames('modal-body relative', this.props.classes);\r\n\r\n        return <div className={classes}>{this.props.children}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactModal from 'react-modal';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Defaults} from '../../Defaults';\r\nimport {IWithDirtyProps} from '../../hoc/withDirty/withDirty';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {IModalDispatchProps, IModalOwnProps, IModalStateProps} from './Modal';\r\nimport {IModalBackdropOwnProps} from './ModalBackdrop';\r\nimport {ModalBody} from './ModalBody';\r\nimport {IModalFooterProps, ModalFooter} from './ModalFooter';\r\nimport {IModalHeaderDispatchProps, IModalHeaderOwnProps, IModalHeaderProps, ModalHeader} from './ModalHeader';\r\nimport {ModalHeaderConnected} from './ModalHeaderConnected';\r\n\r\nexport interface IModalCompositeOwnProps\r\n    extends IModalOwnProps,\r\n        Partial<IModalHeaderOwnProps>,\r\n        IModalFooterProps,\r\n        IModalBackdropOwnProps {\r\n    modalHeaderChildren?: React.ReactNode;\r\n    modalHeaderClasses?: IClassName;\r\n    modalBodyChildren?: React.ReactNode;\r\n    modalBodyClasses?: IClassName;\r\n    modalFooterChildren?: React.ReactNode;\r\n    modalFooterClasses?: IClassName;\r\n    isPrompt?: boolean;\r\n    validateShouldNavigate?: (isDirty: boolean) => boolean;\r\n}\r\n\r\nexport interface IModalCompositeStateProps extends IReduxStatePossibleProps, IModalStateProps {\r\n    layer: number;\r\n}\r\n\r\nexport interface IModalCompositeDispatchProps extends IModalDispatchProps, IModalHeaderDispatchProps {}\r\n\r\nexport interface IModalCompositeProps\r\n    extends IModalCompositeOwnProps,\r\n        Partial<IModalCompositeStateProps>,\r\n        Partial<IModalCompositeDispatchProps> {}\r\n\r\nconst modalPropsToOmit = keys<IModalCompositeProps>();\r\n\r\nexport class ModalComposite extends React.PureComponent<\r\n    IModalCompositeProps & Partial<ReactModal.Props> & Partial<IWithDirtyProps>\r\n> {\r\n    static defaultProps: Partial<IModalCompositeProps> = {\r\n        id: _.uniqueId('modal'),\r\n        closeTimeout: Defaults.MODAL_TIMEOUT,\r\n    };\r\n\r\n    render() {\r\n        const reactModalprops: Partial<ReactModal.Props> = _.omit(this.props, modalPropsToOmit);\r\n        return (\r\n            <ReactModal\r\n                key={this.props.id}\r\n                isOpen={this.props.isOpened}\r\n                className={{\r\n                    base: classNames('modal-container --react-modal', this.props.classes),\r\n                    afterOpen: 'opened',\r\n                    beforeClose: 'closed',\r\n                }}\r\n                overlayClassName={{\r\n                    base: classNames('modal-backdrop --react-modal', {\r\n                        [`layer-${this.props.layer}`]: this.props.layer > 0,\r\n                    }),\r\n                    afterOpen: 'opened',\r\n                    beforeClose: 'clear',\r\n                }}\r\n                onRequestClose={this.onRequestClose}\r\n                closeTimeoutMS={this.props.closeTimeout}\r\n                contentRef={this.props.contentRef}\r\n                parentSelector={this.getParent}\r\n                onAfterClose={this.props.closeCallback}\r\n                {...reactModalprops}\r\n            >\r\n                <div className=\"modal-content\" id={this.props.id}>\r\n                    {this.getModalHeader()}\r\n                    {this.getModalBody()}\r\n                    {this.getModalFooter()}\r\n                </div>\r\n            </ReactModal>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    private onRequestClose = (e: React.MouseEvent | React.KeyboardEvent) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if (this.props.validateShouldNavigate) {\r\n            if (this.props.validateShouldNavigate(this.props.isDirty)) {\r\n                this.props.onClose?.();\r\n            }\r\n        } else {\r\n            this.props.onClose?.();\r\n        }\r\n    };\r\n\r\n    private getModalHeader() {\r\n        const basicProps: IModalHeaderProps = {\r\n            id: this.props.id,\r\n            title: this.props.title,\r\n            classes: this.props.modalHeaderClasses,\r\n            docLink: this.props.docLink,\r\n        };\r\n\r\n        if (!this.props.title) {\r\n            return null;\r\n        }\r\n\r\n        if (this.props.withReduxState) {\r\n            return (\r\n                <ModalHeaderConnected key=\"modal-header\" {...basicProps}>\r\n                    {this.props.modalHeaderChildren}\r\n                </ModalHeaderConnected>\r\n            );\r\n        }\r\n        return (\r\n            <ModalHeader key=\"modal-header\" {...basicProps} onClose={this.props.onClose}>\r\n                {this.props.modalHeaderChildren}\r\n            </ModalHeader>\r\n        );\r\n    }\r\n\r\n    private getModalBody = () =>\r\n        this.props.modalBodyChildren && (\r\n            <ModalBody key=\"modal-body\" classes={this.props.modalBodyClasses}>\r\n                {this.props.modalBodyChildren}\r\n            </ModalBody>\r\n        );\r\n\r\n    private getModalFooter = () =>\r\n        this.props.modalFooterChildren && (\r\n            <ModalFooter key=\"modal-footer\" classes={this.props.modalFooterClasses}>\r\n                {this.props.modalFooterChildren}\r\n            </ModalFooter>\r\n        );\r\n\r\n    private getParent = (): HTMLElement => document.querySelector(Defaults.MODAL_ROOT);\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactModal from 'react-modal';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {IWithDirtyProps} from '../../hoc/withDirty/withDirty';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {addModal, closeModal, removeModal} from './ModalActions';\r\nimport {\r\n    IModalCompositeDispatchProps,\r\n    IModalCompositeOwnProps,\r\n    IModalCompositeProps,\r\n    IModalCompositeStateProps,\r\n    ModalComposite,\r\n} from './ModalComposite';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IModalCompositeOwnProps): IModalCompositeStateProps => ({\r\n    withReduxState: true,\r\n    isOpened: state.modals && state.modals.some((modal) => modal.id === ownProps.id && modal.isOpened),\r\n    layer: state.openModals ? state.openModals.indexOf(ownProps.id) + 1 : 0,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IModalCompositeOwnProps): IModalCompositeDispatchProps => ({\r\n    onRender: () => dispatch(addModal(ownProps.id, ownProps.openOnMount)),\r\n    onDestroy: () => dispatch(removeModal(ownProps.id)),\r\n    onClose: () => dispatch(closeModal(ownProps.id)),\r\n});\r\n\r\nexport const ModalCompositeConnected: React.ComponentClass<IModalCompositeProps &\r\n    Partial<ReactModal.Props> &\r\n    Partial<IWithDirtyProps>> = connect(mapStateToProps, mapDispatchToProps, ReduxUtils.mergeProps)(ModalComposite);\r\n","import {connect} from 'react-redux';\r\n\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {closeModal} from './ModalActions';\r\nimport {IModalHeaderDispatchProps, IModalHeaderOwnProps, IModalHeaderProps, ModalHeader} from './ModalHeader';\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IModalHeaderOwnProps): IModalHeaderDispatchProps => ({\r\n    onClose: () => dispatch(closeModal(ownProps.id)),\r\n});\r\n\r\nexport const ModalHeaderConnected: React.ComponentClass<IModalHeaderProps> = connect(\r\n    undefined,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(ModalHeader);\r\n","import * as React from 'react';\r\n\r\n// https://github.com/react-bootstrap/react-bootstrap/blob/master/src/utils/ValidComponentChildren.js\r\nexport class ValidComponentChildren {\r\n    static map(children: React.ReactNode, func: (child: React.ReactChild) => any, context: any): any[] {\r\n        return React.Children.map(children, (child) =>\r\n            React.isValidElement(child) ? func.call(context, child) : child\r\n        );\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {ValidComponentChildren} from '../../utils/ValidComponentChildren';\r\n\r\nexport interface IChildFormProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    disabled?: boolean;\r\n}\r\n\r\nexport class ChildForm extends React.Component<IChildFormProps> {\r\n    render() {\r\n        const children = ValidComponentChildren.map(\r\n            this.props.children,\r\n            (child: React.ReactElement<any>) => {\r\n                return React.cloneElement(child, {\r\n                    disabled: !!this.props.disabled,\r\n                });\r\n            },\r\n            null\r\n        );\r\n\r\n        return (\r\n            <div {..._.omit(this.props, 'disabled')} className={classNames('coveo-child', this.props.className)}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}