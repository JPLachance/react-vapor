{"version":3,"sources":["webpack:///./src/utils/UUID.ts?611d","webpack:///./src/components/dragAndDrop/DnDUtils.ts?6815","webpack:///./src/components/dropdownSearch/MultiSelectDropdownSearch/SelectedOption.tsx?08de","webpack:///./src/components/flatSelect/FlatSelectSelectors.ts?585e","webpack:///./src/components/flatSelect/FlatSelect.tsx?30fc","webpack:///./src/components/flatSelect/FlatSelectOption.tsx?11b2","webpack:///./src/components/flatSelect/FlatSelectConnected.tsx?87e7","webpack:///./src/components/select/hoc/SelectWithFilter.tsx?f401","webpack:///./src/components/select/MultiSelectConnected.tsx?5600","webpack:///./src/components/dropdownSearch/MultiSelectDropdownSearch/DraggableSelectedOption.tsx?56a6","webpack:///./src/components/select/hoc/SelectComponents.tsx?4179","webpack:///./src/components/select/hoc/SelectWithPredicate.tsx?7883"],"names":["generate","d","Date","now","replace","c","r","Math","random","floor","toString","context","DnDUtils","move","dragIndex","hoverIndex","list","callBack","moving","newOrder","splice","getBoxTarget","parameter","hover","props","monitor","component","getItem","index","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","getSelectedBoxSource","isDragging","id","beginDrag","parentDropTarget","TagControlContext","DecoratedClass","handleOnRemove","onRemoveClick","value","render","tooltipContent","count","this","children","label","tooltipLabel","className","key","title","placement","Top","delayShow","onClick","svgName","svgClass","getInput","state","ownProps","flatSelect","FlatSelectSelectors","getSelectedOptionId","flatSelectState","selectedOptionId","componentWillMount","onRender","componentWillUnmount","onDestroy","handleOnOptionClick","option","onOptionClick","getOptions","options","flatSelectOption","selected","classes","group","optionPicker","selectable","tooltip","prepend","append","defaultProps","FlatSelectConnected","dispatch","defaultSelectedOptionId","length","mergeProps","SelectWithFilterPropsToOmit","selectWithFilter","Component","makeMapStateToProps","initialState","initialOwnProps","filterValue","getFilterText","items","isServer","getServerFilteredItems","getCustomItemsWithFilter","getListBoxSelected","mapDispatchToProps","onRenderFilter","onDestroyFilter","onSelectCustomValue","dividerId","handleOnClick","defaultCustomValues","componentDidUpdate","prevProps","onUpdate","addItemBoxCustomValue","addItemBox","displayValue","addValueText","divider","item","hidden","disabled","noResultFilter","noResultFilterText","duplicateValue","duplicateText","noItems","noItemsText","getAddValueButton","customValues","filterButton","isDuplicateValue","pluck","concat","indexOf","allValuesAreSelected","contains","filterBoxClassNames","mb2","noResultItem","map","highlight","newProps","noDisabled","hasFocusableChild","filter","onKeyDown","onKeyUp","isAutoFocus","displayName","filterText","enabled","tooltipPlacement","WrappedComponent","selectPropsKeys","getStateProps","getMultiSelectSelectedValues","onRemoveAll","onReorder","values","getButton","sortable","buttonAttrs","style","multiSelectStyle","connectDropTarget","getSelectedOptionComponents","getRemoveAllSelectedOptionsButton","type","placeholder","button","multi","getSelectedOptions","renderDraggableOption","renderOption","emptyPlaceholder","deselectAllTooltipText","noSpanWrapper","compact","MultiSelect","connect","dropTarget","MultiSelectConnected","selectedOptionSource","cardTarget","DraggableSelectedOptionType","DraggableSelectedOptionPropsToOmit","opacity","connectDragPreview","connectDragSource","DraggableSelectedOption","dragSource","dragPreview","SingleSelectWithFilter","SingleSelectWithPredicate","SingleSelectWithPredicateAndFilter","MultiSelectWithFilter","MultiSelectWithPredicate","MultiSelectWithPredicateAndFilter","SelectWithPredicatePropsToOmit","selectWithPredicate","predicate","mapStateToProps","visible","matchPredicate"],"mappings":"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","file":"assets/98.bundle.js","sourcesContent":["// tslint:disable\r\nexport class UUID {\r\n    // TODO: replace for https://www.npmjs.com/package/uuid\r\n    static generate() {\r\n        // Source: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n        let d = Date.now();\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\r\n            const r = (d + Math.random() * 16) % 16 | 0;\r\n            d = Math.floor(d / 16);\r\n            return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n        });\r\n    }\r\n}\r\n// tslint:enable\r\n","import {IDragSource, IDropTarget} from 'react-dnd';\r\nimport {DragDropContext} from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport {findDOMNode} from 'react-dom';\r\nimport * as _ from 'underscore';\r\nimport {DnDContainer, IDraggableContainerOwnProps} from './DnDContainer';\r\n\r\nconst move = (dragIndex: number, hoverIndex: number, list: any[], callBack: (listReorder: any[]) => void) => {\r\n    const moving = list[dragIndex];\r\n    const newOrder = [...list];\r\n\r\n    // Remove the element at position dragIndex\r\n    newOrder.splice(dragIndex, 1);\r\n\r\n    // Insert the moving element at hoverIndex\r\n    newOrder.splice(hoverIndex, 0, moving);\r\n\r\n    callBack(newOrder);\r\n};\r\n\r\nconst getBoxTarget = (parameter: string): IDropTarget => ({\r\n    hover(props: IDraggableContainerOwnProps, monitor: any, component?: DnDContainer): void {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = (findDOMNode(component) as Element).getBoundingClientRect();\r\n\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.move(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n    drop(props: IDraggableContainerOwnProps, monitor: any) {\r\n        monitor.getItem()[parameter] = null;\r\n    },\r\n});\r\n\r\nconst getSelectedBoxSource = (parameter: string): IDragSource => ({\r\n    isDragging(props: IDraggableContainerOwnProps, monitor: any) {\r\n        return props.id === monitor.getItem()[parameter];\r\n    },\r\n    beginDrag(props: IDraggableContainerOwnProps) {\r\n        return {...props};\r\n    },\r\n});\r\n\r\n// This object is usefull when the drag happen outside of the DraggableSelectedOption,\r\n// instead of making the child handle it, the parent catches the event\r\nconst parentDropTarget = {\r\n    drop: _.noop,\r\n};\r\n\r\nlet context: any;\r\nconst TagControlContext = (DecoratedClass: any) => {\r\n    if (!context) {\r\n        context = DragDropContext(HTML5Backend);\r\n    }\r\n    return context(DecoratedClass);\r\n};\r\n\r\nexport const DnDUtils = {\r\n    move,\r\n    getBoxTarget,\r\n    getSelectedBoxSource,\r\n    parentDropTarget,\r\n    TagControlContext,\r\n};\r\n","import * as React from 'react';\r\n\r\nimport {TooltipPlacement} from '../../../utils/TooltipUtils';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {Tooltip} from '../../tooltip/Tooltip';\r\n\r\nexport interface ISelectedOptionProps {\r\n    value: string;\r\n    label: React.ReactNode;\r\n    onRemoveClick?: (value: string) => void;\r\n}\r\n\r\nexport class SelectedOption extends React.PureComponent<ISelectedOptionProps> {\r\n    handleOnRemove = () => {\r\n        this.props.onRemoveClick?.(this.props.value);\r\n    };\r\n\r\n    render() {\r\n        const tooltipContent = React.Children.count(this.props.children) > 0 ? this.props.children : this.props.label;\r\n        const tooltipLabel = typeof this.props.label === 'string' ? this.props.label : '';\r\n\r\n        return (\r\n            <div className=\"selected-option\" key={this.props.value}>\r\n                <Tooltip\r\n                    title={tooltipLabel}\r\n                    placement={TooltipPlacement.Top}\r\n                    className=\"selected-option-value\"\r\n                    delayShow={300}\r\n                >\r\n                    {tooltipContent}\r\n                </Tooltip>\r\n\r\n                <div className=\"remove-option\" onClick={this.handleOnRemove}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-medium-blue mod-small\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {createSelector} from 'reselect';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {flatSelectInitialState, IFlatSelectState} from './FlatSelectReducers';\r\n\r\nconst getInput = (state: IReactVaporState, ownProps: {id: string}): IFlatSelectState => {\r\n    return _.findWhere(state.flatSelect, {id: ownProps.id}) || flatSelectInitialState;\r\n};\r\n\r\nconst getSelectedOptionId = createSelector(\r\n    getInput,\r\n    (flatSelectState: IFlatSelectState): string => flatSelectState && flatSelectState.selectedOptionId\r\n);\r\n\r\nexport const FlatSelectSelectors = {\r\n    getInput,\r\n    getSelectedOptionId,\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {FlatSelectOption, IFlatSelectOptionProps} from './FlatSelectOption';\r\n\r\nexport interface IFlatSelectOwnProps {\r\n    id: string;\r\n    options: IFlatSelectOptionProps[];\r\n    classes?: string[];\r\n    group?: boolean;\r\n    optionPicker?: boolean;\r\n    defaultSelectedOptionId?: string;\r\n    onClick?: (option: IFlatSelectOptionProps) => void;\r\n}\r\n\r\nexport interface IFlatSelectStateProps {\r\n    selectedOptionId?: string;\r\n}\r\n\r\nexport interface IFlatSelectDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onOptionClick?: (option: IFlatSelectOptionProps) => void;\r\n}\r\n\r\nexport interface IFlatSelectProps extends IFlatSelectOwnProps, IFlatSelectStateProps, IFlatSelectDispatchProps {}\r\n\r\nexport class FlatSelect extends React.Component<IFlatSelectProps> {\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    private handleOnOptionClick(option: IFlatSelectOptionProps) {\r\n        if (this.props.onOptionClick) {\r\n            this.props.onOptionClick(option);\r\n        }\r\n\r\n        if (this.props.onClick) {\r\n            this.props.onClick(option);\r\n        }\r\n    }\r\n\r\n    private getOptions(): JSX.Element[] {\r\n        return _.map(this.props.options, (flatSelectOption: IFlatSelectOptionProps, index: number) => {\r\n            flatSelectOption.selected =\r\n                this.props.selectedOptionId && this.props.selectedOptionId === flatSelectOption.id;\r\n            flatSelectOption.onClick = (option: IFlatSelectOptionProps) => this.handleOnOptionClick(option);\r\n\r\n            return <FlatSelectOption key={index} {...flatSelectOption} />;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const classes: string = classNames(\r\n            'flat-select',\r\n            {\r\n                'mod-btn-group': this.props.group,\r\n                'mod-option-picker': this.props.optionPicker,\r\n            },\r\n            this.props.classes\r\n        );\r\n\r\n        return <div className={classes}>{this.getOptions()}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Content, IContentProps} from '../content/Content';\r\nimport {ITooltipProps, Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IFlatSelectOptionProps {\r\n    id: string;\r\n    option: IContentProps;\r\n    classes?: string[];\r\n    prepend?: IContentProps;\r\n    append?: IContentProps;\r\n    tooltip?: ITooltipProps;\r\n    selected?: boolean;\r\n    onClick?: (option: IFlatSelectOptionProps) => void;\r\n}\r\n\r\nexport class FlatSelectOption extends React.Component<IFlatSelectOptionProps, any> {\r\n    static defaultProps: Partial<IFlatSelectOptionProps> = {\r\n        selected: false,\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const classes: string = classNames(\r\n            'flat-select-option',\r\n            {\r\n                selectable: !this.props.selected,\r\n            },\r\n            this.props.classes\r\n        );\r\n\r\n        return (\r\n            <a className={classes} onClick={() => this.onClick()}>\r\n                <Tooltip {...this.props.tooltip}>\r\n                    {this.props.prepend ? <Content {...this.props.prepend} /> : null}\r\n                    {<Content {...this.props.option} />}\r\n                    {this.props.append ? <Content {...this.props.append} /> : null}\r\n                </Tooltip>\r\n            </a>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {\r\n    FlatSelect,\r\n    IFlatSelectDispatchProps,\r\n    IFlatSelectOwnProps,\r\n    IFlatSelectProps,\r\n    IFlatSelectStateProps,\r\n} from './FlatSelect';\r\nimport {addFlatSelect, removeFlatSelect, selectFlatSelect} from './FlatSelectActions';\r\nimport {IFlatSelectOptionProps} from './FlatSelectOption';\r\nimport {FlatSelectSelectors} from './FlatSelectSelectors';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IFlatSelectOwnProps): IFlatSelectStateProps => {\r\n    return {\r\n        selectedOptionId: FlatSelectSelectors.getSelectedOptionId(state, ownProps),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IFlatSelectOwnProps): IFlatSelectDispatchProps => ({\r\n    onRender: () =>\r\n        dispatch(\r\n            addFlatSelect(\r\n                ownProps.id,\r\n                ownProps.defaultSelectedOptionId || (ownProps.options.length && ownProps.options[0].id)\r\n            )\r\n        ),\r\n    onDestroy: () => dispatch(removeFlatSelect(ownProps.id)),\r\n    onOptionClick: (selected: IFlatSelectOptionProps) => dispatch(selectFlatSelect(ownProps.id, selected.id)),\r\n});\r\n\r\nexport const FlatSelectConnected: React.ComponentClass<IFlatSelectProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(FlatSelect);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {WithServerSideProcessingProps} from '../../../hoc/withServerSideProcessing/withServerSideProcessing';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {addStringList, addValueStringList, removeStringList} from '../../../reusableState/customList/StringListActions';\r\nimport {IDispatch, ReduxConnect} from '../../../utils/ReduxUtils';\r\nimport {UUID} from '../../../utils/UUID';\r\nimport {Button, IButtonProps} from '../../button/Button';\r\nimport {IFilterBoxOwnProps} from '../../filterBox/FilterBox';\r\nimport {FilterBoxConnected} from '../../filterBox/FilterBoxConnected';\r\nimport {FilterBoxSelectors} from '../../filterBox/FilterBoxSelectors';\r\nimport {MatchFilter} from '../../filterBox/FilterBoxUtils';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ISelectOwnProps, ISelectSpecificProps} from '../SelectConnected';\r\nimport {SelectSelector} from '../SelectSelector';\r\n\r\nexport interface ISelectWithFilterOwnProps {\r\n    defaultCustomValues?: string[];\r\n    matchFilter?: MatchFilter;\r\n    customValues?: boolean;\r\n    addValueText?: (filterText: string) => string;\r\n    duplicateText?: string;\r\n    noResultFilterText?: (filterText: string) => string;\r\n    noItemsText?: string;\r\n    filterButton?: IButtonProps;\r\n    filter?: IFilterBoxOwnProps;\r\n}\r\n\r\nexport interface ISelectWithFilterStateProps {\r\n    filterValue: string;\r\n    selected: string[];\r\n    items: IItemBoxProps[];\r\n}\r\n\r\nexport interface ISelectWithFilterDispatchProps {\r\n    onRenderFilter: (items: string[]) => void;\r\n    onDestroyFilter: () => void;\r\n    onSelectCustomValue: (filterValue: string) => void;\r\n}\r\n\r\nconst SelectWithFilterPropsToOmit = keys<ISelectWithFilterOwnProps>();\r\n\r\nexport interface ISelectWithFilterProps\r\n    extends ISelectWithFilterOwnProps,\r\n        Partial<ISelectWithFilterStateProps>,\r\n        Partial<ISelectWithFilterDispatchProps>,\r\n        WithServerSideProcessingProps,\r\n        ISelectOwnProps {}\r\n\r\nexport const selectWithFilter = (\r\n    Component: React.ComponentType<ISelectWithFilterProps>\r\n): React.ComponentType<ISelectWithFilterProps> => {\r\n    const makeMapStateToProps = (initialState: IReactVaporState, initialOwnProps: ISelectWithFilterProps) =>\r\n        createStructuredSelector({\r\n            filterValue: FilterBoxSelectors.getFilterText,\r\n            items: initialOwnProps.isServer\r\n                ? SelectSelector.getServerFilteredItems\r\n                : SelectSelector.getCustomItemsWithFilter,\r\n            selected: SelectSelector.getListBoxSelected,\r\n        });\r\n\r\n    const mapDispatchToProps = (\r\n        dispatch: IDispatch,\r\n        ownProps: ISelectOwnProps & ISelectSpecificProps\r\n    ): ISelectWithFilterDispatchProps => ({\r\n        onRenderFilter: (items: string[]) => dispatch(addStringList(ownProps.id, items)),\r\n        onDestroyFilter: () => dispatch(removeStringList(ownProps.id)),\r\n        onSelectCustomValue: (filterValue: string) => dispatch(addValueStringList(ownProps.id, filterValue)),\r\n    });\r\n\r\n    @ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\n    class WrappedComponent extends React.Component<ISelectWithFilterProps> {\r\n        static displayName = `withFilter(${Component.displayName})`;\r\n        static defaultProps: Partial<ISelectWithFilterProps> = {\r\n            duplicateText: 'Cannot add a duplicate value',\r\n            noResultFilterText: (filterText: string) => `No results match \"${filterText}\"`,\r\n            noItemsText: 'No items, enter a new value',\r\n            addValueText: (filterText: string) => `Add \"${filterText}\"`,\r\n            filterButton: {\r\n                enabled: true,\r\n                tooltip: 'Add',\r\n                tooltipPlacement: 'top',\r\n            },\r\n            defaultCustomValues: [],\r\n        };\r\n\r\n        private dividerId: string = UUID.generate();\r\n\r\n        componentWillMount() {\r\n            this.props.onRenderFilter(this.props.defaultCustomValues);\r\n        }\r\n\r\n        componentDidUpdate(prevProps: ISelectWithFilterProps) {\r\n            if (prevProps.filterValue !== this.props.filterValue) {\r\n                this.props.onUpdate?.();\r\n            }\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            this.props.onDestroyFilter();\r\n        }\r\n\r\n        private addItemBoxCustomValue(): IItemBoxProps[] {\r\n            const addItemBox: IItemBoxProps = {\r\n                displayValue: this.props.addValueText(this.props.filterValue),\r\n                value: this.props.filterValue,\r\n                onOptionClick: () => this.props.onSelectCustomValue(this.props.filterValue),\r\n            };\r\n            const divider: IItemBoxProps[] = _.some(this.props.items, (item: IItemBoxProps) => !item.hidden)\r\n                ? [{value: this.dividerId, divider: true, disabled: true}]\r\n                : [];\r\n\r\n            return [addItemBox, ...divider];\r\n        }\r\n\r\n        private noResultFilter(): IItemBoxProps {\r\n            return {\r\n                value: this.props.noResultFilterText(this.props.filterValue),\r\n            };\r\n        }\r\n\r\n        private duplicateValue(): IItemBoxProps {\r\n            return {\r\n                value: this.props.duplicateText,\r\n                disabled: true,\r\n            };\r\n        }\r\n\r\n        private noItems(): IItemBoxProps {\r\n            return {\r\n                value: this.props.noItemsText,\r\n                disabled: true,\r\n            };\r\n        }\r\n\r\n        private handleOnClick = () => {\r\n            if (!_.isEmpty(this.props.filterValue)) {\r\n                this.props.onSelectCustomValue(this.props.filterValue);\r\n            }\r\n        };\r\n\r\n        private getAddValueButton(): React.ReactNode {\r\n            return (\r\n                this.props.customValues && (\r\n                    <div className=\"ml1\">\r\n                        <Button classes={['p1']} onClick={this.handleOnClick} {...this.props.filterButton}>\r\n                            <Svg svgName={'add'} className=\"icon mod-lg mod-align-with-text\" />\r\n                        </Button>\r\n                    </div>\r\n                )\r\n            );\r\n        }\r\n\r\n        private isDuplicateValue(): boolean {\r\n            return (\r\n                _.chain(this.props.items)\r\n                    .pluck('value')\r\n                    .concat(this.props.selected)\r\n                    .indexOf(this.props.filterValue)\r\n                    .value() !== -1\r\n            );\r\n        }\r\n\r\n        private allValuesAreSelected(): boolean {\r\n            return !_.chain(this.props.items)\r\n                .pluck('value')\r\n                .contains(this.props.selected)\r\n                .value();\r\n        }\r\n\r\n        render() {\r\n            const filterBoxClassNames: string = classNames({\r\n                'flex flex-center': this.props.customValues,\r\n                mb2: !!this.props.children,\r\n            });\r\n\r\n            let noResultItem: React.ReactNode = this.props.noResultItem || this.noResultFilter();\r\n            let items = this.props.items.map(\r\n                (item: IItemBoxProps): IItemBoxProps => ({...item, highlight: this.props.filterValue})\r\n            );\r\n\r\n            if (this.isDuplicateValue()) {\r\n                noResultItem = this.duplicateValue();\r\n            } else if (!_.isEmpty(this.props.filterValue) && this.props.customValues) {\r\n                items = [...this.addItemBoxCustomValue(), ...items];\r\n            } else if (this.props.customValues && _.every(items, (item) => item.hidden)) {\r\n                noResultItem = this.noItems();\r\n            } else if (items.length && this.allValuesAreSelected()) {\r\n                noResultItem = this.noItems();\r\n            }\r\n\r\n            const newProps = {\r\n                ..._.omit(this.props, [...SelectWithFilterPropsToOmit, 'selected']),\r\n                items,\r\n            };\r\n\r\n            return (\r\n                <Component\r\n                    {...newProps}\r\n                    noResultItem={noResultItem}\r\n                    noDisabled={this.props.customValues}\r\n                    hasFocusableChild\r\n                >\r\n                    <FilterBoxConnected\r\n                        {...this.props.filter}\r\n                        id={this.props.id}\r\n                        onKeyDown={(this.props as any).onKeyDown}\r\n                        onKeyUp={(this.props as any).onKeyUp}\r\n                        className={filterBoxClassNames}\r\n                        isAutoFocus\r\n                    >\r\n                        {this.getAddValueButton()}\r\n                    </FilterBoxConnected>\r\n                    {this.props.children}\r\n                </Component>\r\n            );\r\n        }\r\n    }\r\n\r\n    return WrappedComponent;\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {DropTarget, IDropTargetProps} from 'react-dnd';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch, ReduxConnect} from '../../utils/ReduxUtils';\r\nimport {DnDUtils} from '../dragAndDrop/DnDUtils';\r\nimport {\r\n    DraggableSelectedOption,\r\n    DraggableSelectedOptionType,\r\n} from '../dropdownSearch/MultiSelectDropdownSearch/DraggableSelectedOption';\r\nimport {SelectedOption} from '../dropdownSearch/MultiSelectDropdownSearch/SelectedOption';\r\nimport {IItemBoxProps} from '../itemBox/ItemBox';\r\nimport {clearListBoxOption, reorderListBoxOption, unselectListBoxOption} from '../listBox/ListBoxActions';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\nimport {ISelectButtonProps, ISelectOwnProps, ISelectProps, SelectConnected} from './SelectConnected';\r\nimport {SelectSelector} from './SelectSelector';\r\n\r\nexport interface IMultiSelectOwnProps extends ISelectProps, IDropTargetProps {\r\n    placeholder?: string;\r\n    emptyPlaceholder?: string;\r\n    deselectAllTooltipText?: string;\r\n    sortable?: boolean;\r\n    noDisabled?: boolean;\r\n    multiSelectStyle?: React.CSSProperties;\r\n}\r\n\r\nexport interface IMultiSelectStateProps {\r\n    selected?: string[];\r\n}\r\n\r\nexport interface IMultiSelectDispatchProps {\r\n    onRemoveClick?: (item: IItemBoxProps) => void;\r\n    onRemoveAll?: () => void;\r\n    onReorder?: (values: string[]) => void;\r\n}\r\n\r\nexport interface IMultiSelectProps extends IMultiSelectOwnProps, IMultiSelectStateProps, IMultiSelectDispatchProps {}\r\n\r\nconst selectPropsKeys = keys<ISelectOwnProps>();\r\n\r\nconst makeMapStateToProps = () => {\r\n    const getStateProps = createStructuredSelector({\r\n        selected: SelectSelector.getMultiSelectSelectedValues,\r\n    });\r\n\r\n    return (state: IReactVaporState, ownProps: IMultiSelectOwnProps): IMultiSelectStateProps =>\r\n        getStateProps(state, ownProps);\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IMultiSelectOwnProps): IMultiSelectDispatchProps => ({\r\n    onRemoveClick: (item: IItemBoxProps) => dispatch(unselectListBoxOption(ownProps.id, item.value)),\r\n    onRemoveAll: () => dispatch(clearListBoxOption(ownProps.id)),\r\n    onReorder: (values: string[]) => dispatch(reorderListBoxOption(ownProps.id, values)),\r\n});\r\n\r\n// This object is usefull when the drag happen outside of the DraggableSelectedOption,\r\n// instead of making the child handle it, the parent catches the event\r\nconst parentDropTarget = {\r\n    drop: _.noop,\r\n};\r\n\r\n@ReduxConnect(makeMapStateToProps, mapDispatchToProps)\r\n@DropTarget(DraggableSelectedOptionType, parentDropTarget, (connect: any) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))\r\nclass MultiSelect extends React.PureComponent<IMultiSelectProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IMultiSelectProps> = {\r\n        placeholder: 'Select an option',\r\n        emptyPlaceholder: 'No selected option',\r\n        deselectAllTooltipText: 'Deselect All',\r\n        sortable: false,\r\n        noDisabled: false,\r\n        multiSelectStyle: {},\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <SelectConnected\r\n                id={this.props.id}\r\n                key={this.props.id}\r\n                {..._.pick(this.props, selectPropsKeys)}\r\n                button={this.getButton}\r\n                multi\r\n            >\r\n                {this.props.children}\r\n            </SelectConnected>\r\n        );\r\n    }\r\n\r\n    private getSelectedOptionComponents(): React.ReactNode {\r\n        const selected = this.getSelectedOptions();\r\n\r\n        if (selected.length) {\r\n            return selected.map((item: IItemBoxProps, index: number) =>\r\n                this.props.sortable ? this.renderDraggableOption(item, index) : this.renderOption(item)\r\n            );\r\n        }\r\n        return <span className=\"multiselect-empty\">{this.props.emptyPlaceholder}</span>;\r\n    }\r\n\r\n    private renderOption(item: IItemBoxProps): JSX.Element {\r\n        const displayValue = item.displayValue || item.value;\r\n        return (\r\n            <SelectedOption\r\n                label={displayValue}\r\n                value={item.value}\r\n                key={item.value}\r\n                onRemoveClick={() => this.props.onRemoveClick(item)}\r\n            >\r\n                {displayValue}\r\n            </SelectedOption>\r\n        );\r\n    }\r\n\r\n    private renderDraggableOption(item: IItemBoxProps, index: number): JSX.Element {\r\n        return (\r\n            <div className=\"flex flex-row flex-center sortable-selected-option\" key={item.value}>\r\n                <span className=\"mr1 text-medium-grey\">{index + 1}</span>\r\n                <DraggableSelectedOption\r\n                    label={item.displayValue || item.value}\r\n                    value={item.value}\r\n                    onRemoveClick={() => this.props.onRemoveClick(item)}\r\n                    index={index}\r\n                    move={(dragIndex: number, hoverIndex: number) => this.move(dragIndex, hoverIndex)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private move(dragIndex: number, hoverIndex: number) {\r\n        const moving = this.props.selected[dragIndex];\r\n        const newOrder = [...this.props.selected];\r\n\r\n        // Remove the element at position dragIndex\r\n        newOrder.splice(dragIndex, 1);\r\n\r\n        // Insert the moving element at hoverIndex\r\n        newOrder.splice(hoverIndex, 0, moving);\r\n\r\n        this.props.onReorder(newOrder);\r\n    }\r\n\r\n    private getRemoveAllSelectedOptionsButton(): JSX.Element {\r\n        return this.getSelectedOptions().length > 1 ? (\r\n            <Tooltip title={this.props.deselectAllTooltipText} placement=\"top\" noSpanWrapper>\r\n                <div className=\"remove-all-selected-options ml1\" onClick={() => this.props.onRemoveAll()}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-medium-blue\" />\r\n                </div>\r\n            </Tooltip>\r\n        ) : null;\r\n    }\r\n\r\n    private getButton = (props: ISelectButtonProps): JSX.Element => {\r\n        const classes = classNames('multiselect-input', {'mod-sortable': this.props.sortable});\r\n        const buttonAttrs =\r\n            !this.props.noDisabled && this.props.selected && this.props.selected.length === this.props.items.length\r\n                ? {disabled: true}\r\n                : {disabled: this.props.disabled};\r\n        return (\r\n            <div className={classes} style={this.props.multiSelectStyle}>\r\n                {this.props.connectDropTarget(\r\n                    <div className=\"multiselect-selected flex flex-center flex-auto full-content\">\r\n                        <div className=\"selected-options-container truncate\">{this.getSelectedOptionComponents()}</div>\r\n                        {this.getRemoveAllSelectedOptionsButton()}\r\n                    </div>\r\n                )}\r\n                <button\r\n                    className=\"btn dropdown-toggle multiselect-add dropdown-toggle-placeholder\"\r\n                    type=\"button\"\r\n                    onKeyDown={props.onKeyDown}\r\n                    onKeyUp={props.onKeyUp}\r\n                    onClick={props.onClick}\r\n                    {...buttonAttrs}\r\n                >\r\n                    <span className=\"dropdown-no-value\">{this.props.placeholder}</span>\r\n                    <span className=\"dropdown-toggle-arrow\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    private getSelectedOptions(): IItemBoxProps[] {\r\n        if (this.props.sortable) {\r\n            return _.chain(this.props.selected)\r\n                .map((selected: string) => _.findWhere(this.props.items, {value: selected}))\r\n                .compact()\r\n                .value();\r\n        }\r\n\r\n        return this.props.items.filter((option: IItemBoxProps) => _.contains(this.props.selected, option.value));\r\n    }\r\n}\r\n\r\nexport const MultiSelectConnected: React.ComponentClass<IMultiSelectProps &\r\n    React.ButtonHTMLAttributes<HTMLButtonElement>> = DnDUtils.TagControlContext(MultiSelect);\r\n","import * as React from 'react';\r\nimport {DragSource, DropTarget, IDragSource, IDropTarget} from 'react-dnd';\r\nimport {findDOMNode} from 'react-dom';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ISelectedOptionProps, SelectedOption} from './SelectedOption';\r\n\r\nexport interface IDraggableSelectedOptionOwnProps {\r\n    isDragging?: boolean;\r\n    connectDragSource?: any;\r\n    connectDropTarget?: any;\r\n    connectDragPreview?: any;\r\n    index: number;\r\n    move: (dragIndex: number, hoverIndex: number) => void;\r\n}\r\n\r\nexport interface IDraggableSelectedOptionProps extends IDraggableSelectedOptionOwnProps, ISelectedOptionProps {}\r\n\r\nconst selectedOptionSource: IDragSource = {\r\n    isDragging(props: IDraggableSelectedOptionProps, monitor: any) {\r\n        return props.label === monitor.getItem().label;\r\n    },\r\n    beginDrag(props: IDraggableSelectedOptionProps) {\r\n        return {...props};\r\n    },\r\n};\r\n\r\nconst cardTarget: IDropTarget = {\r\n    hover(props: IDraggableSelectedOptionProps, monitor: any, component?: DraggableSelectedOption): void {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = (findDOMNode(component) as Element).getBoundingClientRect();\r\n\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.move(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n    drop(props: IDraggableSelectedOptionProps, monitor: any) {\r\n        monitor.getItem().label = null;\r\n    },\r\n};\r\n\r\nexport const DraggableSelectedOptionType = 'SELECTED_OPTION';\r\nconst DraggableSelectedOptionPropsToOmit = keys<IDraggableSelectedOptionOwnProps>();\r\n\r\n@DropTarget(DraggableSelectedOptionType, cardTarget, (connect: any) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))\r\n@DragSource(DraggableSelectedOptionType, selectedOptionSource, (connect: any, monitor: any) => ({\r\n    connectDragSource: connect.dragSource(),\r\n    connectDragPreview: connect.dragPreview(),\r\n    isDragging: monitor.isDragging(),\r\n}))\r\nexport class DraggableSelectedOption extends React.PureComponent<IDraggableSelectedOptionProps> {\r\n    render() {\r\n        const opacity = this.props.isDragging ? 0 : 1;\r\n\r\n        return this.props.connectDragPreview(\r\n            this.props.connectDropTarget(\r\n                <div className=\"selected-option-wrapper\" style={{opacity}}>\r\n                    <SelectedOption\r\n                        {..._.omit(this.props, DraggableSelectedOptionPropsToOmit)}\r\n                        label={this.props.isDragging ? null : this.props.label}\r\n                    >\r\n                        <div className=\"inline-flex\">\r\n                            {this.props.connectDragSource(\r\n                                <div className=\"move-option infline-flex cursor-move align-center\">\r\n                                    <Svg svgName=\"drag-drop\" svgClass=\"icon mod-small\" />\r\n                                </div>\r\n                            )}\r\n                            {this.props.label}\r\n                        </div>\r\n                    </SelectedOption>\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IMultiSelectOwnProps, MultiSelectConnected} from '../MultiSelectConnected';\r\nimport {ISingleSelectOwnProps, SingleSelectConnected} from '../SingleSelectConnected';\r\nimport {ISelectWithFilterProps, selectWithFilter} from './SelectWithFilter';\r\nimport {ISelectWithPredicateProps, selectWithPredicate} from './SelectWithPredicate';\r\n\r\ntype ButtonHTMLAttributes = React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nexport interface ISelectWithPredicateAndFilterProps extends ISelectWithFilterProps, ISelectWithPredicateProps {}\r\n\r\n// Single Select\r\nexport const SingleSelectWithFilter: React.ComponentType<ISelectWithFilterProps &\r\n    ISingleSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithFilter(SingleSelectConnected);\r\nexport const SingleSelectWithPredicate: React.ComponentType<ISelectWithPredicateProps &\r\n    ISingleSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithPredicate(SingleSelectConnected);\r\nexport const SingleSelectWithPredicateAndFilter: React.ComponentType<ISelectWithPredicateAndFilterProps &\r\n    ISingleSelectOwnProps &\r\n    ButtonHTMLAttributes> = _.compose(selectWithPredicate, selectWithFilter)(SingleSelectConnected);\r\n\r\n// Multi Select\r\nexport const MultiSelectWithFilter: React.ComponentType<ISelectWithFilterProps &\r\n    IMultiSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithFilter(MultiSelectConnected);\r\nexport const MultiSelectWithPredicate: React.ComponentType<ISelectWithPredicateProps &\r\n    IMultiSelectOwnProps &\r\n    ButtonHTMLAttributes> = selectWithPredicate(MultiSelectConnected);\r\nexport const MultiSelectWithPredicateAndFilter: React.ComponentType<ISelectWithPredicateAndFilterProps &\r\n    IMultiSelectOwnProps &\r\n    ButtonHTMLAttributes> = _.compose(selectWithPredicate, selectWithFilter)(MultiSelectConnected);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {WithServerSideProcessingProps} from '../../../hoc/withServerSideProcessing/withServerSideProcessing';\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {FlatSelectConnected} from '../../flatSelect/FlatSelectConnected';\r\nimport {IFlatSelectOptionProps} from '../../flatSelect/FlatSelectOption';\r\nimport {FlatSelectSelectors} from '../../flatSelect/FlatSelectSelectors';\r\nimport {IItemBoxProps} from '../../itemBox/ItemBox';\r\nimport {ISelectProps} from '../SelectConnected';\r\n\r\nexport interface ISelectWithPredicateOwnProps {\r\n    options: IFlatSelectOptionProps[];\r\n    matchPredicate: (predicate: string, item: IItemBoxProps) => boolean;\r\n}\r\nconst SelectWithPredicatePropsToOmit = keys<ISelectWithPredicateOwnProps>();\r\ninterface SelectWithPredicateStateProps {\r\n    predicate: string;\r\n    items: IItemBoxProps[];\r\n}\r\n\r\nexport interface ISelectWithPredicateProps\r\n    extends ISelectWithPredicateOwnProps,\r\n        ISelectProps,\r\n        Partial<SelectWithPredicateStateProps>,\r\n        WithServerSideProcessingProps {}\r\n\r\nexport const selectWithPredicate = (\r\n    Component: React.ComponentType<ISelectProps>\r\n): React.ComponentType<ISelectWithPredicateProps> => {\r\n    const WrappedComponent: React.FunctionComponent<ISelectWithPredicateProps> = (props) => {\r\n        React.useEffect(() => {\r\n            props.onUpdate?.();\r\n        }, [props.predicate, props.onUpdate]);\r\n\r\n        return (\r\n            <Component {..._.omit(props, SelectWithPredicatePropsToOmit)}>\r\n                <FlatSelectConnected\r\n                    id={props.id}\r\n                    classes={['full-content-x']}\r\n                    options={props.options}\r\n                    group\r\n                    optionPicker\r\n                />\r\n                {props.children}\r\n            </Component>\r\n        );\r\n    };\r\n\r\n    WrappedComponent.displayName = `withPredicate(${Component.displayName})`;\r\n\r\n    return connect(mapStateToProps)(WrappedComponent);\r\n};\r\n\r\nfunction mapStateToProps(state: IReactVaporState, ownProps: ISelectWithPredicateProps): SelectWithPredicateStateProps {\r\n    const predicate = FlatSelectSelectors.getSelectedOptionId(state, {id: ownProps.id}) || ownProps.options[0].id;\r\n\r\n    const items = ownProps.isServer\r\n        ? ownProps.items\r\n        : _.map(ownProps.items, (item: IItemBoxProps) => {\r\n              const visible = ownProps.matchPredicate(predicate, item);\r\n\r\n              return {...item, hidden: !visible || item.hidden};\r\n          });\r\n\r\n    return {\r\n        items,\r\n        predicate,\r\n    };\r\n}\r\n"],"sourceRoot":""}