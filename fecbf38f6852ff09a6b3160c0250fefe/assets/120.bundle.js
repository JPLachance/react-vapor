(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{1223:function(n,r,o){"use strict";o.r(r),r.default="import * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {Dropdown} from '../dropdown/Dropdown';\r\nimport {DropdownConnected} from '../dropdown/DropdownConnected';\r\nimport {Svg} from '../svg/Svg';\r\nimport {IActionOptions} from './Action';\r\nimport {ActionDropdownItem} from './ActionDropdownItem';\r\n\r\nexport interface IActionsDropdownOwnProps extends React.ClassAttributes<ActionsDropdown> {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport interface IActionsDropdownStateProps extends IReduxStatePossibleProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IActionsDropdownProps extends IActionsDropdownOwnProps, IActionsDropdownStateProps {}\r\n\r\nexport const MORE_LABEL: string = 'More';\r\n\r\nexport class ActionsDropdown extends React.Component<IActionsDropdownProps, any> {\r\n    render() {\r\n        const moreLabel: string = this.props.moreLabel || MORE_LABEL;\r\n\r\n        let lastFilteredAction: IActionOptions = null;\r\n        const actions: JSX.Element[] = _.chain(this.props.actions)\r\n            .filter((action: IActionOptions) => action.separator || action.enabled || action.hideDisabled === false)\r\n            // Filter out all separator that are preceded by another separator\r\n            .filter((action: IActionOptions) => {\r\n                if (!action.separator || (action.separator && lastFilteredAction && !lastFilteredAction.separator)) {\r\n                    lastFilteredAction = action;\r\n                    return true;\r\n                }\r\n                return false;\r\n            })\r\n            // Filter out the last action if it's a separator\r\n            .filter((action: IActionOptions, index: number, filteredActions: IActionOptions[]) => {\r\n                return index < filteredActions.length - 1 || !action.separator;\r\n            })\r\n            .map((action: IActionOptions, index: number) => (\r\n                <ActionDropdownItem\r\n                    key={`action-${action.id || index}`}\r\n                    action={action}\r\n                    parentId={this.props.id}\r\n                    withReduxState={this.props.withReduxState}\r\n                />\r\n            ))\r\n            .value();\r\n        const toggleContent: JSX.Element[] = [\r\n            <Svg\r\n                key=\"action-dropdown-toggle-icon\"\r\n                svgName=\"more\"\r\n                className=\"action-icon\"\r\n                svgClass=\"icon icon-medium fill-medium-blue\"\r\n            />,\r\n            <span key=\"action-dropdown-toggle-label\" className=\"action-label\" data-trigger=\"more\">\r\n                {moreLabel}\r\n            </span>,\r\n        ];\r\n\r\n        return this.props.withReduxState ? (\r\n            <DropdownConnected toggleContent={toggleContent} dropdownItems={actions} id={this.props.id} />\r\n        ) : (\r\n            <Dropdown toggleContent={toggleContent} dropdownItems={actions} />\r\n        );\r\n    }\r\n}\r\n"}}]);
//# sourceMappingURL=120.bundle.js.map