(window.webpackJsonp=window.webpackJsonp||[]).push([[656],{1762:function(e,t,d){"use strict";d.r(t),t.default="import {IRadioSelectState, radioSelectInitialState} from '../RadioSelectReducers';\r\nimport {RadioSelectSelectors} from '../RadioSelectSelectors';\r\n\r\ndescribe('RadioSelectSelectors', () => {\r\n    describe('get', () => {\r\n        it('should return the default radio select state when the radio select does not exist in the state', () => {\r\n            const radioSelect = RadioSelectSelectors.get({radioSelects: []}, {id: 'I-do-not-exist-in-the-state'});\r\n            expect(radioSelect).toEqual(radioSelectInitialState);\r\n        });\r\n\r\n        it('should return the right radio select state for the specified id', () => {\r\n            const expectedRadioSelect: IRadioSelectState = {\r\n                id: 'radio-select-123',\r\n                value: 'choice-2',\r\n                disabledValues: [],\r\n            };\r\n            const radioSelect = RadioSelectSelectors.get(\r\n                {radioSelects: [expectedRadioSelect]},\r\n                {id: expectedRadioSelect.id}\r\n            );\r\n            expect(radioSelect).toEqual(expectedRadioSelect);\r\n        });\r\n    });\r\n\r\n    describe('getValue', () => {\r\n        it('should return undefined when the radio select does not exist in the state', () => {\r\n            const selectedValue = RadioSelectSelectors.getValue(\r\n                {radioSelects: []},\r\n                {id: 'I-do-not-exist-in-the-state'}\r\n            );\r\n            expect(selectedValue).toBeUndefined();\r\n        });\r\n\r\n        it('should return the radio select value from the state', () => {\r\n            const expectedRadioSelect: IRadioSelectState = {\r\n                id: 'radio-select-123',\r\n                value: 'choice-2',\r\n                disabledValues: [],\r\n            };\r\n            const selectedValue = RadioSelectSelectors.getValue(\r\n                {radioSelects: [expectedRadioSelect]},\r\n                {id: expectedRadioSelect.id}\r\n            );\r\n            expect(selectedValue).toBe(expectedRadioSelect.value);\r\n        });\r\n    });\r\n\r\n    describe('getDisabledValue', () => {\r\n        it('should return undefined when the radio select does not exist in the state', () => {\r\n            const disabledValue = RadioSelectSelectors.getDisabledValue(\r\n                {radioSelects: []},\r\n                {id: 'I-do-not-exist-in-the-state'}\r\n            );\r\n            expect(disabledValue).toBeUndefined();\r\n        });\r\n\r\n        it('should return the disabled values if the radio select from the state', () => {\r\n            const expectedRadioSelect: IRadioSelectState = {\r\n                id: 'I-have-disabled-values',\r\n                value: 'im-not-disabled',\r\n                disabledValues: ['im-disabled', 'me-too'],\r\n            };\r\n            const disabledValues = RadioSelectSelectors.getDisabledValue(\r\n                {radioSelects: [expectedRadioSelect]},\r\n                {id: expectedRadioSelect.id}\r\n            );\r\n            expect(disabledValues).toBe(expectedRadioSelect.disabledValues);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=656.bundle.js.map