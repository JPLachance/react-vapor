(window.webpackJsonp=window.webpackJsonp||[]).push([[345],{1451:function(e,n,t){"use strict";t.r(n),n.default="import {mount, ReactWrapper} from 'enzyme';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport {IDropdownOption} from '../../DropdownSearch';\r\nimport {IMultiselectInputProps, MultiselectInput} from '../MultiSelectInput';\r\n\r\ndescribe('MultiSelectInput', () => {\r\n    const selectedOptions: IDropdownOption[] = [\r\n        {value: 'test 1'},\r\n        {value: 'test 2'},\r\n        {value: 'test 3'},\r\n        {value: 'test 4'},\r\n    ];\r\n    const props: IMultiselectInputProps = {\r\n        selectedOptions: [],\r\n        filterText: '',\r\n    };\r\n\r\n    describe('<SelectedOption />', () => {\r\n        let multiSelectInput: ReactWrapper<IMultiselectInputProps, any>;\r\n\r\n        const renderMultiSelectInput = (curentProps?: IMultiselectInputProps) => {\r\n            multiSelectInput = mount(<MultiselectInput {...curentProps} />, {attachTo: document.getElementById('App')});\r\n        };\r\n\r\n        beforeEach(() => {\r\n            renderMultiSelectInput(props);\r\n        });\r\n\r\n        afterEach(() => {\r\n            multiSelectInput.detach();\r\n        });\r\n\r\n        describe('render', () => {\r\n            it('should render placeholder text', () => {\r\n                const filterPlaceholder = 'placeholdertext';\r\n                multiSelectInput.setProps({filterPlaceholder});\r\n\r\n                expect(multiSelectInput.find(`input[placeholder=\"${filterPlaceholder}\"]`).length).toBe(1);\r\n            });\r\n\r\n            it('should render filter text', () => {\r\n                const filterText = 'text';\r\n                multiSelectInput.setProps({filterText});\r\n\r\n                expect(multiSelectInput.find(`input[value=\"${filterText}\"]`).length).toBe(1);\r\n            });\r\n\r\n            it('should not render the remove-all button if there are no options given', () => {\r\n                expect(multiSelectInput.find('.remove-all-selected-options').length).toBe(0);\r\n            });\r\n\r\n            it('should render all the supplied selected options', () => {\r\n                multiSelectInput.setProps({selectedOptions});\r\n\r\n                expect(multiSelectInput.find('SelectedOption').length).toBe(selectedOptions.length);\r\n            });\r\n\r\n            it('should not render any selected options if none provided', () => {\r\n                expect(multiSelectInput.find('SelectedOption').length).toBe(0);\r\n            });\r\n\r\n            it('should not render the remove-all button if there are no selected options', () => {\r\n                expect(multiSelectInput.find('.remove-all-selected-options').length).toBe(0);\r\n            });\r\n\r\n            it('should render the remove-all button if there are selected options', () => {\r\n                multiSelectInput.setProps({selectedOptions});\r\n\r\n                expect(multiSelectInput.find('.remove-all-selected-options').length).toBe(1);\r\n            });\r\n        });\r\n\r\n        describe('handle functions', () => {\r\n            it('should handle on remove all', () => {\r\n                const onRemoveAll = jasmine.createSpy('onRemoveAll');\r\n\r\n                multiSelectInput.setProps({\r\n                    selectedOptions,\r\n                    onRemoveAll: onRemoveAll,\r\n                });\r\n\r\n                multiSelectInput.find('.remove-all-selected-options').simulate('click');\r\n\r\n                expect(onRemoveAll).toHaveBeenCalled();\r\n            });\r\n\r\n            it('should handle on input change', () => {\r\n                const onInputChange = jasmine.createSpy('onChange');\r\n\r\n                multiSelectInput.setProps({\r\n                    onFilterTextChange: onInputChange,\r\n                });\r\n\r\n                multiSelectInput.find('input').simulate('change', {target: {value: 'input value changed'}});\r\n\r\n                expect(onInputChange).toHaveBeenCalled();\r\n            });\r\n\r\n            it('should handle on blur', () => {\r\n                const onBlur = jasmine.createSpy('onBlur');\r\n\r\n                multiSelectInput.setProps({\r\n                    onBlur: onBlur,\r\n                });\r\n\r\n                multiSelectInput.find('input').simulate('blur');\r\n\r\n                expect(onBlur).toHaveBeenCalled();\r\n            });\r\n\r\n            it('should handle on focus', () => {\r\n                const onFocus = jasmine.createSpy('onFocus');\r\n\r\n                multiSelectInput.setProps({\r\n                    onFocus: onFocus,\r\n                });\r\n\r\n                multiSelectInput.find('input').simulate('focus');\r\n\r\n                expect(onFocus).toHaveBeenCalled();\r\n            });\r\n\r\n            it('should handle on key down', () => {\r\n                const onKeyDown = jasmine.createSpy('onKeyDown');\r\n\r\n                multiSelectInput.setProps({\r\n                    onKeyDownFilterBox: onKeyDown,\r\n                });\r\n\r\n                multiSelectInput.find('input').simulate('keyDown');\r\n\r\n                expect(onKeyDown).toHaveBeenCalled();\r\n            });\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=345.bundle.js.map