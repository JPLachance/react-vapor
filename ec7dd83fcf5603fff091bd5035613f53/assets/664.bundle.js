(window.webpackJsonp=window.webpackJsonp||[]).push([[664],{1765:function(e,t,n){"use strict";n.r(t),t.default="import {ShallowWrapper} from 'enzyme';\nimport {shallowWithState, shallowWithStore} from 'enzyme-redux';\nimport * as React from 'react';\nimport {getStoreMock, ReactVaporMockStore} from '../../../utils/tests/TestUtils';\nimport {RefreshCallBackActions} from '../RefeshCallbackActions';\nimport {IRefreshCallbackProps, IRefreshCallbackState, RefreshCallback} from '../RefreshCallback';\nimport {RefreshStatus} from '../RefreshCallbackReducer';\n\ndescribe('RefreshCallback tests', () => {\n    describe('<RefreshCallback />', () => {\n        it('should mount and unmount without error', () => {\n            expect(() => {\n                const component = shallowWithState(<RefreshCallback callback={() => ''} />, {});\n                component.unmount();\n            });\n        });\n\n        describe('once mounted', () => {\n            let component: ShallowWrapper<IRefreshCallbackProps, IRefreshCallbackState>;\n\n            beforeEach(() => {\n                jasmine.clock().install();\n            });\n\n            afterEach(() => {\n                jasmine.clock().uninstall();\n            });\n\n            it('should call renderCount on render', () => {\n                const spy = jasmine.createSpy('renderCount');\n                shallowWithState(<RefreshCallback callback={() => ''} renderCount={spy} />, {}).dive();\n\n                expect(spy).toHaveBeenCalledTimes(1);\n            });\n\n            it('should call the callback when the timer is 0 and status inProgress', () => {\n                const spy = jasmine.createSpy('callback');\n                shallowWithState(<RefreshCallback id={'id'} callback={spy} delay={1} />, {\n                    refreshCallback: {id: RefreshStatus.inProgress},\n                }).dive();\n                jasmine.clock().tick(1001);\n\n                expect(spy).toHaveBeenCalledTimes(1);\n            });\n\n            it('should reset the count in the state and the timer if the status change to \"start\"', () => {\n                component = shallowWithState(<RefreshCallback id={'id'} callback={() => ''} />, {\n                    refreshCallback: {id: RefreshStatus.stopped},\n                }).dive();\n                jasmine.clock().tick(1001);\n                expect(component.state().count).toBe(9);\n\n                component.setProps({\n                    ...component.props(),\n                    status: RefreshStatus.started,\n                });\n\n                expect(component.state().count).toBe(10);\n            });\n\n            it('should stop the time if the state status change for \"stop\"', () => {\n                component = shallowWithState(<RefreshCallback id={'id'} callback={() => ''} />, {\n                    refreshCallback: {id: RefreshStatus.inProgress},\n                }).dive();\n                jasmine.clock().tick(1001);\n                expect(component.state().count).toBe(9);\n\n                component.setProps({\n                    ...component.props(),\n                    status: RefreshStatus.stopped,\n                });\n                expect(component.state().count).toBe(9);\n                jasmine.clock().tick(1001);\n                expect(component.state().count).toBe(9);\n            });\n\n            describe('dispatch', () => {\n                let store: ReactVaporMockStore;\n\n                it('should dispatch a inProgress on mount', () => {\n                    store = getStoreMock({});\n                    component = shallowWithStore(<RefreshCallback id={'id'} callback={() => ''} />, store).dive();\n\n                    expect(store.getActions()).toContain(RefreshCallBackActions.inProgress('id'));\n                });\n\n                it('should dispatch a stop when the callback is trigger', () => {\n                    store = getStoreMock({\n                        refreshCallback: {id: RefreshStatus.inProgress},\n                    });\n                    const spy = jasmine.createSpy('callback');\n                    shallowWithStore(<RefreshCallback id={'id'} callback={spy} delay={1} />, store).dive();\n                    jasmine.clock().tick(1001);\n\n                    expect(spy).toHaveBeenCalledTimes(1);\n                    expect(store.getActions()).toContain(RefreshCallBackActions.stop('id'));\n                });\n            });\n        });\n    });\n});\n"}}]);
//# sourceMappingURL=664.bundle.js.map