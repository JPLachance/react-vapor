(window.webpackJsonp=window.webpackJsonp||[]).push([[823],{1921:function(e,n,t){"use strict";t.r(n),n.default="import {ShallowWrapper} from 'enzyme';\nimport {shallowWithState, shallowWithStore} from 'enzyme-redux';\nimport * as React from 'react';\nimport * as _ from 'underscore';\nimport {TableHOCUtils} from '..';\nimport {getStoreMock} from '../../../utils/tests/TestUtils';\nimport {PER_PAGE_NUMBERS} from '../../navigation/perPage';\nimport {PaginationUtils} from '../../pagination/PaginationUtils';\nimport {TablePagination} from '../../pagination/TablePagination';\nimport {TableWithPaginationActions} from '../actions';\nimport {TableHOC} from '../TableHOC';\nimport {\n    ITableWithNewPaginationConfig,\n    ITableWithNewPaginationProps,\n    tableWithNewPagination,\n} from '../TableWithNewPagination';\nimport {ITableWithPaginationProps} from '../TableWithPagination';\n\ndescribe('TableWithNewPagination tests', () => {\n    describe('<TableWithNewPagination />', () => {\n        it('should mount and unmount without errors', () => {\n            const TableWithNewPagination = _.compose(tableWithNewPagination())(TableHOC);\n            expect(() => {\n                const wrapper = shallowWithState(<TableWithNewPagination />, {}).dive();\n                wrapper.unmount();\n            });\n        });\n\n        describe('once mounted', () => {\n            let wrapper: ShallowWrapper<ITableWithPaginationProps>;\n            const shallowTableWithNewPagination = (\n                config: Partial<ITableWithNewPaginationConfig> = {},\n                props: Partial<ITableWithNewPaginationProps> = {},\n                state = {}\n            ) => {\n                const TableWithNewPagination = _.compose(tableWithNewPagination(config))(TableHOC);\n                return shallowWithState(<TableWithNewPagination {...props} />, state);\n            };\n\n            it('should set the defaultPerPageSelected for <TablePagination /> with the second value in the array if defined', () => {\n                wrapper = shallowTableWithNewPagination({perPageNumbers: [3, 5, 10]}).dive();\n                expect(wrapper.find(TablePagination).props().defaultPerPageSelected).toBe(5);\n            });\n\n            it('should set the defaultPerPageSelected for <TablePagination /> with the first value if only 1 value in the array', () => {\n                wrapper = shallowTableWithNewPagination({perPageNumbers: [3]}).dive();\n                expect(wrapper.find(TablePagination).props().defaultPerPageSelected).toBe(3);\n            });\n\n            it('should set the defaultPerPageSelected for <TablePagination /> with the default value in PER_PAGE_NUMBERS if perPageNumbers is empty', () => {\n                wrapper = shallowTableWithNewPagination({perPageNumbers: []}).dive();\n                expect(wrapper.find(TablePagination).props().defaultPerPageSelected).toBe(PER_PAGE_NUMBERS[1]);\n            });\n\n            it('should not call onUpdate if the pageNb dont change', () => {\n                const spy = jasmine.createSpy('onUpdate');\n                wrapper = shallowTableWithNewPagination(\n                    {perPageNumbers: []},\n                    {onUpdate: spy, id: 'test'},\n                    {\n                        flatSelect: [{id: PaginationUtils.getPaginationPerPageId('test'), selectedOptionId: 2}],\n                        paginationComposite: [{id: TableHOCUtils.getPaginationId('test'), pageNb: 2}],\n                    }\n                ).dive();\n\n                wrapper.setProps({pageNb: 2, perPage: 2});\n                expect(spy).toHaveBeenCalledTimes(0);\n            });\n\n            it('should call onUpdate if the pageNb change', () => {\n                const spy = jasmine.createSpy('onUpdate');\n                wrapper = shallowTableWithNewPagination(\n                    {perPageNumbers: []},\n                    {onUpdate: spy, id: 'test'},\n                    {\n                        flatSelect: [{id: PaginationUtils.getPaginationPerPageId('test'), selectedOptionId: 2}],\n                        paginationComposite: [{id: TableHOCUtils.getPaginationId('test'), pageNb: 2}],\n                    }\n                ).dive();\n\n                wrapper.setProps({pageNb: 3, perPage: 2});\n                expect(spy).toHaveBeenCalledTimes(1);\n            });\n\n            it('should not call onUpdate if the perPage dont change', () => {\n                const spy = jasmine.createSpy('onUpdate');\n                wrapper = shallowTableWithNewPagination(\n                    {perPageNumbers: []},\n                    {onUpdate: spy, id: 'test'},\n                    {\n                        flatSelect: [{id: PaginationUtils.getPaginationPerPageId('test'), selectedOptionId: 2}],\n                        paginationComposite: [{id: TableHOCUtils.getPaginationId('test'), pageNb: 2}],\n                    }\n                ).dive();\n\n                wrapper.setProps({pageNb: 2, perPage: 2});\n                expect(spy).toHaveBeenCalledTimes(0);\n            });\n\n            it('should call onUpdate if the perPage change', () => {\n                const spy = jasmine.createSpy('onUpdate');\n                wrapper = shallowTableWithNewPagination(\n                    {perPageNumbers: []},\n                    {onUpdate: spy, id: 'test'},\n                    {\n                        flatSelect: [{id: PaginationUtils.getPaginationPerPageId('test'), selectedOptionId: 2}],\n                        paginationComposite: [{id: TableHOCUtils.getPaginationId('test'), pageNb: 2}],\n                    }\n                ).dive();\n\n                wrapper.setProps({pageNb: 2, perPage: 3});\n                expect(spy).toHaveBeenCalledTimes(1);\n            });\n        });\n\n        describe('dispatch', () => {\n            const shallowTableWithNewPaginationWithStore = (\n                store: ReturnType<typeof getStoreMock>,\n                config: Partial<ITableWithNewPaginationConfig> = {},\n                props: Partial<ITableWithNewPaginationProps> = {}\n            ) => {\n                const TableWithNewPagination = _.compose(tableWithNewPagination(config))(TableHOC);\n                return shallowWithStore(<TableWithNewPagination {...props} />, store);\n            };\n\n            it('should add the table pagination in the store on mount', () => {\n                const store = getStoreMock();\n                shallowTableWithNewPaginationWithStore(store, {perPageNumbers: []}, {id: 'test'}).dive();\n\n                expect(store.getActions()).toContain(TableWithPaginationActions.add('test'));\n            });\n\n            it('should remove the table pagination in the store on unmount', () => {\n                const store = getStoreMock();\n                const wrapper = shallowTableWithNewPaginationWithStore(\n                    store,\n                    {perPageNumbers: []},\n                    {id: 'test'}\n                ).dive();\n                wrapper.unmount();\n\n                expect(store.getActions()).toContain(TableWithPaginationActions.remove('test'));\n            });\n        });\n    });\n});\n"}}]);
//# sourceMappingURL=823.bundle.js.map