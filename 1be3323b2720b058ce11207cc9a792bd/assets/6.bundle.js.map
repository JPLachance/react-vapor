{"version":3,"sources":["webpack:///./src/components/actions/ActionBar.tsx?d37a","webpack:///./src/components/actions/PrimaryAction.tsx?99b6","webpack:///./src/components/actions/LinkAction.tsx?6c14","webpack:///./src/components/actions/Action.tsx?aa30","webpack:///./src/components/actions/TriggerActionConnected.tsx?81e8","webpack:///./src/components/actions/PrimaryActionConnected.tsx?6039","webpack:///./src/components/loading/components/TextLoadingPlaceholder.tsx?fde6","webpack:///./src/components/inlinePrompt/InlinePrompt.tsx?d979","webpack:///./src/components/actions/filters/ItemFilter.tsx?17bf","webpack:///./src/components/actions/SecondaryActions.tsx?a067","webpack:///./src/components/actions/ActionsDropdown.tsx?b330","webpack:///./src/components/dropdown/DropdownConnected.tsx?3b40","webpack:///./src/components/dropdown/Dropdown.tsx?7709","webpack:///./src/components/actions/ActionDropdownItem.tsx?d416","webpack:///./src/components/loading/components/TableLoading.tsx?b52c"],"names":["Actions","primaryActions","props","actions","filter","primary","map","action","index","primaryAction","withReduxState","parentId","id","className","key","secondaryActions","secondaryActionsView","moreLabel","prompt","Prompt","length","options","Filter","itemFilter","label","itemFilterLabel","item","itemTooltipProps","onClear","clearItemFilter","crop","itemFilterCropLength","componentDidMount","this","onRender","componentWillUnmount","onDestroy","render","containerClasses","defaultClasses","extraContainerClasses","isLoading","withSmallActions","prefixContentElement","prefixContent","style","width","children","removeDefaultContainerClasses","ActionBar","defaultProps","ActionBarConnected","state","ownProps","actionBar","actionBars","prompts","indexOf","itemFilters","enabled","hideDisabled","dispatch","onClearItemFilter","link","actionClasses","simple","opts","href","undefined","target","rel","title","name","icon","tooltipPlacement","tooltip","actionIcon","svgName","svgClass","inside","placement","Right","onTriggerAction","confirmData","requiresConfirmation","onTriggerConfirm","confirmLabel","trigger","onConfirm","description","cancel","buttonLabels","choices","confirm","confirmType","onCloseDropdown","disabled","onClick","TriggerActionConnected","userChoice","isOpened","TriggerAction","PrimaryActionConnected","mergeProps","TextLoadingPlaceholder","small","word","large","InlinePromptConnected","onCancel","choice","type","opened","itemFilterText","itemFilterLength","Math","abs","substring","SecondaryActions","lastFilteredAction","filteredActions","separator","actionItems","actionsItems","ActionsDropdown","toggleContent","dropdownItems","DropdownConnected","dropdowns","onDocumentClick","handleClick","handleDocumentClick","e","dropdown","contains","componentWillMount","document","addEventListener","removeEventListener","dropdownClasses","open","ref","ActionDropdownItem","Body","numberOfColumns","numberOfRow","nColumn","nRow","Row","num","TableLoading","Table"],"mappings":"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","file":"assets/6.bundle.js","sourcesContent":["import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Content, IContentProps} from '../content/Content';\r\nimport {InlinePromptConnected} from '../inlinePrompt/InlinePrompt';\r\nimport {removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {IPromptState} from '../inlinePrompt/InlinePromptReducers';\r\nimport {ITooltipProps} from '../tooltip/Tooltip';\r\nimport {IActionOptions} from './Action';\r\nimport {addActionBar, removeActionBar} from './ActionBarActions';\r\nimport {IActionBarState} from './ActionBarReducers';\r\nimport {ItemFilter} from './filters/ItemFilter';\r\nimport {addItemFilter, filterItems, removeItemFilter} from './filters/ItemFilterActions';\r\nimport {IItemFilterState} from './filters/ItemFilterReducers';\r\nimport {PrimaryAction} from './PrimaryAction';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\nimport {SecondaryActions} from './SecondaryActions';\r\n\r\nexport interface IActionBarProps {\r\n    id?: string;\r\n    itemFilterLabel?: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClearItemFilter?: () => void;\r\n    extraContainerClasses?: string[];\r\n    removeDefaultContainerClasses?: boolean;\r\n    withSmallActions?: boolean;\r\n    prefixContent?: IContentProps;\r\n    width?: number;\r\n    moreLabel?: string;\r\n    itemFilterCropLength?: number;\r\n}\r\n\r\nexport class ActionBar extends React.PureComponent<\r\n    IActionBarProps & Partial<ReturnType<typeof mapStateToProps>> & Partial<ReturnType<typeof mapDispatchToProps>>\r\n> {\r\n    static defaultProps: Partial<IActionBarProps> = {\r\n        extraContainerClasses: [],\r\n        withSmallActions: false,\r\n    };\r\n\r\n    static defaultClasses = [\r\n        'coveo-table-actions-container',\r\n        'mod-cancel-header-padding',\r\n        'mod-border-bottom',\r\n        'mod-align-header',\r\n    ];\r\n\r\n    componentDidMount() {\r\n        this.props.onRender?.();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onDestroy?.();\r\n    }\r\n\r\n    render() {\r\n        const containerClasses = classNames(this.defaultClasses, this.props.extraContainerClasses, {\r\n            'mod-deactivate-pointer': !!this.props.isLoading,\r\n            'small-actions-container': this.props.withSmallActions,\r\n        });\r\n\r\n        const prefixContentElement = this.props.prefixContent ? <Content {...this.props.prefixContent} /> : null;\r\n\r\n        return (\r\n            <div className={containerClasses} style={this.props.width ? {width: this.props.width} : null}>\r\n                {prefixContentElement}\r\n                <this.Filter />\r\n                <this.Actions />\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private get defaultClasses(): string {\r\n        return classNames(this.props.removeDefaultContainerClasses ? '' : ActionBar.defaultClasses);\r\n    }\r\n\r\n    private Actions: React.FunctionComponent = () => {\r\n        const primaryActions =\r\n            this.props.actions\r\n                ?.filter(({primary}) => !!primary)\r\n                .map((action: IActionOptions, index: number) => {\r\n                    const primaryAction = this.props.withReduxState ? (\r\n                        <PrimaryActionConnected action={action} parentId={this.props.id} />\r\n                    ) : (\r\n                        <PrimaryAction action={action} />\r\n                    );\r\n                    return (\r\n                        <div className=\"action primary-action\" key={`primary-${index}`}>\r\n                            {primaryAction}\r\n                        </div>\r\n                    );\r\n                }) ?? [];\r\n\r\n        const secondaryActions: IActionOptions[] = this.props.actions?.filter(({primary}) => !primary) ?? [];\r\n\r\n        let secondaryActionsView: JSX.Element = null;\r\n        if (!_.isEmpty(secondaryActions)) {\r\n            secondaryActionsView = (\r\n                <SecondaryActions id={this.props.id} moreLabel={this.props.moreLabel} actions={secondaryActions} />\r\n            );\r\n        }\r\n\r\n        const actions = this.props.prompt ? (\r\n            <this.Prompt />\r\n        ) : (\r\n            <>\r\n                {primaryActions}\r\n                {secondaryActionsView}\r\n            </>\r\n        );\r\n\r\n        return primaryActions.length || secondaryActionsView || this.props.prompt ? (\r\n            <div className=\"coveo-table-actions\">{actions}</div>\r\n        ) : null;\r\n    };\r\n\r\n    private Prompt: React.FunctionComponent = () =>\r\n        this.props.prompt?.options ? (\r\n            <div className=\"prompt\">\r\n                <InlinePromptConnected {...this.props.prompt} />\r\n            </div>\r\n        ) : null;\r\n\r\n    private Filter: React.FunctionComponent = () =>\r\n        this.props.itemFilter ? (\r\n            <ItemFilter\r\n                label={this.props.itemFilterLabel}\r\n                item={this.props.itemFilter}\r\n                itemTooltipProps={this.props.itemTooltipProps}\r\n                onClear={this.props.clearItemFilter}\r\n                crop={this.props.itemFilterCropLength}\r\n            />\r\n        ) : null;\r\n}\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IActionBarProps) => {\r\n    const actionBar: IActionBarState = _.findWhere(state.actionBars, {id: ownProps.id});\r\n    const prompt: IPromptState = _.find(state.prompts, ({id}) => id.indexOf(ownProps.id) >= 0);\r\n    const itemFilter: IItemFilterState = _.findWhere(state.itemFilters, {id: ownProps.id});\r\n\r\n    return {\r\n        withReduxState: true,\r\n        actions: actionBar?.actions.filter(({enabled, hideDisabled}) => enabled || hideDisabled === false) ?? [],\r\n        isLoading: actionBar?.isLoading ?? false,\r\n        prompt,\r\n        itemFilter: itemFilter?.item ?? '',\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IActionBarProps) => ({\r\n    onRender: () => {\r\n        dispatch(addActionBar(ownProps.id));\r\n        if (ownProps.itemFilterLabel) {\r\n            dispatch(addItemFilter(ownProps.id));\r\n        }\r\n    },\r\n    onDestroy: () => {\r\n        dispatch(removeActionBar(ownProps.id));\r\n        dispatch(removeItemFilter(ownProps.id));\r\n        dispatch(removePrompt(ownProps.id));\r\n    },\r\n    clearItemFilter: () => {\r\n        ownProps.onClearItemFilter?.();\r\n        dispatch(filterItems(ownProps.id, ''));\r\n    },\r\n});\r\n\r\nexport const ActionBarConnected = connect(mapStateToProps, mapDispatchToProps)(ActionBar);\r\n","import * as React from 'react';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {IBasicActionProps} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerAction, TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IPrimaryActionOwnProps extends React.ClassAttributes<PrimaryAction>, IBasicActionProps {\r\n    parentId?: string;\r\n}\r\n\r\nexport interface IPrimaryActionStateProps extends IReduxStatePossibleProps {}\r\n\r\nexport interface IPrimaryActionProps extends IPrimaryActionOwnProps, IPrimaryActionStateProps {}\r\n\r\nexport class PrimaryAction extends React.Component<IPrimaryActionProps, any> {\r\n    render() {\r\n        const action: JSX.Element = this.props.action.link ? (\r\n            <LinkAction action={this.props.action} />\r\n        ) : this.props.withReduxState ? (\r\n            <TriggerActionConnected action={this.props.action} parentId={this.props.parentId} />\r\n        ) : (\r\n            <TriggerAction action={this.props.action} />\r\n        );\r\n\r\n        return <div>{action}</div>;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Action, IBasicActionProps} from './Action';\r\n\r\nexport interface ILinkActionProps extends React.ClassAttributes<LinkAction>, IBasicActionProps {}\r\n\r\nexport class LinkAction extends React.Component<ILinkActionProps> {\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && !this.props.action.hideDisabled,\r\n            'inline-flex flex-center': !this.props.simple,\r\n        });\r\n        const opts: React.AllHTMLAttributes<HTMLAnchorElement> = {\r\n            children: <Action action={this.props.action} simple={this.props.simple} />,\r\n        };\r\n        const href = this.props.action.enabled ? this.props.action.link : undefined;\r\n        if (this.props.action.target) {\r\n            opts.target = this.props.action.enabled ? this.props.action.target : undefined;\r\n            opts.rel = 'noopener noreferrer';\r\n        }\r\n\r\n        return <a className={actionClasses} href={href} title={this.props.action.name} {...opts} />;\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {TooltipPlacement} from '../../utils/TooltipUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IConfirmButtonLabel {\r\n    cancel: string;\r\n    confirm: string;\r\n}\r\n\r\nexport interface IConfirmData {\r\n    confirmType: string;\r\n    confirmLabel?: string;\r\n    buttonLabels?: IConfirmButtonLabel;\r\n}\r\n\r\nexport interface IBaseActionOptions {\r\n    enabled: boolean;\r\n    name?: string;\r\n    link?: string;\r\n    target?: string;\r\n    primary?: boolean;\r\n    tooltip?: string;\r\n    tooltipPlacement?: string;\r\n    hideDisabled?: boolean;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport interface IActionOptions extends IBaseActionOptions {\r\n    icon?: string;\r\n    iconClass?: string;\r\n    id?: string;\r\n    trigger?: () => void;\r\n    unrepeatable?: boolean;\r\n    callOnDoubleClick?: boolean;\r\n    requiresConfirmation?: IConfirmData;\r\n    separator?: boolean;\r\n    grouped?: boolean;\r\n    subActions?: IActionOptions[];\r\n    hidden?: boolean;\r\n}\r\n\r\nexport interface IBasicActionProps {\r\n    action: IActionOptions;\r\n    simple?: boolean;\r\n}\r\n\r\nexport interface IActionProps extends React.ClassAttributes<Action>, IBasicActionProps {}\r\n\r\nexport class Action extends React.Component<IActionProps, any> {\r\n    static defaultProps: Partial<IActionOptions> = {\r\n        hideDisabled: true,\r\n    };\r\n\r\n    render() {\r\n        const {icon, id, name, tooltipPlacement, tooltip} = this.props.action;\r\n        const actionIcon: JSX.Element = icon ? (\r\n            <Svg svgName={icon} className=\"action-icon\" svgClass=\"icon fill-medium-blue\" />\r\n        ) : (\r\n            <Svg svgName=\"more\" className=\"action-icon action-icon-more\" svgClass=\"icon icon-medium fill-medium-blue\" />\r\n        );\r\n        const inside: string | JSX.Element = this.props.simple ? (\r\n            name\r\n        ) : (\r\n            <span className=\"inline-flex flex-center\">\r\n                {actionIcon}\r\n                <span className=\"action-label\" data-trigger={id || name}>\r\n                    {name}\r\n                </span>\r\n            </span>\r\n        );\r\n        const placement: string = tooltipPlacement || TooltipPlacement.Right;\r\n        const wholeAction: JSX.Element = tooltip ? (\r\n            <Tooltip title={tooltip} placement={placement}>\r\n                {inside}\r\n            </Tooltip>\r\n        ) : (\r\n            <span>{inside}</span>\r\n        );\r\n\r\n        return wholeAction;\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {closeDropdown} from '../dropdown/DropdownActions';\r\nimport {IUserChoice} from '../inlinePrompt/InlinePrompt';\r\nimport {addPrompt, removePrompt} from '../inlinePrompt/InlinePromptActions';\r\nimport {Action, IBasicActionProps, IConfirmData} from './Action';\r\n\r\nexport interface ITriggerActionOwnProps extends React.ClassAttributes<TriggerAction>, IBasicActionProps {\r\n    confirmLabel?: string;\r\n    parentId?: string;\r\n}\r\n\r\nexport interface ITriggerActionProps extends ITriggerActionOwnProps, Partial<ReturnType<typeof mapDispatchToProps>> {}\r\n\r\nexport const CONFIRM_LABEL: string = 'Are you sure?';\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: ITriggerActionOwnProps\r\n) => ({\r\n    onTriggerConfirm: (onClick: () => void, userChoice: IUserChoice, className: string) => {\r\n        dispatch(addPrompt(ownProps.parentId, {onClick, userChoice, isOpened: false, className}));\r\n    },\r\n    onConfirm: () => dispatch(removePrompt(ownProps.parentId)),\r\n    onCloseDropdown: () => dispatch(closeDropdown(ownProps.parentId)),\r\n});\r\n\r\nexport class TriggerAction extends React.Component<ITriggerActionProps, any> {\r\n    private onTriggerAction() {\r\n        const confirmData: IConfirmData = this.props.action.requiresConfirmation;\r\n        if (confirmData && this.props.onTriggerConfirm) {\r\n            const confirmLabel: string =\r\n                this.props.confirmLabel || this.props.action.requiresConfirmation.confirmLabel || CONFIRM_LABEL;\r\n            const icon: string = this.props.action.icon;\r\n            this.props.onTriggerConfirm(\r\n                () => {\r\n                    if (this.props.action.trigger) {\r\n                        this.props.action.trigger();\r\n                    }\r\n                    if (this.props.onConfirm) {\r\n                        this.props.onConfirm();\r\n                    }\r\n                },\r\n                {\r\n                    icon: icon,\r\n                    description: confirmLabel,\r\n                    cancel: confirmData.buttonLabels.cancel,\r\n                    choices: {\r\n                        confirm: confirmData.buttonLabels.confirm,\r\n                    },\r\n                },\r\n                confirmData.confirmType\r\n            );\r\n        } else {\r\n            if (this.props.action.trigger) {\r\n                this.props.action.trigger();\r\n                this.props.onCloseDropdown && this.props.onCloseDropdown();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const actionClasses: string = classNames({\r\n            enabled: this.props.action.enabled,\r\n            'state-disabled': !this.props.action.enabled && (this.props.simple || !this.props.action.hideDisabled),\r\n            disabled: !this.props.action.enabled && !this.props.simple,\r\n        });\r\n\r\n        return (\r\n            <span\r\n                onClick={() => this.props.action.enabled && this.onTriggerAction()}\r\n                className={actionClasses}\r\n                title={this.props.action.name}\r\n            >\r\n                <Action action={this.props.action} simple={this.props.simple} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport const TriggerActionConnected = connect(undefined, mapDispatchToProps)(TriggerAction);\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {IPrimaryActionProps, IPrimaryActionStateProps, PrimaryAction} from './PrimaryAction';\r\n\r\nconst mapStateToProps = (): IPrimaryActionStateProps => ({\r\n    withReduxState: true,\r\n});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport const PrimaryActionConnected: React.ComponentClass<IPrimaryActionProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(PrimaryAction);\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\nexport interface ITextLoadingPlaceholder {\n    small?: boolean;\n    word?: boolean;\n    large?: boolean;\n    className?: string;\n}\n\nexport const TextLoadingPlaceholder = ({small, word, large, className = ''}: ITextLoadingPlaceholder) => (\n    <div\n        className={classNames(\n            'text-content-placeholder',\n            {\n                'mod-small': small,\n                'mod-word': word,\n                'mod-large': large,\n            },\n            className\n        )}\n    />\n);\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../ReactVapor';\r\nimport {IDispatch} from '../../utils/ReduxUtils';\r\nimport {Svg} from '../svg/Svg';\r\nimport {removePrompt} from './InlinePromptActions';\r\n\r\nexport interface IUserChoice {\r\n    description?: string;\r\n    cancel?: string;\r\n    choices?: Record<string, string>;\r\n    icon?: string;\r\n}\r\n\r\nexport interface IInlinePromptOptions {\r\n    onClick: () => void;\r\n    userChoice: IUserChoice;\r\n    isOpened?: boolean;\r\n    className?: string;\r\n}\r\n\r\nexport interface IInlinePromptProps {\r\n    id?: string;\r\n    options: IInlinePromptOptions;\r\n}\r\n\r\nexport const InlinePrompt: React.FunctionComponent<IInlinePromptProps &\r\n    Partial<ReturnType<typeof mapDispatchToProps>>> = ({options, onCancel}) => {\r\n    const icon: JSX.Element = options.userChoice.icon ? (\r\n        <Svg svgName={options.userChoice.icon} className=\"prompt-icon mr1\" svgClass=\"icon mod-2x fill-medium-blue\" />\r\n    ) : null;\r\n\r\n    const choices: JSX.Element[] = _.map(options.userChoice.choices, (choice: string) => (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn action mod-danger prompt-action enabled\"\r\n            onClick={options.onClick}\r\n            key={choice}\r\n        >\r\n            {choice}\r\n        </button>\r\n    ));\r\n\r\n    const description: JSX.Element = options.userChoice.description ? (\r\n        <span className=\"description\">{options.userChoice.description}</span>\r\n    ) : null;\r\n\r\n    const cancel: JSX.Element = options.userChoice.cancel ? (\r\n        <button type=\"button\" className=\"btn cancel prompt-action enabled\" onClick={onCancel}>\r\n            {options.userChoice.cancel}\r\n        </button>\r\n    ) : null;\r\n\r\n    const className = classNames(`prompt-${options.className ?? 'info'}`, {opened: options.isOpened});\r\n\r\n    return (\r\n        <span className={className}>\r\n            <span className=\"label-confirmation\">\r\n                {icon}\r\n                {description}\r\n            </span>\r\n            {choices}\r\n            {cancel}\r\n        </span>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: IDispatch<IReactVaporState>, ownProps: IInlinePromptProps) => ({\r\n    onCancel: () => dispatch(removePrompt(ownProps.id)),\r\n});\r\n\r\nexport const InlinePromptConnected = connect(null, mapDispatchToProps)(InlinePrompt);\r\n","import * as React from 'react';\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ITooltipProps, Tooltip} from '../../tooltip/Tooltip';\r\n\r\nexport interface IItemFilterProps extends React.ClassAttributes<ItemFilter> {\r\n    label: string;\r\n    item: string;\r\n    itemTooltipProps?: ITooltipProps;\r\n    onClear: () => void;\r\n    crop?: number;\r\n}\r\n\r\nexport const ELLIPSIS: string = '...';\r\n\r\nexport class ItemFilter extends React.Component<IItemFilterProps, any> {\r\n    render() {\r\n        let itemFilterText: string = this.props.item;\r\n        if (this.props.crop) {\r\n            const itemFilterLength: number = itemFilterText.length;\r\n\r\n            if (itemFilterLength > Math.abs(this.props.crop)) {\r\n                itemFilterText =\r\n                    this.props.crop > 0\r\n                        ? itemFilterText.substring(0, this.props.crop) + ELLIPSIS\r\n                        : ELLIPSIS + itemFilterText.substring(itemFilterLength + this.props.crop, itemFilterLength);\r\n            }\r\n        }\r\n\r\n        const itemFilter: JSX.Element = this.props.itemTooltipProps ? (\r\n            <Tooltip {...this.props.itemTooltipProps}>\r\n                <span className=\"item-filter-item\">{itemFilterText}</span>\r\n            </Tooltip>\r\n        ) : (\r\n            <span className=\"item-filter-item\">{itemFilterText}</span>\r\n        );\r\n\r\n        return (\r\n            <div className=\"coveo-table-actions item-filter\">\r\n                <span className=\"item-filter-label\">{this.props.label}: </span>\r\n                {itemFilter}\r\n                <button className=\"item-filter-clear\" onClick={() => this.props.onClear()}>\r\n                    <Svg svgName=\"clear\" svgClass=\"icon fill-dark-blue\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {isEmpty} from 'underscore';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {ActionsDropdown} from './ActionsDropdown';\r\nimport {PrimaryActionConnected} from './PrimaryActionConnected';\r\n\r\nexport interface ISecondaryActionsProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport const SecondaryActions: React.FunctionComponent<ISecondaryActionsProps> = ({actions, id, moreLabel}) => {\r\n    let lastFilteredAction: IActionOptions = null;\r\n    const filteredActions = actions\r\n        // filter out disabled actions\r\n        .filter((action: IActionOptions) => action.separator || action.enabled || action.hideDisabled === false)\r\n        // Filter out all separator that are preceded by another separator\r\n        .filter((action: IActionOptions) => {\r\n            if (!action.separator || (action.separator && lastFilteredAction && !lastFilteredAction.separator)) {\r\n                lastFilteredAction = action;\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        // Filter out the last action if it's a separator\r\n        .filter((action: IActionOptions, index: number, actionItems: IActionOptions[]) => {\r\n            return index < actionItems.length - 1 || !action.separator;\r\n        });\r\n\r\n    if (isEmpty(filteredActions)) {\r\n        return null;\r\n    } else {\r\n        const actionsItems: JSX.Element =\r\n            filteredActions?.length === 1 ? (\r\n                <PrimaryActionConnected action={filteredActions[0]} parentId={id} />\r\n            ) : (\r\n                <ActionsDropdown moreLabel={moreLabel} actions={filteredActions} id={`${id}_actionsDropdown`} />\r\n            );\r\n        return <div className=\"dropdown action primary-action\">{actionsItems}</div>;\r\n    }\r\n};\r\n\r\n/**\r\n * @deprecated use SecondaryActions directly\r\n */\r\nexport const SecondaryActionsConnected = SecondaryActions;\r\n","import * as React from 'react';\r\n\r\nimport {DropdownConnected} from '../dropdown/DropdownConnected';\r\nimport {Svg} from '../svg/Svg';\r\nimport {IActionOptions} from './Action';\r\nimport {ActionDropdownItem} from './ActionDropdownItem';\r\n\r\nexport interface IActionsDropdownProps {\r\n    actions: IActionOptions[];\r\n    id?: string;\r\n    moreLabel?: string;\r\n}\r\n\r\nexport const MORE_LABEL: string = 'More';\r\n\r\nexport const ActionsDropdown: React.FunctionComponent<IActionsDropdownProps> = ({actions, moreLabel, id}) => {\r\n    const actionItems = actions?.map((action: IActionOptions, index: number) => (\r\n        <ActionDropdownItem key={`action-${action.id ?? index}`} action={action} parentId={id} />\r\n    ));\r\n\r\n    const toggleContent: JSX.Element[] = [\r\n        <Svg\r\n            key=\"action-dropdown-toggle-icon\"\r\n            svgName=\"more\"\r\n            className=\"action-icon\"\r\n            svgClass=\"icon icon-medium fill-medium-blue\"\r\n        />,\r\n        <span key=\"action-dropdown-toggle-label\" className=\"action-label\" data-trigger=\"more\">\r\n            {moreLabel || MORE_LABEL}\r\n        </span>,\r\n    ];\r\n\r\n    return <DropdownConnected toggleContent={toggleContent} dropdownItems={actionItems} id={id} />;\r\n};\r\n\r\n/**\r\n * @deprecated use ActionsDropdown directly instead\r\n */\r\nexport const ActionsDropdownConnected = ActionsDropdown;\r\n","import * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as _ from 'underscore';\r\nimport {IReactVaporState, IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction, ReduxUtils} from '../../utils/ReduxUtils';\r\nimport {Dropdown, IDropdownDispatchProps, IDropdownOwnProps, IDropdownProps, IDropdownStateProps} from './Dropdown';\r\nimport {addDropdown, closeDropdown, removeDropdown, toggleDropdown} from './DropdownActions';\r\nimport {IDropdownState} from './DropdownReducers';\r\n\r\nconst mapStateToProps = (state: IReactVaporState, ownProps: IDropdownOwnProps): IDropdownStateProps => {\r\n    const item: IDropdownState = _.findWhere(state.dropdowns, {id: ownProps.id});\r\n\r\n    return {\r\n        isOpened: item && item.opened,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: (action: IReduxAction<IReduxActionsPayload>) => void,\r\n    ownProps: IDropdownOwnProps\r\n): IDropdownDispatchProps => ({\r\n    onRender: () => dispatch(addDropdown(ownProps.id)),\r\n    onDestroy: () => dispatch(removeDropdown(ownProps.id)),\r\n    onClick: () => dispatch(toggleDropdown(ownProps.id)),\r\n    onDocumentClick: () => dispatch(closeDropdown(ownProps.id)),\r\n});\r\n\r\nexport const DropdownConnected: React.ComponentClass<IDropdownProps> = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    ReduxUtils.mergeProps\r\n)(Dropdown);\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nexport interface IDropdownOwnProps extends React.ClassAttributes<Dropdown> {\r\n    id?: string;\r\n    toggleContent: JSX.Element[];\r\n    dropdownItems: JSX.Element[];\r\n    className?: string;\r\n}\r\n\r\nexport interface IDropdownStateProps {\r\n    isOpened?: boolean;\r\n}\r\n\r\nexport interface IDropdownDispatchProps {\r\n    onRender?: () => void;\r\n    onDestroy?: () => void;\r\n    onClick?: () => void;\r\n    onDocumentClick?: () => void;\r\n}\r\n\r\nexport interface IDropdownProps extends IDropdownOwnProps, IDropdownStateProps, IDropdownDispatchProps {}\r\n\r\nexport class Dropdown extends React.Component<IDropdownProps, any> {\r\n    private dropdown: HTMLDivElement;\r\n\r\n    private handleClick = () => {\r\n        if (this.props.onClick) {\r\n            this.props.onClick();\r\n        }\r\n    };\r\n\r\n    private handleDocumentClick = (e: MouseEvent) => {\r\n        if (this.props.isOpened) {\r\n            const facetSearch: Element | Text = ReactDOM.findDOMNode(this.dropdown);\r\n\r\n            if (!facetSearch.contains(e.target as Node)) {\r\n                this.props.onDocumentClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.onRender) {\r\n            this.props.onRender();\r\n        }\r\n\r\n        if (this.props.onDocumentClick) {\r\n            document.addEventListener('click', this.handleDocumentClick);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onDocumentClick) {\r\n            document.removeEventListener('click', this.handleDocumentClick);\r\n        }\r\n\r\n        if (this.props.onDestroy) {\r\n            this.props.onDestroy();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dropdownClasses = classNames('dropdown', {open: this.props.isOpened}, this.props.className);\r\n\r\n        return (\r\n            <div className={dropdownClasses} ref={(dropdown: HTMLDivElement) => (this.dropdown = dropdown)}>\r\n                <span className=\"dropdown-toggle inline-flex flex-center\" onClick={() => this.handleClick()}>\r\n                    {this.props.toggleContent}\r\n                </span>\r\n                <ul className=\"dropdown-menu normal-height\">{this.props.dropdownItems}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport {IActionOptions} from './Action';\r\nimport {LinkAction} from './LinkAction';\r\nimport {TriggerActionConnected} from './TriggerActionConnected';\r\n\r\nexport interface IActionDropdownItemProps {\r\n    action: IActionOptions;\r\n    parentId?: string;\r\n}\r\n\r\nexport const ActionDropdownItem: React.FunctionComponent<IActionDropdownItemProps> = ({parentId, action}) => {\r\n    if (action.separator) {\r\n        return <li className=\"divider\" />;\r\n    }\r\n\r\n    if (action.link) {\r\n        return (\r\n            <li>\r\n                <LinkAction action={action} simple={true} />\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <TriggerActionConnected action={action} simple={true} parentId={parentId} />\r\n        </li>\r\n    );\r\n};\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport * as _ from 'underscore';\n\nconst Table = ({numberOfColumns = 4, numberOfRow = 10}: {numberOfColumns?: number; numberOfRow?: number}) => {\n    return (\n        <>\n            <table className=\"table big-table\">\n                <Body numberOfColumns={numberOfColumns} numberOfRow={numberOfRow} />\n            </table>\n        </>\n    );\n};\n\nconst Body = ({numberOfColumns = 4, numberOfRow = 10}: {numberOfColumns?: number; numberOfRow?: number}) => (\n    <tbody>\n        {_.times(numberOfRow, (nColumn: number) => (\n            <tr key={`table-row-loading-${nColumn}`} className=\"mod-border-bottom no-hover\">\n                {_.times(numberOfColumns, (nRow: number) => (\n                    <Row key={`table-row-loading-${nRow}`} num={nColumn} />\n                ))}\n            </tr>\n        ))}\n    </tbody>\n);\n\nconst Row = ({num}: {num: number}) => (\n    <td className=\"table-cell-loading\">\n        <div className={classNames('table-cell-content-loading', {'mod-half': num % 2})} />\n    </td>\n);\n\nexport const TableLoading = {\n    Table,\n    Body,\n    Row,\n};\n"],"sourceRoot":""}