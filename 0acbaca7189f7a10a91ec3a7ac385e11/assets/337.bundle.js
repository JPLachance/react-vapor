(window.webpackJsonp=window.webpackJsonp||[]).push([[337],{1433:function(e,n,o){"use strict";o.r(n),n.default="import * as _ from 'underscore';\r\nimport {keyCode} from '../../utils/InputUtils';\r\nimport {IDropdownOption} from './DropdownSearch';\r\nimport {IDropdownSearchState} from './DropdownSearchReducers';\r\n\r\n/**\r\n * Utility function preventing boilerplate code when retrieving the selected option of a DropdownSearchConnected.\r\n *\r\n * Especially useful in the context of mapStateToProps when you have one or multiple DropdownSearchConnected components in the same view.\r\n */\r\nexport const getDropdownSearchSelectedOption = (\r\n    id: string,\r\n    dropdownSearchState: IDropdownSearchState[] = []\r\n): IDropdownOption => {\r\n    const dropdown = _.findWhere(dropdownSearchState, {id});\r\n    return dropdown ? _.findWhere(dropdown.options, {selected: true}) : undefined;\r\n};\r\n\r\n/**\r\n * Utility function identifying when a user is selecting an option with keyboard events (not mouse events).\r\n */\r\nexport const isSelectingOption = (keyPressed: number, activeOption: IDropdownOption): boolean =>\r\n    _.contains([keyCode.enter, keyCode.tab], keyPressed) && activeOption && !activeOption.disabled;\r\n"}}]);
//# sourceMappingURL=337.bundle.js.map