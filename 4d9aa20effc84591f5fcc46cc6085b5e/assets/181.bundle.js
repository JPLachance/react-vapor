(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{1274:function(e,r,n){"use strict";n.r(r),r.default="import * as classNames from 'classnames';\r\nimport * as moment from 'moment';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {DateUtils} from '../../utils/DateUtils';\r\nimport {IReduxStatePossibleProps} from '../../utils/ReduxUtils';\r\nimport {DateLimits} from '../datePicker/DatePickerActions';\r\nimport {IDatePickerState} from '../datePicker/DatePickerReducers';\r\nimport {IOptionsCycleProps, OptionsCycle} from '../optionsCycle/OptionsCycle';\r\nimport {OptionsCycleConnected} from '../optionsCycle/OptionsCycleConnected';\r\nimport {TableHeader} from '../tables/TableHeader';\r\nimport {ITableHeaderCellProps} from '../tables/TableHeaderCell';\r\nimport {CalendarDay, IDay} from './CalendarDay';\r\n\r\nexport const CalendarSelectionRuleType = {\r\n    all: 'ALL',\r\n    lower: 'LOWER',\r\n    upper: 'UPPER',\r\n    range: 'RANGE',\r\n};\r\n\r\nexport interface ICalendarSelectionRule {\r\n    test: (date: Date, secondDate?: Date) => boolean;\r\n    isFor: string;\r\n}\r\n\r\nexport interface ICalendarOwnProps extends React.ClassAttributes<Calendar> {\r\n    id?: string;\r\n    months?: string[];\r\n    startingMonth?: number;\r\n    years?: string[];\r\n    startingYear?: number;\r\n    days?: string[];\r\n    startingDay?: number;\r\n    selectionRules?: ICalendarSelectionRule[];\r\n    isLinkedToDateRange?: boolean;\r\n    simple?: boolean;\r\n}\r\n\r\nexport interface ICalendarStateProps extends IReduxStatePossibleProps {\r\n    selectedMonth?: number;\r\n    selectedYear?: number;\r\n    calendarSelection?: IDatePickerState[];\r\n}\r\n\r\nexport interface ICalendarDispatchProps {\r\n    onClick?: (pickerId: string, isUpperLimit: boolean, value: Date) => void;\r\n    onDateChange?: (cycleId: string, newValue: number) => void;\r\n    onSelectUnselectable?: (pickerId: string) => void;\r\n}\r\n\r\nexport interface ICalendarProps extends ICalendarOwnProps, ICalendarStateProps, ICalendarDispatchProps {}\r\n\r\nexport const DEFAULT_MONTHS: string[] = moment.months();\r\n\r\nexport const DEFAULT_YEARS: string[] = [\r\n    ...DateUtils.getPreviousYears(10),\r\n    DateUtils.currentYear.toString(),\r\n    ...DateUtils.getNextYears(10),\r\n];\r\n\r\nexport const DEFAULT_DAYS: string[] = moment.weekdaysShort();\r\n\r\nexport const MONTH_PICKER_ID: string = 'calendar-months';\r\n\r\nexport const YEAR_PICKER_ID: string = 'calendar-years';\r\n\r\nexport class Calendar extends React.Component<ICalendarProps, any> {\r\n    static defaultProps: Partial<ICalendarProps> = {\r\n        selectionRules: [],\r\n        years: DEFAULT_YEARS,\r\n        months: DEFAULT_MONTHS,\r\n        days: DEFAULT_DAYS,\r\n        startingMonth: DateUtils.currentMonth,\r\n        startingDay: 0,\r\n    };\r\n\r\n    private getSelectedDatePicker(): IDatePickerState {\r\n        const selectedDatePickers: IDatePickerState[] = _.map(\r\n            this.props.calendarSelection,\r\n            (calendarSelection: IDatePickerState) => {\r\n                if (calendarSelection.selected) {\r\n                    return calendarSelection;\r\n                }\r\n            }\r\n        ).filter(Boolean);\r\n\r\n        return selectedDatePickers.length ? selectedDatePickers[0] : null;\r\n    }\r\n\r\n    private handleClick(value: Date) {\r\n        if (this.props.onClick) {\r\n            const selectedDatePicker: IDatePickerState = this.getSelectedDatePicker();\r\n\r\n            if (selectedDatePicker) {\r\n                this.props.onClick(selectedDatePicker.id, selectedDatePicker.selected === DateLimits.upper, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleInvalidDateSelected() {\r\n        if (this.props.onSelectUnselectable) {\r\n            const selectedDatePicker: IDatePickerState = this.getSelectedDatePicker();\r\n\r\n            if (selectedDatePicker) {\r\n                this.props.onSelectUnselectable(selectedDatePicker.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: ICalendarProps) {\r\n        if (this.props.onDateChange && this.props.calendarSelection.length) {\r\n            _.each(nextProps.calendarSelection, (calendarSelection: IDatePickerState, index: number) => {\r\n                if (this.props.calendarSelection[index]) {\r\n                    let limitToChange: Date;\r\n                    const currentLowerLimit: Date = this.props.calendarSelection[index].lowerLimit;\r\n                    const currentUpperLimit: Date = this.props.calendarSelection[index].upperLimit;\r\n                    const nextLowerLimit: Date = calendarSelection.lowerLimit;\r\n                    const nextUpperLimit: Date = calendarSelection.upperLimit;\r\n\r\n                    if (DateUtils.isDifferent(currentLowerLimit, nextLowerLimit, 'minute')) {\r\n                        limitToChange = nextLowerLimit;\r\n                    } else if (DateUtils.isDifferent(currentUpperLimit, nextUpperLimit, 'minute')) {\r\n                        limitToChange = nextUpperLimit;\r\n                    }\r\n\r\n                    if (limitToChange) {\r\n                        this.props.onDateChange(this.props.id + MONTH_PICKER_ID, limitToChange.getMonth());\r\n                        this.props.onDateChange(\r\n                            this.props.id + YEAR_PICKER_ID,\r\n                            this.props.years.indexOf(limitToChange.getFullYear().toString())\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    fillInDayInfos(day: IDay): IDay {\r\n        day.isSelectable = true;\r\n\r\n        _.each(this.props.calendarSelection, (calendarSelection: IDatePickerState) => {\r\n            const selectionStart: moment.Moment = calendarSelection.lowerLimit\r\n                ? moment(calendarSelection.lowerLimit).startOf('day')\r\n                : null;\r\n            const selectionEnd: moment.Moment =\r\n                calendarSelection.isRange && calendarSelection.upperLimit && calendarSelection.lowerLimit\r\n                    ? moment(calendarSelection.upperLimit).endOf('day')\r\n                    : selectionStart;\r\n            const isSelected =\r\n                selectionStart && selectionEnd && day.date.isBetween(selectionStart, selectionEnd, 'day', '[]');\r\n\r\n            day.isSelectable =\r\n                calendarSelection.isRange &&\r\n                calendarSelection.selected === DateLimits.upper &&\r\n                calendarSelection.lowerLimit\r\n                    ? day.isSelectable && day.date.isSameOrAfter(calendarSelection.lowerLimit)\r\n                    : day.isSelectable;\r\n            day.isSelected = (day.isSelectable && isSelected) || day.isSelected;\r\n            day.isLowerLimit =\r\n                (calendarSelection.isRange && day.date.isSame(selectionStart, 'day')) || day.isLowerLimit;\r\n            day.isUpperLimit = (calendarSelection.isRange && day.date.isSame(selectionEnd, 'day')) || day.isUpperLimit;\r\n            day.color = isSelected ? calendarSelection.color : day.color;\r\n\r\n            _.each(this.props.selectionRules, (rule: ICalendarSelectionRule) => {\r\n                if (day.isSelectable) {\r\n                    if (\r\n                        rule.isFor === CalendarSelectionRuleType.all ||\r\n                        (rule.isFor === CalendarSelectionRuleType.lower &&\r\n                            calendarSelection.selected === DateLimits.lower) ||\r\n                        (rule.isFor === CalendarSelectionRuleType.upper &&\r\n                            calendarSelection.selected === DateLimits.upper)\r\n                    ) {\r\n                        day.isSelectable = rule.test(day.date.toDate());\r\n                    } else if (\r\n                        rule.isFor === CalendarSelectionRuleType.range &&\r\n                        calendarSelection.selected === DateLimits.upper\r\n                    ) {\r\n                        day.isSelectable = rule.test(calendarSelection.lowerLimit, day.date.toDate());\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return day;\r\n    }\r\n\r\n    render() {\r\n        const monthPickerProps: IOptionsCycleProps = {\r\n            options: this.props.months,\r\n            isInline: true,\r\n        };\r\n\r\n        const startingYearIndex: number = this.props.years.indexOf(DateUtils.currentYear.toString());\r\n        const startingYear: number =\r\n            this.props.startingYear ||\r\n            (startingYearIndex >= 0 ? startingYearIndex : Math.floor(this.props.years.length / 2));\r\n        const yearPickerProps: IOptionsCycleProps = {\r\n            options: this.props.years,\r\n            isInline: true,\r\n        };\r\n\r\n        const orderedDays: string[] = [\r\n            this.props.days[this.props.startingDay],\r\n            ...this.props.days.slice(this.props.startingDay + 1),\r\n            ...this.props.days.slice(0, this.props.startingDay),\r\n        ];\r\n        const daysHeaderColumns: ITableHeaderCellProps[] = _.map(orderedDays, (day: string) => ({title: day}));\r\n\r\n        const monthPicker = this.props.withReduxState ? (\r\n            <OptionsCycleConnected\r\n                id={this.props.id + MONTH_PICKER_ID}\r\n                startAt={this.props.startingMonth}\r\n                {...monthPickerProps}\r\n            />\r\n        ) : (\r\n            <OptionsCycle currentOption={this.props.startingMonth} {...monthPickerProps} />\r\n        );\r\n\r\n        const yearPicker = this.props.withReduxState ? (\r\n            <OptionsCycleConnected id={this.props.id + YEAR_PICKER_ID} startAt={startingYear} {...yearPickerProps} />\r\n        ) : (\r\n            <OptionsCycle currentOption={startingYear} {...yearPickerProps} />\r\n        );\r\n\r\n        const selectedYearOption = !_.isUndefined(this.props.selectedYear) ? this.props.selectedYear : startingYear;\r\n        const year = parseInt(this.props.years[selectedYearOption], 10);\r\n        const selectedMonth = !_.isUndefined(this.props.selectedMonth)\r\n            ? this.props.selectedMonth\r\n            : this.props.startingMonth;\r\n        const month: IDay[][] = DateUtils.getMonthWeeks(new Date(year, selectedMonth), this.props.startingDay);\r\n        const weeks: JSX.Element[] = _.map(month, (week: IDay[]) => {\r\n            const days: JSX.Element[] = _.map(week, (day: IDay) => {\r\n                const dayFilled = this.fillInDayInfos(day);\r\n                return (\r\n                    <CalendarDay\r\n                        key={dayFilled.date.toString()}\r\n                        day={dayFilled}\r\n                        onClick={(value: Date) => this.handleClick(value)}\r\n                        onSelectUnselectable={() => this.handleInvalidDateSelected()}\r\n                    />\r\n                );\r\n            });\r\n\r\n            return <tr key={`week-${days[0].key}`}>{days}</tr>;\r\n        });\r\n\r\n        const tableClasses: string = classNames('table', 'calendar-grid', {\r\n            selecting: !!this.getSelectedDatePicker(),\r\n        });\r\n\r\n        const wrapperClasses: string = classNames('calendar', {\r\n            'mod-width-50': !this.props.simple,\r\n        });\r\n\r\n        return (\r\n            <div className={wrapperClasses}>\r\n                <div className=\"calendar-header p2\">\r\n                    {monthPicker}\r\n                    {yearPicker}\r\n                </div>\r\n                <table className={tableClasses}>\r\n                    <TableHeader columns={daysHeaderColumns} headerClass=\"mod-no-border-top\" />\r\n                    <tbody>{weeks}</tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"}}]);
//# sourceMappingURL=181.bundle.js.map