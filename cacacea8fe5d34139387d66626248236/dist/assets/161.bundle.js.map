{"version":3,"sources":["webpack:///./src/components/examples/MultilineBoxExampleUtils.tsx","webpack:///./src/components/examples/MultilineBoxExamples.tsx"],"names":["props","state","id","generate","data","name","displayName","render","className","onClick","setState","this","renderBody","defaultProps","cData","key","classes","defaultValue","validate","value","validateOnChange","onChange","isLast","addNewBox","containerNodeExample","child","index","MultilineBoxWithDefaultContainer","MultilineBoxWithContainer","containerNode","DefaultMultilineBoxWithRemoveButton","MultilineBoxWithRemoveButton","getRemoveButton","style","width","height","MultilineBoxWithContainerAndTwoRemoveButton","MultilineBoxWithDragAndDrop","ComplexMultilineBox","ComplexMultilineBox2","DnDContainerProps","draggableContainerProps","ComplexMultilineBox3","icon","svgName","VaporSVG","dragDrop","svgClass","labelProps","invalidMessage"],"mappings":"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","file":"assets/161.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport {Button, IMultilineParentProps, IMultilineSingleBoxProps, InputConnected, MultilineBox, UUID} from 'react-vapor';\r\nimport * as _ from 'underscore';\r\n\r\nexport type IExampleData = IMultilineSingleBoxProps<IMultilineBoxExamplesProps>;\r\n\r\nexport interface IMultilineBoxExamplesProps {\r\n    name: string;\r\n    displayName: string;\r\n}\r\n\r\nexport class WrapperExample extends React.Component<{}, {id: string; data: IMultilineBoxExamplesProps[]}> {\r\n    constructor(props: any, state: any) {\r\n        super(props, state);\r\n\r\n        this.state = {\r\n            id: UUID.generate(),\r\n            data: [\r\n                {\r\n                    name: 'Pear',\r\n                    displayName: 'Paris',\r\n                },\r\n            ],\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"my2\">\r\n                    <Button\r\n                        name={'Update initial data sent to the multiline box'}\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                data: [\r\n                                    {\r\n                                        name: 'Banana',\r\n                                        displayName: 'Bahamas',\r\n                                    },\r\n                                    {\r\n                                        name: 'Tomato',\r\n                                        displayName: 'Tacoma',\r\n                                    },\r\n                                ],\r\n                            });\r\n                        }}\r\n                    />\r\n                </div>\r\n                <MultilineBox<IMultilineBoxExamplesProps>\r\n                    id={this.state.id}\r\n                    data={this.state.data}\r\n                    renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                        _.map(data, (cData: IExampleData) => (\r\n                            <div key={cData.id}>\r\n                                <InputConnected\r\n                                    id={`${cData.id}1`}\r\n                                    classes=\"mt0 inline-block mx1\"\r\n                                    defaultValue={cData.props.name}\r\n                                    validate={(value: string) => cData.props.name === value}\r\n                                    validateOnChange\r\n                                    onChange={(value: string) => {\r\n                                        if (value !== '' && cData.isLast) {\r\n                                            defaultProps.addNewBox();\r\n                                        }\r\n                                    }}\r\n                                />\r\n                                <InputConnected\r\n                                    id={`${cData.id}2`}\r\n                                    classes=\"mt0 inline-block mx1\"\r\n                                    defaultValue={cData.props.displayName}\r\n                                />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    defaultProps={{\r\n                        name: '',\r\n                        displayName: '',\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import * as VaporSVG from 'coveo-styleguide';\r\nimport * as React from 'react';\r\nimport {\r\n    defaultMultilineBoxRemoveButtonClasses,\r\n    IButtonProps,\r\n    IMultilineParentProps,\r\n    IMultilineSingleBoxProps,\r\n    InputConnected,\r\n    MultilineBox,\r\n    multilineBoxContainer,\r\n    multilineBoxWithDnD,\r\n    multilineBoxWithRemoveButton,\r\n    Svg,\r\n    UUID,\r\n} from 'react-vapor';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IExampleData, IMultilineBoxExamplesProps, WrapperExample} from './MultilineBoxExampleUtils';\r\n\r\nconst containerNodeExample = (\r\n    child: React.ReactNode,\r\n    data: Array<IMultilineSingleBoxProps<IMultilineBoxExamplesProps>>,\r\n    index: number\r\n) => (\r\n    <div key={`${data[index].id}Container`} className={'mod-border p1 flex'}>\r\n        {child}\r\n    </div>\r\n);\r\n\r\nconst containerNodeMaxWidthExample = (\r\n    child: React.ReactNode,\r\n    data: Array<IMultilineSingleBoxProps<IMultilineBoxExamplesProps>>,\r\n    index: number\r\n) => (\r\n    <div key={`${data[index].id}Container`} className={'mod-border p1 flex'} style={{width: '500px', height: '70px'}}>\r\n        {child}\r\n    </div>\r\n);\r\n\r\nconst MultilineBoxWithDefaultContainer = _.compose(multilineBoxContainer())(MultilineBox);\r\n\r\nconst MultilineBoxWithContainer = _.compose(\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst DefaultMultilineBoxWithRemoveButton = _.compose(multilineBoxWithRemoveButton())(MultilineBox);\r\n\r\nconst MultilineBoxWithRemoveButton = _.compose(\r\n    multilineBoxWithRemoveButton({\r\n        containerNode: (\r\n            child: React.ReactNode,\r\n            getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode\r\n        ) => (\r\n            <>\r\n                {child}\r\n                {getRemoveButton({\r\n                    classes: [defaultMultilineBoxRemoveButtonClasses, 'flex-auto full-content-y'],\r\n                })}\r\n            </>\r\n        ),\r\n    }),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeMaxWidthExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxWithContainerAndTwoRemoveButton = _.compose(\r\n    multilineBoxWithRemoveButton({\r\n        containerNode: (\r\n            child: React.ReactNode,\r\n            getRemoveButton: (props?: Partial<IButtonProps>) => React.ReactNode\r\n        ) => (\r\n            <>\r\n                {child}\r\n                {getRemoveButton({\r\n                    classes: [defaultMultilineBoxRemoveButtonClasses, 'bg-light-grey full-content-y'],\r\n                })}\r\n            </>\r\n        ),\r\n    }),\r\n    multilineBoxContainer({\r\n        containerNode: (\r\n            child: React.ReactNode,\r\n            data: Array<IMultilineSingleBoxProps<IMultilineBoxExamplesProps>>,\r\n            index: number\r\n        ) => (\r\n            <div key={`${data[index].id}Container`} className={'p1 bg-light-grey'}>\r\n                {child}\r\n            </div>\r\n        ),\r\n    }),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst MultilineBoxWithDragAndDrop = _.compose(multilineBoxWithDnD())(MultilineBox);\r\n\r\nconst ComplexMultilineBox = _.compose(\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxWithDnD(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst ComplexMultilineBox2 = _.compose(\r\n    multilineBoxWithDnD({\r\n        DnDContainerProps: {\r\n            draggableContainerProps: {\r\n                className: 'inline-flex center-align',\r\n            },\r\n        },\r\n    }),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nconst ComplexMultilineBox3 = _.compose(\r\n    multilineBoxWithDnD({\r\n        DnDContainerProps: {\r\n            draggableContainerProps: {\r\n                className: 'inline-flex center-align',\r\n            },\r\n            icon: <Svg svgName={VaporSVG.svg.dragDrop.name} svgClass=\"icon fill-medium-grey mod-lg\" />,\r\n        },\r\n    }),\r\n    multilineBoxWithRemoveButton(),\r\n    multilineBoxContainer({\r\n        containerNode: containerNodeExample,\r\n    })\r\n)(MultilineBox);\r\n\r\nexport class MultilineBoxExamples extends React.PureComponent {\r\n    render() {\r\n        return (\r\n            <div className=\"my2\">\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with initial data</label>\r\n                    <MultilineBox<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <div key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: '',\r\n                            displayName: '',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Multiline box with initial data and a button to update data\r\n                    </label>\r\n                    <WrapperExample />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with a default container</label>\r\n                    <MultilineBoxWithDefaultContainer<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <div key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: '',\r\n                            displayName: '',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with default values</label>\r\n                    <MultilineBox<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <div key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: 'Patate',\r\n                            displayName: 'Pasdfsa',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with a container</label>\r\n                    <MultilineBoxWithContainer<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                        defaultProps={{\r\n                            name: '',\r\n                            displayName: '',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with a default hoc remove button</label>\r\n                    <DefaultMultilineBoxWithRemoveButton<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Multiline box with a hoc remove button wrapped in a container to style the button position right\r\n                    </label>\r\n                    <MultilineBoxWithRemoveButton<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Multiline box with 2 containers to wrap a remove button\r\n                    </label>\r\n                    <MultilineBoxWithContainerAndTwoRemoveButton<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Multiline box with drag and drop</label>\r\n                    <MultilineBoxWithDragAndDrop<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Complex multiline box hoc</label>\r\n                    <ComplexMultilineBox<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => cData.props.name === value}\r\n                                        validateOnChange\r\n                                        onChange={(value: string) => {\r\n                                            if (value !== '' && cData.isLast) {\r\n                                                defaultProps.addNewBox();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">Complex multiline box hoc without icon when dragging</label>\r\n                    <ComplexMultilineBox2<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => {\r\n                                            if (value !== '') {\r\n                                                if (cData.isLast) {\r\n                                                    defaultProps.addNewBox();\r\n                                                }\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        }}\r\n                                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                                        validateOnChange\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-control-label\">\r\n                        Complex multiline box hoc with a custom icon for the drag and drop\r\n                    </label>\r\n                    <ComplexMultilineBox3<IMultilineBoxExamplesProps>\r\n                        id={UUID.generate()}\r\n                        data={[\r\n                            {\r\n                                name: 'Poire',\r\n                                displayName: 'Pear',\r\n                            },\r\n                        ]}\r\n                        renderBody={(data: IExampleData[], defaultProps: IMultilineParentProps) =>\r\n                            _.map(data, (cData: IExampleData) => (\r\n                                <React.Fragment key={cData.id}>\r\n                                    <InputConnected\r\n                                        id={`${cData.id}1`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.name}\r\n                                        validate={(value: string) => {\r\n                                            if (value !== '') {\r\n                                                if (cData.isLast) {\r\n                                                    defaultProps.addNewBox();\r\n                                                }\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        }}\r\n                                        labelProps={{invalidMessage: 'Do not leave me empty'}}\r\n                                        validateOnChange\r\n                                    />\r\n                                    <InputConnected\r\n                                        id={`${cData.id}2`}\r\n                                        classes=\"mt0 inline-block mx1\"\r\n                                        defaultValue={cData.props.displayName}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}