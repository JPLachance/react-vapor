(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{199:function(n,e,t){"use strict";t.r(e),e.default='import * as VaporSVG from \'coveo-styleguide\';\nimport * as React from \'react\';\nimport {connect} from \'react-redux\';\nimport {\n    Button,\n    CheckboxConnected,\n    IDispatch,\n    Label,\n    LabeledInput,\n    Section,\n    Svg,\n    ValidationActions,\n    withDirtySaveButtonHOC,\n} from \'react-vapor\';\n\n// start-print\n\nconst SaveButton = withDirtySaveButtonHOC(Button);\n\nexport class ButtonExamples extends React.Component<any, any> {\n    static description = \'Buttons communicate actions, and, when clicked, initialize those actions.\';\n    render() {\n        return (\n            <>\n                <Section title="Button Set">\n                    <Section level={2} title="Usability">\n                        <Button enabled={true} name="Enabled button" />\n                        <Button enabled={false} name="Disabled button" />\n                    </Section>\n                    <Section\n                        level={2}\n                        title="Style modifiers"\n                        description="Add the specific class to change the style of the buttons."\n                    >\n                        <Section\n                            level={3}\n                            title="Color modifiers"\n                            description="Change the color of the buttons (with primary, you can either add \'mod-primary\' class or set the \'primary\' prop to true)."\n                        >\n                            <Button enabled={true} name="Default" />\n                            <Button enabled={true} primary={true} name="Primary Button" />\n                            <Button enabled={true} classes={[\'mod-danger\']} name="Danger Button" />\n                            <Button enabled={true} classes={[\'mod-link\']} name="Borderless Button" />\n                        </Section>\n                        <Section title="Size modifiers" level={3} description="Change the size of the buttons.">\n                            <Button enabled={true} classes={[\'mod-small\']} name="Small" />\n                            <Button enabled={true} name="Default" />\n                            <Button enabled={true} classes={[\'mod-large\']} name="Large" />\n                        </Section>\n                    </Section>\n                    <Section\n                        title="Append and Prepend"\n                        level={2}\n                        description="Add text or icons before and after any button."\n                    >\n                        <Button enabled={true} classes={[\'mod-prepend\']}>\n                            <span className="btn-prepend">P</span>\n                            Prepend Button\n                        </Button>\n                        <Button enabled={true} classes={[\'mod-append\']} name="Button Append">\n                            <span className="btn-append">A</span>\n                        </Button>\n                        <Button enabled={true} classes={[\'mod-prepend\', \'mod-large\']}>\n                            <span className="btn-prepend mod-icon">\n                                <Svg\n                                    className="icon"\n                                    style={{width: 32, height: 32}}\n                                    svgName={VaporSVG.svg.domainGoogle.name}\n                                />\n                            </span>\n                            Log in with Google\n                        </Button>\n                        <Button\n                            enabled={true}\n                            classes={[\'mod-append\', \'mod-on-hover\', \'spaced-box\']}\n                            name="Append on Hover"\n                        >\n                            <span className="btn-append">A</span>\n                        </Button>\n                    </Section>\n                    <Section title="Actions" level={2} description="Add actions associated with buttons">\n                        <Section level={3} title="Link" description="Add a hyperlink to a button">\n                            <Button enabled={true} name="Link Button" link="http://perdu.com/" target="_blank" />\n                        </Section>\n                        <Section level={3} title="Callback" description="Add a on click callback to a button">\n                            <Button enabled={true} name="Button click me!" onClick={() => alert(\'Hello\')} />\n                        </Section>\n                    </Section>\n                </Section>\n                <Section level={2} title="Tooltips" description="Add a tooltip with a button">\n                    <Button enabled={true} name="Button with tooltip" tooltip="Tooltip test" />\n                    <Button\n                        enabled={true}\n                        name="Button with tooltip top"\n                        tooltip="Tooltip test"\n                        tooltipPlacement="top"\n                    />\n                </Section>\n                <Section level={2} title="Button with children Svg">\n                    <Button classes={[\'p1\', \'full-content-y\']} enabled>\n                        <Svg svgName={\'add\'} className="icon mod-2x" />\n                    </Button>\n                    <Button classes={[\'p1\', \'full-content-y\']} name={\'Button\'} enabled>\n                        <Svg svgName={\'add\'} className="ml1 icon mod-2x" />\n                    </Button>\n                </Section>\n                <Section level={2} title="Save button with validation">\n                    <DirtyCheckboxesForSaveButton />\n                    <SaveButton\n                        enabled\n                        name="Save Button"\n                        validationIds={[\'inputId\']}\n                        onClick={() => alert(\'Saving!\')}\n                    />\n                </Section>\n            </>\n        );\n    }\n}\n\n// stop-print\n\nconst StatefulCheckboxesForSaveButtonDisconnect: React.FunctionComponent<ReturnType<typeof mapDispatchToProps>> = ({\n    setDirty,\n    setWarning,\n    setError,\n}) => (\n    <LabeledInput label="Toggles to test the Save Button">\n        <CheckboxConnected id="saveCheckboxDirty" handleOnClick={(checked) => setDirty(!checked)} clearSides>\n            <Label>Click on me to set the component as dirty</Label>\n        </CheckboxConnected>\n        <CheckboxConnected\n            id="saveCheckboxWarning"\n            handleOnClick={(checked) => setWarning(!checked ? \'WARNING\' : \'\')}\n            clearSides\n        >\n            <Label>Click on me to set a warning</Label>\n        </CheckboxConnected>\n        <CheckboxConnected\n            id="saveCheckboxError"\n            handleOnClick={(checked) => setError(!checked ? \'ERROR\' : \'\')}\n            clearSides\n        >\n            <Label>Click on me to set an error</Label>\n        </CheckboxConnected>\n    </LabeledInput>\n);\n\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\n    setDirty: (value: boolean) => dispatch(ValidationActions.setDirty(\'inputId\', value)),\n    setWarning: (value: string) => dispatch(ValidationActions.setWarning(\'inputId\', value)),\n    setError: (value: string) => dispatch(ValidationActions.setError(\'inputId\', value)),\n});\nconst DirtyCheckboxesForSaveButton = connect(null, mapDispatchToProps)(StatefulCheckboxesForSaveButtonDisconnect);\n'}}]);
//# sourceMappingURL=13.bundle.js.map