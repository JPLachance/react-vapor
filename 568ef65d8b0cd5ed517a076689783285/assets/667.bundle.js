(window.webpackJsonp=window.webpackJsonp||[]).push([[667],{1771:function(r,n,e){"use strict";e.r(n),n.default="import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {IClassName} from '../../utils/ClassNameUtils';\r\nimport {keyCode} from '../../utils/InputUtils';\r\nimport {Svg} from '../svg/Svg';\r\n\r\nexport interface ISearchBarConnectedProps {\r\n    /**\r\n     * If true, the search bar will be disabled in the UI and in the state on mount.\r\n     * False by default.\r\n     */\r\n    disabledOnMount?: boolean;\r\n}\r\n\r\nexport interface ISearchBarOwnProps extends ISearchBarConnectedProps {\r\n    id: string;\r\n    onSearch: (filterText: string) => void;\r\n    containerClassNames?: IClassName;\r\n    inputClassNames?: IClassName;\r\n    placeholder?: string;\r\n    minWidth?: string;\r\n    maxWidth?: string;\r\n}\r\n\r\nexport interface ISearchBarStateProps {\r\n    disabled?: boolean;\r\n    searching?: boolean;\r\n    value?: string;\r\n}\r\n\r\nexport interface ISearchBarDispatchProps {\r\n    onMount?: () => void;\r\n    onUnmount?: () => void;\r\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport interface ISearchBarProps extends ISearchBarOwnProps, ISearchBarStateProps, ISearchBarDispatchProps {}\r\n\r\nexport class SearchBar extends React.Component<ISearchBarProps> {\r\n    static defaultProps: Partial<ISearchBarProps> = {\r\n        placeholder: '',\r\n        disabled: false,\r\n        searching: false,\r\n        value: '',\r\n        minWidth: '500px',\r\n        maxWidth: '500px',\r\n    };\r\n\r\n    componentWillMount() {\r\n        if (this.props.onMount) {\r\n            this.props.onMount();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.onUnmount) {\r\n            this.props.onUnmount();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {minWidth, maxWidth} = this.props;\r\n\r\n        return (\r\n            <div className={this.getContainerClasses()} style={{minWidth, maxWidth}}>\r\n                <input\r\n                    id={this.props.id}\r\n                    type=\"text\"\r\n                    className={this.getInputClasses()}\r\n                    placeholder={this.props.placeholder}\r\n                    disabled={this.props.disabled || this.props.searching}\r\n                    value={this.props.value}\r\n                    onKeyUp={(event) => event.keyCode === keyCode.enter && this.search()}\r\n                    onChange={(event) => this.props.onChange && this.props.onChange(event)}\r\n                />\r\n                <div className=\"search-bar-icon-container\">{this.getSearchIcon()}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getContainerClasses(): string {\r\n        return classNames(\r\n            'search-bar',\r\n            {\r\n                'search-bar-disabled': this.props.disabled,\r\n                'search-bar-loading': this.props.searching,\r\n            },\r\n            this.props.containerClassNames\r\n        );\r\n    }\r\n\r\n    private getInputClasses(): string {\r\n        return classNames('search-bar-input', this.props.inputClassNames);\r\n    }\r\n\r\n    private getSearchIcon(): JSX.Element {\r\n        const searchIcon = !this.props.searching ? (\r\n            <Svg svgName=\"search\" svgClass={this.props.disabled ? 'fill-light-grey' : 'fill-medium-blue'} />\r\n        ) : (\r\n            <div className=\"search-bar-spinner\"></div>\r\n        );\r\n\r\n        return !this.props.searching && !this.props.disabled ? (\r\n            <span onClick={() => this.search()}>{searchIcon}</span>\r\n        ) : (\r\n            searchIcon\r\n        );\r\n    }\r\n\r\n    private search() {\r\n        if (!this.props.disabled && !this.props.searching) {\r\n            this.props.onSearch(this.props.value);\r\n        }\r\n    }\r\n}\r\n"}}]);
//# sourceMappingURL=667.bundle.js.map