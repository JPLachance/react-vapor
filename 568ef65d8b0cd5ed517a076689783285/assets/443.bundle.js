(window.webpackJsonp=window.webpackJsonp||[]).push([[443],{1552:function(t,n,a){"use strict";a.r(n),n.default="import * as _ from 'underscore';\r\nimport {IReduxActionsPayload} from '../../ReactVapor';\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {InputActions} from './InputActions';\r\n\r\nexport interface IInputState {\r\n    id: string;\r\n    value: string;\r\n    valid: boolean;\r\n    disabled: boolean;\r\n}\r\n\r\nexport const inputInitialState: IInputState = {\r\n    id: undefined,\r\n    value: '',\r\n    valid: true,\r\n    disabled: false,\r\n};\r\n\r\nexport const inputsInitialState: IInputState[] = [];\r\n\r\nexport const inputReducer = (\r\n    state: IInputState = inputInitialState,\r\n    action: IReduxAction<IReduxActionsPayload>\r\n): IInputState => {\r\n    switch (action.type) {\r\n        case InputActions.add:\r\n            return {\r\n                id: action.payload.id,\r\n                value: action.payload.value,\r\n                valid: action.payload.valid,\r\n                disabled: action.payload.disabled,\r\n            };\r\n        case InputActions.changeValue:\r\n            return state.id === action.payload.id\r\n                ? {...state, value: action.payload.value, valid: action.payload.valid}\r\n                : state;\r\n\r\n        case InputActions.validateValue:\r\n            return state.id === action.payload.id ? {...state, valid: action.payload.valid} : state;\r\n        case InputActions.setDisabled:\r\n            return state.id === action.payload.id ? {...state, disabled: action.payload.disabled} : state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const inputsReducer = (\r\n    state: IInputState[] = inputsInitialState,\r\n    action: IReduxAction<IReduxActionsPayload>\r\n): IInputState[] => {\r\n    switch (action.type) {\r\n        case InputActions.add:\r\n            return [...state, inputReducer(undefined, action)];\r\n        case InputActions.remove:\r\n            return _.reject(state, (input: IInputState) => input.id === action.payload.id);\r\n        case InputActions.changeValue:\r\n        case InputActions.validateValue:\r\n        case InputActions.setDisabled:\r\n            return state.map((input: IInputState) => inputReducer(input, action));\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"}}]);
//# sourceMappingURL=443.bundle.js.map