(window.webpackJsonp=window.webpackJsonp||[]).push([[346],{1453:function(e,n,t){"use strict";t.r(n),n.default="import {mount, ReactWrapper} from 'enzyme';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport {ISelectedOptionProps, SelectedOption} from '../SelectedOption';\r\n\r\ndescribe('SelectedOption', () => {\r\n    const props: ISelectedOptionProps = {\r\n        value: 'test',\r\n        label: '',\r\n    };\r\n\r\n    describe('<SelectedOption />', () => {\r\n        let selectedOption: ReactWrapper<ISelectedOptionProps, any>;\r\n\r\n        const renderSelectedOption = (currentProps?: ISelectedOptionProps) => {\r\n            selectedOption = mount(<SelectedOption {...currentProps} />, {attachTo: document.getElementById('App')});\r\n        };\r\n\r\n        beforeEach(() => {\r\n            renderSelectedOption(props);\r\n        });\r\n\r\n        afterEach(() => {\r\n            selectedOption.detach();\r\n        });\r\n\r\n        describe('render', () => {\r\n            it('should render the display value in the selectedOption', () => {\r\n                const label: string = 'displayTest';\r\n                selectedOption.setProps({label});\r\n\r\n                expect(\r\n                    selectedOption\r\n                        .find('.selected-option-value')\r\n                        .first()\r\n                        .text()\r\n                ).toBe(label);\r\n            });\r\n        });\r\n\r\n        describe('remove option', () => {\r\n            it('should call remove option when click on the remove-option div', () => {\r\n                const onRemoveOptionClick = jasmine.createSpy('onRemoveOptionClick');\r\n                selectedOption.setProps({onRemoveClick: onRemoveOptionClick});\r\n\r\n                selectedOption.find('.remove-option').simulate('click');\r\n\r\n                expect(onRemoveOptionClick).toHaveBeenCalled();\r\n            });\r\n\r\n            it('should not call remove option when clicking anywhere else', () => {\r\n                const onRemoveOptionClick = jasmine.createSpy('onRemoveOptionClick');\r\n                selectedOption.setProps({onRemoveClick: onRemoveOptionClick});\r\n\r\n                selectedOption.simulate('click');\r\n                selectedOption.find('.selected-option').simulate('click');\r\n                selectedOption\r\n                    .find('.selected-option-value')\r\n                    .first()\r\n                    .simulate('click');\r\n\r\n                expect(onRemoveOptionClick).not.toHaveBeenCalled();\r\n            });\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=346.bundle.js.map