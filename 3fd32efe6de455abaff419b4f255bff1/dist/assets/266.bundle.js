(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{1371:function(o,r,e){"use strict";e.r(r),r.default="import {shallow} from 'enzyme';\r\nimport * as React from 'react';\r\nimport {Color} from '../Color';\r\n\r\ndescribe('ColorBar', () => {\r\n    it('should render without error in different prop scenarios', () => {\r\n        expect(() => shallow(<Color color=\"red\" />)).not.toThrow();\r\n        expect(() => shallow(<Color color=\"blue\" />)).not.toThrow();\r\n        expect(() => shallow(<Color color=\"tahiti-gold\" />)).not.toThrow();\r\n        expect(() => shallow(<Color color=\"rgba(0, 55, 124)\" />)).not.toThrow();\r\n        expect(() => shallow(<Color color=\"#145855\" />)).not.toThrow();\r\n    });\r\n\r\n    it('should add a bg class if the color exists in the palette, even if it is a CSS color', () => {\r\n        const expectedColor = 'white';\r\n        const color = shallow(<Color color={expectedColor} />);\r\n\r\n        expect(color.find(`.bg-${expectedColor}`).length).toBe(1);\r\n    });\r\n\r\n    it('should add a backgroundColor instead of bg class if the css color does not exists in the palette', () => {\r\n        const expectedColor = 'rebeccapurple';\r\n        const color = shallow(<Color color={expectedColor} />);\r\n\r\n        expect(color.find(`.bg-${expectedColor}`).length).toBe(0);\r\n        expect(color.find('div').prop('style').backgroundColor).toBe(expectedColor);\r\n    });\r\n\r\n    it('should add a backgroundColor if the color is an hex code', () => {\r\n        const expectedColor = '#ff00ff';\r\n        const color = shallow(<Color color={expectedColor} />);\r\n\r\n        expect(color.find('div').prop('style').backgroundColor).toBe(expectedColor);\r\n    });\r\n\r\n    it('should add a backgroundColor if the color is an rgb code', () => {\r\n        const expectedColor = 'rgb(255, 255, 000)';\r\n        const color = shallow(<Color color={expectedColor} />);\r\n\r\n        expect(color.find('div').prop('style').backgroundColor).toBe(expectedColor);\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=266.bundle.js.map