{"version":3,"sources":["webpack:///./src/components/input/InputConnected.tsx"],"names":[],"mappings":"6FAAA,OAAe","file":"assets/435.bundle.js","sourcesContent":["export default \"import {connect} from 'react-redux';\\r\\nimport {WithDirtyActions} from '../../hoc/withDirty/withDirtyActions';\\r\\nimport {IReactVaporState} from '../../ReactVapor';\\r\\nimport {IDispatch, ReduxUtils} from '../../utils/ReduxUtils';\\r\\nimport {IInputDispatchProps, IInputOwnProps, IInputProps, IInputStateProps, Input} from './Input';\\r\\nimport {addInput, changeInputValue, removeInput} from './InputActions';\\r\\nimport {InputSelectors} from './InputSelectors';\\r\\n\\r\\nconst mapStateToProps = (state: IReactVaporState, ownProps: IInputOwnProps): IInputStateProps => {\\r\\n    const input = InputSelectors.getInput(state, {id: ownProps.id});\\r\\n    return {\\r\\n        valid: input && input.valid,\\r\\n        value: input && input.value,\\r\\n        disabled: input && input.disabled,\\r\\n    };\\r\\n};\\r\\n\\r\\nconst mapDispatchToProps = (dispatch: IDispatch, ownProps: IInputOwnProps): IInputDispatchProps => ({\\r\\n    onRender: (value: string = '', valid = true, disabled = false) =>\\r\\n        dispatch(addInput(ownProps.id, value, valid, disabled)),\\r\\n    onDestroy: () => dispatch(removeInput(ownProps.id)),\\r\\n    onChange: (value: string, valid = true) => {\\r\\n        dispatch(changeInputValue(ownProps.id, value, valid));\\r\\n        dispatch(WithDirtyActions.toggle(ownProps.id, !!valid));\\r\\n    },\\r\\n});\\r\\n\\r\\nexport const InputConnected: React.ComponentClass<IInputProps> = connect(\\r\\n    mapStateToProps,\\r\\n    mapDispatchToProps,\\r\\n    ReduxUtils.mergeProps\\r\\n)(Input);\\r\\n\""],"sourceRoot":""}