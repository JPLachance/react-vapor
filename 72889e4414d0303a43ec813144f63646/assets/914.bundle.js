(window.webpackJsonp=window.webpackJsonp||[]).push([[914],{2e3:function(t,n,o){"use strict";o.r(n),n.default="import {ReactWrapper} from 'enzyme';\r\nimport {mountWithStore} from 'enzyme-redux';\r\nimport * as React from 'react';\r\nimport * as ReactModal from 'react-modal';\r\n\r\nimport {closeModal} from '../../../components/modal/ModalActions';\r\nimport {ModalCompositeConnected} from '../../../components/modal/ModalCompositeConnected';\r\nimport {getStoreMock, ReactVaporMockStore} from '../../../utils/tests/TestUtils';\r\nimport {\r\n    IWithPreventNavigationConfig,\r\n    IWithPreventNavigationInjectedProps,\r\n    modalWithPreventNavigation,\r\n    preventNavigationDefaultConfig,\r\n} from '../modalWithPreventNavigation';\r\nimport {PreventNavigationPrompt, PreventNavigationPromptProps} from '../PreventNavigationPrompt';\r\n\r\ndescribe('Modal with Prevent Navigation', () => {\r\n    let store: ReactVaporMockStore;\r\n    let component: ReactWrapper<any, any>;\r\n\r\n    class SomeModal extends React.Component<IWithPreventNavigationInjectedProps> {\r\n        static ID = 'SomeModalId';\r\n\r\n        render() {\r\n            return (\r\n                <ModalCompositeConnected\r\n                    {...this.props}\r\n                    id={SomeModal.ID}\r\n                    title=\"Modal composite\"\r\n                    modalBodyChildren=\"Body\"\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    const mountComponentWithProps = (config?: Partial<IWithPreventNavigationConfig>, isDirty = false) => {\r\n        store = getStoreMock({\r\n            dirtyComponents: [isDirty ? SomeModal.ID : ''],\r\n            modals: [{id: SomeModal.ID, isOpened: true}],\r\n        });\r\n\r\n        const SomeModalWithPreventNaviationHOC = modalWithPreventNavigation({id: SomeModal.ID, ...config})(SomeModal);\r\n        component = mountWithStore(<SomeModalWithPreventNaviationHOC />, store);\r\n    };\r\n\r\n    const fakeEvent = jasmine.createSpyObj('event', ['preventDefault', 'stopPropagation']);\r\n\r\n    afterEach(() => {\r\n        if (component && component.exists()) {\r\n            component.unmount();\r\n        }\r\n    });\r\n\r\n    it('should mount and unmount without error', () => {\r\n        expect(() => {\r\n            mountComponentWithProps();\r\n            component.unmount();\r\n        }).not.toThrow();\r\n    });\r\n\r\n    it('should not add the prevent modal if the view is not dirty', () => {\r\n        mountComponentWithProps();\r\n\r\n        expect(component.find({id: `prevent-navigation-${SomeModal.ID}`}).exists()).toBe(false);\r\n    });\r\n\r\n    it('should add the prevent modal if the view is dirty', () => {\r\n        mountComponentWithProps({}, true);\r\n\r\n        expect(component.find({id: `prevent-navigation-${SomeModal.ID}`}).exists()).toBe(true);\r\n    });\r\n\r\n    it('should not open set the showPrevent state to true if the view is not dirty and the user tries to close the modal', () => {\r\n        mountComponentWithProps({}, false);\r\n\r\n        // First because the prevent navigate modal is added after in the DOM\r\n        component\r\n            .find(ReactModal)\r\n            .first()\r\n            .props()\r\n            .onRequestClose(fakeEvent);\r\n        expect(component.find('ModalWithPreventNavigation').state().showPrevent).toBe(false);\r\n    });\r\n\r\n    it('should set the showPrevent state to true if the view is dirty and the user tries to close it', () => {\r\n        mountComponentWithProps({}, true);\r\n\r\n        // First because the prevent navigate modal is added after in the DOM\r\n        component\r\n            .find(ReactModal)\r\n            .first()\r\n            .props()\r\n            .onRequestClose(fakeEvent);\r\n        expect(component.find('ModalWithPreventNavigation').state().showPrevent).toBe(true);\r\n    });\r\n\r\n    it('should not have a PreventNavigationPrompt when isDirty is false', () => {\r\n        mountComponentWithProps({}, false);\r\n        expect(component.find(PreventNavigationPrompt).exists()).toBe(false);\r\n    });\r\n\r\n    it('should have a PreventNavigationPrompt when isDirty is true', () => {\r\n        mountComponentWithProps({}, true);\r\n        expect(component.find(PreventNavigationPrompt).exists()).toBe(true);\r\n    });\r\n\r\n    it('should display a PreventNavigationPrompt with the default config', () => {\r\n        mountComponentWithProps({}, true);\r\n\r\n        const props: PreventNavigationPromptProps = component.find(PreventNavigationPrompt).props();\r\n        expect(props.id).toBe(`prevent-navigation-${SomeModal.ID}`);\r\n        expect(props.title).toBe(preventNavigationDefaultConfig.title);\r\n        expect(props.content).toBe(preventNavigationDefaultConfig.content);\r\n        expect(props.stay).toBe(preventNavigationDefaultConfig.stay);\r\n        expect(props.exit).toBe(preventNavigationDefaultConfig.exit);\r\n\r\n        expect(props.isOpen).toBe(false);\r\n        expect(props.onStay).toBeDefined();\r\n        expect(props.onClose).toBeDefined();\r\n    });\r\n\r\n    it('should display a PreventNavigationPrompt with a custom config', () => {\r\n        const customConfig = {\r\n            title: 'Yo! Are you crazy?!',\r\n            content: 'You will lose all your changes',\r\n            exit: 'Yeah',\r\n            stay: 'No',\r\n        };\r\n        mountComponentWithProps(customConfig, true);\r\n\r\n        const props: PreventNavigationPromptProps = component.find(PreventNavigationPrompt).props();\r\n        expect(props.id).toBe(`prevent-navigation-${SomeModal.ID}`);\r\n        expect(props.title).toBe(customConfig.title);\r\n        expect(props.content).toBe(customConfig.content);\r\n        expect(props.stay).toBe(customConfig.stay);\r\n        expect(props.exit).toBe(customConfig.exit);\r\n    });\r\n\r\n    it('should dispatch a close modal when the prevent navigation onClose is called', () => {\r\n        mountComponentWithProps({}, true);\r\n        component.find(PreventNavigationPrompt).prop('onClose')();\r\n\r\n        expect(store.getActions()).toContain(closeModal(SomeModal.ID));\r\n    });\r\n\r\n    it('should not dispatch a close modal when the prevent navigation onStay is called', () => {\r\n        mountComponentWithProps({}, true);\r\n        component.find(PreventNavigationPrompt).prop('onStay')();\r\n\r\n        expect(store.getActions()).not.toContain(closeModal(SomeModal.ID));\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=914.bundle.js.map