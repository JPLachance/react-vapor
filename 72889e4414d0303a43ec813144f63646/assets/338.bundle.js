(window.webpackJsonp=window.webpackJsonp||[]).push([[338],{1434:function(e,r,n){"use strict";n.r(r),r.default="import * as React from 'react';\r\nimport {DragSource, DropTarget, IDragSource, IDropTarget} from 'react-dnd';\r\nimport {findDOMNode} from 'react-dom';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Svg} from '../../svg/Svg';\r\nimport {ISelectedOptionProps, SelectedOption} from './SelectedOption';\r\n\r\nexport interface IDraggableSelectedOptionOwnProps {\r\n    isDragging?: boolean;\r\n    connectDragSource?: any;\r\n    connectDropTarget?: any;\r\n    connectDragPreview?: any;\r\n    index: number;\r\n    move: (dragIndex: number, hoverIndex: number) => void;\r\n}\r\n\r\nexport interface IDraggableSelectedOptionProps extends IDraggableSelectedOptionOwnProps, ISelectedOptionProps {}\r\n\r\nconst selectedOptionSource: IDragSource = {\r\n    isDragging(props: IDraggableSelectedOptionProps, monitor: any) {\r\n        return props.label === monitor.getItem().label;\r\n    },\r\n    beginDrag(props: IDraggableSelectedOptionProps) {\r\n        return {...props};\r\n    },\r\n};\r\n\r\nconst cardTarget: IDropTarget = {\r\n    hover(props: IDraggableSelectedOptionProps, monitor: any, component?: DraggableSelectedOption): void {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = (findDOMNode(component) as Element).getBoundingClientRect();\r\n\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.move(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n    drop(props: IDraggableSelectedOptionProps, monitor: any) {\r\n        monitor.getItem().label = null;\r\n    },\r\n};\r\n\r\nexport const DraggableSelectedOptionType = 'SELECTED_OPTION';\r\nconst DraggableSelectedOptionPropsToOmit = keys<IDraggableSelectedOptionOwnProps>();\r\n\r\n@DropTarget(DraggableSelectedOptionType, cardTarget, (connect: any) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))\r\n@DragSource(DraggableSelectedOptionType, selectedOptionSource, (connect: any, monitor: any) => ({\r\n    connectDragSource: connect.dragSource(),\r\n    connectDragPreview: connect.dragPreview(),\r\n    isDragging: monitor.isDragging(),\r\n}))\r\nexport class DraggableSelectedOption extends React.PureComponent<IDraggableSelectedOptionProps> {\r\n    render() {\r\n        const opacity = this.props.isDragging ? 0 : 1;\r\n\r\n        return this.props.connectDragPreview(\r\n            this.props.connectDropTarget(\r\n                <div className=\"selected-option-wrapper\" style={{opacity}}>\r\n                    <SelectedOption\r\n                        {..._.omit(this.props, DraggableSelectedOptionPropsToOmit)}\r\n                        label={this.props.isDragging ? null : this.props.label}\r\n                    >\r\n                        <div className=\"inline-flex\">\r\n                            {this.props.connectDragSource(\r\n                                <div className=\"move-option infline-flex cursor-move align-center\">\r\n                                    <Svg svgName=\"drag-drop\" svgClass=\"icon mod-small\" />\r\n                                </div>\r\n                            )}\r\n                            {this.props.label}\r\n                        </div>\r\n                    </SelectedOption>\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\n"}}]);
//# sourceMappingURL=338.bundle.js.map