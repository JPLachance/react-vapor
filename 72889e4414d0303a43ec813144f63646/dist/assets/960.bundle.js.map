{"version":3,"sources":["webpack:///./src/components/chart/examples/ChartExamples.tsx?cacd","webpack:///./src/components/chart/XYChart.tsx?529b","webpack:///./src/components/color/Color.tsx?8adb","webpack:///./src/components/chart/ChartUtils.tsx?7f5f","webpack:///./src/components/chart/styles/ChartTooltipContent.scss?8217","webpack:///../vapor/scss/common/palette.scss","webpack:///./src/components/chart/ChartTooltipContent.tsx?6033","webpack:///./src/components/chart/BarSeries.tsx?46e5","webpack:///./src/components/chart/ChartContainer.tsx?f4ed","webpack:///./src/components/chart/ChartTooltip.tsx?46f4","webpack:///./src/components/chart/InfoLine.tsx?2278","webpack:///./src/components/chart/LineSeries.tsx?24d7","webpack:///./src/components/chart/ScatterSeries.tsx?8516","webpack:///./src/components/chart/XGrid.tsx?f216","webpack:///./src/components/chart/XYAxis.tsx?0335","webpack:///./src/components/chart/YGrid.tsx?72ab","webpack:///./src/components/chart/styles/ChartTooltipContent.scss?c534"],"names":["data","label","x","y","dateData","map","i","startOf","subtract","unix","overPattern","ChartType","Scatter","Line","Bar","ChartExamples","chartType","setChartType","className","style","height","renderChart","width","series","padding","left","right","undefined","type","key","enabled","onClick","name","innerPadding","value","isVertical","color","serie","colorPattern","point","xFormat","yFormat","show","sort","format","tickTextSize","XYChartContext","xDomain","yDomain","xScale","ordinal","yScale","linear","xTicksCount","yTicksCount","XYChart","children","xValues","getXValues","Math","min","max","yValues","getYValues","length","numOfColors","azure","java","anakiwa","nepal","getDateChartColorPattern","pattern","chartPadding","top","bottom","domain","rangePoints","range","Provider","transform","displayName","VaporColors","render","isHex","indexOf","this","props","colorStyle","backgroundColor","defaultprops","getValues","getValue","flatten","uniq","ChartUtils","exports","module","push","locals","ChartTooltipContent","title","sortBy","index","serieIndex","BarSeries","barRatio","barWidth","innerXScale","rangeBands","bars","barHeight","fill","rangeBand","ChartContainer","container","useDebouncedWindowResize","toggleSvgs","current","svgs","querySelectorAll","svg","display","ref","forceUpdate","debouncedResize","window","requestAnimationFrame","addEventListener","removeEventListener","ChartTooltip","position","setPosition","dropRoot","onMouseMove","pointX","dropPodPosition","onMouseLeave","orange","cx","cy","r","isOpen","positions","parentSelector","DROP_ROOT","renderDrop","dropRef","dropPosition","pointerEvents","ml2","InfoLine","stroke","strokeDasharray","x1","x2","y1","y2","textAnchor","LineSeries","interpolate","strokeWith","line","d","lines","strokeWidth","ScatterSeries","radius","points","XGrid","context","tick","withDefaultConfig","tickSize","size","XYAxis","xAxis","yAxis","yInnerPadding","xInnerPadding","newWidth","newHeight","newXScale","newYScale","minX","maxX","minY","maxY","yTicks","ticks","floor","xNumberOfTicks","filter","arr","arrays","values","xTicks","text","textX","YGrid","content","options","update","hot","accept","newContent","a","b","idx","Error","dispose"],"mappings":"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","file":"assets/960.bundle.js","sourcesContent":["import * as moment from 'moment';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport * as s from 'underscore.string';\r\n\r\nimport {Button} from '../../button/Button';\r\nimport {VaporColors} from '../../color/Color';\r\nimport {BarSeries} from '../BarSeries';\r\nimport {ChartContainer} from '../ChartContainer';\r\nimport {ChartTooltip} from '../ChartTooltip';\r\nimport {InfoLine} from '../InfoLine';\r\nimport {LineSeries} from '../LineSeries';\r\nimport {ScatterSeries} from '../ScatterSeries';\r\nimport {XGrid} from '../XGrid';\r\nimport {XYAxis} from '../XYAxis';\r\nimport {XYChart, XYPoint} from '../XYChart';\r\nimport {YGrid} from '../YGrid';\r\n\r\nconst data = [\r\n    {\r\n        label: 'First',\r\n        data: [\r\n            {x: -1, y: 3},\r\n            {x: 0, y: 3},\r\n            {x: 1, y: 3},\r\n            {x: 2, y: 6},\r\n            {x: 3, y: 2},\r\n            {x: 4, y: 12},\r\n            {x: 5, y: 8},\r\n        ],\r\n    },\r\n    {\r\n        label: 'Second',\r\n        data: [\r\n            {x: -1, y: 1},\r\n            {x: 0, y: 5},\r\n            {x: 1, y: 4},\r\n            {x: 2, y: 0},\r\n            {x: 3, y: 6},\r\n            {x: 4, y: 7},\r\n            {x: 5, y: 4},\r\n        ],\r\n    },\r\n    {\r\n        label: 'Third',\r\n        data: [\r\n            {x: -1, y: 4},\r\n            {x: 0, y: 7},\r\n            {x: 1, y: 1},\r\n            {x: 2, y: 1},\r\n            {x: 3, y: 1},\r\n            {x: 4, y: 2},\r\n            {x: 5, y: 7},\r\n        ],\r\n    },\r\n];\r\n\r\nconst dateData = [\r\n    {\r\n        label: 'First',\r\n        data: _.range(25).map((i: number) => ({\r\n            x: moment()\r\n                .startOf('day')\r\n                .subtract(i, 'day')\r\n                .unix(),\r\n            y: i + 1,\r\n        })),\r\n    },\r\n];\r\n\r\nconst overPattern = [VaporColors['orange-1'], VaporColors['orange-2'], VaporColors['orange-3']];\r\nconst ChartType = {\r\n    Scatter: 'scatter',\r\n    Line: 'line',\r\n    Bar: 'bar',\r\n};\r\n\r\nexport const ChartExamples: React.FunctionComponent = () => {\r\n    const [chartType, setChartType] = React.useState(ChartType.Scatter);\r\n    return (\r\n        <div className=\"mt2\">\r\n            <div className=\"form-group\">\r\n                <label className=\"form-control-label\">Basic {s.capitalize(chartType)} Chart</label>\r\n                <div className=\"form-control\" style={{height: '300px'}}>\r\n                    <ChartContainer\r\n                        renderChart={(width, height) => (\r\n                            <XYChart\r\n                                series={[data[0]]}\r\n                                height={height}\r\n                                width={width}\r\n                                padding={\r\n                                    chartType === ChartType.Bar ? {left: width / 12, right: width / 12} : undefined\r\n                                }\r\n                            >\r\n                                {chartType === ChartType.Scatter && <ScatterSeries />}\r\n                                {chartType === ChartType.Line && <LineSeries />}\r\n                                {chartType === ChartType.Bar && <BarSeries />}\r\n                            </XYChart>\r\n                        )}\r\n                    />\r\n                </div>\r\n                {_.map(ChartType, (type) => (\r\n                    <Button\r\n                        key={type}\r\n                        enabled={chartType !== type}\r\n                        onClick={() => setChartType(type)}\r\n                        name={`${type} Series`}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"form-control-label\">Chart with tooltip</label>\r\n                <div className=\"form-control\" style={{height: '300px'}}>\r\n                    <ChartContainer\r\n                        renderChart={(width, height) => (\r\n                            <XYChart series={data} height={height} width={width}>\r\n                                <ScatterSeries />\r\n                                <ChartTooltip />\r\n                            </XYChart>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"form-control-label\">Chart with y-axis and Info Lines</label>\r\n                <div className=\"form-control\" style={{height: '300px'}}>\r\n                    <ChartContainer\r\n                        renderChart={(width, height) => (\r\n                            <XYChart series={data} height={height} width={width}>\r\n                                <XYAxis x={{innerPadding: 30}} y={{innerPadding: 30}}>\r\n                                    <XGrid padding={30} />\r\n                                    <YGrid padding={30} />\r\n                                    <LineSeries />\r\n                                    <InfoLine value={3} label=\"Three\" padding={30} />\r\n                                    <InfoLine value={2} label=\"Two\" padding={30} isVertical />\r\n                                </XYAxis>\r\n                            </XYChart>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"form-control-label\">Combined Chart</label>\r\n                <div className=\"form-control\" style={{height: '500px'}}>\r\n                    <ChartContainer\r\n                        renderChart={(width, height) => (\r\n                            <XYChart\r\n                                series={data}\r\n                                height={height}\r\n                                width={width}\r\n                                color={(serie: number, colorPattern: string[], point?: XYPoint) =>\r\n                                    point && point.y > 7 ? overPattern[serie] : colorPattern[serie]\r\n                                }\r\n                                xFormat={(value: number) =>\r\n                                    ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven'][value + 1]\r\n                                }\r\n                                yFormat={(value: number) => value * 10 + '%'}\r\n                            >\r\n                                <XYAxis x={{innerPadding: width / 12}} y={{show: false}}>\r\n                                    <BarSeries />\r\n                                    <LineSeries />\r\n                                    <ScatterSeries />\r\n                                    <ChartTooltip sort />\r\n                                </XYAxis>\r\n                            </XYChart>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label className=\"form-control-label\">Date Chart</label>\r\n                <div className=\"form-control\" style={{height: '300px'}}>\r\n                    <ChartContainer\r\n                        renderChart={(width, height) => (\r\n                            <XYChart\r\n                                series={dateData}\r\n                                height={height}\r\n                                width={width}\r\n                                xFormat={(value: number) => moment.unix(value).format('YYYY-MM-DD')}\r\n                            >\r\n                                <XYAxis x={{tickTextSize: 120}} y={{show: false}}>\r\n                                    <BarSeries />\r\n                                    <ChartTooltip sort />\r\n                                </XYAxis>\r\n                            </XYChart>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label className=\"form-control-label\">Date Chart</label>\r\n                <div className=\"form-control\" style={{height: '300px'}}>\r\n                    <ChartContainer\r\n                        renderChart={(width, height) => (\r\n                            <XYChart\r\n                                series={[\r\n                                    {\r\n                                        label: 'First',\r\n                                        data: [\r\n                                            {\r\n                                                x: moment()\r\n                                                    .startOf('day')\r\n                                                    .unix(),\r\n                                                y: 500,\r\n                                            },\r\n                                        ],\r\n                                    },\r\n                                ]}\r\n                                height={height}\r\n                                width={width}\r\n                                xFormat={(value: number) => moment.unix(value).format('YYYY-MM-DD')}\r\n                            >\r\n                                <XYAxis x={{tickTextSize: 120}} y={{show: false}}>\r\n                                    <BarSeries />\r\n                                    <ChartTooltip sort />\r\n                                </XYAxis>\r\n                            </XYChart>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import * as d3 from 'd3';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {VaporColors} from '../color/Color';\r\nimport {ChartBaseProps} from './ChartContainer';\r\nimport {ChartUtils} from './ChartUtils';\r\n\r\nexport interface XYPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface XYSerie {\r\n    label: string;\r\n    data: XYPoint[];\r\n}\r\n\r\nexport type Padding = {top?: number; right?: number; bottom?: number; left?: number};\r\n\r\nexport interface XYChartProps extends ChartBaseProps {\r\n    series: XYSerie[];\r\n    padding?: number | Padding;\r\n    colorPattern?: string[];\r\n    color?: (serie: number, colorPattern: string[], point?: XYPoint) => string;\r\n    xFormat?: (value: number) => string | number;\r\n    yFormat?: (value: number) => string | number;\r\n    xTicksCount?: number;\r\n    yTicksCount?: number;\r\n}\r\n\r\nexport interface XYChartContextProps {\r\n    width: number;\r\n    height: number;\r\n    xDomain: [number, number];\r\n    yDomain: [number, number];\r\n    series: XYSerie[];\r\n    colorPattern: string[];\r\n    xScale: d3.scale.Ordinal<number, number>;\r\n    yScale: d3.scale.Linear<number, number>;\r\n    xFormat: (value: number) => string | number;\r\n    yFormat: (value: number) => string | number;\r\n    xTicksCount: number;\r\n    yTicksCount: number;\r\n    color?: (serie: number, colorPattern: string[], point?: XYPoint) => string;\r\n}\r\n\r\nexport const XYChartContext = React.createContext<XYChartContextProps>({\r\n    width: 0,\r\n    height: 0,\r\n    xDomain: [0, 0],\r\n    yDomain: [0, 0],\r\n    series: [],\r\n    colorPattern: [],\r\n    xScale: d3.scale.ordinal<number, number>(),\r\n    yScale: d3.scale.linear(),\r\n    xFormat: _.identity,\r\n    yFormat: _.identity,\r\n    xTicksCount: 10,\r\n    yTicksCount: 10,\r\n});\r\n\r\nconst getDateChartColorPattern = (numOfColors: number) => {\r\n    const colorPattern: string[] = [VaporColors.azure, VaporColors.java, VaporColors.anakiwa, VaporColors.nepal];\r\n    return numOfColors > 2 ? [VaporColors['blue-8'], ...colorPattern] : colorPattern;\r\n};\r\nconst defaultPadding = 10;\r\n\r\nexport const XYChart: React.FunctionComponent<XYChartProps> = ({\r\n    width,\r\n    height,\r\n    series,\r\n    colorPattern = [],\r\n    color,\r\n    padding = defaultPadding,\r\n    xFormat = _.identity,\r\n    yFormat = _.identity,\r\n    xTicksCount,\r\n    yTicksCount,\r\n    children,\r\n}) => {\r\n    const xValues = ChartUtils.getXValues(series);\r\n    const xDomain: [number, number] = [Math.min(...xValues), Math.max(...xValues)];\r\n\r\n    const yValues = ChartUtils.getYValues(series);\r\n    const yDomain: [number, number] = [Math.min(0, ...yValues), Math.max(...yValues)];\r\n\r\n    colorPattern = colorPattern.length ? colorPattern : getDateChartColorPattern(series.length);\r\n    color = color || ((serie: number, pattern: string[]) => pattern[serie]);\r\n\r\n    const chartPadding: Padding = _.isNumber(padding)\r\n        ? {top: padding, right: padding, bottom: padding, left: padding}\r\n        : _.defaults(padding, {\r\n              top: defaultPadding,\r\n              right: defaultPadding,\r\n              bottom: defaultPadding,\r\n              left: defaultPadding,\r\n          });\r\n\r\n    width = width - chartPadding.left - chartPadding.right;\r\n    height = height - chartPadding.top - chartPadding.bottom;\r\n\r\n    const xScale = d3.scale\r\n        .ordinal<number, number>()\r\n        .domain(xValues)\r\n        .rangePoints([0, width]);\r\n\r\n    const yScale = d3.scale\r\n        .linear<number, number>()\r\n        .domain(yDomain)\r\n        .range([height, 0]);\r\n\r\n    return (\r\n        <XYChartContext.Provider\r\n            value={{\r\n                width,\r\n                height,\r\n                xDomain,\r\n                yDomain,\r\n                xScale,\r\n                yScale,\r\n                xFormat,\r\n                yFormat,\r\n                color,\r\n                colorPattern,\r\n                series,\r\n                xTicksCount: xTicksCount || xValues.length / 2,\r\n                yTicksCount: yTicksCount || yValues.length / 2,\r\n            }}\r\n        >\r\n            <svg width={width} height={height}>\r\n                <g transform={`translate(${chartPadding.left},${chartPadding.top})`}>{children}</g>\r\n            </svg>\r\n        </XYChartContext.Provider>\r\n    );\r\n};\r\nXYChart.displayName = 'XYChart';\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nexport interface ColorProps {\r\n    color: string;\r\n}\r\n\r\n// tslint:disable\r\nexport const VaporColors: Record<\r\n    string,\r\n    string\r\n> = require('!sass-variable-loader?preserveVariableNames!coveo-styleguide/scss/common/palette.scss');\r\n// tslint:enable\r\n\r\nexport class Color extends React.Component<ColorProps & React.HTMLProps<HTMLDivElement>> {\r\n    static defaultprops: Partial<ColorProps> = {\r\n        color: 'pure-white',\r\n    };\r\n\r\n    render() {\r\n        const isHex = _.keys(VaporColors).indexOf(this.props.color) === -1;\r\n        let colorStyle: React.CSSProperties = (isHex && {backgroundColor: this.props.color}) || {};\r\n        if (this.props.style) {\r\n            colorStyle = {...colorStyle, ...this.props.style};\r\n        }\r\n        return (\r\n            <div\r\n                {..._.omit(this.props, 'color', 'hex')}\r\n                style={colorStyle}\r\n                className={classNames(this.props.className, {\r\n                    [`bg-${this.props.color}`]: !isHex,\r\n                })}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as _ from 'underscore';\r\nimport {XYPoint, XYSerie} from './XYChart';\r\n\r\nconst getValues = (series: XYSerie[], getValue: (point: XYPoint) => number) => {\r\n    return _.chain(series)\r\n        .map((serie: XYSerie) => serie.data.map(getValue))\r\n        .flatten()\r\n        .uniq()\r\n        .sort()\r\n        .value();\r\n};\r\n\r\nconst getXValues = (series: XYSerie[]) => getValues(series, ({x}: XYPoint) => x);\r\n\r\nconst getYValues = (series: XYSerie[]) => getValues(series, ({y}: XYPoint) => y);\r\n\r\nexport const ChartUtils = {\r\n    getXValues,\r\n    getYValues,\r\n};\r\n","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/* ----------- Deprecated Palette ----------- */\\n.ChartTooltipContent-chartTooltipContent-1TL1Eip8IV3vXD0PRy5XLB {\\n  font-size: 13px;\\n  border: 1px solid #bcc3ca;\\n  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.3); }\\n\\n.ChartTooltipContent-chartTooltipColor-2epsGANhwWjZRlSgUjP17o {\\n  width: 3px;\\n  height: 18px; }\\n\\n.ChartTooltipContent-chartTooltipLabel-2L73x1da5KH26eHsyMcb6M {\\n  padding-top: 3px;\\n  padding-bottom: 3px; }\\n\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"chartTooltipContent\": \"ChartTooltipContent-chartTooltipContent-1TL1Eip8IV3vXD0PRy5XLB\",\n\t\"chartTooltipColor\": \"ChartTooltipContent-chartTooltipColor-2epsGANhwWjZRlSgUjP17o\",\n\t\"chartTooltipLabel\": \"ChartTooltipContent-chartTooltipLabel-2L73x1da5KH26eHsyMcb6M\"\n};","module.exports = {\"primary-colors\":\"category\",\"mirage\":\"#1e253f\",\"coveo-blue\":\"#004990\",\"coveo-orange\":\"#f58020\",\"secondary-colors\":\"category\",\"azure\":\"#0d80ef\",\"anakiwa\":\"#4ed6ff\",\"java\":\"#26e8cc\",\"primary-palette\":\"category\",\"science-blue\":\"#0061c0\",\"dodger-blue\":\"#3ca0ff\",\"tropical-rain-forest\":\"#007766\",\"observatory\":\"#028f7b\",\"caribbean-green\":\"#05c3a2\",\"lynch\":\"#5d7289\",\"bali-hai\":\"#8097aa\",\"nepal\":\"#94a9bf\",\"heather\":\"#b5c4cf\",\"tango\":\"#e56613\",\"neon-carrot\":\"#ff9844\",\"tan-hide\":\"#f8aa69\",\"partners-palette\":\"category\",\"coveo-sitecore-red\":\"#dc291e\",\"coveo-salesforce-blue\":\"#009ddc\",\"grey-palette\":\"category\",\"oxford-blue\":\"#313a45\",\"coveo-grey\":\"#94a9bf\",\"grey-1\":\"#f7f8f9\",\"grey-2\":\"#eff3f7\",\"grey-3\":\"#e4eaed\",\"grey-4\":\"#cfd9e0\",\"grey-5\":\"#b5c4cf\",\"grey-6\":\"#94a9bf\",\"grey-7\":\"#8097aa\",\"grey-8\":\"#5d7289\",\"grey-9\":\"#4e5f71\",\"grey-10\":\"#37424e\",\"blue-palette\":\"category\",\"blue-1\":\"#cde7ff\",\"blue-2\":\"#8fc9ff\",\"blue-3\":\"#3ca0ff\",\"blue-4\":\"#0d80ef\",\"blue-5\":\"#0061c0\",\"blue-6\":\"#004990\",\"blue-7\":\"#00305c\",\"blue-8\":\"#00284b\",\"blue-9\":\"#00203a\",\"blue-10\":\"#00101e\",\"astral\":\"#296896\",\"matisse\":\"#257bab\",\"curious-blue-1\":\"#218ec0\",\"curious-blue-2\":\"#1da2d5\",\"picton-blue\":\"#19b5ea\",\"cerulean\":\"#90e5ff\",\"onahau\":\"#c6f2ff\",\"onahau-1\":\"#b6eeff\",\"blue-purple-palette\":\"category\",\"coveo-blue-purple\":\"#1e253f\",\"blue-purple-1\":\"#3e5485\",\"blue-purple-2\":\"#354878\",\"blue-purple-3\":\"#2d385e\",\"blue-purple-4\":\"#1e253f\",\"blue-purple-5\":\"#101425\",\"green-palette\":\"category\",\"frosted-mint\":\"#d3fff8\",\"frosted-mint-1\":\"#a9fff2\",\"persian-green\":\"#00a78a\",\"watercourse\":\"#066356\",\"cyprus\":\"#004446\",\"deep-teal\":\"#003530\",\"orange-palette\":\"category\",\"orange-1\":\"#ffbc86\",\"orange-2\":\"#ff9844\",\"orange-3\":\"#f58020\",\"orange-4\":\"#ed731a\",\"orange-5\":\"#e56613\",\"orange-6\":\"#de590d\",\"orange-7\":\"#d64c06\",\"orange-8\":\"#ce3f00\",\"carrot-orange\":\"#ec8c25\",\"tahiti-gold\":\"#dc7704\",\"buttercup\":\"#f39e08\",\"my-sin\":\"#ffac23\",\"amber\":\"#fbba06\",\"sunglow\":\"#ffce44\",\"school-bus-yellow\":\"#ffdf00\",\"picasso\":\"#fff08f\",\"lemon-chiffon\":\"#fff9cf\",\"travertine\":\"#fffde9\",\"red-pink-palette\":\"category\",\"lonestar-2\":\"#550500\",\"lonestar-1\":\"#720700\",\"red-berry\":\"#8b0900\",\"sangria\":\"#b10007\",\"milano-red\":\"#d02b08\",\"pomegranate\":\"#f7472e\",\"persimmon\":\"#ff644e\",\"bittersweet\":\"#ff8675\",\"mona-lisa\":\"#ffa79b\",\"melon\":\"#ffc4bc\",\"status\":\"category\",\"red\":\"#ce3f00\",\"yellow\":\"#ecad00\",\"green\":\"#009830\",\"utilities\":\"category\",\"transparent\":\"transparent\",\"deprecated-palette\":\"category\",\"darker-blue\":\"#193045\",\"dark-blue\":\"#263e55\",\"medium-blue\":\"#1d4f76\",\"light-blue\":\"#296896\",\"dark-grey\":\"#373737\",\"dark-medium-grey\":\"#7a7d81\",\"medium-grey\":\"#bcc3ca\",\"light-grey\":\"#e6ecf0\",\"white\":\"#f1f3f4\",\"pure-white\":\"#ffffff\",\"orange\":\"#f58020\",\"stratos\":\"#08080e\",\"purple-blue\":\"#1e2541\",\"soft-red\":\"#edbcbf\",\"soft-green\":\"#d0e9c4\",\"blue\":\"#009ad9\",\"black\":\"#000000\",\"turquoise\":\"#26e8cc\",\"salesforce-blue\":\"#009ddc\",\"google-red\":\"#ce3f00\",\"office365-red\":\"#ce3f00\"};","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {Color} from '../color/Color';\r\nimport {ChartUtils} from './ChartUtils';\r\nimport * as styles from './styles/ChartTooltipContent.scss';\r\nimport {XYChartContext, XYSerie} from './XYChart';\r\n\r\nexport interface ChartTooltipContentProps {\r\n    x: number;\r\n    sort: boolean;\r\n}\r\n\r\nexport const ChartTooltipContent: React.FunctionComponent<ChartTooltipContentProps> = ({x, sort}) => {\r\n    const {series, xFormat, yFormat, color, colorPattern} = React.useContext(XYChartContext);\r\n    const xValues = ChartUtils.getXValues(series);\r\n    const title = xFormat(xValues[x]);\r\n    return (\r\n        <div className={classNames('flex flex-column bg-pure-white', styles.chartTooltipContent)}>\r\n            <div className=\"flex flex-row center-align flex-start tooltip-serie-title\">\r\n                <div className={classNames(styles.chartTooltipColor)} />\r\n                <div className={classNames('px1', styles.chartTooltipLabel)}>{title}</div>\r\n                <div className=\"pr1 flex-auto\" />\r\n            </div>\r\n            {_.chain(series)\r\n                .sortBy((serie: XYSerie, index: number) => {\r\n                    if (sort) {\r\n                        const point = serie.data[x];\r\n                        return -point.y;\r\n                    }\r\n                    return index;\r\n                })\r\n                .map((serie: XYSerie, serieIndex) => {\r\n                    const point = serie.data[x];\r\n                    return (\r\n                        point && (\r\n                            <div\r\n                                key={`tooltip-serie-row-${serie.label}`}\r\n                                className=\"flex flex-row center-align flex-start tooltip-serie-row\"\r\n                            >\r\n                                <Color\r\n                                    className={classNames(styles.chartTooltipColor)}\r\n                                    color={color(serieIndex, colorPattern, point)}\r\n                                />\r\n                                <div className={classNames('pl1 pr2', styles.chartTooltipLabel)}>{serie.label}</div>\r\n                                <div className=\"pr1 flex-auto right-align\">{yFormat(point.y)}</div>\r\n                            </div>\r\n                        )\r\n                    );\r\n                })\r\n                .value()}\r\n        </div>\r\n    );\r\n};\r\n","import * as d3 from 'd3';\r\nimport * as React from 'react';\r\n\r\nimport {ChartUtils} from './ChartUtils';\r\n\r\nimport {XYChartContext, XYPoint, XYSerie} from './XYChart';\r\n\r\nexport interface BarSeriesProps {\r\n    barRatio?: number;\r\n}\r\n\r\nexport const BarSeries: React.FunctionComponent<BarSeriesProps> = ({barRatio = 0.8, children}) => {\r\n    const {series, xScale, yScale, xDomain, yDomain, color, colorPattern} = React.useContext(XYChartContext);\r\n    const xValues = ChartUtils.getXValues(series);\r\n    const barWidth =\r\n        xValues.length > 1\r\n            ? ((xScale(xDomain[1]) - xScale(xDomain[0])) / xValues.length / 2) * barRatio\r\n            : (xScale(xDomain[0]) / 2) * barRatio;\r\n\r\n    const innerXScale = d3.scale\r\n        .ordinal<number, number>()\r\n        .domain(d3.range(series.length))\r\n        .rangeBands([-barWidth, barWidth], 0);\r\n\r\n    const bars = series.map((serie: XYSerie, serieIndex: number) =>\r\n        serie.data.map((point: XYPoint) => {\r\n            const barHeight = Math.max(yScale(point.y), 2);\r\n            return (\r\n                <rect\r\n                    key={`${serie.label}-${point.x}`}\r\n                    fill={color(serieIndex, colorPattern, point)}\r\n                    width={innerXScale.rangeBand()}\r\n                    height={yScale(yDomain[0]) - barHeight}\r\n                    x={xScale(point.x) + innerXScale(serieIndex)}\r\n                    y={barHeight}\r\n                />\r\n            );\r\n        })\r\n    );\r\n    return (\r\n        <g className=\"bar-series\">\r\n            {bars}\r\n            {children}\r\n        </g>\r\n    );\r\n};\r\nBarSeries.displayName = 'BarSeries';\r\n","import * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nexport interface ChartContainerProps {\r\n    renderChart: (width: number, height: number) => React.ReactNode;\r\n}\r\n\r\nexport interface ChartBaseProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport const ChartContainer: React.FunctionComponent<ChartContainerProps> = (props) => {\r\n    const container = React.useRef<HTMLDivElement>(null);\r\n    useDebouncedWindowResize();\r\n\r\n    const toggleSvgs = (show: boolean) => {\r\n        if (container.current) {\r\n            const svgs = container.current.querySelectorAll('svg');\r\n            _.each(svgs, (svg: SVGElement) => (svg.style.display = show ? 'block' : 'none'));\r\n        }\r\n    };\r\n\r\n    toggleSvgs(false);\r\n    const {width, height} = container.current?.getBoundingClientRect() ?? {width: 0, height: 0};\r\n    toggleSvgs(true);\r\n\r\n    return (\r\n        <div className=\"full-content\" {..._.omit(props, 'renderChart')} ref={container}>\r\n            {width > 0 && height > 0 ? props.renderChart(width, height) : null}\r\n        </div>\r\n    );\r\n};\r\nChartContainer.displayName = 'ChartContainer';\r\n\r\nconst useForceUpdate = () => React.useState(undefined)[1];\r\nconst useDebouncedWindowResize = () => {\r\n    const forceUpdate = useForceUpdate();\r\n    React.useEffect(() => {\r\n        const debouncedResize = () => window.requestAnimationFrame(forceUpdate);\r\n\r\n        window.addEventListener('resize', debouncedResize);\r\n        forceUpdate(1);\r\n\r\n        return () => window.removeEventListener('resize', debouncedResize);\r\n    }, [forceUpdate]);\r\n};\r\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {Defaults} from '../../Defaults';\r\n\r\nimport {VaporColors} from '../color/Color';\r\nimport {DropPodPosition, IDropUIPosition} from '../drop/DomPositionCalculator';\r\nimport {DropPod} from '../drop/DropPod';\r\nimport {ChartTooltipContent} from './ChartTooltipContent';\r\nimport {XYChartContext, XYPoint} from './XYChart';\r\n\r\nexport interface ChartTooltipProps {\r\n    sort?: boolean;\r\n}\r\n\r\nexport const ChartTooltip: React.FunctionComponent<ChartTooltipProps> = ({sort = false}) => {\r\n    const {series, xScale, yScale, xDomain, yDomain, width, height} = React.useContext(XYChartContext);\r\n    const [position, setPosition] = React.useState({x: 0, y: 0, index: 0, position: '', pointX: null});\r\n    const dropRoot = React.useRef<any>(null);\r\n\r\n    const onMouseMove = (index: number, pointX: number, x: number) => {\r\n        const dropPodPosition: string = x < width / 2 ? DropPodPosition.right : DropPodPosition.left;\r\n        setPosition({x, y: height / 2, index, pointX, position: dropPodPosition});\r\n    };\r\n    const onMouseLeave = () => setPosition({...position, position: ''});\r\n\r\n    const barWidth =\r\n        series[0].data.length > 1\r\n            ? (xScale(xDomain[1]) - xScale(xDomain[0])) / series[0].data.length\r\n            : xScale(xDomain[0]);\r\n    const bars = series[0].data.map((point: XYPoint, index: number) => {\r\n        const x = xScale(point.x);\r\n        return (\r\n            <React.Fragment key={`chart-zone-${index}`}>\r\n                <rect\r\n                    fill=\"transparent\"\r\n                    width={barWidth / 2}\r\n                    height={yScale(yDomain[0])}\r\n                    x={x - barWidth / 2}\r\n                    y={yScale(yDomain[1])}\r\n                    onMouseMove={() => onMouseMove(index, point.x, x)}\r\n                    onMouseLeave={onMouseLeave}\r\n                />\r\n                <rect\r\n                    fill=\"transparent\"\r\n                    width={barWidth / 2}\r\n                    height={yScale(yDomain[0])}\r\n                    x={x}\r\n                    y={yScale(yDomain[1])}\r\n                    onMouseMove={() => onMouseMove(index, point.x, x)}\r\n                    onMouseLeave={onMouseLeave}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    });\r\n    return (\r\n        <g className=\"chart-tooltip-zones\">\r\n            {!!position.position && (\r\n                <rect\r\n                    className=\"chart-tooltip-line\"\r\n                    width={2}\r\n                    x={xScale(position.pointX) - 1}\r\n                    y={yScale(yDomain[1])}\r\n                    height={yScale(yDomain[0])}\r\n                    fill={VaporColors.orange}\r\n                />\r\n            )}\r\n            <circle cx={position.x} cy={position.y} r=\"1\" fill=\"transparent\" ref={dropRoot} />\r\n            <DropPod\r\n                ref={dropRoot}\r\n                isOpen={!!position.position}\r\n                positions={[position.position, DropPodPosition.left, DropPodPosition.right]}\r\n                parentSelector={Defaults.DROP_ROOT}\r\n                renderDrop={(\r\n                    style: React.CSSProperties,\r\n                    dropRef: React.RefObject<HTMLDivElement>,\r\n                    dropPosition: IDropUIPosition\r\n                ): React.ReactNode => (\r\n                    <div\r\n                        ref={dropRef}\r\n                        style={{...style, pointerEvents: 'none'}}\r\n                        className={classNames('show-on-top', {\r\n                            'ml-2': dropPosition.position === DropPodPosition.left,\r\n                            ml2: dropPosition.position === DropPodPosition.right,\r\n                        })}\r\n                    >\r\n                        <ChartTooltipContent x={position.index} sort={sort} />\r\n                    </div>\r\n                )}\r\n            />\r\n            {bars}\r\n        </g>\r\n    );\r\n};\r\nChartTooltip.displayName = 'ChartTooltip';\r\n","import * as React from 'react';\r\n\r\nimport {XYChartContext} from './XYChart';\r\n\r\nexport interface InfoLineProps {\r\n    value: number;\r\n    label?: string;\r\n    stroke?: string;\r\n    isVertical?: boolean;\r\n    padding?: number;\r\n}\r\n\r\nexport const InfoLine: React.FunctionComponent<InfoLineProps> = ({\r\n    stroke = '#000',\r\n    isVertical = false,\r\n    label = '',\r\n    padding = 30,\r\n    value,\r\n}: InfoLineProps) => {\r\n    const {xDomain, yDomain, xScale, yScale, height} = React.useContext(XYChartContext);\r\n\r\n    return (\r\n        <g className=\"info-line\">\r\n            <line\r\n                stroke={stroke}\r\n                strokeDasharray=\"6\"\r\n                x1={isVertical ? xScale(value) : 0 - padding}\r\n                x2={isVertical ? xScale(value) : xScale(xDomain[1]) + padding}\r\n                y1={isVertical ? 0 - padding : yScale(value)}\r\n                y2={isVertical ? height + padding : yScale(value)}\r\n            />\r\n            {label && !isVertical && (\r\n                <text textAnchor=\"end\" x={xScale(xDomain[1])} y={yScale(value) - 4}>\r\n                    {label}\r\n                </text>\r\n            )}\r\n            {label && isVertical && (\r\n                <text textAnchor=\"end\" transform=\"rotate(-90)\" x={yScale(yDomain[1])} y={xScale(value) - 4}>\r\n                    {label}\r\n                </text>\r\n            )}\r\n        </g>\r\n    );\r\n};\r\nInfoLine.displayName = 'InfoLine';\r\n","import * as d3 from 'd3';\r\nimport * as React from 'react';\r\n\r\nimport {XYChartContext, XYPoint, XYSerie} from './XYChart';\r\n\r\nexport interface LineSeriesProps {\r\n    interpolate?: string;\r\n    strokeWith?: number;\r\n}\r\n\r\nexport const LineSeries: React.FunctionComponent<LineSeriesProps> = ({\r\n    interpolate = 'linear',\r\n    strokeWith = 2,\r\n    children,\r\n}) => {\r\n    const {series, xScale, yScale, color, colorPattern} = React.useContext(XYChartContext);\r\n\r\n    const line = d3.svg\r\n        .line<XYPoint>()\r\n        .x((d) => xScale(d.x))\r\n        .y((d) => yScale(d.y))\r\n        .interpolate(interpolate);\r\n\r\n    const lines = series.map((serie: XYSerie, i: number) => (\r\n        <path\r\n            key={`line-${i}`}\r\n            fill=\"none\"\r\n            strokeWidth={strokeWith}\r\n            stroke={color(i, colorPattern)}\r\n            d={line(serie.data)}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <g className=\"line-series\">\r\n            {lines}\r\n            {children}\r\n        </g>\r\n    );\r\n};\r\nLineSeries.displayName = 'LineSeries';\r\n","import * as React from 'react';\r\n\r\nimport {XYChartContext, XYPoint, XYSerie} from './XYChart';\r\n\r\nexport interface ScatterSeriesProps {\r\n    radius?: number;\r\n}\r\n\r\nexport const ScatterSeries: React.FunctionComponent<ScatterSeriesProps> = ({children, radius = 3}) => {\r\n    const {series, xScale, yScale, color, colorPattern} = React.useContext(XYChartContext);\r\n\r\n    const points = series.map((serie: XYSerie, i: number) =>\r\n        serie.data.map((point: XYPoint, index: number) => (\r\n            <circle\r\n                key={`scatter-${serie.label}-${index}`}\r\n                cx={xScale(point.x)}\r\n                cy={yScale(point.y)}\r\n                r={radius}\r\n                fill={color(i, colorPattern, point)}\r\n            />\r\n        ))\r\n    );\r\n\r\n    return (\r\n        <g className=\"scatter-series\">\r\n            {points}\r\n            {children}\r\n        </g>\r\n    );\r\n};\r\nScatterSeries.displayName = 'ScatterSeries';\r\n","import * as React from 'react';\r\n\r\nimport {XYChartContext} from './XYChart';\r\n\r\nexport interface XGridProps {\r\n    padding?: number;\r\n    color?: string;\r\n}\r\n\r\nexport const XGrid: React.FunctionComponent<XGridProps> = ({padding = 0, color = 'rgba(0,0,0,0.2)'}) => {\r\n    const context = React.useContext(XYChartContext);\r\n    const {yDomain, xScale, yScale} = context;\r\n\r\n    const lines = xScale\r\n        .range()\r\n        .map((tick: number) => (\r\n            <line\r\n                key={`x-grid-${tick}`}\r\n                stroke={color}\r\n                x1={xScale(tick)}\r\n                x2={xScale(tick)}\r\n                y1={yScale(yDomain[0]) + padding}\r\n                y2={yScale(yDomain[1]) - padding}\r\n            />\r\n        ));\r\n\r\n    return <>{lines}</>;\r\n};\r\nXGrid.displayName = 'XGrid';\r\n","import * as d3 from 'd3';\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\n\r\nimport {XYChartContext} from './XYChart';\r\n\r\nexport interface AxisProps {\r\n    show?: boolean;\r\n    tickSize?: number;\r\n    tickTextSize?: number;\r\n    size?: number;\r\n    innerPadding?: number;\r\n}\r\n\r\nexport interface XYAxisProps {\r\n    x?: AxisProps;\r\n    y?: AxisProps;\r\n}\r\n\r\nconst withDefaultConfig = (props: Partial<AxisProps> = {}): AxisProps =>\r\n    _.defaults(props, {\r\n        tickSize: props.show !== false ? 7 : 0,\r\n        tickTextSize: 0,\r\n        size: props.show !== false ? 40 : 0,\r\n        innerPadding: 0,\r\n        show: true,\r\n        format: _.identity,\r\n    });\r\n\r\nexport const XYAxis: React.FunctionComponent<XYAxisProps> = ({x, y, children}) => {\r\n    const context = React.useContext(XYChartContext);\r\n    const {xDomain, yDomain, xScale, yScale, xFormat, yFormat, width, height, xTicksCount, yTicksCount} = context;\r\n\r\n    const xAxis = withDefaultConfig(x);\r\n    const yAxis = withDefaultConfig(y);\r\n\r\n    const yInnerPadding = yAxis.innerPadding || yAxis.tickTextSize / 2;\r\n    const xInnerPadding = xAxis.innerPadding || xAxis.tickTextSize / 2;\r\n\r\n    const newWidth = width - yAxis.size - 2 * xInnerPadding;\r\n    const newHeight = height - xAxis.size - 2 * yInnerPadding;\r\n\r\n    const newXScale = xScale.rangePoints([0, newWidth]);\r\n    const newYScale = yScale.range([newHeight, 0]);\r\n\r\n    const minX = newXScale(xDomain[0]);\r\n    const maxX = newXScale(xDomain[1]);\r\n    const minY = newYScale(yDomain[0]);\r\n    const maxY = newYScale(yDomain[1]);\r\n\r\n    const yTicks = newYScale\r\n        .ticks(yAxis.tickTextSize === 0 ? yTicksCount : Math.floor(newHeight / yAxis.tickTextSize))\r\n        .map((tick: number) => (\r\n            <g\r\n                key={`y-axis-tick-${tick}`}\r\n                className=\"y-axis-tick\"\r\n                transform={`translate(${maxX + 2 * xInnerPadding},${newYScale(tick) + yInnerPadding})`}\r\n            >\r\n                <line stroke=\"black\" x1=\"0\" x2={yAxis.tickSize} />\r\n                <text textAnchor=\"start\" x={yAxis.tickSize + 5} y={5}>\r\n                    {yFormat(tick)}\r\n                </text>\r\n            </g>\r\n        ));\r\n\r\n    const xLinearScale = d3.scale\r\n        .linear()\r\n        .range(newXScale.range())\r\n        .domain(xDomain);\r\n    const xNumberOfTicks = xLinearScale.ticks(\r\n        xAxis.tickTextSize === 0 ? xTicksCount : Math.floor(newWidth / xAxis.tickTextSize)\r\n    ).length;\r\n    const ticks = _.chunk(newXScale.domain(), Math.floor(newXScale.domain().length / xNumberOfTicks))\r\n        // filter out the last array if it contains only one value and other arrays are bigger\r\n        .filter(\r\n            (arr: number[], index: number, arrays: number[][]) =>\r\n                index < arrays.length - 1 || arr.length > 1 || arrays[0].length === 1\r\n        )\r\n        // get the element in the middle of the chunk\r\n        .map((values: number[]) => values[Math.floor((values.length - 1) / 2)]);\r\n\r\n    const xTicks = newXScale.domain().map((tick: number) => {\r\n        const text = _.contains(ticks, tick) && xFormat(tick);\r\n        const textX = newXScale(tick);\r\n        return (\r\n            <g\r\n                key={`x-axis-tick-${tick}`}\r\n                transform={`translate(${textX + xInnerPadding},${minY + 2 * yInnerPadding})`}\r\n                className=\"x-axis-tick\"\r\n            >\r\n                <line stroke=\"black\" y1=\"0\" y2={xAxis.tickSize} />\r\n                {text && (\r\n                    <text textAnchor=\"middle\" y={xAxis.tickSize + 15}>\r\n                        {text}\r\n                    </text>\r\n                )}\r\n            </g>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <XYChartContext.Provider\r\n                value={{\r\n                    ...context,\r\n                    xScale: newXScale,\r\n                    yScale: newYScale,\r\n                    height: minY,\r\n                    width: maxX,\r\n                }}\r\n            >\r\n                <g transform={`translate(${xInnerPadding},${yInnerPadding})`}>{children}</g>\r\n            </XYChartContext.Provider>\r\n            {yAxis.show && (\r\n                <g className=\"y-axis\">\r\n                    <line\r\n                        className=\"axis-line\"\r\n                        stroke=\"black\"\r\n                        x1={maxX + 2 * xInnerPadding}\r\n                        x2={maxX + 2 * xInnerPadding}\r\n                        y1={minY + 2 * yInnerPadding}\r\n                        y2={maxY}\r\n                    />\r\n                    {yTicks}\r\n                </g>\r\n            )}\r\n            {xAxis.show && (\r\n                <g className=\"x-axis\">\r\n                    <line\r\n                        className=\"axis-line\"\r\n                        stroke=\"black\"\r\n                        x1={minX}\r\n                        x2={maxX + 2 * xInnerPadding}\r\n                        y1={minY + 2 * yInnerPadding}\r\n                        y2={minY + 2 * yInnerPadding}\r\n                    />\r\n                    {xTicks}\r\n                </g>\r\n            )}\r\n        </>\r\n    );\r\n};\r\nXYAxis.displayName = 'XYAxis';\r\n","import * as React from 'react';\r\n\r\nimport {XYChartContext} from './XYChart';\r\n\r\nexport interface YGridProps {\r\n    padding?: number;\r\n    color?: string;\r\n}\r\n\r\nexport const YGrid: React.FunctionComponent<YGridProps> = ({padding = 0, color = 'rgba(0,0,0,0.2)'}) => {\r\n    const context = React.useContext(XYChartContext);\r\n    const {xDomain, xScale, yScale, yTicksCount} = context;\r\n\r\n    const lines = yScale\r\n        .ticks(yTicksCount)\r\n        .map((tick: number) => (\r\n            <line\r\n                key={`y-grid-${tick}`}\r\n                stroke={color}\r\n                x1={xScale(xDomain[0]) - padding}\r\n                x2={xScale(xDomain[1]) + padding}\r\n                y1={yScale(tick)}\r\n                y2={yScale(tick)}\r\n            />\r\n        ));\r\n\r\n    return <>{lines}</>;\r\n};\r\nYGrid.displayName = 'YGrid';\r\n","\nvar content = require(\"!!../../../../node_modules/typings-for-css-modules-loader/lib/index.js??ref--7-1!../../../../node_modules/postcss-loader/src/index.js!../../../../node_modules/sass-loader/lib/loader.js!./ChartTooltipContent.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/typings-for-css-modules-loader/lib/index.js??ref--7-1!../../../../node_modules/postcss-loader/src/index.js!../../../../node_modules/sass-loader/lib/loader.js!./ChartTooltipContent.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/typings-for-css-modules-loader/lib/index.js??ref--7-1!../../../../node_modules/postcss-loader/src/index.js!../../../../node_modules/sass-loader/lib/loader.js!./ChartTooltipContent.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}