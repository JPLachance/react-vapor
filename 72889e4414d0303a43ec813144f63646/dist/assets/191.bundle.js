(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{1292:function(e,n,r){"use strict";r.r(n),n.default="import {mount, ReactWrapper, shallow} from 'enzyme';\r\nimport * as moment from 'moment';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport * as React from 'react';\r\nimport * as _ from 'underscore';\r\nimport {DateUtils} from '../../../utils/DateUtils';\r\nimport {CalendarDay, ICalendarDayProps, IDay} from '../CalendarDay';\r\n\r\ndescribe('Calendar day', () => {\r\n    const newMonth = DateUtils.currentMonth < 11 ? DateUtils.currentMonth + 1 : 0;\r\n    const DAY: IDay = {\r\n        number: 2,\r\n        isCurrentMonth: true,\r\n        isToday: false,\r\n        date: moment(new Date(2017, newMonth, 2)),\r\n        isSelectable: true,\r\n    };\r\n\r\n    const BASIC_CALENDAR_DAY_PROPS: ICalendarDayProps = {\r\n        day: DAY,\r\n        onClick: jasmine.createSpy('onClick'),\r\n        onSelectUnselectable: jasmine.createSpy('onSelectUnselectable'),\r\n    };\r\n\r\n    describe('<CalendarDay />', () => {\r\n        it('should render without errors', () => {\r\n            expect(() => {\r\n                shallow(<CalendarDay {...BASIC_CALENDAR_DAY_PROPS} />);\r\n            }).not.toThrow();\r\n        });\r\n    });\r\n\r\n    describe('<CalendarDay />', () => {\r\n        let calendarDay: ReactWrapper<ICalendarDayProps, any>;\r\n        let calendarDayInstance: CalendarDay;\r\n\r\n        beforeEach(() => {\r\n            document.getElementById('App').innerHTML = '<table><tbody><tr id=\"AppTableRow\"></tr></tbody></table>';\r\n\r\n            calendarDay = mount(<CalendarDay {...BASIC_CALENDAR_DAY_PROPS} />, {\r\n                attachTo: document.getElementById('AppTableRow'),\r\n            });\r\n            calendarDayInstance = calendarDay.instance() as CalendarDay;\r\n        });\r\n\r\n        afterEach(() => {\r\n            calendarDay.detach();\r\n        });\r\n\r\n        it('should get the day as a prop', () => {\r\n            const dayProp = calendarDay.props().day;\r\n\r\n            expect(dayProp).toBeDefined();\r\n            expect(dayProp).toEqual(DAY);\r\n        });\r\n\r\n        it('should get what to do onClick as a prop', () => {\r\n            const onClickProp = calendarDay.props().onClick;\r\n\r\n            expect(onClickProp).toBeDefined;\r\n        });\r\n\r\n        it('should display the number of the day', () => {\r\n            expect(calendarDay.html()).toContain(DAY.number.toString());\r\n        });\r\n\r\n        it('should have the class \"other-month-date\" is the isCurrentMonth of the day prop is set to false', () => {\r\n            const dayFromOtherMonth: IDay = _.extend({}, DAY, {isCurrentMonth: false});\r\n            const newProps: ICalendarDayProps = _.extend({}, BASIC_CALENDAR_DAY_PROPS, {day: dayFromOtherMonth});\r\n\r\n            expect(calendarDay.find('.other-month-date').length).toBe(0);\r\n\r\n            calendarDay.setProps(newProps);\r\n\r\n            expect(calendarDay.find('.other-month-date').length).toBe(1);\r\n        });\r\n\r\n        it('should have the class \"todays-date\" is the isToday of the day prop is set to true', () => {\r\n            const today: IDay = _.extend({}, DAY, {isToday: true});\r\n            const newProps: ICalendarDayProps = _.extend({}, BASIC_CALENDAR_DAY_PROPS, {day: today});\r\n\r\n            expect(calendarDay.find('.todays-date').length).toBe(0);\r\n\r\n            calendarDay.setProps(newProps);\r\n\r\n            expect(calendarDay.find('.todays-date').length).toBe(1);\r\n        });\r\n\r\n        it('should have the classes \"selected-date\" and \"bg-${color}\" when the day is selected', () => {\r\n            const selectedDate: IDay = _.extend({}, DAY, {isSelected: true, color: 'pink'});\r\n            const newProps: ICalendarDayProps = _.extend({}, BASIC_CALENDAR_DAY_PROPS, {day: selectedDate});\r\n\r\n            expect(calendarDay.find('.selected-date').length).toBe(0);\r\n            expect(calendarDay.find('span').props().className).not.toContain('bg-');\r\n\r\n            calendarDay.setProps(newProps);\r\n\r\n            expect(calendarDay.find('.selected-date').length).toBe(1, '.selected-date');\r\n            expect(calendarDay.find('span').props().className).toContain('bg-');\r\n            expect(calendarDay.find('.bg-pink').length).toBe(1, '.bg-pink');\r\n        });\r\n\r\n        it('should have the class \"lower-limit\" if the day is selected and isLowerLimit', () => {\r\n            const lowerLimitDay: IDay = _.extend({}, DAY, {isLowerLimit: true, isSelected: true});\r\n            const newProps: ICalendarDayProps = _.extend({}, BASIC_CALENDAR_DAY_PROPS, {day: lowerLimitDay});\r\n\r\n            expect(calendarDay.find('.lower-limit').length).toBe(0);\r\n\r\n            calendarDay.setProps(newProps);\r\n\r\n            expect(calendarDay.find('.lower-limit').length).toBe(1);\r\n        });\r\n\r\n        it('should have the class \"upper-limit\" if the day is selected isUpperLimit', () => {\r\n            const upperLimitDay: IDay = _.extend({}, DAY, {isUpperLimit: true, isSelected: true});\r\n            const newProps: ICalendarDayProps = _.extend({}, BASIC_CALENDAR_DAY_PROPS, {day: upperLimitDay});\r\n\r\n            expect(calendarDay.find('.upper-limit').length).toBe(0);\r\n\r\n            calendarDay.setProps(newProps);\r\n\r\n            expect(calendarDay.find('.upper-limit').length).toBe(1);\r\n        });\r\n\r\n        it('should have the class \"un-selectable\" if the day is not selectable', () => {\r\n            const unSelectableDay: IDay = _.extend({}, DAY, {isSelectable: false});\r\n            const newProps: ICalendarDayProps = _.extend({}, BASIC_CALENDAR_DAY_PROPS, {day: unSelectableDay});\r\n\r\n            expect(calendarDay.find('.un-selectable').length).toBe(0);\r\n\r\n            calendarDay.setProps(newProps);\r\n\r\n            expect(calendarDay.find('.un-selectable').length).toBe(1);\r\n        });\r\n\r\n        it('should add another span if the day is selected and both isLowerLimit and upperLimit', () => {\r\n            const limitDay: IDay = _.extend({}, DAY, {isLowerLimit: true, isUpperLimit: true, isSelected: true});\r\n            const newProps: ICalendarDayProps = _.extend({}, BASIC_CALENDAR_DAY_PROPS, {day: limitDay});\r\n\r\n            expect(calendarDay.find('span').length).toBe(1);\r\n\r\n            calendarDay.setProps(newProps);\r\n\r\n            expect(calendarDay.find('span').length).toBe(2);\r\n        });\r\n\r\n        it('should call handleClick when clicking the day', () => {\r\n            const handleClickSpy: jasmine.Spy = spyOn<any>(calendarDayInstance, 'handleClick');\r\n\r\n            calendarDay.find('td').simulate('click');\r\n\r\n            expect(handleClickSpy).toHaveBeenCalled();\r\n        });\r\n\r\n        it('should call onClick when clicking a selectable day', () => {\r\n            const unSelectableDay: IDay = _.extend({}, DAY, {isSelectable: false});\r\n            const unSelectableDayProps: ICalendarDayProps = _.extend({}, BASIC_CALENDAR_DAY_PROPS, {\r\n                day: unSelectableDay,\r\n            });\r\n\r\n            calendarDay.find('td').simulate('click');\r\n\r\n            expect(BASIC_CALENDAR_DAY_PROPS.onClick).toHaveBeenCalledTimes(1);\r\n\r\n            calendarDay.setProps(unSelectableDayProps);\r\n\r\n            calendarDay.find('td').simulate('click');\r\n\r\n            expect(BASIC_CALENDAR_DAY_PROPS.onClick).toHaveBeenCalledTimes(1);\r\n        });\r\n\r\n        it('should call onSelectUnselectable when the day has been selected, but is unselectable at the same time', () => {\r\n            const unSelectableDay: IDay = _.extend({}, DAY, {\r\n                isSelectable: false,\r\n                isUpperLimit: true,\r\n                isSelected: true,\r\n            });\r\n            const unSelectableDayProps: ICalendarDayProps = _.extend({}, BASIC_CALENDAR_DAY_PROPS, {\r\n                day: unSelectableDay,\r\n                onSelectUnselectable: jasmine.createSpy('onSelectUnselectable'),\r\n            });\r\n\r\n            calendarDay.setProps(unSelectableDayProps);\r\n\r\n            expect(unSelectableDayProps.onSelectUnselectable).toHaveBeenCalledTimes(1);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=191.bundle.js.map