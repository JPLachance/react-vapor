(window.webpackJsonp=window.webpackJsonp||[]).push([[483],{1579:function(t,e,r){"use strict";r.r(e),e.default="import {mount, ReactWrapper} from 'enzyme';\r\nimport * as React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {Store} from 'redux';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IReactVaporState} from '../../../ReactVapor';\r\nimport {clearState} from '../../../utils/ReduxUtils';\r\nimport {TestUtils} from '../../../utils/tests/TestUtils';\r\nimport {IItemBoxProps, ItemBox} from '../../itemBox/ItemBox';\r\nimport {IListBoxProps, ListBox} from '../ListBox';\r\nimport {ListBoxConnected} from '../ListBoxConnected';\r\n\r\ndescribe('ListBox', () => {\r\n    describe('<ListBoxConnected />', () => {\r\n        let wrapper: ReactWrapper<any, any>;\r\n        let listBox: ReactWrapper<IListBoxProps, void>;\r\n        let store: Store<IReactVaporState>;\r\n\r\n        const id: string = 'list-box-connected';\r\n\r\n        const mountListBox = (items: IItemBoxProps[] = []) => {\r\n            wrapper = mount(\r\n                <Provider store={store}>\r\n                    <ListBoxConnected id={id} items={items} />\r\n                </Provider>,\r\n                {attachTo: document.getElementById('App')}\r\n            );\r\n            listBox = wrapper.find(ListBox).first();\r\n        };\r\n\r\n        beforeEach(() => {\r\n            store = TestUtils.buildStore();\r\n        });\r\n\r\n        afterEach(() => {\r\n            store.dispatch(clearState());\r\n            wrapper.detach();\r\n        });\r\n\r\n        describe('mount and unmount', () => {\r\n            it('should not throw on mount', () => {\r\n                expect(() => mountListBox()).not.toThrow();\r\n            });\r\n\r\n            it('should not throw on unmount', () => {\r\n                mountListBox();\r\n                expect(() => wrapper.unmount()).not.toThrow();\r\n            });\r\n\r\n            it('should add the list box to the state when mounted', () => {\r\n                expect(store.getState().listBoxes.length).toBe(0);\r\n\r\n                mountListBox();\r\n\r\n                expect(store.getState().listBoxes.length).toBe(1);\r\n            });\r\n\r\n            it('should remove the list box from the state when the component unmount', () => {\r\n                mountListBox();\r\n\r\n                expect(store.getState().listBoxes.length).toBe(1);\r\n                wrapper.unmount();\r\n\r\n                expect(store.getState().listBoxes.length).toBe(0);\r\n            });\r\n        });\r\n\r\n        it('should get what to do on onMount as a prop', () => {\r\n            mountListBox();\r\n            const onRenderProp = listBox.props().onRender;\r\n\r\n            expect(onRenderProp).toBeDefined();\r\n        });\r\n\r\n        it('should get what to do on destroy as a prop', () => {\r\n            mountListBox();\r\n            const onDestroyProp = listBox.props().onDestroy;\r\n\r\n            expect(onDestroyProp).toBeDefined();\r\n        });\r\n\r\n        it('should get what to do on option click as a prop', () => {\r\n            mountListBox();\r\n            const onOptionClickProp = listBox.props().onOptionClick;\r\n\r\n            expect(onOptionClickProp).toBeDefined();\r\n        });\r\n\r\n        it('should get the selected as a prop', () => {\r\n            const items = [{value: 'a'}, {value: 'b', selected: true}, {value: 'c'}];\r\n            const expected = _.chain(items)\r\n                .where({selected: true})\r\n                .pluck('value')\r\n                .value();\r\n            mountListBox(items);\r\n\r\n            const selected = listBox.props().selected;\r\n\r\n            expect(selected).toBeDefined();\r\n            expect(selected.length).toBe(expected.length);\r\n            expect(selected).toEqual(expected);\r\n        });\r\n\r\n        it('should dispatch a selectListBoxOption on click on an item', () => {\r\n            const items = [{value: 'a'}, {value: 'b', selected: true}, {value: 'c'}];\r\n            mountListBox(items);\r\n\r\n            listBox\r\n                .find(ItemBox)\r\n                .first()\r\n                .find('li')\r\n                .simulate('click');\r\n            const state = _.findWhere(store.getState().listBoxes, {id});\r\n            expect(state.selected).toEqual([items[0].value]);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=483.bundle.js.map