(window.webpackJsonp=window.webpackJsonp||[]).push([[606],{1701:function(n,e,t){"use strict";t.r(e),e.default="import {IReduxAction} from '../../../utils/ReduxUtils';\r\nimport {IChangeOptionPayload, IOptionPickerPayload} from '../OptionPickerActions';\r\nimport {\r\n    addOptionPicker,\r\n    changeOptionPicker,\r\n    OptionPickerActions,\r\n    removeOptionPicker,\r\n    resetOptionPickers,\r\n} from '../OptionPickerActions';\r\n\r\ndescribe('Option picker', () => {\r\n    describe('OptionsPickerActions', () => {\r\n        const OPTION_PICKER_ID: string = 'option-picker';\r\n\r\n        it('should create an action to add the option picker', () => {\r\n            const expectedAction: IReduxAction<IOptionPickerPayload> = {\r\n                type: OptionPickerActions.add,\r\n                payload: {\r\n                    id: OPTION_PICKER_ID,\r\n                },\r\n            };\r\n\r\n            expect(addOptionPicker(OPTION_PICKER_ID)).toEqual(expectedAction);\r\n        });\r\n\r\n        it('should create an action to remove the option picker', () => {\r\n            const expectedAction: IReduxAction<IOptionPickerPayload> = {\r\n                type: OptionPickerActions.remove,\r\n                payload: {\r\n                    id: OPTION_PICKER_ID,\r\n                },\r\n            };\r\n\r\n            expect(removeOptionPicker(OPTION_PICKER_ID)).toEqual(expectedAction);\r\n        });\r\n\r\n        it('should create an action to change the option picker value', () => {\r\n            const expectedValue: string = 'any value we want';\r\n            const expectedLabel: string = 'any label';\r\n            const expectedAction: IReduxAction<IChangeOptionPayload> = {\r\n                type: OptionPickerActions.change,\r\n                payload: {\r\n                    id: OPTION_PICKER_ID,\r\n                    value: expectedValue,\r\n                    label: expectedLabel,\r\n                },\r\n            };\r\n\r\n            expect(changeOptionPicker(OPTION_PICKER_ID, expectedLabel, expectedValue)).toEqual(expectedAction);\r\n        });\r\n\r\n        it('should create an action to reset the option pickers', () => {\r\n            const expectedAction: IReduxAction<IOptionPickerPayload> = {\r\n                type: OptionPickerActions.reset,\r\n                payload: {\r\n                    id: OPTION_PICKER_ID,\r\n                },\r\n            };\r\n\r\n            expect(resetOptionPickers(OPTION_PICKER_ID)).toEqual(expectedAction);\r\n        });\r\n    });\r\n});\r\n"}}]);
//# sourceMappingURL=606.bundle.js.map