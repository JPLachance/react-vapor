{"version":3,"sources":["webpack:///./src/components/button/examples/ButtonExamples.tsx?1f81","webpack:///./src/components/button/Button.tsx?06fe","webpack:///./src/components/section/Section.tsx?b7b7"],"names":["render","title","level","enabled","name","description","primary","classes","className","style","width","height","svgName","domainGoogle","link","target","onClick","alert","tooltip","tooltipPlacement","ButtonPropsToOmit","this","props","getTemplate","buttonClass","buttonElement","buttonAttrs","disabled","rel","href","children","placement","getClasses","small","defaultProps","Section","mods","titleProps","H"],"mappings":"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","file":"assets/1046.bundle.js","sourcesContent":["import * as VaporSVG from 'coveo-styleguide';\nimport * as React from 'react';\nimport {Section} from '../../section/Section';\nimport {Svg} from '../../svg/Svg';\nimport {Button} from '../Button';\n\nexport class ButtonExamples extends React.Component<any, any> {\n    static description = 'Buttons communicate actions, and, when clicked, initialize those actions.';\n    render() {\n        return (\n            <>\n                <Section title=\"Button Set\">\n                    <Section level={2} title=\"Usability\">\n                        <Button enabled={true} name=\"Enabled button\" />\n                        <Button enabled={false} name=\"Disabled button\" />\n                    </Section>\n                    <Section\n                        level={2}\n                        title=\"Style modifiers\"\n                        description=\"Add the specific class to change the style of the buttons.\"\n                    >\n                        <Section\n                            level={3}\n                            title=\"Color modifiers\"\n                            description=\"Change the color of the buttons (with primary, you can either add 'mod-primary' class or set the 'primary' prop to true).\"\n                        >\n                            <Button enabled={true} name=\"Default\" />\n                            <Button enabled={true} primary={true} name=\"Primary Button\" />\n                            <Button enabled={true} classes={['mod-danger']} name=\"Danger Button\" />\n                            <Button enabled={true} classes={['mod-link']} name=\"Borderless Button\" />\n                        </Section>\n                        <Section title=\"Size modifiers\" level={3} description=\"Change the size of the buttons.\">\n                            <Button enabled={true} classes={['mod-small']} name=\"Small\" />\n                            <Button enabled={true} name=\"Default\" />\n                            <Button enabled={true} classes={['mod-large']} name=\"Large\" />\n                        </Section>\n                    </Section>\n                    <Section\n                        title=\"Append and Prepend\"\n                        level={2}\n                        description=\"Add text or icons before and after any button.\"\n                    >\n                        <Button enabled={true} classes={['mod-prepend']}>\n                            <span className=\"btn-prepend\">P</span>\n                            Prepend Button\n                        </Button>\n                        <Button enabled={true} classes={['mod-append']} name=\"Button Append\">\n                            <span className=\"btn-append\">A</span>\n                        </Button>\n                        <Button enabled={true} classes={['mod-prepend', 'mod-large']}>\n                            <span className=\"btn-prepend mod-icon\">\n                                <Svg\n                                    className=\"icon\"\n                                    style={{width: 32, height: 32}}\n                                    svgName={VaporSVG.svg.domainGoogle.name}\n                                />\n                            </span>\n                            Log in with Google\n                        </Button>\n                        <Button\n                            enabled={true}\n                            classes={['mod-append', 'mod-on-hover', 'spaced-box']}\n                            name=\"Append on Hover\"\n                        >\n                            <span className=\"btn-append\">A</span>\n                        </Button>\n                    </Section>\n                    <Section title=\"Actions\" level={2} description=\"Add actions associated with buttons\">\n                        <Section level={3} title=\"Link\" description=\"Add a hyperlink to a button\">\n                            <Button enabled={true} name=\"Link Button\" link=\"http://perdu.com/\" target=\"_blank\" />\n                        </Section>\n                        <Section level={3} title=\"Callback\" description=\"Add a on click callback to a button\">\n                            <Button enabled={true} name=\"Button click me!\" onClick={() => alert('Hello')} />\n                        </Section>\n                    </Section>\n                </Section>\n                <Section level={2} title=\"Tooltips\" description=\"Add a tooltip with a button\">\n                    <Button enabled={true} name=\"Button with tooltip\" tooltip=\"Tooltip test\" />\n                    <Button\n                        enabled={true}\n                        name=\"Button with tooltip top\"\n                        tooltip=\"Tooltip test\"\n                        tooltipPlacement=\"top\"\n                    />\n                </Section>\n                <Section level={2} title=\"Button with children Svg\">\n                    <Button classes={['p1', 'full-content-y']} enabled>\n                        <Svg svgName={'add'} className=\"icon mod-2x\" />\n                    </Button>\n                    <Button classes={['p1', 'full-content-y']} name={'Button'} enabled>\n                        <Svg svgName={'add'} className=\"ml1 icon mod-2x\" />\n                    </Button>\n                </Section>\n            </>\n        );\n    }\n}\n","import * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport {keys} from 'ts-transformer-keys';\r\nimport * as _ from 'underscore';\r\n\r\nimport {IBaseActionOptions} from '../actions/Action';\r\nimport {Tooltip} from '../tooltip/Tooltip';\r\n\r\nexport interface IButtonProps extends IBaseActionOptions {\r\n    small?: boolean;\r\n    classes?: string[];\r\n}\r\n\r\nconst ButtonPropsToOmit = keys<IButtonProps>();\r\n\r\nexport class Button extends React.Component<IButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        enabled: true,\r\n        name: '',\r\n        tooltip: '',\r\n        primary: false,\r\n        small: false,\r\n        tooltipPlacement: 'right',\r\n        target: '',\r\n    };\r\n\r\n    private onClick() {\r\n        if (this.props.onClick && this.props.enabled) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    getTemplate(buttonClass: string): JSX.Element {\r\n        let buttonElement: JSX.Element;\r\n\r\n        let buttonAttrs = {\r\n            ..._.omit(this.props, ButtonPropsToOmit),\r\n            disabled: !this.props.enabled,\r\n            onClick: () => this.onClick(),\r\n        };\r\n\r\n        if (this.props.link) {\r\n            buttonAttrs = _.extend(buttonAttrs, {\r\n                target: this.props.target,\r\n                rel: 'noopener noreferrer',\r\n                href: this.props.link,\r\n            });\r\n\r\n            buttonElement = (\r\n                <a className={`${buttonClass} btn-container`} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </a>\r\n            );\r\n        } else {\r\n            buttonElement = (\r\n                <button className={buttonClass} {...buttonAttrs}>\r\n                    {this.props.name}\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return !_.isEmpty(this.props.tooltip) ? (\r\n            <Tooltip title={this.props.tooltip} placement={this.props.tooltipPlacement} className=\"btn-container\">\r\n                {buttonElement}\r\n            </Tooltip>\r\n        ) : (\r\n            buttonElement\r\n        );\r\n    }\r\n\r\n    private getClasses() {\r\n        return classNames(\r\n            'btn',\r\n            {\r\n                'mod-primary': this.props.primary,\r\n                'mod-small': this.props.small,\r\n                'state-disabled disabled': !this.props.enabled,\r\n                'text-medium-grey': !this.props.primary && !this.props.enabled,\r\n            },\r\n            this.props.classes\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.getTemplate(this.getClasses());\r\n    }\r\n}\r\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\ntype SectionMods = 'mod-header-padding' | 'mod-form-top-bottom-padding' | 'material-card';\n\nexport interface ISectionProps {\n    title?: string;\n    description?: React.ReactNode;\n    className?: string;\n    mods?: SectionMods | SectionMods[];\n    level?: 1 | 2 | 3;\n}\n\nexport const Section: React.FunctionComponent<ISectionProps> = ({\n    children,\n    title,\n    description,\n    className,\n    mods,\n    level = 1,\n}) => {\n    const titleProps: React.HTMLProps<HTMLElement> = {\n        className: 'text-medium-blue mb1',\n        children: title,\n    };\n    const H = `h${level + 1}`;\n    return (\n        <fieldset className={classNames(className, mods, `level-${level} form-group mod-padding-children`)}>\n            {title && <H {...titleProps} />}\n            {description && <p className=\"description\">{description}</p>}\n            {children}\n        </fieldset>\n    );\n};\n"],"sourceRoot":""}