(window.webpackJsonp=window.webpackJsonp||[]).push([[630],{1735:function(t,n,a){"use strict";a.r(n),n.default="import {PaginationSelectors} from '../PaginationSelectors';\n\ndescribe('PaginationSelectors tests', () => {\n    describe('getPaginationState', () => {\n        it('should get the paginationState from the state', () => {\n            const paginationState = {id: 'test', pageNb: 2};\n            expect(\n                PaginationSelectors.getPaginationState({paginationComposite: [paginationState]}, {id: 'test'})\n            ).toEqual(paginationState);\n        });\n\n        it('should not get the paginationState from the state if the id is not present', () => {\n            const paginationState = {id: 'aaaaa', pageNb: 2};\n            expect(\n                PaginationSelectors.getPaginationState({paginationComposite: [paginationState]}, {id: 'test'})\n            ).not.toEqual(paginationState);\n        });\n    });\n\n    describe('getPaginationPageNumber', () => {\n        it('should ', () => {\n            const paginationState = {id: 'test', pageNb: 2};\n            expect(\n                PaginationSelectors.getPaginationPageNumber({paginationComposite: [paginationState]}, {id: 'test'})\n            ).toEqual(paginationState.pageNb);\n        });\n\n        it('should not get the PaginationPageNumber from the state if the pagination dont exist', () => {\n            const paginationState = {id: 'aaaaa', pageNb: 2};\n            expect(\n                PaginationSelectors.getPaginationPageNumber({paginationComposite: [paginationState]}, {id: 'test'})\n            ).not.toEqual(paginationState.pageNb);\n        });\n    });\n});\n"}}]);
//# sourceMappingURL=630.bundle.js.map