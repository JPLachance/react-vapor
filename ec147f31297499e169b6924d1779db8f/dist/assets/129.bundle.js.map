{"version":3,"sources":["webpack:///./src/components/examples/ButtonExamples.tsx"],"names":["SaveButton","render","title","level","enabled","name","description","primary","classes","className","style","width","height","svgName","domainGoogle","link","target","onClick","alert","tooltip","tooltipPlacement","DirtyCheckboxesForSaveButton","validationIds","dispatch","setDirty","value","setWarning","setError","label","id","handleOnClick","checked","clearSides"],"mappings":"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","file":"assets/129.bundle.js","sourcesContent":["import * as VaporSVG from 'coveo-styleguide';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport {\n    Button,\n    CheckboxConnected,\n    IDispatch,\n    Label,\n    LabeledInput,\n    Section,\n    Svg,\n    ValidationActions,\n    withDirtySaveButtonHOC,\n} from 'react-vapor';\n\n// start-print\n\nconst SaveButton = withDirtySaveButtonHOC(Button);\n\nexport class ButtonExamples extends React.Component<any, any> {\n    static description = 'Buttons communicate actions, and, when clicked, initialize those actions.';\n    render() {\n        return (\n            <>\n                <Section title=\"Button Set\">\n                    <Section level={2} title=\"Usability\">\n                        <Button enabled={true} name=\"Enabled button\" />\n                        <Button enabled={false} name=\"Disabled button\" />\n                    </Section>\n                    <Section\n                        level={2}\n                        title=\"Style modifiers\"\n                        description=\"Add the specific class to change the style of the buttons.\"\n                    >\n                        <Section\n                            level={3}\n                            title=\"Color modifiers\"\n                            description=\"Change the color of the buttons (with primary, you can either add 'mod-primary' class or set the 'primary' prop to true).\"\n                        >\n                            <Button enabled={true} name=\"Default\" />\n                            <Button enabled={true} primary={true} name=\"Primary Button\" />\n                            <Button enabled={true} classes={['mod-danger']} name=\"Danger Button\" />\n                            <Button enabled={true} classes={['mod-link']} name=\"Borderless Button\" />\n                        </Section>\n                        <Section title=\"Size modifiers\" level={3} description=\"Change the size of the buttons.\">\n                            <Button enabled={true} classes={['mod-small']} name=\"Small\" />\n                            <Button enabled={true} name=\"Default\" />\n                            <Button enabled={true} classes={['mod-large']} name=\"Large\" />\n                        </Section>\n                    </Section>\n                    <Section\n                        title=\"Append and Prepend\"\n                        level={2}\n                        description=\"Add text or icons before and after any button.\"\n                    >\n                        <Button enabled={true} classes={['mod-prepend']}>\n                            <span className=\"btn-prepend\">P</span>\n                            Prepend Button\n                        </Button>\n                        <Button enabled={true} classes={['mod-append']} name=\"Button Append\">\n                            <span className=\"btn-append\">A</span>\n                        </Button>\n                        <Button enabled={true} classes={['mod-prepend', 'mod-large']}>\n                            <span className=\"btn-prepend mod-icon\">\n                                <Svg\n                                    className=\"icon\"\n                                    style={{width: 32, height: 32}}\n                                    svgName={VaporSVG.svg.domainGoogle.name}\n                                />\n                            </span>\n                            Log in with Google\n                        </Button>\n                        <Button\n                            enabled={true}\n                            classes={['mod-append', 'mod-on-hover', 'spaced-box']}\n                            name=\"Append on Hover\"\n                        >\n                            <span className=\"btn-append\">A</span>\n                        </Button>\n                    </Section>\n                    <Section title=\"Actions\" level={2} description=\"Add actions associated with buttons\">\n                        <Section level={3} title=\"Link\" description=\"Add a hyperlink to a button\">\n                            <Button enabled={true} name=\"Link Button\" link=\"http://perdu.com/\" target=\"_blank\" />\n                        </Section>\n                        <Section level={3} title=\"Callback\" description=\"Add a on click callback to a button\">\n                            <Button enabled={true} name=\"Button click me!\" onClick={() => alert('Hello')} />\n                        </Section>\n                    </Section>\n                </Section>\n                <Section level={2} title=\"Tooltips\" description=\"Add a tooltip with a button\">\n                    <Button enabled={true} name=\"Button with tooltip\" tooltip=\"Tooltip test\" />\n                    <Button\n                        enabled={true}\n                        name=\"Button with tooltip top\"\n                        tooltip=\"Tooltip test\"\n                        tooltipPlacement=\"top\"\n                    />\n                </Section>\n                <Section level={2} title=\"Button with children Svg\">\n                    <Button classes={['p1', 'full-content-y']} enabled>\n                        <Svg svgName={'add'} className=\"icon mod-2x\" />\n                    </Button>\n                    <Button classes={['p1', 'full-content-y']} name={'Button'} enabled>\n                        <Svg svgName={'add'} className=\"ml1 icon mod-2x\" />\n                    </Button>\n                </Section>\n                <Section level={2} title=\"Save button with validation\">\n                    <DirtyCheckboxesForSaveButton />\n                    <SaveButton\n                        enabled\n                        name=\"Save Button\"\n                        validationIds={['inputId']}\n                        onClick={() => alert('Saving!')}\n                    />\n                </Section>\n            </>\n        );\n    }\n}\n\n// stop-print\n\nconst StatefulCheckboxesForSaveButtonDisconnect: React.FunctionComponent<ReturnType<typeof mapDispatchToProps>> = ({\n    setDirty,\n    setWarning,\n    setError,\n}) => (\n    <LabeledInput label=\"Toggles to test the Save Button\">\n        <CheckboxConnected id=\"saveCheckboxDirty\" handleOnClick={(checked) => setDirty(!checked)} clearSides>\n            <Label>Click on me to set the component as dirty</Label>\n        </CheckboxConnected>\n        <CheckboxConnected\n            id=\"saveCheckboxWarning\"\n            handleOnClick={(checked) => setWarning(!checked ? 'WARNING' : '')}\n            clearSides\n        >\n            <Label>Click on me to set a warning</Label>\n        </CheckboxConnected>\n        <CheckboxConnected\n            id=\"saveCheckboxError\"\n            handleOnClick={(checked) => setError(!checked ? 'ERROR' : '')}\n            clearSides\n        >\n            <Label>Click on me to set an error</Label>\n        </CheckboxConnected>\n    </LabeledInput>\n);\n\nconst mapDispatchToProps = (dispatch: IDispatch) => ({\n    setDirty: (value: boolean) => dispatch(ValidationActions.setDirty('inputId', value)),\n    setWarning: (value: string) => dispatch(ValidationActions.setWarning('inputId', value)),\n    setError: (value: string) => dispatch(ValidationActions.setError('inputId', value)),\n});\nconst DirtyCheckboxesForSaveButton = connect(null, mapDispatchToProps)(StatefulCheckboxesForSaveButtonDisconnect);\n"],"sourceRoot":""}