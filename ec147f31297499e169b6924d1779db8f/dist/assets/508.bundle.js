(window.webpackJsonp=window.webpackJsonp||[]).push([[508],{1618:function(n,t,e){"use strict";e.r(t),t.default="import * as _ from 'underscore';\r\nimport {IReduxAction} from '../../utils/ReduxUtils';\r\nimport {IMenuPayload, MenuActions} from './MenuActions';\r\n\r\nexport interface IMenusState {\r\n    [id: string]: IMenuState;\r\n}\r\n\r\nexport interface IMenuState {\r\n    id: string;\r\n    open: boolean;\r\n}\r\n\r\nexport const menuInitialState: IMenuState = {id: undefined, open: false};\r\nexport const menuCompositeInitialState: IMenusState = {};\r\n\r\nexport const menuReducer = (state: IMenuState = menuInitialState, action: IReduxAction<IMenuPayload>): IMenuState => {\r\n    if (state.id !== action.payload.id && action.type !== MenuActions.add) {\r\n        return state;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case MenuActions.add:\r\n            return {\r\n                id: action.payload.id,\r\n                open: state.open,\r\n            };\r\n        case MenuActions.toggle:\r\n            return {...state, open: !_.isUndefined(action.payload.open) ? action.payload.open : !state.open};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const menuCompositeReducer = (\r\n    state: IMenusState = menuCompositeInitialState,\r\n    action: IReduxAction<IMenuPayload>\r\n): IMenusState => {\r\n    switch (action.type) {\r\n        case MenuActions.add:\r\n            return {\r\n                ...state,\r\n                [action.payload.id]: menuReducer(undefined, action),\r\n            };\r\n        case MenuActions.remove:\r\n            return _.omit(state, action.payload.id);\r\n        case MenuActions.toggle:\r\n            return {...state, [action.payload.id]: menuReducer(state[action.payload.id], action)};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"}}]);
//# sourceMappingURL=508.bundle.js.map